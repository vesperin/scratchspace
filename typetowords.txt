{
com.jme3.input.ChaseCamera#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]},
com.jme3.shader.ShaderGenerator#generateUniforms: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]},
com.jme3.math.Vector4f#distance: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]},
org.dyn4j.dynamics.joint.PinJoint#initializeConstraints: {[shader, light, texture, bitmap, spatial, material, camel, scene, cinematic, capsule, bone, geometry, emitter, volume, bounding, square, heightfield, motor, vecf, sphere, mass, impulse, hallmarks, torque, axes, radius, delta, collide, calculate, shape, transmission, collect, speed, vertices, quaternion, velocity, joints, collision, rotate, arena, hinge, plane, ball, collidable, body, friction, piston, matrix, rotation, triangle]},
com.jme3.font.BitmapText#setAlignment: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]},
com.jme3.animation.CompactVector3Array#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]},
com.jme3.renderer.opengl.GLRenderer#deleteShader: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]},
org.ode4j.ode.internal.joints.DxJointAMotor#DxJointAMotor(C): {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]},
org.ode4j.ode.internal.DxMass#dMassSetParameters: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]},
org.ode4j.ode.internal.DxConvex#CheckEdgeIntersection: {[capsule, cinematic, radius, sphere, bitmap, volume, hallmarks, bone, transmission, bounding, emitter, collide, mass, velocity, square, calculate, heightfield, light, shader, shape, collect, speed, delta, texture, triangle, torque, plane, vecf, scene, impulse, piston, vertices, friction, geometry, material, camel, hinge, motor, collision, spatial, axes, collidable, arena, body, joints, matrix, quaternion, ball, rotate, rotation]},
com.jme3.scene.debug.SkeletonDebugger#getInterBoneWires: {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]},
com.jme3.light.LightProbeBlendingStrategy#registerProbe: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]},
org.ode4j.math.DVector4#lengthSquared: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]},
com.jme3.scene.Spatial#addLight: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]},
com.jme3.font.BitmapFont#BitmapFont(C): {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]},
org.dyn4j.geometry.Geometry#createSquare: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]},
org.ode4j.ode.internal.DxCollisionUtil#dVector3LengthSquare: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]},
com.jme3.light.LightProbe#intersectsBox: {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]},
com.jme3.asset.AssetManager#setShaderGenerator: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]},
org.dyn4j.dynamics.Body#isOnIsland: {[cinematic, capsule, bitmap, bone, shader, square, light, emitter, texture, vertices, delta, heightfield, spatial, mass, transmission, hallmarks, impulse, motor, quaternion, torque, collide, bounding, vecf, friction, triangle, geometry, material, camel, plane, axes, sphere, radius, calculate, rotate, collect, speed, velocity, collidable, hinge, scene, volume, ball, piston, matrix, arena, shape, body, rotation, joints, collision]},
com.jme3.math.Vector4f#project: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]},
org.ode4j.ode.internal.CollideCapsuleCapsule#dCollideCapsuleCapsule: {[collide, sphere, volume, heightfield, shape, hallmarks, radius, capsule, emitter, plane, bounding, collision, collidable, cinematic, square, calculate, vecf, transmission, triangle, vertices, collect, bitmap, bone, motor, material, impulse, axes, camel, ball, mass, scene, velocity, delta, light, piston, rotation, geometry, hinge, quaternion, joints, spatial, friction, matrix, torque, body, shader, arena, speed, texture, rotate]},
org.ode4j.ode.internal.sTrimeshBoxColliderData#_cldTestEdge: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]},
org.dyn4j.geometry.Vector2#distanceSquared: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]},
org.ode4j.ode.DBody#getTorque: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]},
com.jme3.shader.Glsl100ShaderGenerator#isVarying: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]},
com.jme3.shader.ShaderNodeVariable#write: {[cinematic, bitmap, capsule, bone, shader, light, texture, emitter, square, spatial, material, heightfield, camel, vertices, delta, collide, volume, motor, vecf, scene, impulse, mass, calculate, torque, triangle, axes, rotate, quaternion, friction, transmission, hallmarks, plane, speed, collidable, rotation, radius, velocity, ball, sphere, hinge, body, collect, piston, joints, shape, matrix, collision, bounding, geometry, arena]},
com.jme3.scene.control.LodControl#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]},
com.jme3.cinematic.Cinematic#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, rotate, radius, transmission, sphere, collision, bounding, hallmarks, hinge, material, scene, plane, ball, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]},
com.jme3.scene.Geometry#updateWorldLightList: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]},
com.jme3.font.BitmapFont#read: {[bitmap, cinematic, capsule, bone, shader, light, texture, spatial, emitter, square, material, camel, scene, heightfield, volume, delta, collide, motor, mass, vertices, impulse, vecf, torque, geometry, calculate, axes, transmission, quaternion, triangle, friction, rotate, bounding, speed, velocity, hallmarks, plane, ball, radius, collidable, rotation, sphere, collect, joints, body, hinge, shape, matrix, piston, arena, collision]},
org.ode4j.ode.internal.CollideCapsuleSphere#dColliderFn: {[capsule, cinematic, bitmap, bone, emitter, collide, heightfield, volume, shape, sphere, collision, radius, plane, collidable, calculate, hallmarks, shader, bounding, light, delta, motor, collect, vecf, impulse, triangle, texture, torque, geometry, friction, transmission, vertices, mass, spatial, quaternion, ball, rotate, scene, rotation, material, piston, camel, velocity, arena, hinge, matrix, speed, square, axes, joints, body]},
com.jme3.math.Vector4f#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]},
com.jme3.material.TechniqueDef#getShaderParamDefineId: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]},
com.jme3.light.DefaultLightFilter#setCamera: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]},
com.jme3.asset.TextureKey#read: {[cinematic, bitmap, capsule, bone, shader, light, texture, emitter, square, spatial, material, camel, heightfield, scene, volume, delta, collide, vertices, motor, impulse, mass, torque, vecf, calculate, axes, quaternion, friction, triangle, transmission, rotate, geometry, speed, radius, hallmarks, plane, sphere, velocity, bounding, rotation, ball, collidable, collect, joints, hinge, arena, body, collision, piston, shape, matrix]},
org.ode4j.ode.internal.ragdoll.DxRagdollJointConfig#DxRagdollJointConfig(C): {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]},
com.jme3.math.Quaternion#multLocal: {[cinematic, capsule, bitmap, bone, shader, square, light, emitter, texture, vertices, delta, heightfield, spatial, mass, transmission, hallmarks, impulse, motor, quaternion, torque, collide, bounding, vecf, friction, triangle, geometry, material, camel, plane, axes, sphere, radius, calculate, rotate, collect, speed, velocity, collidable, hinge, scene, volume, ball, piston, matrix, arena, shape, body, rotation, joints, collision]},
org.ode4j.ode.internal.DxGeom#dGeomSetOffsetRotation: {[cinematic, capsule, bitmap, bone, shader, square, light, emitter, texture, vertices, delta, heightfield, spatial, mass, transmission, hallmarks, impulse, motor, quaternion, torque, collide, bounding, vecf, friction, triangle, geometry, material, camel, plane, axes, sphere, radius, calculate, rotate, collect, speed, velocity, collidable, hinge, scene, volume, ball, piston, matrix, arena, shape, body, rotation, joints, collision]},
org.dyn4j.dynamics.World#removeAllJoints: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]},
com.jme3.light.LightProbeBlendingProcessor#cleanup: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]},
com.jme3.bounding.BoundingBox#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]},
com.jme3.font.StringBlock#setAlignment: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]},
org.ode4j.math.DMatrixN#set: {[bitmap, cinematic, capsule, bone, shader, light, texture, emitter, spatial, material, camel, square, scene, heightfield, volume, delta, mass, collide, impulse, quaternion, motor, geometry, torque, transmission, friction, speed, calculate, velocity, vertices, bounding, collect, collision, vecf, arena, axes, hinge, shape, piston, matrix, hallmarks, rotation, joints, collidable, ball, sphere, plane, rotate, body, radius, triangle]},
com.jme3.font.BitmapFont#createLabel: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]},
com.jme3.shader.Shader#Shader(C): {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]},
com.jme3.material.ShaderGenerationInfo#write: {[cinematic, bitmap, capsule, bone, shader, light, texture, emitter, square, spatial, material, heightfield, camel, vertices, delta, collide, volume, motor, vecf, scene, impulse, mass, calculate, torque, triangle, axes, rotate, quaternion, friction, transmission, hallmarks, plane, speed, collidable, rotation, radius, velocity, ball, sphere, hinge, body, collect, piston, joints, shape, matrix, collision, bounding, geometry, arena]},
com.jme3.math.Vector3f#distance: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]},
com.jme3.renderer.opengl.GLRenderer#updateShaderUniforms: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]},
com.jme3.cinematic.KeyFrame#trigger: {[cinematic, capsule, bitmap, bone, shader, square, light, emitter, texture, vertices, delta, heightfield, spatial, mass, transmission, hallmarks, impulse, motor, quaternion, torque, collide, bounding, vecf, friction, triangle, geometry, material, camel, plane, axes, sphere, radius, calculate, rotate, collect, speed, velocity, collidable, hinge, scene, volume, ball, piston, matrix, arena, shape, body, rotation, joints, collision]},
com.jme3.material.MaterialDef#addMaterialParam: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.shader.Glsl100ShaderGenerator#declareVariable: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.shader.Shader#createDestructableClone: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.animation.PoseTrack#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.light.PoiLightProbeLightFilter#setCamera: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.font.Kerning#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
net.smert.jreactphysics3d.constraint.BallAndSocketJoint#BallAndSocketJoint(C): {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.shader.ShaderGenerator#generateNodeMainSection: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.shadow.PointLightShadowRenderer#setLight: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.renderer.opengl.GLDebugES#glAttachShader: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.asset.ShaderNodeDefinitionKey#ShaderNodeDefinitionKey(C): {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.renderer.RenderManager#updateUniformBindings: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
org.ode4j.ode.internal.DxHeightfield#sortPlanes: {[bitmap, cinematic, capsule, bone, shader, light, texture, spatial, emitter, square, material, camel, scene, heightfield, volume, delta, collide, motor, mass, vertices, impulse, vecf, torque, geometry, calculate, axes, transmission, quaternion, triangle, friction, rotate, bounding, speed, velocity, hallmarks, plane, radius, sphere, ball, collidable, rotation, joints, collect, body, hinge, shape, matrix, piston, arena, collision]}
com.jme3.shader.Shader#ShaderType(C): {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.renderer.opengl.GL#glGetShader: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.math.Vector2f#distanceSquared: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.shadow.AbstractShadowFilter#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.shadow.PssmShadowFilter#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.material.TechniqueDef#getShaderProgramName: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.animation.AnimChannel#addToRootBone: {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
com.jme3.shadow.SpotLightShadowFilter#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
org.ode4j.ode.internal.DxMass#dMassSetCapsule: {[radius, capsule, sphere, transmission, cinematic, hallmarks, volume, mass, bitmap, velocity, bone, bounding, square, delta, emitter, calculate, torque, triangle, impulse, speed, collide, vecf, motor, light, friction, shader, collect, vertices, scene, shape, spatial, heightfield, joints, texture, collidable, collision, material, camel, rotation, ball, rotate, geometry, arena, body, plane, piston, quaternion, hinge, axes, matrix]}
com.jme3.cinematic.events.AbstractCinematicEvent#AbstractCinematicEvent(C): {[cinematic, capsule, bitmap, bone, shader, square, light, emitter, texture, vertices, delta, heightfield, spatial, mass, transmission, hallmarks, impulse, motor, quaternion, torque, collide, bounding, vecf, friction, triangle, geometry, material, camel, plane, axes, sphere, radius, calculate, rotate, collect, speed, velocity, collidable, hinge, scene, volume, ball, piston, matrix, arena, shape, body, rotation, joints, collision]}
org.ode4j.ode.internal.joints.DxJointDBall#getAnchor1: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.material.MatParam#read: {[capsule, cinematic, bitmap, matrix, collect, calculate, shader, bone, light, heightfield, square, collide, volume, arena, vertices, texture, delta, torque, emitter, geometry, motor, collidable, rotate, bounding, vecf, piston, transmission, quaternion, triangle, camel, material, speed, impulse, velocity, plane, collision, hallmarks, joints, ball, friction, mass, radius, spatial, axes, sphere, shape, rotation, hinge, body, scene]}
com.jme3.math.Vector4f#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.math.Vector3f#distanceSquared: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.audio.LowPassFilter#read: {[capsule, cinematic, bitmap, bone, emitter, shader, light, heightfield, collide, texture, square, volume, delta, calculate, impulse, motor, spatial, vertices, geometry, torque, radius, mass, quaternion, sphere, shape, friction, collision, speed, axes, rotate, material, vecf, camel, triangle, collect, collidable, plane, bounding, transmission, ball, hinge, hallmarks, arena, rotation, velocity, matrix, piston, joints, body, scene]}
com.jme3.material.logic.SinglePassLightingLogic#makeCurrent: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, square, shape, vecf, bounding, volume, collision, axes, collide, collidable, plane, triangle, rotate, transmission, heightfield, motor, rotation, vertices, quaternion, mass, matrix, velocity, emitter, hinge, piston, hallmarks, torque, friction, arena, collect, radius, sphere, impulse, speed, joints, delta, calculate, ball, body]}
com.jme3.scene.Spatial#updateWorldLightList: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.renderer.queue.OpaqueComparator#compare: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.material.Material#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.material.TechniqueDef#getShaderGenerationInfo: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.scene.shape.PQTorus#write: {[capsule, cinematic, radius, sphere, bitmap, volume, hallmarks, bone, transmission, bounding, emitter, collide, mass, velocity, square, calculate, heightfield, light, shader, shape, collect, speed, delta, texture, triangle, torque, plane, vecf, scene, impulse, piston, vertices, friction, geometry, material, camel, hinge, motor, collision, spatial, axes, collidable, arena, body, joints, matrix, quaternion, ball, rotate, rotation]}
com.jme3.scene.BatchNode#findBatchByMaterial: {[volume, bounding, sphere, radius, hallmarks, light, capsule, emitter, bone, bitmap, texture, shader, geometry, cinematic, spatial, camel, scene, transmission, square, material, collide, plane, heightfield, shape, vertices, calculate, collidable, mass, velocity, collision, triangle, collect, delta, vecf, speed, rotate, arena, axes, torque, hinge, matrix, rotation, friction, piston, body, impulse, motor, joints, quaternion, ball]}
com.jme3.shadow.PointLightShadowFilter#PointLightShadowFilter(C): {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.bounding.BoundingVolume#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.animation.SkeletonControl#applySkinning: {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
com.jme3.shadow.PointLightShadowRenderer#getLight: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
org.ode4j.math.DVector4#length: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.input.ChaseCamera#getRotationSpeed: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex#addPoint: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.animation.Bone#getParent: {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
com.jme3.input.ChaseCamera#updateCamera: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
org.ode4j.ode.internal.gimpact.GimTrimeshCapsuleCollision#gim_trimesh_capsule_collision: {[heightfield, collide, collision, emitter, collidable, shape, vecf, plane, triangle, capsule, cinematic, bitmap, vertices, bone, volume, delta, mass, impulse, motor, calculate, torque, collect, velocity, sphere, friction, bounding, hallmarks, axes, spatial, ball, quaternion, speed, shader, geometry, transmission, light, texture, body, piston, scene, radius, material, hinge, rotation, matrix, joints, camel, square, rotate, arena]}
com.jme3.renderer.opengl.GL#glCompileShader: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.material.logic.DefaultTechniqueDefLogic#getAmbientColor: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.light.PointLight#getType: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.font.BitmapText#getAlignment: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
org.ode4j.ode.internal.gimpact.GimTriCollision#coplanar_tri_tri: {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
com.jme3.scene.control.BillboardControl#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.font.BitmapCharacterSet#merge: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.cinematic.KeyFrame#getCinematicEvents: {[cinematic, capsule, bitmap, bone, shader, square, light, emitter, texture, vertices, delta, heightfield, spatial, mass, transmission, hallmarks, impulse, motor, quaternion, torque, collide, bounding, vecf, friction, triangle, geometry, material, camel, plane, axes, sphere, radius, calculate, rotate, collect, speed, velocity, collidable, hinge, scene, volume, ball, piston, matrix, arena, shape, body, rotation, joints, collision]}
org.dyn4j.geometry.Vector3#getMagnitudeSquared: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.scene.control.LightControl#LightControl(C): {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.cinematic.events.CinematicEvent#initEvent: {[cinematic, capsule, bitmap, bone, shader, square, light, emitter, texture, vertices, delta, heightfield, spatial, mass, transmission, hallmarks, impulse, motor, quaternion, torque, collide, bounding, vecf, friction, triangle, geometry, material, camel, plane, axes, sphere, radius, calculate, rotate, collect, speed, velocity, collidable, hinge, scene, volume, ball, piston, matrix, arena, shape, body, rotation, joints, collision]}
com.jme3.scene.Spatial#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
org.ode4j.ode.internal.CollideCapsulePlane#dCollideCapsulePlane: {[capsule, sphere, radius, volume, collide, hallmarks, cinematic, emitter, heightfield, bounding, shape, bitmap, plane, bone, transmission, square, calculate, collision, collidable, collect, vecf, vertices, triangle, mass, light, velocity, shader, motor, material, piston, scene, camel, hinge, impulse, matrix, texture, axes, geometry, ball, spatial, friction, rotation, quaternion, speed, body, delta, joints, torque, arena, rotate]}
net.smert.jreactphysics3d.collision.shapes.CapsuleShape#clone: {[capsule, heightfield, cinematic, collide, emitter, bitmap, collision, shape, collidable, bone, plane, vecf, triangle, delta, volume, vertices, impulse, mass, motor, calculate, torque, sphere, collect, friction, velocity, hallmarks, geometry, bounding, shader, quaternion, axes, light, ball, spatial, texture, material, radius, transmission, camel, body, speed, hinge, piston, square, joints, scene, rotation, arena, rotate, matrix]}
com.jme3.math.Vector3f#length: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.scene.CameraNode#read: {[cinematic, capsule, bitmap, bone, shader, light, emitter, texture, square, heightfield, spatial, collide, delta, volume, material, camel, vertices, impulse, motor, mass, quaternion, torque, calculate, scene, friction, vecf, transmission, triangle, axes, speed, rotate, radius, sphere, shape, hallmarks, hinge, collision, geometry, plane, velocity, arena, ball, collidable, joints, body, bounding, collect, piston, rotation, matrix]}
org.ode4j.ode.internal.DxMass#dMassSetCapsuleTotal: {[radius, capsule, sphere, transmission, cinematic, hallmarks, volume, mass, bitmap, velocity, bone, bounding, square, delta, emitter, calculate, torque, triangle, impulse, speed, collide, vecf, motor, light, friction, shader, collect, vertices, scene, shape, spatial, heightfield, joints, texture, collidable, collision, material, camel, rotation, ball, rotate, geometry, arena, body, plane, piston, quaternion, hinge, axes, matrix]}
com.jme3.light.LightList#doubleSize: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.renderer.opengl.GLRenderer#loadCapabilitiesCommon: {[shader, texture, light, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, square, shape, bounding, vecf, volume, axes, collision, collide, transmission, collidable, rotate, plane, motor, mass, velocity, heightfield, triangle, rotation, quaternion, emitter, radius, collect, torque, hallmarks, hinge, impulse, sphere, piston, speed, friction, matrix, arena, joints, delta, vertices, ball, body, calculate]}
net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex#backupClosestPointInSimplex: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.font.BitmapCharacterSet#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.math.Quaternion#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
net.smert.jreactphysics3d.mathematics.Vector3#isZero: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.animation.CompactVector3Array#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.material.logic.StaticPassLightingLogic#StaticPassLightingLogic(C): {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.scene.LightNode#setEnabled: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
org.ode4j.ode.internal.DxHeightfield#get: {[capsule, cinematic, bitmap, bone, emitter, collide, heightfield, shader, volume, light, radius, sphere, texture, calculate, shape, hallmarks, bounding, delta, collision, motor, geometry, impulse, transmission, plane, square, spatial, collect, collidable, vertices, friction, torque, quaternion, speed, rotate, axes, velocity, scene, mass, ball, piston, rotation, triangle, arena, vecf, matrix, material, camel, hinge, body, joints]}
com.jme3.bounding.BoundingSphere#read: {[capsule, cinematic, radius, sphere, bitmap, volume, hallmarks, bone, transmission, bounding, emitter, collide, mass, velocity, square, calculate, heightfield, light, shader, shape, collect, speed, delta, texture, triangle, torque, plane, vecf, scene, impulse, piston, vertices, friction, geometry, material, camel, hinge, motor, collision, spatial, axes, collidable, arena, body, joints, matrix, quaternion, ball, rotate, rotation]}
com.jme3.shader.Glsl150ShaderGenerator#generateStartOfMainSection: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.environment.JobListener#JobListener(C): {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
org.ode4j.ode.internal.CollideCapsuleCylinder#dColliderFn: {[capsule, cinematic, bitmap, bone, emitter, heightfield, collide, shader, shape, collision, volume, delta, light, calculate, collidable, impulse, motor, plane, mass, torque, square, geometry, sphere, texture, friction, vecf, triangle, collect, radius, quaternion, spatial, velocity, hallmarks, bounding, rotate, ball, scene, transmission, rotation, material, camel, arena, vertices, hinge, matrix, axes, speed, body, piston, joints]}
com.jme3.renderer.Renderer#setShader: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.light.DefaultLightFilter#DefaultLightFilter(C): {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.light.PointLight#read: {[capsule, cinematic, radius, sphere, bitmap, volume, hallmarks, bone, transmission, bounding, emitter, collide, mass, velocity, square, calculate, heightfield, light, shader, shape, collect, speed, delta, texture, triangle, torque, plane, vecf, scene, impulse, piston, vertices, friction, geometry, material, camel, hinge, motor, collision, spatial, axes, collidable, arena, body, joints, matrix, quaternion, ball, rotate, rotation]}
com.jme3.shader.ShaderNode#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.material.TechniqueDef#loadShader: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.shader.Glsl100ShaderGenerator#generateUniforms: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
org.ode4j.ode.internal.DxCapsule#dGeomCapsuleSetParams: {[capsule, cinematic, radius, sphere, bitmap, volume, hallmarks, bone, transmission, bounding, emitter, collide, mass, velocity, square, calculate, heightfield, light, shader, shape, collect, speed, delta, texture, triangle, torque, plane, vecf, scene, impulse, piston, vertices, friction, geometry, material, camel, hinge, motor, collision, spatial, axes, collidable, arena, body, joints, matrix, quaternion, ball, rotate, rotation]}
com.jme3.animation.CompactQuaternionArray#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
org.dyn4j.dynamics.Settings#setWarmStartDistance: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.shadow.DirectionalLightShadowFilter#getLight: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.shadow.SpotLightShadowFilter#read: {[bitmap, cinematic, capsule, bone, shader, light, texture, emitter, spatial, square, material, camel, scene, volume, heightfield, vertices, delta, collide, vecf, motor, impulse, mass, calculate, torque, axes, triangle, geometry, quaternion, rotate, transmission, friction, plane, speed, bounding, radius, collidable, hallmarks, sphere, rotation, velocity, ball, shape, collision, joints, matrix, piston, collect, hinge, body, arena]}
com.jme3.math.Line#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.scene.shape.Cylinder#read: {[capsule, cinematic, radius, sphere, bitmap, volume, hallmarks, bone, transmission, bounding, emitter, collide, mass, velocity, square, calculate, heightfield, light, shader, shape, collect, speed, delta, texture, triangle, torque, plane, vecf, scene, impulse, piston, vertices, friction, geometry, material, camel, hinge, motor, collision, spatial, axes, collidable, arena, body, joints, matrix, quaternion, ball, rotate, rotation]}
com.jme3.app.StatsView#StatsView(C): {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.font.StringBlock#getAlignment: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.bounding.BoundingBox#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.font.Letters#update: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.scene.VertexBuffer#read: {[capsule, cinematic, bitmap, bone, emitter, shader, light, heightfield, collide, texture, volume, square, delta, calculate, radius, sphere, geometry, quaternion, vertices, impulse, motor, spatial, shape, friction, torque, mass, speed, collision, triangle, vecf, hallmarks, axes, collidable, rotate, hinge, arena, bounding, collect, plane, material, camel, scene, velocity, ball, matrix, rotation, piston, body, joints, transmission]}
org.ode4j.ode.internal.ragdoll.DxRagdollJointConfig#getBone: {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
supports: {[shader, texture, light, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, square, shape, bounding, vecf, volume, axes, collision, collide, transmission, collidable, rotate, plane, motor, mass, velocity, heightfield, triangle, rotation, quaternion, emitter, radius, collect, torque, hallmarks, hinge, impulse, sphere, piston, speed, friction, matrix, arena, joints, delta, vertices, ball, body, calculate]}
com.jme3.scene.control.LightControl#getLight: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.material.ShaderGenerationInfo#getVertexGlobal: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.font.BitmapFont#getCharSet: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.scene.AssetLinkNode#write: {[bitmap, cinematic, capsule, bone, shader, light, texture, emitter, spatial, material, camel, square, scene, heightfield, volume, delta, mass, collide, impulse, quaternion, motor, geometry, torque, transmission, friction, speed, calculate, velocity, vertices, bounding, collect, collision, vecf, arena, axes, hinge, shape, piston, matrix, hallmarks, rotation, joints, collidable, ball, sphere, plane, rotate, body, radius, triangle]}
com.jme3.cinematic.Cinematic#enqueueCinematicEvent: {[cinematic, capsule, bitmap, bone, shader, square, light, emitter, texture, vertices, delta, heightfield, spatial, mass, transmission, hallmarks, impulse, motor, quaternion, torque, collide, bounding, vecf, friction, triangle, geometry, material, camel, plane, axes, sphere, radius, calculate, rotate, collect, speed, velocity, collidable, hinge, scene, volume, ball, piston, matrix, arena, shape, body, rotation, joints, collision]}
net.smert.jreactphysics3d.collision.shapes.SphereShape#getLocalSupportPointWithMargin: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.shadow.PointLightShadowRenderer#read: {[bitmap, cinematic, capsule, bone, shader, light, texture, emitter, spatial, square, material, camel, scene, volume, heightfield, vertices, delta, collide, vecf, motor, impulse, mass, calculate, torque, axes, triangle, geometry, quaternion, rotate, transmission, friction, plane, speed, bounding, radius, collidable, hallmarks, sphere, rotation, velocity, ball, shape, collision, joints, matrix, piston, collect, hinge, body, arena]}
com.jme3.renderer.opengl.GL#glShaderSource: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.animation.Bone#getChildren: {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
org.ode4j.ode.internal.DxGimpact#DxGimpact(C): {[capsule, cinematic, bitmap, bone, emitter, collide, heightfield, shader, volume, light, radius, sphere, texture, calculate, shape, hallmarks, bounding, delta, collision, motor, geometry, impulse, transmission, plane, square, spatial, collect, collidable, vertices, friction, torque, quaternion, speed, rotate, axes, velocity, scene, mass, ball, piston, rotation, triangle, arena, vecf, matrix, material, camel, hinge, body, joints]}
com.jme3.material.MatParamOverride#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.light.LightProbe#LightProbe(C): {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.scene.debug.SkeletonWire#countConnections: {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
com.jme3.math.Plane#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.cinematic.KeyFrame#setCinematicEvents: {[cinematic, capsule, bitmap, bone, shader, square, light, emitter, texture, vertices, delta, heightfield, spatial, mass, transmission, hallmarks, impulse, motor, quaternion, torque, collide, bounding, vecf, friction, triangle, geometry, material, camel, plane, axes, sphere, radius, calculate, rotate, collect, speed, velocity, collidable, hinge, scene, volume, ball, piston, matrix, arena, shape, body, rotation, joints, collision]}
com.jme3.animation.AudioTrack#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.math.Vector4f#length: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.math.Quaternion#toAngleAxis: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.shader.Glsl150ShaderGenerator#initVariable: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.shadow.DirectionalLightShadowRenderer#write: {[bitmap, cinematic, capsule, bone, shader, light, texture, emitter, spatial, square, material, camel, scene, volume, heightfield, vertices, delta, collide, vecf, motor, impulse, mass, calculate, torque, axes, triangle, geometry, quaternion, rotate, transmission, friction, plane, speed, bounding, radius, collidable, hallmarks, sphere, rotation, velocity, ball, shape, collision, joints, matrix, piston, collect, hinge, body, arena]}
com.jme3.shadow.SpotLightShadowRenderer#read: {[bitmap, cinematic, capsule, bone, shader, light, texture, emitter, spatial, square, material, camel, scene, volume, heightfield, vertices, delta, collide, vecf, motor, impulse, mass, calculate, torque, axes, triangle, geometry, quaternion, rotate, transmission, friction, plane, speed, bounding, radius, collidable, hallmarks, sphere, rotation, velocity, ball, shape, collision, joints, matrix, piston, collect, hinge, body, arena]}
com.jme3.font.Letters#Letters(C): {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.math.Ring#read: {[capsule, cinematic, radius, sphere, bitmap, volume, hallmarks, bone, transmission, bounding, emitter, collide, mass, velocity, square, calculate, heightfield, light, shader, shape, collect, speed, delta, texture, triangle, torque, plane, vecf, scene, impulse, piston, vertices, friction, geometry, material, camel, hinge, motor, collision, spatial, axes, collidable, arena, body, joints, matrix, quaternion, ball, rotate, rotation]}
com.jme3.renderer.opengl.GLDebugES#glGetShader: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.scene.debug.SkeletonInterBoneWire#countConnections: {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
com.jme3.cinematic.Cinematic#onPlay: {[cinematic, capsule, bitmap, bone, shader, square, light, emitter, texture, vertices, delta, heightfield, spatial, mass, transmission, hallmarks, impulse, motor, quaternion, torque, collide, bounding, vecf, friction, triangle, geometry, material, camel, plane, axes, sphere, radius, calculate, rotate, collect, speed, velocity, collidable, hinge, scene, volume, ball, piston, matrix, arena, shape, body, rotation, joints, collision]}
org.dyn4j.geometry.Capsule#getAxes: {[square, hallmarks, sphere, radius, vertices, rotate, axes, shape, bitmap, bounding, transmission, plane, volume, rotation, cinematic, velocity, mass, shader, vecf, emitter, delta, triangle, collide, speed, collision, collidable, motor, impulse, quaternion, capsule, light, torque, heightfield, texture, piston, hinge, material, collect, joints, friction, camel, spatial, calculate, geometry, scene, bone, arena, body, matrix, ball]}
com.jme3.scene.shape.Torus#read: {[capsule, cinematic, radius, sphere, bitmap, volume, hallmarks, bone, transmission, bounding, emitter, collide, mass, velocity, square, calculate, heightfield, light, shader, shape, collect, speed, delta, texture, triangle, torque, plane, vecf, scene, impulse, piston, vertices, friction, geometry, material, camel, hinge, motor, collision, spatial, axes, collidable, arena, body, joints, matrix, quaternion, ball, rotate, rotation]}
com.jme3.light.Light#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.math.Ring#write: {[capsule, cinematic, radius, sphere, bitmap, volume, hallmarks, bone, transmission, bounding, emitter, collide, mass, velocity, square, calculate, heightfield, light, shader, shape, collect, speed, delta, texture, triangle, torque, plane, vecf, scene, impulse, piston, vertices, friction, geometry, material, camel, hinge, motor, collision, spatial, axes, collidable, arena, body, joints, matrix, quaternion, ball, rotate, rotation]}
com.jme3.scene.UserData#readList: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.math.LineSegment#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
org.ode4j.ode.internal.DxCapsule#dGeomCapsulePointDepth: {[capsule, collect, volume, radius, matrix, cinematic, calculate, sphere, bitmap, bounding, hallmarks, collide, transmission, mass, bone, heightfield, light, arena, shader, square, plane, emitter, velocity, shape, collidable, piston, vertices, texture, vecf, friction, triangle, delta, impulse, spatial, rotate, collision, joints, scene, geometry, hinge, ball, quaternion, torque, camel, material, rotation, speed, axes, motor, body]}
com.jme3.shader.ShaderNodeDefinition#read: {[cinematic, bitmap, capsule, bone, shader, light, texture, emitter, square, spatial, material, heightfield, camel, vertices, delta, collide, volume, motor, vecf, scene, impulse, mass, calculate, torque, triangle, axes, rotate, quaternion, friction, transmission, hallmarks, plane, speed, collidable, rotation, radius, velocity, ball, sphere, hinge, body, collect, piston, joints, shape, matrix, collision, bounding, geometry, arena]}
org.dyn4j.dynamics.Settings#setLinearTolerance: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.animation.Skeleton#getRoots: {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
com.jme3.material.Material#selectTechnique: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.shader.Glsl150ShaderGenerator#declareVarying: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.shader.ShaderNodeDefinition#getType: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.math.Ray#distanceSquared: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.scene.Spatial#read: {[bitmap, cinematic, capsule, bone, shader, light, texture, emitter, spatial, volume, material, camel, scene, heightfield, collide, bounding, square, calculate, geometry, sphere, radius, motor, delta, impulse, torque, hallmarks, axes, mass, collect, rotate, vecf, shape, friction, plane, collision, vertices, collidable, matrix, quaternion, piston, rotation, speed, ball, triangle, hinge, joints, velocity, transmission, arena, body]}
com.jme3.cinematic.Cinematic#setTime: {[cinematic, capsule, bitmap, bone, shader, square, light, emitter, texture, vertices, delta, heightfield, spatial, mass, transmission, hallmarks, impulse, motor, quaternion, torque, collide, bounding, vecf, friction, triangle, geometry, material, camel, plane, axes, sphere, radius, calculate, rotate, collect, speed, velocity, collidable, hinge, scene, volume, ball, piston, matrix, arena, shape, body, rotation, joints, collision]}
com.jme3.renderer.opengl.GLRenderer#updateShaderSourceData: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.font.LetterQuad#isLineWrap: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.font.LetterQuad#setBitmapChar: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
org.ode4j.math.DVector6#length: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.cinematic.events.AnimationEvent#dispose: {[cinematic, capsule, bitmap, bone, shader, square, light, emitter, texture, vertices, delta, heightfield, spatial, mass, transmission, hallmarks, impulse, motor, quaternion, torque, collide, bounding, vecf, friction, triangle, geometry, material, camel, plane, axes, sphere, radius, calculate, rotate, collect, speed, velocity, collidable, hinge, scene, volume, ball, piston, matrix, arena, shape, body, rotation, joints, collision]}
com.jme3.renderer.RenderManager#setLightFilter: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.font.LetterQuad#getBitmapChar: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.scene.Mesh#prepareForAnim: {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
com.jme3.material.Technique#notifyParamChanged: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.renderer.opengl.GL#glDeleteShader: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.shader.Glsl100ShaderGenerator#fixInPositionType: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.animation.Animation#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.shader.ShaderNodeVariable#clone: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.cinematic.events.AbstractCinematicEvent#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, texture, collide, vertices, quaternion, geometry, speed, delta, volume, spatial, calculate, triangle, vecf, impulse, hinge, friction, mass, radius, motor, torque, shape, piston, bounding, rotation, velocity, sphere, plane, transmission, scene, collidable, collect, ball, matrix, body, joints, arena, collision, hallmarks, axes, camel, material, rotate]}
com.jme3.shader.VariableMapping#read: {[cinematic, bitmap, capsule, bone, shader, light, texture, emitter, square, spatial, material, heightfield, camel, vertices, delta, collide, volume, motor, vecf, scene, impulse, mass, calculate, torque, triangle, axes, rotate, quaternion, friction, transmission, hallmarks, plane, speed, collidable, rotation, radius, velocity, ball, sphere, hinge, body, collect, piston, joints, shape, matrix, collision, bounding, geometry, arena]}
com.jme3.material.TechniqueDef#getShaderParamDefine: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
org.ode4j.ode.DMass#setCapsule: {[capsule, cinematic, radius, sphere, bitmap, volume, hallmarks, bone, transmission, bounding, emitter, collide, mass, velocity, square, calculate, heightfield, light, shader, shape, collect, speed, delta, texture, triangle, torque, plane, vecf, scene, impulse, piston, vertices, friction, geometry, material, camel, hinge, motor, collision, spatial, axes, collidable, arena, body, joints, matrix, quaternion, ball, rotate, rotation]}
com.jme3.renderer.opengl.GLDebugES#glShaderSource: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.material.ShaderGenerationInfo#getFragmentUniforms: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.font.BitmapCharacterSet#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, texture, collide, delta, vertices, geometry, impulse, volume, motor, calculate, mass, spatial, quaternion, torque, friction, vecf, triangle, axes, speed, rotate, shape, transmission, radius, sphere, collision, bounding, hallmarks, material, hinge, camel, plane, ball, scene, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.shader.ShaderNode#read: {[cinematic, bitmap, capsule, bone, shader, light, texture, emitter, square, spatial, material, heightfield, camel, vertices, delta, collide, volume, motor, vecf, scene, impulse, mass, calculate, torque, triangle, axes, rotate, quaternion, friction, transmission, hallmarks, plane, speed, collidable, rotation, radius, velocity, ball, sphere, hinge, body, collect, piston, joints, shape, matrix, collision, bounding, geometry, arena]}
com.jme3.scene.shape.Sphere#write: {[capsule, cinematic, bitmap, radius, sphere, bone, volume, hallmarks, bounding, transmission, light, emitter, shader, texture, collide, velocity, mass, calculate, square, heightfield, shape, spatial, material, camel, collect, vecf, speed, triangle, delta, geometry, plane, torque, scene, piston, friction, axes, impulse, hinge, vertices, quaternion, rotate, rotation, body, motor, arena, ball, matrix, collision, collidable, joints]}
com.jme3.shader.Glsl100ShaderGenerator#replaceVariableName: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.material.TechniqueDef#toString: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.shader.Shader#toString: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.shader.Shader#resetLocations: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.scene.control.AbstractControl#read: {[bitmap, cinematic, capsule, bone, shader, light, texture, emitter, spatial, material, camel, square, scene, heightfield, volume, delta, mass, collide, impulse, quaternion, motor, geometry, torque, transmission, friction, speed, calculate, velocity, vertices, bounding, collect, collision, vecf, arena, axes, hinge, shape, piston, matrix, hallmarks, rotation, joints, collidable, ball, sphere, plane, rotate, body, radius, triangle]}
com.jme3.math.Triangle#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.texture.TextureCubeMap#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.light.PointLight#clone: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.material.MatParamOverride#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.shader.ShaderGenerator#generateDeclarativeSection: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.scene.Node#read: {[bitmap, cinematic, capsule, bone, shader, light, texture, emitter, spatial, material, camel, square, scene, heightfield, volume, delta, mass, collide, impulse, quaternion, motor, geometry, torque, transmission, friction, speed, calculate, velocity, vertices, bounding, collect, collision, vecf, arena, axes, hinge, shape, piston, matrix, hallmarks, rotation, joints, collidable, ball, sphere, plane, rotate, body, radius, triangle]}
com.jme3.cinematic.TimeLine#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.asset.DesktopAssetManager#getShaderGenerator: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.animation.Pose#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
org.ode4j.ode.internal.CollideTrimeshCCylinder#dColliderFn: {[capsule, cinematic, bitmap, bone, emitter, heightfield, collide, shader, shape, collision, volume, delta, light, calculate, collidable, impulse, motor, plane, mass, torque, square, geometry, sphere, texture, friction, vecf, triangle, collect, radius, quaternion, spatial, velocity, hallmarks, bounding, rotate, ball, scene, transmission, rotation, material, camel, arena, vertices, hinge, matrix, axes, speed, body, piston, joints]}
com.jme3.effect.ParticleEmitter#read: {[capsule, emitter, cinematic, bone, bitmap, heightfield, collide, shape, collision, quaternion, plane, collidable, vecf, volume, triangle, vertices, axes, rotate, hallmarks, rotation, sphere, speed, piston, hinge, calculate, radius, spatial, shader, light, bounding, delta, friction, mass, texture, impulse, joints, geometry, torque, arena, collect, body, matrix, ball, square, motor, velocity, material, transmission, camel, scene]}
com.jme3.shader.ShaderNodeVariable#equals: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.effect.shapes.EmitterSphereShape#read: {[capsule, cinematic, radius, sphere, bitmap, volume, hallmarks, bone, transmission, bounding, emitter, collide, mass, velocity, square, calculate, heightfield, light, shader, shape, collect, speed, delta, texture, triangle, torque, plane, vecf, scene, impulse, piston, vertices, friction, geometry, material, camel, hinge, motor, collision, spatial, axes, collidable, arena, body, joints, matrix, quaternion, ball, rotate, rotation]}
com.jme3.material.TechniqueDef#getLightMode: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.scene.UserData#writeList: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.animation.PoseTrack#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
org.dyn4j.dynamics.Settings#setAngularTolerance: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.material.TechniqueDef#getShaderProgramLanguage: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.cinematic.TimeLine#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.collision.bih.BIHNode#read: {[capsule, cinematic, bitmap, bone, emitter, heightfield, collide, shader, light, volume, shape, collision, delta, impulse, collidable, motor, calculate, texture, plane, mass, square, torque, friction, sphere, spatial, geometry, vecf, triangle, quaternion, collect, radius, velocity, bounding, hallmarks, transmission, ball, rotate, arena, vertices, hinge, camel, speed, material, rotation, matrix, body, axes, joints, scene, piston]}
com.jme3.light.DirectionalLight#DirectionalLight(C): {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex#updateCache: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.shader.ShaderNode#getDefinition: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.animation.AnimControl#read: {[bitmap, cinematic, capsule, bone, shader, light, texture, emitter, spatial, material, camel, square, scene, heightfield, volume, delta, mass, collide, impulse, quaternion, motor, geometry, torque, transmission, friction, speed, calculate, velocity, vertices, bounding, collect, collision, vecf, arena, axes, hinge, shape, piston, matrix, hallmarks, rotation, joints, collidable, ball, sphere, plane, rotate, body, radius, triangle]}
com.jme3.material.logic.SinglePassAndImageBasedLightingLogic#extractIndirectLights: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.renderer.Statistics#onShaderUse: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.math.Transform#read: {[cinematic, capsule, bone, bitmap, emitter, quaternion, rotation, speed, rotate, heightfield, shader, hinge, axes, piston, light, square, collide, transmission, spatial, geometry, texture, friction, arena, bounding, velocity, shape, delta, mass, collect, torque, volume, vertices, collision, ball, sphere, motor, scene, joints, camel, calculate, impulse, radius, collidable, material, plane, matrix, vecf, hallmarks, triangle, body]}
com.jme3.scene.instancing.InstancedGeometry#read: {[bitmap, shader, cinematic, light, capsule, texture, bone, spatial, material, camel, scene, geometry, emitter, volume, bounding, square, heightfield, sphere, collide, radius, motor, hallmarks, impulse, mass, delta, vecf, torque, calculate, quaternion, speed, axes, collect, arena, plane, friction, transmission, joints, matrix, vertices, ball, rotation, rotate, body, velocity, collidable, collision, piston, hinge, triangle, shape]}
com.jme3.cinematic.Cinematic#initialize: {[cinematic, capsule, bitmap, bone, shader, square, light, emitter, texture, vertices, delta, heightfield, spatial, mass, transmission, hallmarks, impulse, motor, quaternion, torque, collide, bounding, vecf, friction, triangle, geometry, material, camel, plane, axes, sphere, radius, calculate, rotate, collect, speed, velocity, collidable, hinge, scene, volume, ball, piston, matrix, arena, shape, body, rotation, joints, collision]}
org.ode4j.ode.internal.DxCapsule#getPointDepth: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.renderer.Statistics#onDeleteShader: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
org.dyn4j.geometry.Geometry#scale: {[sphere, radius, capsule, hallmarks, volume, emitter, cinematic, bounding, collide, bone, bitmap, transmission, square, heightfield, shape, plane, calculate, collision, collidable, velocity, mass, collect, vertices, light, shader, vecf, triangle, texture, speed, axes, rotate, delta, arena, torque, rotation, matrix, geometry, piston, spatial, hinge, body, quaternion, material, scene, impulse, joints, motor, ball, camel, friction]}
com.jme3.material.TechniqueDef#getFragmentShaderLanguage: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex#computeClosestPointForSubset: {[square, radius, hallmarks, transmission, mass, sphere, delta, velocity, bitmap, bounding, cinematic, impulse, motor, torque, volume, rotate, speed, axes, capsule, friction, shader, rotation, vertices, shape, light, texture, plane, joints, piston, spatial, hinge, geometry, material, calculate, emitter, collide, collect, scene, camel, quaternion, body, ball, vecf, heightfield, collidable, bone, matrix, triangle, collision, arena]}
com.jme3.cinematic.events.AnimationEvent#read: {[bitmap, cinematic, capsule, bone, shader, light, texture, emitter, spatial, material, camel, square, scene, heightfield, volume, delta, mass, collide, impulse, quaternion, motor, geometry, torque, transmission, friction, speed, calculate, velocity, vertices, bounding, collect, collision, vecf, arena, axes, hinge, shape, piston, matrix, hallmarks, rotation, joints, collidable, ball, sphere, plane, rotate, body, radius, triangle]}
com.jme3.renderer.opengl.GL#glAttachShader: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.renderer.opengl.GL#glCreateShader: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
org.ode4j.math.DVector4C#lengthSquared: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.shadow.PointLightShadowFilter#read: {[bitmap, cinematic, capsule, bone, shader, light, texture, emitter, spatial, square, material, camel, scene, volume, heightfield, vertices, delta, collide, vecf, motor, impulse, mass, calculate, torque, axes, triangle, geometry, quaternion, rotate, transmission, friction, plane, speed, bounding, radius, collidable, hallmarks, sphere, rotation, velocity, ball, shape, collision, joints, matrix, piston, collect, hinge, body, arena]}
com.jme3.shader.Glsl100ShaderGenerator#generateEndOfMainSection: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.post.FilterPostProcessor#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.animation.Bone#toString: {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
com.jme3.shadow.DirectionalLightShadowRenderer#setLight: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.shader.ShaderGenerator#generateAttributes: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.shader.Glsl100ShaderGenerator#appendOutput: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.math.Rectangle#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
net.smert.jreactphysics3d.collision.shapes.CapsuleShape#CapsuleShape(C): {[collide, sphere, volume, heightfield, capsule, emitter, shape, hallmarks, radius, plane, cinematic, bounding, collision, collidable, bone, square, bitmap, vecf, transmission, vertices, triangle, calculate, collect, axes, motor, material, impulse, camel, velocity, mass, ball, light, scene, delta, geometry, rotate, friction, joints, shader, speed, torque, texture, spatial, piston, hinge, body, arena, quaternion, matrix, rotation]}
net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex#computeClosestPoint: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.material.TechniqueDef#getShaderPrologue: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
net.smert.jreactphysics3d.mathematics.Vector2#isUnit: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.shader.Shader#deleteObject: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.font.BitmapText#getFont: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.material.RenderState#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.math.Vector3f#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.cinematic.Cinematic#activateCamera: {[cinematic, capsule, bitmap, bone, shader, square, light, emitter, texture, vertices, delta, heightfield, spatial, mass, transmission, hallmarks, impulse, motor, quaternion, torque, collide, bounding, vecf, friction, triangle, geometry, material, camel, plane, axes, sphere, radius, calculate, rotate, collect, speed, velocity, collidable, hinge, scene, volume, ball, piston, matrix, arena, shape, body, rotation, joints, collision]}
com.jme3.light.BlendFactor#BlendFactor(C): {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.animation.SkeletonControl#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.cinematic.events.SoundEvent#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.scene.shape.Line#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.animation.BoneTrack#read: {[cinematic, capsule, bone, bitmap, emitter, quaternion, rotation, speed, rotate, heightfield, shader, hinge, axes, light, piston, square, collide, transmission, spatial, texture, geometry, friction, arena, bounding, velocity, shape, delta, mass, collect, volume, torque, collision, vertices, motor, ball, sphere, joints, camel, scene, calculate, radius, impulse, collidable, matrix, plane, vecf, material, hallmarks, triangle, body]}
com.jme3.shader.Shader#resetObject: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
org.dyn4j.dynamics.Settings#getLinearToleranceSquared: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
org.ode4j.ode.internal.DxMass#setCapsuleTotal: {[radius, capsule, sphere, transmission, cinematic, hallmarks, volume, mass, bitmap, velocity, bone, bounding, square, delta, emitter, calculate, torque, triangle, impulse, speed, collide, vecf, motor, light, friction, shader, collect, vertices, scene, shape, spatial, heightfield, joints, texture, collidable, collision, material, camel, rotation, ball, rotate, geometry, arena, body, plane, piston, quaternion, hinge, axes, matrix]}
org.dyn4j.dynamics.Settings#getMaximumTranslationSquared: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.shader.ShaderSource#getType: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.font.BitmapCharacterSet#getCharacterSet: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.scene.LightNode#isEnabled: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.shader.Glsl100ShaderGenerator#generateStartOfMainSection: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
org.dyn4j.dynamics.Settings#setMaximumTranslation: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.font.StringBlock#getVerticalAlignment: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.light.LightList#get: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.animation.Skeleton#getBoneIndex: {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
com.jme3.light.LightList#jmeClone: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.renderer.opengl.GLDebugES#glDetachShader: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.shader.ShaderNodeVariable#read: {[cinematic, bitmap, capsule, bone, shader, light, texture, emitter, square, spatial, material, heightfield, camel, vertices, delta, collide, volume, motor, vecf, scene, impulse, mass, calculate, torque, triangle, axes, rotate, quaternion, friction, transmission, hallmarks, plane, speed, collidable, rotation, radius, velocity, ball, sphere, hinge, body, collect, piston, joints, shape, matrix, collision, bounding, geometry, arena]}
com.jme3.font.BitmapCharacterSet#readCharset: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, texture, collide, delta, vertices, geometry, impulse, volume, motor, calculate, mass, spatial, quaternion, torque, friction, vecf, triangle, axes, speed, rotate, shape, transmission, radius, sphere, collision, bounding, hallmarks, material, hinge, camel, plane, ball, scene, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
org.dyn4j.geometry.Geometry#createCapsule: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.animation.Animation#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.font.Letters#getCharacterSetPage: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.animation.TrackInfo#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.renderer.RenderContext#reset: {[shader, texture, light, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, square, shape, bounding, vecf, volume, axes, collision, collide, transmission, collidable, rotate, plane, motor, mass, velocity, heightfield, triangle, rotation, quaternion, emitter, radius, collect, torque, hallmarks, hinge, impulse, sphere, piston, speed, friction, matrix, arena, joints, delta, vertices, ball, body, calculate]}
com.jme3.shadow.SpotLightShadowRenderer#write: {[bitmap, cinematic, capsule, bone, shader, light, texture, emitter, spatial, square, material, camel, scene, volume, heightfield, vertices, delta, collide, vecf, motor, impulse, mass, calculate, torque, axes, triangle, geometry, quaternion, rotate, transmission, friction, plane, speed, bounding, radius, collidable, hallmarks, sphere, rotation, velocity, ball, shape, collision, joints, matrix, piston, collect, hinge, body, arena]}
com.jme3.post.Filter#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.light.BlendFactor#toString: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.material.logic.SinglePassAndImageBasedLightingLogic#makeCurrent: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, square, shape, vecf, bounding, volume, collision, axes, collide, collidable, plane, triangle, rotate, transmission, heightfield, motor, rotation, vertices, quaternion, mass, matrix, velocity, emitter, hinge, piston, hallmarks, torque, friction, arena, collect, radius, sphere, impulse, speed, joints, delta, calculate, ball, body]}
com.jme3.effect.shapes.EmitterSphereShape#write: {[capsule, cinematic, radius, sphere, bitmap, volume, hallmarks, bone, transmission, bounding, emitter, collide, mass, velocity, square, calculate, heightfield, light, shader, shape, collect, speed, delta, texture, triangle, torque, plane, vecf, scene, impulse, piston, vertices, friction, geometry, material, camel, hinge, motor, collision, spatial, axes, collidable, arena, body, joints, matrix, quaternion, ball, rotate, rotation]}
com.jme3.light.LightList#iterator: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.light.SpotLight#computeAngleParameters: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.system.NullRenderer#deleteShaderSource: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
org.dyn4j.dynamics.Settings#setMaximumAngularCorrection: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.scene.control.LodControl#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.effect.shapes.EmitterPointShape#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.math.Vector3f#project: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.renderer.RenderManager#getLightFilter: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.light.PoiLightProbeLightFilter#PoiLightProbeLightFilter(C): {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.font.BitmapCharacter#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.export.JmeImporter#getCapsule: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.renderer.Statistics#onNewShader: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.material.logic.SinglePassAndImageBasedLightingLogic#SinglePassAndImageBasedLightingLogic(C): {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.animation.Skeleton#computeSkinningMatrices: {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
com.jme3.scene.Spatial#getWorldLightList: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.shadow.PssmShadowFilter#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.shader.ShaderGenerator#generateShader: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
org.ode4j.ode.ragdoll.DRagdollConfig#getBones: {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
org.dyn4j.dynamics.Settings#getMaximumAngularCorrectionSquared: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.renderer.RenderManager#setCamera: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.light.LightList#read: {[bitmap, cinematic, capsule, bone, shader, light, texture, emitter, spatial, square, material, camel, scene, volume, heightfield, vertices, delta, collide, vecf, motor, impulse, mass, calculate, torque, axes, triangle, geometry, quaternion, rotate, transmission, friction, plane, speed, bounding, radius, collidable, hallmarks, sphere, rotation, velocity, ball, shape, collision, joints, matrix, piston, collect, hinge, body, arena]}
com.jme3.font.BitmapCharacterSet#getCharacter: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.scene.LightNode#cloneFields: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.material.ShaderGenerationInfo#read: {[cinematic, bitmap, capsule, bone, shader, light, texture, emitter, square, spatial, material, heightfield, camel, vertices, delta, collide, volume, motor, vecf, scene, impulse, mass, calculate, torque, triangle, axes, rotate, quaternion, friction, transmission, hallmarks, plane, speed, collidable, rotation, radius, velocity, ball, sphere, hinge, body, collect, piston, joints, shape, matrix, collision, bounding, geometry, arena]}
com.jme3.shadow.SpotLightShadowFilter#SpotLightShadowFilter(C): {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.cinematic.events.AbstractCinematicEvent#pause: {[cinematic, capsule, bitmap, bone, shader, square, light, emitter, texture, vertices, delta, heightfield, spatial, mass, transmission, hallmarks, impulse, motor, quaternion, torque, collide, bounding, vecf, friction, triangle, geometry, material, camel, plane, axes, sphere, radius, calculate, rotate, collect, speed, velocity, collidable, hinge, scene, volume, ball, piston, matrix, arena, shape, body, rotation, joints, collision]}
com.jme3.shader.ShaderNodeDefinition#write: {[cinematic, bitmap, capsule, bone, shader, light, texture, emitter, square, spatial, material, heightfield, camel, vertices, delta, collide, volume, motor, vecf, scene, impulse, mass, calculate, torque, triangle, axes, rotate, quaternion, friction, transmission, hallmarks, plane, speed, collidable, rotation, radius, velocity, ball, sphere, hinge, body, collect, piston, joints, shape, matrix, collision, bounding, geometry, arena]}
com.jme3.animation.Skeleton#Skeleton(C): {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
com.jme3.texture.Image#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
net.smert.jreactphysics3d.collision.shapes.ConeShape#getLocalSupportPointWithMargin: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.font.BitmapTextPage#clone: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.material.ShaderGenerationInfo#getAttributes: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.shader.ShaderNodeDefinition#getInputs: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.shadow.DirectionalLightShadowFilter#setLight: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.shadow.DirectionalLightShadowFilter#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
net.smert.jreactphysics3d.mathematics.Vector2#isZero: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
org.ode4j.math.DQuaternion#lengthSquared: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.cinematic.events.CinematicEventListener#onStop: {[cinematic, capsule, bitmap, bone, shader, square, light, emitter, texture, vertices, delta, heightfield, spatial, mass, transmission, hallmarks, impulse, motor, quaternion, torque, collide, bounding, vecf, friction, triangle, geometry, material, camel, plane, axes, sphere, radius, calculate, rotate, collect, speed, velocity, collidable, hinge, scene, volume, ball, piston, matrix, arena, shape, body, rotation, joints, collision]}
com.jme3.asset.AssetManager#getShaderGenerator: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.texture.Texture3D#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.cinematic.MotionPath#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.math.ColorRGBA#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.renderer.Renderer#deleteShaderSource: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.system.NullRenderer#deleteShader: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.animation.Skeleton#createSkinningMatrices: {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
com.jme3.shadow.PointLightShadowRenderer#write: {[bitmap, cinematic, capsule, bone, shader, light, texture, emitter, spatial, square, material, camel, scene, volume, heightfield, vertices, delta, collide, vecf, motor, impulse, mass, calculate, torque, axes, triangle, geometry, quaternion, rotate, transmission, friction, plane, speed, bounding, radius, collidable, hallmarks, sphere, rotation, velocity, ball, shape, collision, joints, matrix, piston, collect, hinge, body, arena]}
com.jme3.shader.Glsl100ShaderGenerator#generateVaryings: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.font.BitmapCharacterSet#writeCharset: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, texture, collide, delta, vertices, geometry, impulse, volume, motor, calculate, mass, spatial, quaternion, torque, friction, vecf, triangle, axes, speed, rotate, shape, transmission, radius, sphere, collision, bounding, hallmarks, material, hinge, camel, plane, ball, scene, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
org.ode4j.math.DVector6#lengthSquared: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.light.LightProbeBlendingProcessor#populateProbe: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.light.LightList#clone: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.material.Material#read: {[bitmap, cinematic, capsule, shader, light, bone, texture, spatial, material, camel, scene, emitter, square, geometry, volume, heightfield, delta, motor, mass, vecf, impulse, torque, axes, bounding, vertices, transmission, collide, calculate, rotate, triangle, quaternion, velocity, friction, shape, plane, collidable, hallmarks, rotation, collect, collision, speed, ball, joints, sphere, piston, matrix, body, radius, hinge, arena]}
com.jme3.scene.Mesh#write: {[capsule, cinematic, bitmap, heightfield, emitter, collide, bone, collision, shape, collidable, plane, vecf, triangle, delta, volume, mass, impulse, motor, calculate, vertices, torque, friction, shader, velocity, collect, sphere, light, geometry, quaternion, spatial, hallmarks, texture, bounding, square, ball, axes, transmission, radius, hinge, body, piston, material, speed, camel, joints, rotation, arena, scene, matrix, rotate]}
com.jme3.material.TechniqueDef#read: {[shader, light, bitmap, texture, spatial, material, camel, cinematic, scene, capsule, bone, geometry, volume, emitter, bounding, square, vecf, motor, axes, shape, mass, impulse, torque, heightfield, sphere, collision, delta, calculate, radius, transmission, rotate, hallmarks, collidable, triangle, collect, velocity, joints, speed, collide, plane, hinge, rotation, piston, quaternion, ball, vertices, body, matrix, arena, friction]}
com.jme3.shader.Glsl150ShaderGenerator#Glsl150ShaderGenerator(C): {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.shadow.SpotLightShadowFilter#getLight: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.animation.SpatialTrack#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
net.smert.jreactphysics3d.mathematics.Vector2#lengthSquare: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.math.Plane#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.light.Light#Light(C): {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.shadow.AbstractShadowFilter#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.shader.Glsl100ShaderGenerator#replace: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.light.BasicProbeBlendingStrategy#registerProbe: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.system.NullRenderer#setShader: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
org.ode4j.ode.internal.DxCapsule#setParams: {[capsule, cinematic, radius, sphere, bitmap, volume, hallmarks, bone, transmission, bounding, emitter, collide, mass, velocity, square, calculate, heightfield, light, shader, shape, collect, speed, delta, texture, triangle, torque, plane, vecf, scene, impulse, piston, vertices, friction, geometry, material, camel, hinge, motor, collision, spatial, axes, collidable, arena, body, joints, matrix, quaternion, ball, rotate, rotation]}
com.jme3.animation.SkeletonControl#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.light.LightProbeBlendingProcessor#initialize: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.effect.shapes.EmitterPointShape#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.shadow.AbstractShadowRenderer#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.environment.util.LightsDebugState#cleanProbes: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.animation.BoneTrack#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, texture, collide, delta, vertices, quaternion, geometry, volume, spatial, impulse, mass, calculate, motor, torque, friction, speed, vecf, triangle, shape, transmission, radius, axes, collision, hinge, sphere, bounding, rotate, material, camel, hallmarks, arena, ball, plane, piston, scene, matrix, body, rotation, collect, collidable, joints, velocity]}
com.jme3.shader.Glsl100ShaderGenerator#declareGlobalPosition: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.shader.VariableMapping#VariableMapping(C): {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.animation.Skeleton#resetAndUpdate: {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
com.jme3.scene.Mesh#generateBindPose: {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
com.jme3.shader.VariableMapping#setLeftVariable: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.shader.ShaderNodeVariable#setShaderOutput: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.texture.Texture2D#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
org.ode4j.ode.internal.CollideCapsuleSphere#dCollideCapsuleSphere: {[collide, sphere, volume, heightfield, shape, hallmarks, radius, emitter, capsule, plane, bounding, collision, collidable, cinematic, square, vecf, vertices, transmission, triangle, calculate, bone, bitmap, collect, motor, impulse, material, axes, camel, ball, mass, scene, velocity, delta, light, friction, piston, hinge, geometry, torque, rotation, spatial, quaternion, joints, shader, rotate, texture, arena, body, matrix, speed]}
net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex#computeDeterminants: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.environment.LightProbeFactory#generatePbrMaps: {[shader, texture, light, material, camel, spatial, scene, geometry, bitmap, bone, cinematic, bounding, capsule, volume, square, shape, vecf, collision, axes, collide, collidable, transmission, emitter, motor, plane, rotate, heightfield, mass, velocity, triangle, quaternion, hinge, torque, collect, rotation, matrix, impulse, friction, piston, joints, radius, speed, arena, sphere, delta, hallmarks, ball, body, vertices, calculate]}
com.jme3.shader.Glsl100ShaderGenerator#declareVarying: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.material.TechniqueDef#addShaderUnmappedDefine: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.asset.TextureKey#write: {[cinematic, bitmap, capsule, bone, shader, light, texture, emitter, square, spatial, material, camel, heightfield, scene, volume, delta, collide, vertices, motor, impulse, mass, torque, vecf, calculate, axes, quaternion, friction, triangle, transmission, rotate, geometry, speed, radius, hallmarks, plane, sphere, velocity, bounding, rotation, ball, collidable, collect, joints, hinge, arena, body, collision, piston, shape, matrix]}
com.jme3.cinematic.Cinematic#removeCinematicEvent: {[cinematic, capsule, bitmap, bone, shader, square, light, emitter, texture, vertices, delta, heightfield, spatial, mass, transmission, hallmarks, impulse, motor, quaternion, torque, collide, bounding, vecf, friction, triangle, geometry, material, camel, plane, axes, sphere, radius, calculate, rotate, collect, speed, velocity, collidable, hinge, scene, volume, ball, piston, matrix, arena, shape, body, rotation, joints, collision]}
com.jme3.math.Vector2f#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
org.ode4j.ode.internal.ragdoll.DxRagdollJointConfig#getBone2: {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
com.jme3.effect.influencers.NewtonianParticleInfluencer#read: {[bone, capsule, cinematic, quaternion, bitmap, rotation, emitter, speed, rotate, axes, velocity, hinge, piston, motor, impulse, light, shader, mass, delta, arena, hallmarks, spatial, collidable, radius, joints, heightfield, collect, vecf, volume, triangle, texture, torque, geometry, collide, plane, calculate, ball, vertices, shape, scene, collision, bounding, sphere, camel, material, friction, body, transmission, matrix, square]}
org.ode4j.math.DVector3#lengthSquared: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.math.Triangle#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.light.LightList#update: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.light.LightProbeBlendingProcessor#postQueue: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.light.AmbientLight#AmbientLight(C): {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.shadow.DirectionalLightShadowRenderer#read: {[bitmap, cinematic, capsule, bone, shader, light, texture, emitter, spatial, square, material, camel, scene, volume, heightfield, vertices, delta, collide, vecf, motor, impulse, mass, calculate, torque, axes, triangle, geometry, quaternion, rotate, transmission, friction, plane, speed, bounding, radius, collidable, hallmarks, sphere, rotation, velocity, ball, shape, collision, joints, matrix, piston, collect, hinge, body, arena]}
com.jme3.math.Line#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.texture.Texture#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
org.ode4j.ode.internal.DxGimpactCollision#IntersectCapsuleTri: {[capsule, cinematic, radius, sphere, bitmap, volume, hallmarks, bone, transmission, bounding, emitter, collide, mass, velocity, square, calculate, heightfield, light, shader, shape, collect, speed, delta, texture, triangle, torque, plane, vecf, scene, impulse, piston, vertices, friction, geometry, material, camel, hinge, motor, collision, spatial, axes, collidable, arena, body, joints, matrix, quaternion, ball, rotate, rotation]}
com.jme3.effect.shapes.EmitterMeshVertexShape#read: {[capsule, cinematic, bitmap, bone, emitter, heightfield, collide, shape, shader, collision, volume, light, delta, collidable, plane, texture, impulse, mass, triangle, vecf, spatial, motor, torque, friction, quaternion, sphere, calculate, vertices, square, hallmarks, bounding, radius, velocity, arena, camel, transmission, collect, scene, geometry, material, axes, matrix, speed, hinge, rotation, piston, rotate, ball, joints, body]}
com.jme3.scene.Spatial#getLocalLightList: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.math.Transform#write: {[cinematic, capsule, bone, bitmap, emitter, quaternion, rotation, speed, rotate, heightfield, shader, hinge, axes, piston, light, square, collide, transmission, spatial, geometry, texture, friction, arena, bounding, velocity, shape, delta, mass, collect, torque, volume, vertices, collision, ball, sphere, motor, scene, joints, camel, calculate, impulse, radius, collidable, material, plane, matrix, vecf, hallmarks, triangle, body]}
com.jme3.animation.Bone#read: {[cinematic, capsule, bone, bitmap, emitter, quaternion, rotation, speed, rotate, heightfield, shader, hinge, axes, light, piston, square, collide, transmission, spatial, texture, geometry, friction, arena, bounding, velocity, shape, delta, mass, collect, volume, torque, collision, vertices, motor, ball, sphere, joints, camel, scene, calculate, radius, impulse, collidable, matrix, plane, vecf, material, hallmarks, triangle, body]}
com.jme3.cinematic.events.AbstractCinematicEvent#initEvent: {[cinematic, capsule, bitmap, bone, shader, square, light, emitter, texture, vertices, delta, heightfield, spatial, mass, transmission, hallmarks, impulse, motor, quaternion, torque, collide, bounding, vecf, friction, triangle, geometry, material, camel, plane, axes, sphere, radius, calculate, rotate, collect, speed, velocity, collidable, hinge, scene, volume, ball, piston, matrix, arena, shape, body, rotation, joints, collision]}
com.jme3.material.TechniqueDef#getFragmentShaderName: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.math.Vector2f#lengthSquared: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.shader.ShaderNodeDefinition#setInputs: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.bounding.BoundingVolume#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.animation.Skeleton#recreateBoneStructure: {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
com.jme3.font.BitmapText#setVerticalAlignment: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.animation.BoneTrack#getTargetBoneIndex: {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
com.jme3.animation.Skeleton#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, texture, collide, delta, vertices, quaternion, geometry, volume, spatial, impulse, mass, calculate, motor, torque, friction, speed, vecf, triangle, shape, transmission, radius, axes, collision, hinge, sphere, bounding, rotate, material, camel, hallmarks, arena, ball, plane, piston, scene, matrix, body, rotation, collect, collidable, joints, velocity]}
com.jme3.animation.AnimControl#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.light.PointLight#write: {[capsule, cinematic, radius, sphere, bitmap, volume, hallmarks, bone, transmission, bounding, emitter, collide, mass, velocity, square, calculate, heightfield, light, shader, shape, collect, speed, delta, texture, triangle, torque, plane, vecf, scene, impulse, piston, vertices, friction, geometry, material, camel, hinge, motor, collision, spatial, axes, collidable, arena, body, joints, matrix, quaternion, ball, rotate, rotation]}
com.jme3.light.SpotLight#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.material.RenderState#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.system.NullRenderer#setLighting: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.effect.influencers.DefaultParticleInfluencer#read: {[capsule, cinematic, bitmap, bone, emitter, shader, light, vertices, speed, square, texture, triangle, vecf, quaternion, radius, heightfield, velocity, collide, geometry, volume, calculate, hinge, sphere, collidable, plane, piston, rotation, spatial, scene, joints, transmission, body, ball, collision, collect, mass, rotate, hallmarks, matrix, delta, bounding, shape, motor, torque, friction, impulse, axes, arena, camel, material]}
com.jme3.scene.Mesh#isAnimated: {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
com.jme3.scene.LightNode#setLight: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.renderer.opengl.GLRenderer#updateShaderData: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.scene.Node#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.cinematic.events.AnimationEvent#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.shader.ShaderNodeDefinition#setType: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.audio.AudioKey#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
org.ode4j.ode.internal.DxGimpact#dGeomTriMeshIsTCEnabled: {[capsule, cinematic, bitmap, bone, emitter, collide, heightfield, shader, volume, light, radius, sphere, texture, calculate, shape, hallmarks, bounding, delta, collision, motor, geometry, impulse, transmission, plane, square, spatial, collect, collidable, vertices, friction, torque, quaternion, speed, rotate, axes, velocity, scene, mass, ball, piston, rotation, triangle, arena, vecf, matrix, material, camel, hinge, body, joints]}
com.jme3.material.TechniqueDef#setShaderNodes: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.effect.ParticleEmitter#write: {[capsule, emitter, cinematic, bone, bitmap, heightfield, collide, shape, collision, quaternion, plane, collidable, volume, vecf, triangle, axes, vertices, rotate, hallmarks, rotation, sphere, speed, piston, hinge, calculate, radius, spatial, shader, light, bounding, delta, friction, mass, texture, impulse, joints, geometry, torque, arena, collect, body, ball, matrix, square, velocity, motor, material, transmission, scene, camel]}
com.jme3.font.BitmapFont#getLineWidth: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.shader.ShaderSource#createDestructableClone: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.shader.Glsl100ShaderGenerator#getAppendableNameSpace: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.scene.LightNode#getControlDir: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.light.DirectionalLight#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
org.ode4j.ode.internal.CollideConvexCapsule#dCollideConvexCapsule: {[capsule, cinematic, bitmap, bone, emitter, heightfield, collide, shader, shape, collision, volume, delta, light, calculate, collidable, impulse, motor, plane, mass, torque, square, geometry, sphere, texture, friction, vecf, triangle, collect, radius, quaternion, spatial, velocity, hallmarks, bounding, rotate, ball, scene, transmission, rotation, material, camel, arena, vertices, hinge, matrix, axes, speed, body, piston, joints]}
com.jme3.material.TechniqueDef#setLightMode: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.material.TechniqueDef#TechniqueDef(C): {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.shader.VariableMapping#setRightVariable: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
org.ode4j.ode.internal.CollideCapsuleBox#dColliderFn: {[capsule, cinematic, bitmap, bone, emitter, heightfield, collide, shader, shape, collision, volume, delta, light, calculate, collidable, impulse, motor, plane, mass, torque, square, geometry, sphere, texture, friction, vecf, triangle, collect, radius, quaternion, spatial, velocity, hallmarks, bounding, rotate, ball, scene, transmission, rotation, material, camel, arena, vertices, hinge, matrix, axes, speed, body, piston, joints]}
com.jme3.animation.SkeletonControl#applySkinningTangents: {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
com.jme3.shadow.AbstractShadowRenderer#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
org.dyn4j.geometry.Vector3#distanceSquared: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.shader.Glsl150ShaderGenerator#getLanguageAndVersion: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.math.Matrix4f#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.font.BitmapCharacter#clone: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.font.BitmapCharacterSet#addCharacter: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
net.smert.jreactphysics3d.mathematics.Vector3#lengthSquare: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.effect.influencers.DefaultParticleInfluencer#write: {[capsule, cinematic, bitmap, bone, emitter, shader, light, vertices, speed, square, texture, triangle, vecf, quaternion, radius, heightfield, velocity, collide, geometry, volume, calculate, hinge, sphere, collidable, plane, piston, rotation, spatial, scene, joints, transmission, body, ball, collision, collect, mass, rotate, hallmarks, matrix, delta, bounding, shape, motor, torque, friction, impulse, axes, arena, camel, material]}
com.jme3.cinematic.events.AbstractCinematicEvent#getListeners: {[cinematic, capsule, bitmap, bone, shader, square, light, emitter, texture, vertices, delta, heightfield, spatial, mass, transmission, hallmarks, impulse, motor, quaternion, torque, collide, bounding, vecf, friction, triangle, geometry, material, camel, plane, axes, sphere, radius, calculate, rotate, collect, speed, velocity, collidable, hinge, scene, volume, ball, piston, matrix, arena, shape, body, rotation, joints, collision]}
com.jme3.shader.Glsl100ShaderGenerator#generateDeclarativeSection: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.shadow.PointLightShadowFilter#getLight: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.font.Letters#isPrintable: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.math.Rectangle#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.shader.Shader#addSource: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.scene.Mesh#read: {[capsule, cinematic, heightfield, collide, emitter, bitmap, collision, shape, bone, collidable, plane, triangle, vecf, volume, vertices, calculate, delta, sphere, impulse, motor, bounding, collect, mass, hallmarks, shader, torque, light, friction, texture, spatial, radius, velocity, axes, quaternion, ball, scene, geometry, speed, body, camel, matrix, material, hinge, rotation, joints, piston, square, arena, rotate, transmission]}
com.jme3.animation.AnimChannel#addBone: {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
org.ode4j.ode.internal.gimpact.GimTrimeshCapsuleCollision#CALC_CAPSULE_AABB: {[capsule, radius, cinematic, sphere, bitmap, volume, hallmarks, transmission, bone, bounding, emitter, collide, calculate, mass, square, velocity, heightfield, shape, light, shader, collect, plane, delta, texture, speed, torque, scene, triangle, vecf, impulse, friction, piston, collision, collidable, geometry, vertices, camel, spatial, material, quaternion, hinge, ball, joints, rotate, motor, axes, rotation, arena, matrix, body]}
com.jme3.light.LightProbe#write: {[capsule, cinematic, bitmap, bone, emitter, volume, collide, heightfield, sphere, radius, shader, light, hallmarks, bounding, texture, calculate, shape, plane, transmission, collision, collect, collidable, motor, spatial, impulse, delta, friction, torque, material, camel, velocity, rotate, piston, speed, axes, rotation, quaternion, geometry, ball, triangle, hinge, scene, vecf, arena, matrix, body, vertices, joints, mass, square]}
com.jme3.app.StatsAppState#loadFpsText: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
org.ode4j.ode.internal.DxCapsule#dCreateCapsule: {[capsule, cinematic, radius, sphere, bitmap, volume, hallmarks, bone, transmission, bounding, emitter, collide, mass, velocity, square, calculate, heightfield, light, shader, shape, collect, speed, delta, texture, triangle, torque, plane, vecf, scene, impulse, piston, vertices, friction, geometry, material, camel, hinge, motor, collision, spatial, axes, collidable, arena, body, joints, matrix, quaternion, ball, rotate, rotation]}
com.jme3.cinematic.events.AbstractCinematicEvent#removeListener: {[cinematic, capsule, bitmap, bone, shader, square, light, emitter, texture, vertices, delta, heightfield, spatial, mass, transmission, hallmarks, impulse, motor, quaternion, torque, collide, bounding, vecf, friction, triangle, geometry, material, camel, plane, axes, sphere, radius, calculate, rotate, collect, speed, velocity, collidable, hinge, scene, volume, ball, piston, matrix, arena, shape, body, rotation, joints, collision]}
com.jme3.shadow.DirectionalLightShadowRenderer#getLight: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.bounding.BoundingVolume#distanceSquaredTo: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.bounding.BoundingSphere#write: {[capsule, cinematic, radius, sphere, bitmap, volume, hallmarks, bone, transmission, bounding, emitter, collide, mass, velocity, square, calculate, heightfield, light, shader, shape, collect, speed, delta, texture, triangle, torque, plane, vecf, scene, impulse, piston, vertices, friction, geometry, material, camel, hinge, motor, collision, spatial, axes, collidable, arena, body, joints, matrix, quaternion, ball, rotate, rotation]}
org.dyn4j.dynamics.Settings#getWarmStartDistanceSquared: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.font.BitmapCharacterSet#setStyle: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.renderer.RenderManager#getSinglePassLightBatchSize: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
org.ode4j.ode.internal.CollideConvexCapsule#dColliderFn: {[capsule, cinematic, bitmap, bone, emitter, heightfield, collide, shader, shape, collision, volume, delta, light, calculate, collidable, impulse, motor, plane, mass, torque, square, geometry, sphere, texture, friction, vecf, triangle, collect, radius, quaternion, spatial, velocity, hallmarks, bounding, rotate, ball, scene, transmission, rotation, material, camel, arena, vertices, hinge, matrix, axes, speed, body, piston, joints]}
com.jme3.animation.SkeletonControl#resetToBind: {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
org.ode4j.ode.internal.CollideRayCapsule#dColliderFn: {[capsule, cinematic, bitmap, bone, emitter, heightfield, collide, shader, shape, collision, volume, delta, light, calculate, collidable, impulse, motor, plane, mass, torque, square, geometry, sphere, texture, friction, vecf, triangle, collect, radius, quaternion, spatial, velocity, hallmarks, bounding, rotate, ball, scene, transmission, rotation, material, camel, arena, vertices, hinge, matrix, axes, speed, body, piston, joints]}
com.jme3.shader.ShaderGenerator#ShaderGenerator(C): {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.texture.TextureCubeMap#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.math.LineSegment#distanceSquared: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.effect.shapes.EmitterBoxShape#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.material.MatParamTexture#write: {[cinematic, bitmap, capsule, bone, shader, light, texture, emitter, square, spatial, material, camel, heightfield, scene, volume, delta, collide, vertices, motor, impulse, mass, torque, vecf, calculate, axes, quaternion, friction, triangle, transmission, rotate, geometry, speed, radius, hallmarks, plane, sphere, velocity, bounding, rotation, ball, collidable, collect, joints, hinge, arena, body, collision, piston, shape, matrix]}
com.jme3.light.LightList#write: {[bitmap, cinematic, capsule, bone, shader, light, texture, emitter, spatial, square, material, camel, scene, volume, heightfield, vertices, delta, collide, vecf, motor, impulse, mass, calculate, torque, axes, triangle, geometry, quaternion, rotate, transmission, friction, plane, speed, bounding, radius, collidable, hallmarks, sphere, rotation, velocity, ball, shape, collision, joints, matrix, piston, collect, hinge, body, arena]}
com.jme3.renderer.opengl.GLDebugES#glCreateShader: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.shader.Glsl100ShaderGenerator#updateDefinesName: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.scene.LightNode#getLight: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.collision.bih.BIHTree#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.animation.Skeleton#getBoneCount: {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
com.jme3.font.Kerning#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.scene.control.CameraControl#read: {[bitmap, cinematic, capsule, bone, shader, light, texture, emitter, spatial, material, camel, square, scene, heightfield, volume, delta, mass, collide, impulse, quaternion, motor, geometry, torque, transmission, friction, speed, calculate, velocity, vertices, bounding, collect, collision, vecf, arena, axes, hinge, shape, piston, matrix, hallmarks, rotation, joints, collidable, ball, sphere, plane, rotate, body, radius, triangle]}
com.jme3.shadow.DirectionalLightShadowFilter#DirectionalLightShadowFilter(C): {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.scene.control.BillboardControl#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.font.BitmapText#clone: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.shader.ShaderGenerator#generateStartOfMainSection: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.shadow.SpotLightShadowFilter#setLight: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.scene.debug.SkeletonInterBoneWire#SkeletonInterBoneWire(C): {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
com.jme3.texture.Texture2D#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
org.dyn4j.geometry.Vector2#getMagnitudeSquared: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.asset.AssetKey#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.shader.Glsl100ShaderGenerator#map: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.app.StatsAppState#StatsAppState(C): {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.math.ColorRGBA#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.light.LightList#remove: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.scene.shape.Torus#write: {[capsule, cinematic, radius, sphere, bitmap, volume, hallmarks, bone, transmission, bounding, emitter, collide, mass, velocity, square, calculate, heightfield, light, shader, shape, collect, speed, delta, texture, triangle, torque, plane, vecf, scene, impulse, piston, vertices, friction, geometry, material, camel, hinge, motor, collision, spatial, axes, collidable, arena, body, joints, matrix, quaternion, ball, rotate, rotation]}
com.jme3.shader.Shader#getSources: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.shader.ShaderGenerator#generateEndOfMainSection: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.material.TechniqueDef#setShaderGenerationInfo: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.math.Vector3f#lengthSquared: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
org.dyn4j.geometry.Capsule#getFarthestFeature: {[capsule, cinematic, radius, sphere, bitmap, volume, hallmarks, bone, transmission, bounding, emitter, collide, mass, velocity, square, calculate, heightfield, light, shader, shape, collect, speed, delta, texture, triangle, torque, plane, vecf, scene, impulse, piston, vertices, friction, geometry, material, camel, hinge, motor, collision, spatial, axes, collidable, arena, body, joints, matrix, quaternion, ball, rotate, rotation]}
com.jme3.shader.VariableMapping#getLeftVariable: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.cinematic.KeyFrame#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, rotate, radius, transmission, sphere, collision, bounding, hallmarks, hinge, material, scene, plane, ball, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.cinematic.events.AbstractCinematicEvent#addListener: {[cinematic, capsule, bitmap, bone, shader, square, light, emitter, texture, vertices, delta, heightfield, spatial, mass, transmission, hallmarks, impulse, motor, quaternion, torque, collide, bounding, vecf, friction, triangle, geometry, material, camel, plane, axes, sphere, radius, calculate, rotate, collect, speed, velocity, collidable, hinge, scene, volume, ball, piston, matrix, arena, shape, body, rotation, joints, collision]}
com.jme3.renderer.opengl.GLRenderer#bindProgram: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.animation.PoseFrame#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.cinematic.Cinematic#onUpdate: {[cinematic, capsule, bitmap, bone, shader, square, light, emitter, texture, vertices, delta, heightfield, spatial, mass, transmission, hallmarks, impulse, motor, quaternion, torque, collide, bounding, vecf, friction, triangle, geometry, material, camel, plane, axes, sphere, radius, calculate, rotate, collect, speed, velocity, collidable, hinge, scene, volume, ball, piston, matrix, arena, shape, body, rotation, joints, collision]}
com.jme3.animation.Bone#addChild: {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
com.jme3.animation.PoseFrame#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.font.BitmapFont#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.material.TechniqueDef#getVertexShaderLanguage: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.font.LetterQuad#LetterQuad(C): {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.font.BitmapText#BitmapText(C): {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
org.dyn4j.dynamics.Settings#setMaximumLinearCorrection: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.scene.LightNode#setControlDir: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.texture.Texture#read: {[cinematic, bitmap, capsule, bone, shader, light, texture, emitter, square, spatial, material, camel, heightfield, scene, volume, delta, collide, vertices, motor, impulse, mass, torque, vecf, calculate, axes, quaternion, friction, triangle, transmission, rotate, geometry, speed, radius, hallmarks, plane, sphere, velocity, bounding, rotation, ball, collidable, collect, joints, hinge, arena, body, collision, piston, shape, matrix]}
com.jme3.cinematic.events.MotionEvent#read: {[bone, quaternion, rotation, rotate, emitter, cinematic, capsule, speed, bitmap, axes, hinge, piston, velocity, motor, arena, heightfield, transmission, spatial, calculate, impulse, bounding, light, collect, ball, shape, friction, shader, collide, geometry, hallmarks, joints, texture, sphere, delta, collidable, volume, camel, vertices, scene, material, square, triangle, mass, collision, vecf, radius, plane, body, torque, matrix]}
com.jme3.shader.ShaderNode#setDefinition: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.material.ShaderGenerationInfo#getFragmentGlobals: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.scene.UserData#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.math.Vector4f#lengthSquared: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.scene.control.CameraControl#write: {[bitmap, cinematic, capsule, bone, shader, light, texture, emitter, spatial, material, camel, square, scene, heightfield, volume, delta, mass, collide, impulse, quaternion, motor, geometry, torque, transmission, friction, speed, calculate, velocity, vertices, bounding, collect, collision, vecf, arena, axes, hinge, shape, piston, matrix, hallmarks, rotation, joints, collidable, ball, sphere, plane, rotate, body, radius, triangle]}
com.jme3.math.Spline#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.shader.Glsl100ShaderGenerator#Glsl100ShaderGenerator(C): {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.scene.shape.Dome#write: {[capsule, cinematic, radius, sphere, bitmap, volume, hallmarks, bone, transmission, bounding, emitter, collide, mass, velocity, square, calculate, heightfield, light, shader, shape, collect, speed, delta, texture, triangle, torque, plane, vecf, scene, impulse, piston, vertices, friction, geometry, material, camel, hinge, motor, collision, spatial, axes, collidable, arena, body, joints, matrix, quaternion, ball, rotate, rotation]}
com.jme3.math.Vector3f#projectLocal: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
org.ode4j.ode.DMass#setCapsuleTotal: {[capsule, cinematic, radius, sphere, bitmap, volume, hallmarks, bone, transmission, bounding, emitter, collide, mass, velocity, square, calculate, heightfield, light, shader, shape, collect, speed, delta, texture, triangle, torque, plane, vecf, scene, impulse, piston, vertices, friction, geometry, material, camel, hinge, motor, collision, spatial, axes, collidable, arena, body, joints, matrix, quaternion, ball, rotate, rotation]}
com.jme3.light.DirectionalLight#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.app.StatsAppState#setFont: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.shader.Glsl100ShaderGenerator#declareAttribute: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.math.Matrix4f#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
org.ode4j.ode.OdeHelper#createCapsule: {[capsule, cinematic, radius, sphere, bitmap, volume, hallmarks, bone, transmission, bounding, emitter, collide, mass, velocity, square, calculate, heightfield, light, shader, shape, collect, speed, delta, texture, triangle, torque, plane, vecf, scene, impulse, piston, vertices, friction, geometry, material, camel, hinge, motor, collision, spatial, axes, collidable, arena, body, joints, matrix, quaternion, ball, rotate, rotation]}
com.jme3.scene.control.LightControl#write: {[bitmap, cinematic, capsule, shader, light, bone, texture, spatial, material, camel, scene, emitter, square, geometry, volume, heightfield, mass, delta, motor, impulse, transmission, torque, bounding, collide, quaternion, vecf, axes, friction, velocity, calculate, vertices, collect, speed, shape, rotate, hallmarks, arena, triangle, joints, plane, collidable, hinge, ball, piston, radius, rotation, body, matrix, collision, sphere]}
com.jme3.material.Technique#applyOverrides: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
org.ode4j.ode.internal.CollideRayCapsule#dCollideRayCapsule: {[sphere, radius, capsule, volume, hallmarks, collide, bounding, cinematic, transmission, emitter, heightfield, bitmap, square, shape, calculate, bone, plane, collect, collidable, collision, mass, velocity, vertices, vecf, light, triangle, shader, piston, scene, material, camel, quaternion, hinge, spatial, matrix, delta, torque, texture, ball, rotation, motor, geometry, speed, friction, joints, arena, rotate, axes, body, impulse]}
com.jme3.font.BitmapFont#getCharacterAdvance: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.shader.ShaderNode#ShaderNode(C): {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.math.Vector2f#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.cinematic.MotionPath#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.light.LightList#add: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.material.logic.DefaultTechniqueDefLogic#makeCurrent: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, square, shape, vecf, bounding, volume, collision, axes, collide, collidable, plane, triangle, rotate, transmission, heightfield, motor, rotation, vertices, quaternion, mass, matrix, velocity, emitter, hinge, piston, hallmarks, torque, friction, arena, collect, radius, sphere, impulse, speed, joints, delta, calculate, ball, body]}
com.jme3.renderer.Camera#write: {[bone, quaternion, rotation, rotate, emitter, cinematic, capsule, speed, bitmap, axes, hinge, piston, velocity, motor, arena, heightfield, transmission, spatial, calculate, impulse, bounding, light, collect, ball, shape, friction, shader, collide, geometry, hallmarks, joints, texture, sphere, delta, collidable, volume, camel, vertices, scene, material, square, triangle, mass, collision, vecf, radius, plane, body, torque, matrix]}
com.jme3.scene.shape.Sphere#read: {[capsule, cinematic, bitmap, radius, sphere, bone, volume, hallmarks, bounding, transmission, light, emitter, shader, texture, collide, velocity, mass, calculate, square, heightfield, shape, spatial, material, camel, collect, vecf, speed, triangle, delta, geometry, plane, torque, scene, piston, friction, axes, impulse, hinge, vertices, quaternion, rotate, rotation, body, motor, arena, ball, matrix, collision, collidable, joints]}
com.jme3.asset.AssetManager#loadFont: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.scene.LightNode#write: {[bitmap, cinematic, capsule, bone, shader, light, texture, emitter, spatial, square, material, camel, scene, volume, heightfield, vertices, delta, collide, vecf, motor, impulse, mass, calculate, torque, axes, triangle, geometry, quaternion, rotate, transmission, friction, plane, speed, bounding, radius, collidable, hallmarks, sphere, rotation, velocity, ball, shape, collision, joints, matrix, piston, collect, hinge, body, arena]}
com.jme3.math.Spline#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.shadow.SpotLightShadowRenderer#getLight: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.math.Line#distance: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.shader.VariableMapping#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.scene.Spatial#updateGeometricState: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.material.logic.StaticPassLightingLogic#makeCurrent: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, square, shape, vecf, bounding, volume, collision, axes, collide, collidable, plane, triangle, rotate, transmission, heightfield, motor, rotation, vertices, quaternion, mass, matrix, velocity, emitter, hinge, piston, hallmarks, torque, friction, arena, collect, radius, sphere, impulse, speed, joints, delta, calculate, ball, body]}
net.smert.jreactphysics3d.mathematics.Quaternion#lengthSquare: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.material.TechniqueDef#isUsingShaderNodes: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.font.LetterQuad#update: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.texture.Texture3D#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.font.BitmapFont#setCharSet: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.shader.ShaderSource#deleteObject: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.scene.VertexBuffer#write: {[capsule, cinematic, bitmap, bone, emitter, shader, light, heightfield, collide, texture, volume, square, delta, calculate, radius, sphere, geometry, quaternion, vertices, impulse, motor, spatial, shape, friction, torque, mass, speed, collision, triangle, vecf, hallmarks, axes, collidable, rotate, hinge, arena, bounding, collect, plane, material, camel, scene, velocity, ball, matrix, rotation, piston, body, joints, transmission]}
com.jme3.scene.shape.Line#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.export.JmeExporter#getCapsule: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
org.dyn4j.dynamics.Settings#getMaximumLinearCorrectionSquared: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
org.ode4j.ode.internal.DxGimpact#dGeomTriMeshEnableTC: {[capsule, cinematic, bitmap, bone, emitter, collide, heightfield, shader, volume, light, radius, sphere, texture, calculate, shape, hallmarks, bounding, delta, collision, motor, geometry, impulse, transmission, plane, square, spatial, collect, collidable, vertices, friction, torque, quaternion, speed, rotate, axes, velocity, scene, mass, ball, piston, rotation, triangle, arena, vecf, matrix, material, camel, hinge, body, joints]}
com.jme3.renderer.opengl.GLRenderer#setShader: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.font.BitmapCharacter#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.math.Quaternion#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.cinematic.events.MotionEvent#initEvent: {[cinematic, capsule, bitmap, bone, shader, square, light, emitter, texture, vertices, delta, heightfield, spatial, mass, transmission, hallmarks, impulse, motor, quaternion, torque, collide, bounding, vecf, friction, triangle, geometry, material, camel, plane, axes, sphere, radius, calculate, rotate, collect, speed, velocity, collidable, hinge, scene, volume, ball, piston, matrix, arena, shape, body, rotation, joints, collision]}
com.jme3.animation.Skeleton#toString: {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
com.jme3.shader.ShaderGenerator#getLanguageAndVersion: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.effect.shapes.EmitterMeshVertexShape#write: {[capsule, cinematic, bitmap, bone, emitter, heightfield, collide, shape, shader, collision, volume, light, delta, collidable, plane, texture, impulse, mass, triangle, vecf, spatial, motor, torque, friction, quaternion, sphere, calculate, vertices, square, hallmarks, bounding, radius, velocity, arena, camel, transmission, collect, scene, geometry, material, axes, matrix, speed, hinge, rotation, piston, rotate, ball, joints, body]}
com.jme3.material.ShaderGenerationInfo#setVertexGlobal: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
org.dyn4j.collision.narrowphase.Gjk#raycast: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.light.LightList#compare: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.shader.ShaderNodeDefinition#ShaderNodeDefinition(C): {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.scene.shape.Dome#read: {[capsule, cinematic, radius, sphere, bitmap, volume, hallmarks, bone, transmission, bounding, emitter, collide, mass, velocity, square, calculate, heightfield, light, shader, shape, collect, speed, delta, texture, triangle, torque, plane, vecf, scene, impulse, piston, vertices, friction, geometry, material, camel, hinge, motor, collision, spatial, axes, collidable, arena, body, joints, matrix, quaternion, ball, rotate, rotation]}
com.jme3.scene.shape.PQTorus#read: {[capsule, cinematic, radius, sphere, bitmap, volume, hallmarks, bone, transmission, bounding, emitter, collide, mass, velocity, square, calculate, heightfield, light, shader, shape, collect, speed, delta, texture, triangle, torque, plane, vecf, scene, impulse, piston, vertices, friction, geometry, material, camel, hinge, motor, collision, spatial, axes, collidable, arena, body, joints, matrix, quaternion, ball, rotate, rotation]}
com.jme3.math.LineSegment#distance: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.cinematic.Cinematic#onPause: {[cinematic, capsule, bitmap, bone, shader, square, light, emitter, texture, vertices, delta, heightfield, spatial, mass, transmission, hallmarks, impulse, motor, quaternion, torque, collide, bounding, vecf, friction, triangle, geometry, material, camel, plane, axes, sphere, radius, calculate, rotate, collect, speed, velocity, collidable, hinge, scene, volume, ball, piston, matrix, arena, shape, body, rotation, joints, collision]}
com.jme3.math.Vector2f#length: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.material.MatParam#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.math.Matrix3f#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.shader.ShaderGenerator#findShaderIndexFromVersion: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
org.ode4j.math.DQuaternion#length: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.light.LightProbe#read: {[capsule, bitmap, cinematic, bone, shader, light, emitter, volume, texture, collide, sphere, heightfield, bounding, radius, spatial, material, hallmarks, camel, scene, calculate, shape, geometry, plane, collision, collect, transmission, motor, collidable, impulse, delta, torque, piston, rotate, axes, triangle, hinge, friction, rotation, vertices, matrix, ball, velocity, speed, joints, vecf, mass, square, quaternion, arena, body]}
com.jme3.math.Ray#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.scene.LightNode#LightNode(C): {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.effect.shapes.EmitterBoxShape#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.font.BitmapCharacterSet#BitmapCharacterSet(C): {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.renderer.opengl.GL#glGetShaderInfoLog: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.shader.ShaderNodeVariable#ShaderNodeVariable(C): {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.material.MatParamTexture#read: {[cinematic, bitmap, capsule, bone, shader, light, texture, emitter, square, spatial, material, camel, heightfield, scene, volume, delta, collide, vertices, motor, impulse, mass, torque, vecf, calculate, axes, quaternion, friction, triangle, transmission, rotate, geometry, speed, radius, hallmarks, plane, sphere, velocity, bounding, rotation, ball, collidable, collect, joints, hinge, arena, body, collision, piston, shape, matrix]}
net.smert.jreactphysics3d.collision.shapes.CapsuleShape#isEqualTo: {[collide, sphere, volume, heightfield, capsule, emitter, shape, hallmarks, radius, plane, cinematic, bounding, collision, collidable, bone, square, bitmap, vecf, transmission, vertices, triangle, calculate, collect, axes, motor, material, impulse, camel, velocity, mass, ball, light, scene, delta, geometry, rotate, friction, joints, shader, speed, torque, texture, spatial, piston, hinge, body, arena, quaternion, matrix, rotation]}
org.ode4j.ode.internal.CollideCapsuleCapsule#dColliderFn: {[capsule, cinematic, bitmap, bone, emitter, heightfield, collide, shader, shape, collision, volume, delta, light, calculate, collidable, impulse, motor, plane, mass, torque, square, geometry, sphere, texture, friction, vecf, triangle, collect, radius, quaternion, spatial, velocity, hallmarks, bounding, rotate, ball, scene, transmission, rotation, material, camel, arena, vertices, hinge, matrix, axes, speed, body, piston, joints]}
com.jme3.material.logic.SinglePassLightingLogic#SinglePassLightingLogic(C): {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.material.ShaderGenerationInfo#getVaryings: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.cinematic.events.SoundEvent#initEvent: {[cinematic, capsule, bitmap, bone, shader, square, light, emitter, texture, vertices, delta, heightfield, spatial, mass, transmission, hallmarks, impulse, motor, quaternion, torque, collide, bounding, vecf, friction, triangle, geometry, material, camel, plane, axes, sphere, radius, calculate, rotate, collect, speed, velocity, collidable, hinge, scene, volume, ball, piston, matrix, arena, shape, body, rotation, joints, collision]}
com.jme3.material.TechniqueDef#getLightSpace: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.scene.shape.AbstractBox#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.material.TechniqueDef#getShader: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.scene.CameraNode#write: {[cinematic, capsule, bitmap, bone, shader, light, emitter, texture, square, heightfield, spatial, collide, delta, volume, material, camel, vertices, impulse, motor, mass, quaternion, torque, calculate, scene, friction, vecf, transmission, triangle, axes, speed, rotate, radius, sphere, shape, hallmarks, hinge, collision, geometry, plane, velocity, arena, ball, collidable, joints, body, bounding, collect, piston, rotation, matrix]}
net.smert.jreactphysics3d.collision.shapes.ConvexMeshShape#getLocalSupportPointWithMargin: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
org.dyn4j.collision.narrowphase.Gjk#checkSimplex: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.material.TechniqueDef#getShaderProgramNames: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.shadow.SpotLightShadowRenderer#SpotLightShadowRenderer(C): {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.shader.ShaderGenerator#appendNodeDeclarationAndMain: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.scene.control.AbstractControl#write: {[bitmap, cinematic, capsule, bone, shader, light, texture, emitter, spatial, material, camel, square, scene, heightfield, volume, delta, mass, collide, impulse, quaternion, motor, geometry, torque, transmission, friction, speed, calculate, velocity, vertices, bounding, collect, collision, vecf, arena, axes, hinge, shape, piston, matrix, hallmarks, rotation, joints, collidable, ball, sphere, plane, rotate, body, radius, triangle]}
com.jme3.math.Vector3f#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.cinematic.Cinematic#addCinematicEvent: {[cinematic, capsule, bitmap, bone, shader, square, light, emitter, texture, vertices, delta, heightfield, spatial, mass, transmission, hallmarks, impulse, motor, quaternion, torque, collide, bounding, vecf, friction, triangle, geometry, material, camel, plane, axes, sphere, radius, calculate, rotate, collect, speed, velocity, collidable, hinge, scene, volume, ball, piston, matrix, arena, shape, body, rotation, joints, collision]}
org.ode4j.ode.internal.ragdoll.DxRagdoll#addBody: {[bone, velocity, speed, rotation, mass, axes, rotate, quaternion, motor, impulse, capsule, hinge, delta, radius, cinematic, piston, joints, torque, hallmarks, emitter, matrix, transmission, calculate, volume, square, friction, bitmap, sphere, collect, body, arena, bounding, ball, collide, shape, light, vecf, heightfield, triangle, shader, scene, plane, vertices, texture, camel, material, geometry, collision, collidable, spatial]}
com.jme3.renderer.opengl.GLRenderer#setVertexAttrib: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.shader.ShaderNodeDefinition#getOutputs: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.cinematic.events.AbstractCinematicEvent#play: {[cinematic, capsule, bitmap, bone, shader, square, light, emitter, texture, vertices, delta, heightfield, spatial, mass, transmission, hallmarks, impulse, motor, quaternion, torque, collide, bounding, vecf, friction, triangle, geometry, material, camel, plane, axes, sphere, radius, calculate, rotate, collect, speed, velocity, collidable, hinge, scene, volume, ball, piston, matrix, arena, shape, body, rotation, joints, collision]}
com.jme3.shader.Glsl100ShaderGenerator#comment: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.shader.Glsl100ShaderGenerator#getLanguageAndVersion: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.cinematic.events.MotionEvent#write: {[bone, cinematic, capsule, bitmap, quaternion, emitter, rotation, rotate, speed, axes, hinge, piston, velocity, shader, heightfield, light, motor, spatial, arena, collide, texture, transmission, volume, shape, friction, geometry, hallmarks, impulse, ball, collect, bounding, calculate, joints, square, collidable, camel, radius, vecf, scene, delta, mass, triangle, plane, vertices, material, body, matrix, collision, torque, sphere]}
com.jme3.scene.debug.SkeletonPoints#SkeletonPoints(C): {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex#getMaxLengthSquareOfAPoint: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.material.TechniqueDef#write: {[shader, light, bitmap, texture, spatial, material, camel, cinematic, scene, capsule, bone, geometry, volume, emitter, bounding, square, vecf, motor, axes, shape, mass, impulse, torque, heightfield, sphere, collision, delta, calculate, radius, transmission, rotate, hallmarks, collidable, triangle, collect, velocity, joints, speed, collide, plane, hinge, rotation, piston, quaternion, ball, vertices, body, matrix, arena, friction]}
com.jme3.math.Line#distanceSquared: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.audio.AudioNode#read: {[capsule, cinematic, bitmap, bone, emitter, shader, light, radius, texture, collide, heightfield, volume, speed, vertices, quaternion, sphere, velocity, calculate, vecf, triangle, square, geometry, spatial, hinge, hallmarks, transmission, rotation, piston, shape, joints, collidable, mass, ball, body, bounding, plane, scene, rotate, camel, delta, material, torque, friction, matrix, motor, axes, impulse, collision, collect, arena]}
com.jme3.material.TechniqueDef#setShaderPrologue: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.animation.SpatialTrack#read: {[cinematic, capsule, bone, bitmap, emitter, quaternion, rotation, speed, rotate, heightfield, shader, hinge, axes, piston, light, square, collide, transmission, spatial, geometry, texture, friction, arena, bounding, velocity, shape, delta, mass, collect, torque, volume, vertices, collision, ball, sphere, motor, scene, joints, camel, calculate, impulse, radius, collidable, material, plane, matrix, vecf, hallmarks, triangle, body]}
com.jme3.audio.LowPassFilter#write: {[capsule, cinematic, bitmap, bone, emitter, shader, light, heightfield, collide, texture, square, volume, delta, calculate, impulse, motor, spatial, vertices, geometry, torque, radius, mass, quaternion, sphere, shape, friction, collision, speed, axes, rotate, material, vecf, camel, triangle, collect, collidable, plane, bounding, transmission, ball, hinge, hallmarks, arena, rotation, velocity, matrix, piston, joints, body, scene]}
com.jme3.cinematic.Cinematic#clear: {[cinematic, capsule, bitmap, bone, shader, square, light, emitter, texture, vertices, delta, heightfield, spatial, mass, transmission, hallmarks, impulse, motor, quaternion, torque, collide, bounding, vecf, friction, triangle, geometry, material, camel, plane, axes, sphere, radius, calculate, rotate, collect, speed, velocity, collidable, hinge, scene, volume, ball, piston, matrix, arena, shape, body, rotation, joints, collision]}
com.jme3.audio.AudioNode#write: {[capsule, cinematic, bitmap, bone, emitter, shader, light, radius, texture, collide, heightfield, volume, speed, vertices, quaternion, sphere, velocity, calculate, vecf, triangle, square, geometry, spatial, hinge, hallmarks, transmission, rotation, piston, shape, joints, collidable, mass, ball, body, bounding, plane, scene, rotate, camel, delta, material, torque, friction, matrix, motor, axes, impulse, collision, collect, arena]}
com.jme3.shader.ShaderNodeVariable#isShaderOutput: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.renderer.RenderManager#getPreferredLightMode: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.renderer.opengl.GLDebugES#glCompileShader: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.scene.LightNode#read: {[bitmap, cinematic, capsule, bone, shader, light, texture, emitter, spatial, square, material, camel, scene, volume, heightfield, vertices, delta, collide, vecf, motor, impulse, mass, calculate, torque, axes, triangle, geometry, quaternion, rotate, transmission, friction, plane, speed, bounding, radius, collidable, hallmarks, sphere, rotation, velocity, ball, shape, collision, joints, matrix, piston, collect, hinge, body, arena]}
com.jme3.renderer.opengl.GLRenderer#deleteShaderSource: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.font.StringBlock#setVerticalAlignment: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
org.ode4j.ode.internal.CollideCapsulePlane#dColliderFn: {[capsule, cinematic, bitmap, heightfield, emitter, collide, bone, shape, collision, collidable, plane, volume, vecf, triangle, delta, calculate, impulse, motor, sphere, mass, shader, torque, collect, light, vertices, friction, hallmarks, bounding, radius, geometry, texture, velocity, quaternion, spatial, square, ball, axes, speed, matrix, material, rotate, rotation, transmission, arena, camel, scene, piston, body, hinge, joints]}
com.jme3.shader.VariableMapping#getRightVariable: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
org.dyn4j.dynamics.Settings#getAngularToleranceSquared: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
org.ode4j.ode.internal.DxGeom#dInitColliders: {[capsule, cinematic, collide, heightfield, bitmap, emitter, bone, shape, volume, collision, plane, collidable, sphere, vecf, triangle, hallmarks, calculate, radius, bounding, collect, vertices, motor, delta, impulse, shader, torque, light, friction, mass, texture, transmission, geometry, square, velocity, spatial, axes, quaternion, ball, material, rotation, speed, piston, camel, matrix, arena, hinge, rotate, scene, joints, body]}
com.jme3.shader.Glsl150ShaderGenerator#declareAttribute: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.cinematic.KeyFrame#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, rotate, radius, transmission, sphere, collision, bounding, hallmarks, hinge, material, scene, plane, ball, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.asset.AssetKey#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.renderer.RenderManager#setPreferredLightMode: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.animation.Skeleton#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, texture, collide, delta, vertices, quaternion, geometry, volume, spatial, impulse, mass, calculate, motor, torque, friction, speed, vecf, triangle, shape, transmission, radius, axes, collision, hinge, sphere, bounding, rotate, material, camel, hallmarks, arena, ball, plane, piston, scene, matrix, body, rotation, collect, collidable, joints, velocity]}
com.jme3.scene.UserData#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.scene.Spatial#forceRefresh: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.renderer.opengl.GLRenderer#resetUniformLocations: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.shader.ShaderGenerator#generateVaryings: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.post.Filter#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.math.Vector4f#distanceSquared: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.math.Matrix3f#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.cinematic.events.AbstractCinematicEvent#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, texture, collide, vertices, quaternion, geometry, speed, delta, volume, spatial, calculate, triangle, vecf, impulse, hinge, friction, mass, radius, motor, torque, shape, piston, bounding, rotation, velocity, sphere, plane, transmission, scene, collidable, collect, ball, matrix, body, joints, arena, collision, hallmarks, axes, camel, material, rotate]}
com.jme3.renderer.opengl.GLRenderer#updateUniformLocation: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
org.ode4j.ode.internal.CollideTrimeshCCylinder#dCollideCCTL: {[collide, volume, heightfield, emitter, collect, hallmarks, capsule, shape, plane, sphere, collidable, bounding, bone, radius, collision, matrix, cinematic, calculate, square, axes, triangle, vecf, quaternion, vertices, rotation, bitmap, rotate, transmission, speed, velocity, mass, hinge, joints, material, piston, light, arena, geometry, scene, friction, torque, shader, impulse, motor, camel, ball, delta, spatial, body, texture]}
com.jme3.light.LightList#next: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.shader.Shader#getUniqueId: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.shader.Glsl100ShaderGenerator#generateAttributes: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.light.SpotLight#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.shadow.SpotLightShadowRenderer#setLight: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
org.ode4j.ode.ragdoll.DRagdollJointConfig#getBone2: {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
com.jme3.effect.influencers.RadialParticleInfluencer#write: {[capsule, cinematic, bitmap, bone, emitter, shader, light, vertices, speed, square, texture, triangle, vecf, quaternion, radius, heightfield, velocity, collide, geometry, volume, calculate, hinge, sphere, collidable, plane, piston, rotation, spatial, scene, joints, transmission, body, ball, collision, collect, mass, rotate, hallmarks, matrix, delta, bounding, shape, motor, torque, friction, impulse, axes, arena, camel, material]}
com.jme3.animation.TrackInfo#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.app.StatsAppState#getFpsText: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.material.TechniqueDef#addShaderParamDefine: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.shadow.PointLightShadowFilter#setLight: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.animation.Bone#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.font.StringBlock#StringBlock(C): {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.light.SpotLight#clone: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.animation.CompactQuaternionArray#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.animation.Pose#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
net.smert.jreactphysics3d.collision.shapes.CylinderShape#getLocalSupportPointWithMargin: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.font.BitmapFont#findKerningAmount: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
org.ode4j.ode.internal.DxMass#setCapsule: {[radius, capsule, sphere, transmission, cinematic, hallmarks, volume, mass, bitmap, velocity, bone, bounding, square, delta, emitter, calculate, torque, triangle, impulse, speed, collide, vecf, motor, light, friction, shader, collect, vertices, scene, shape, spatial, heightfield, joints, texture, collidable, collision, material, camel, rotation, ball, rotate, geometry, arena, body, plane, piston, quaternion, hinge, axes, matrix]}
com.jme3.font.LetterQuad#invalidate: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.math.LineSegment#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.shader.ShaderNodeDefinition#setOutputs: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.math.Vector2f#distance: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.asset.DesktopAssetManager#setShaderGenerator: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.shader.ShaderSource#ShaderSource(C): {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.shadow.DirectionalLightShadowFilter#read: {[bitmap, cinematic, capsule, bone, shader, light, texture, emitter, spatial, square, material, camel, scene, volume, heightfield, vertices, delta, collide, vecf, motor, impulse, mass, calculate, torque, axes, triangle, geometry, quaternion, rotate, transmission, friction, plane, speed, bounding, radius, collidable, hallmarks, sphere, rotation, velocity, ball, shape, collision, joints, matrix, piston, collect, hinge, body, arena]}
com.jme3.post.FilterPostProcessor#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.scene.control.LightControl#read: {[bitmap, cinematic, capsule, shader, light, bone, texture, spatial, material, camel, scene, emitter, square, geometry, volume, heightfield, mass, delta, motor, impulse, transmission, torque, bounding, collide, quaternion, vecf, axes, friction, velocity, calculate, vertices, collect, speed, shape, rotate, hallmarks, arena, triangle, joints, plane, collidable, hinge, ball, piston, radius, rotation, body, matrix, collision, sphere]}
com.jme3.scene.control.LightControl#setLight: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.bounding.BoundingBox#distanceToEdge: {[square, radius, hallmarks, transmission, mass, sphere, delta, velocity, bitmap, bounding, cinematic, impulse, motor, torque, volume, rotate, speed, axes, capsule, friction, shader, rotation, vertices, shape, light, texture, plane, joints, piston, spatial, hinge, geometry, material, calculate, emitter, collide, collect, scene, camel, quaternion, body, ball, vecf, heightfield, collidable, bone, matrix, triangle, collision, arena]}
com.jme3.material.TechniqueDef#getShaderProgramLanguages: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.font.BitmapText#getVerticalAlignment: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.shader.Glsl150ShaderGenerator#generateEndOfMainSection: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.scene.Spatial#removeLight: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.material.TechniqueDef#getVertexShaderName: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
org.dyn4j.collision.narrowphase.Gjk#distance: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.math.Ray#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.renderer.opengl.GL#glDetachShader: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.animation.EffectTrack#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, volume, impulse, motor, quaternion, mass, calculate, spatial, torque, friction, shape, speed, triangle, vecf, radius, axes, collision, transmission, sphere, rotate, hinge, bounding, hallmarks, material, arena, scene, camel, ball, matrix, velocity, plane, piston, collidable, body, rotation, joints, collect]}
com.jme3.renderer.Camera#read: {[bone, quaternion, rotation, rotate, emitter, cinematic, capsule, speed, bitmap, axes, hinge, piston, velocity, motor, arena, heightfield, transmission, spatial, calculate, impulse, bounding, light, collect, ball, shape, friction, shader, collide, geometry, hallmarks, joints, texture, sphere, delta, collidable, volume, camel, vertices, scene, material, square, triangle, mass, collision, vecf, radius, plane, body, torque, matrix]}
org.ode4j.ode.internal.DxCapsule#DxCapsule(C): {[capsule, cinematic, radius, sphere, bitmap, volume, hallmarks, bone, transmission, bounding, emitter, collide, mass, velocity, square, calculate, heightfield, light, shader, shape, collect, speed, delta, texture, triangle, torque, plane, vecf, scene, impulse, piston, vertices, friction, geometry, material, camel, hinge, motor, collision, spatial, axes, collidable, arena, body, joints, matrix, quaternion, ball, rotate, rotation]}
com.jme3.cinematic.events.AbstractCinematicEvent#stop: {[cinematic, capsule, bitmap, bone, shader, square, light, emitter, texture, vertices, delta, heightfield, spatial, mass, transmission, hallmarks, impulse, motor, quaternion, torque, collide, bounding, vecf, friction, triangle, geometry, material, camel, plane, axes, sphere, radius, calculate, rotate, collect, speed, velocity, collidable, hinge, scene, volume, ball, piston, matrix, arena, shape, body, rotation, joints, collision]}
com.jme3.animation.AudioTrack#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.material.TechniqueDef#setLightSpace: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.effect.influencers.RadialParticleInfluencer#read: {[capsule, cinematic, bitmap, bone, emitter, shader, light, vertices, speed, square, texture, triangle, vecf, quaternion, radius, heightfield, velocity, collide, geometry, volume, calculate, hinge, sphere, collidable, plane, piston, rotation, spatial, scene, joints, transmission, body, ball, collision, collect, mass, rotate, hallmarks, matrix, delta, bounding, shape, motor, torque, friction, impulse, axes, arena, camel, material]}
com.jme3.material.logic.TechniqueDefLogic#makeCurrent: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, square, shape, vecf, bounding, volume, collision, axes, collide, collidable, plane, triangle, rotate, transmission, heightfield, motor, rotation, vertices, quaternion, mass, matrix, velocity, emitter, hinge, piston, hallmarks, torque, friction, arena, collect, radius, sphere, impulse, speed, joints, delta, calculate, ball, body]}
com.jme3.collision.bih.BIHNode#write: {[capsule, cinematic, bitmap, bone, emitter, heightfield, collide, shader, light, volume, shape, collision, delta, impulse, collidable, motor, calculate, texture, plane, mass, square, torque, friction, sphere, spatial, geometry, vecf, triangle, quaternion, collect, radius, velocity, bounding, hallmarks, transmission, ball, rotate, arena, vertices, hinge, camel, speed, material, rotation, matrix, body, axes, joints, scene, piston]}
com.jme3.renderer.RenderManager#setSinglePassLightBatchSize: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.material.TechniqueDef#getShaderNodes: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.audio.AudioKey#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.cinematic.Cinematic#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, rotate, radius, transmission, sphere, collision, bounding, hallmarks, hinge, material, scene, plane, ball, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.renderer.Renderer#deleteShader: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
org.ode4j.ode.internal.CollisionLibccd#ccdGeomToCap: {[capsule, cinematic, radius, sphere, bitmap, volume, hallmarks, bone, transmission, bounding, emitter, collide, mass, velocity, square, calculate, heightfield, light, shader, shape, collect, speed, delta, texture, triangle, torque, plane, vecf, scene, impulse, piston, vertices, friction, geometry, material, camel, hinge, motor, collision, spatial, axes, collidable, arena, body, joints, matrix, quaternion, ball, rotate, rotation]}
org.ode4j.ode.internal.gimpact.GimTrimesh#gim_trimesh_capsule_collision: {[capsule, cinematic, heightfield, bitmap, collide, emitter, bone, collision, shape, collidable, plane, vecf, triangle, delta, volume, impulse, mass, motor, calculate, vertices, torque, friction, collect, velocity, sphere, shader, geometry, light, hallmarks, bounding, quaternion, spatial, texture, square, ball, axes, transmission, radius, material, body, speed, hinge, camel, piston, rotation, joints, rotate, scene, arena, matrix]}
com.jme3.light.DirectionalLight#clone: {[shader, light, texture, material, camel, spatial, scene, geometry, bitmap, cinematic, bone, capsule, bounding, volume, shape, square, vecf, collision, axes, collide, collidable, plane, triangle, heightfield, emitter, transmission, rotate, motor, matrix, hinge, quaternion, mass, velocity, rotation, friction, piston, torque, collect, arena, vertices, joints, impulse, speed, radius, sphere, hallmarks, calculate, delta, ball, body]}
com.jme3.cinematic.events.SoundEvent#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
org.dyn4j.geometry.Capsule#Capsule(C): {[capsule, cinematic, radius, sphere, bitmap, volume, hallmarks, bone, transmission, bounding, emitter, collide, mass, velocity, square, calculate, heightfield, light, shader, shape, collect, speed, delta, texture, triangle, torque, plane, vecf, scene, impulse, piston, vertices, friction, geometry, material, camel, hinge, motor, collision, spatial, axes, collidable, arena, body, joints, matrix, quaternion, ball, rotate, rotation]}
com.jme3.app.SimpleApplication#loadGuiFont: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.cinematic.Cinematic#dispose: {[cinematic, capsule, bitmap, bone, shader, square, light, emitter, texture, vertices, delta, heightfield, spatial, mass, transmission, hallmarks, impulse, motor, quaternion, torque, collide, bounding, vecf, friction, triangle, geometry, material, camel, plane, axes, sphere, radius, calculate, rotate, collect, speed, velocity, collidable, hinge, scene, volume, ball, piston, matrix, arena, shape, body, rotation, joints, collision]}
com.jme3.asset.DesktopAssetManager#loadFont: {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.light.Light#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.scene.shape.AbstractBox#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
net.smert.jreactphysics3d.mathematics.Vector3#isUnit: {[square, hallmarks, sphere, radius, transmission, bounding, bitmap, volume, vertices, cinematic, shape, mass, plane, shader, velocity, delta, collide, axes, rotate, vecf, capsule, collidable, triangle, collision, torque, emitter, light, impulse, motor, texture, rotation, collect, heightfield, speed, material, spatial, friction, calculate, camel, geometry, scene, joints, bone, piston, quaternion, arena, hinge, matrix, ball, body]}
com.jme3.effect.influencers.NewtonianParticleInfluencer#write: {[bone, capsule, cinematic, quaternion, bitmap, rotation, emitter, speed, rotate, axes, velocity, hinge, piston, motor, impulse, light, shader, mass, delta, arena, hallmarks, spatial, collidable, radius, joints, heightfield, collect, vecf, volume, triangle, texture, torque, geometry, collide, plane, calculate, ball, vertices, shape, scene, collision, bounding, sphere, camel, material, friction, body, transmission, matrix, square]}
com.jme3.renderer.opengl.GLDebugES#glGetShaderInfoLog: {[shader, light, texture, material, camel, spatial, scene, bitmap, geometry, cinematic, bone, capsule, square, shape, vecf, collision, axes, bounding, collide, volume, plane, collidable, rotate, triangle, transmission, vertices, heightfield, hallmarks, rotation, motor, quaternion, mass, sphere, radius, velocity, arena, matrix, hinge, piston, torque, collect, impulse, friction, speed, delta, emitter, ball, joints, calculate, body]}
com.jme3.font.BitmapCharacter#BitmapCharacter(C): {[bitmap, cinematic, capsule, shader, bone, light, texture, square, spatial, material, camel, emitter, scene, mass, delta, vertices, transmission, hallmarks, vecf, motor, impulse, axes, torque, heightfield, triangle, rotate, plane, sphere, geometry, radius, velocity, shape, friction, collidable, collect, volume, quaternion, rotation, calculate, collision, bounding, collide, ball, joints, body, speed, hinge, piston, arena, matrix]}
com.jme3.animation.AnimChannel#addFromRootBone: {[bone, cinematic, bitmap, capsule, emitter, quaternion, rotation, rotate, spatial, speed, light, shader, texture, piston, axes, hinge, camel, material, scene, heightfield, collect, velocity, geometry, volume, motor, arena, shape, matrix, collide, vertices, transmission, joints, hallmarks, square, triangle, calculate, body, collision, impulse, friction, vecf, delta, plane, mass, torque, bounding, radius, collidable, sphere, ball]}
com.jme3.animation.EffectTrack#read: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, volume, impulse, motor, quaternion, mass, calculate, spatial, torque, friction, shape, speed, triangle, vecf, radius, axes, collision, transmission, sphere, rotate, hinge, bounding, hallmarks, material, arena, scene, camel, ball, matrix, velocity, plane, piston, collidable, body, rotation, joints, collect]}
com.jme3.collision.bih.BIHTree#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
com.jme3.scene.instancing.InstancedGeometry#write: {[cinematic, capsule, bitmap, bone, emitter, shader, light, square, heightfield, collide, texture, delta, vertices, geometry, impulse, volume, motor, calculate, mass, quaternion, spatial, torque, friction, triangle, vecf, axes, speed, shape, radius, rotate, transmission, sphere, collision, bounding, hallmarks, hinge, scene, material, ball, plane, camel, arena, rotation, velocity, matrix, body, collidable, piston, joints, collect]}
org.ode4j.ode.internal.CollideConvexCapsuleCCD#dColliderFn: {[capsule, cinematic, bitmap, bone, emitter, heightfield, collide, shader, shape, collision, volume, delta, light, calculate, collidable, impulse, motor, plane, mass, torque, square, geometry, sphere, texture, friction, vecf, triangle, collect, radius, quaternion, spatial, velocity, hallmarks, bounding, rotate, ball, scene, transmission, rotation, material, camel, arena, vertices, hinge, matrix, axes, speed, body, piston, joints]}
org.ode4j.ode.internal.joints.DxJointHinge2#dJointGetHinge2Axis1: {[body, ball, joints, friction, arena, torque, piston, hinge, calculate, impulse, delta, motor, speed, velocity, transmission, mass, axes, bone, collision, shape, hallmarks, rotate, collidable, bounding, radius, volume, collect, sphere, shader, bitmap, vertices, cinematic, material, texture, heightfield, capsule, emitter, light, matrix, square, spatial, scene, vecf, quaternion, camel, triangle, geometry, plane, rotation, collide]},
org.ode4j.ode.internal.joints.DxJointHinge2#dJointGetHinge2Axis2: {[body, ball, joints, friction, arena, torque, piston, hinge, calculate, impulse, delta, motor, speed, velocity, transmission, mass, axes, bone, collision, shape, hallmarks, rotate, collidable, bounding, radius, volume, collect, sphere, shader, bitmap, vertices, cinematic, material, texture, heightfield, capsule, emitter, light, matrix, square, spatial, scene, vecf, quaternion, camel, triangle, geometry, plane, rotation, collide]},
org.ode4j.ode.internal.DxBody#dBodySetTorque: {[ball, body, joints, friction, arena, torque, piston, hinge, impulse, calculate, delta, motor, transmission, velocity, mass, speed, axes, bone, shape, collision, hallmarks, collect, vertices, volume, bounding, rotate, heightfield, emitter, collidable, shader, vecf, triangle, sphere, radius, square, quaternion, material, bitmap, rotation, collide, plane, texture, cinematic, matrix, light, camel, spatial, geometry, capsule, scene]},
org.ode4j.ode.internal.DxBody#setTorque: {[ball, body, joints, friction, arena, torque, piston, hinge, impulse, calculate, delta, motor, transmission, velocity, mass, speed, axes, bone, shape, collision, hallmarks, collect, vertices, volume, bounding, rotate, heightfield, emitter, collidable, shader, vecf, triangle, sphere, radius, square, quaternion, material, bitmap, rotation, collide, plane, texture, cinematic, matrix, light, camel, spatial, geometry, capsule, scene]},
org.ode4j.ode.internal.DxBody#addTorque: {[ball, body, joints, friction, arena, torque, piston, hinge, impulse, calculate, delta, motor, transmission, velocity, mass, speed, axes, bone, shape, collision, hallmarks, collect, vertices, volume, bounding, rotate, heightfield, emitter, collidable, shader, vecf, triangle, sphere, radius, square, quaternion, material, bitmap, rotation, collide, plane, texture, cinematic, matrix, light, camel, spatial, geometry, capsule, scene]},
org.ode4j.ode.internal.joints.DxJointHinge#getInfo2: {[ball, body, arena, joints, calculate, friction, piston, hinge, collision, torque, shape, collidable, transmission, impulse, axes, plane, collide, delta, triangle, vecf, heightfield, motor, mass, speed, velocity, vertices, collect, square, volume, bone, emitter, bounding, sphere, rotation, quaternion, matrix, hallmarks, scene, rotate, capsule, geometry, material, bitmap, cinematic, camel, radius, shader, spatial, light, texture]},
org.ode4j.ode.internal.joints.DxJointHinge#getInfo1: {[body, ball, joints, friction, arena, torque, piston, hinge, calculate, impulse, delta, motor, speed, velocity, transmission, mass, axes, bone, collision, shape, hallmarks, rotate, collidable, bounding, radius, volume, collect, sphere, shader, bitmap, vertices, cinematic, material, texture, heightfield, capsule, emitter, light, matrix, square, spatial, scene, vecf, quaternion, camel, triangle, geometry, plane, rotation, collide]},
org.ode4j.ode.internal.joints.DxJointUniversal#dJointAddUniversalTorques: {[ball, body, joints, friction, arena, torque, piston, hinge, impulse, calculate, delta, motor, transmission, velocity, mass, speed, axes, bone, shape, collision, hallmarks, collect, vertices, volume, bounding, rotate, heightfield, emitter, collidable, shader, vecf, triangle, sphere, radius, square, quaternion, material, bitmap, rotation, collide, plane, texture, cinematic, matrix, light, camel, spatial, geometry, capsule, scene]},
org.ode4j.ode.internal.joints.DxJointPR#dJointAddPRTorque: {[ball, body, joints, friction, arena, torque, piston, hinge, impulse, calculate, delta, motor, transmission, velocity, mass, speed, axes, bone, shape, collision, hallmarks, collect, vertices, volume, bounding, rotate, heightfield, emitter, collidable, shader, vecf, triangle, sphere, radius, square, quaternion, material, bitmap, rotation, collide, plane, texture, cinematic, matrix, light, camel, spatial, geometry, capsule, scene]},
org.ode4j.ode.internal.joints.DxJoint#setBall2: {[ball, body, arena, joints, calculate, friction, piston, hinge, collision, torque, shape, collidable, transmission, impulse, axes, plane, collide, delta, triangle, vecf, heightfield, motor, mass, speed, velocity, vertices, collect, square, volume, bone, emitter, bounding, sphere, rotation, quaternion, matrix, hallmarks, scene, rotate, capsule, geometry, material, bitmap, cinematic, camel, radius, shader, spatial, light, texture]},
org.ode4j.ode.internal.joints.DxJointContact#getInfo2: {[ball, body, arena, joints, calculate, friction, piston, hinge, torque, collision, shape, transmission, collidable, impulse, axes, delta, plane, collide, motor, triangle, vecf, mass, heightfield, speed, velocity, vertices, square, collect, volume, bone, bounding, emitter, sphere, rotation, quaternion, matrix, hallmarks, scene, rotate, geometry, radius, material, capsule, shader, bitmap, camel, texture, spatial, cinematic, light]},
org.ode4j.ode.internal.DxBody#dBodyAddTorque: {[ball, body, joints, friction, arena, torque, piston, hinge, impulse, calculate, delta, motor, transmission, velocity, mass, speed, axes, bone, shape, collision, hallmarks, collect, vertices, volume, bounding, rotate, heightfield, emitter, collidable, shader, vecf, triangle, sphere, radius, square, quaternion, material, bitmap, rotation, collide, plane, texture, cinematic, matrix, light, camel, spatial, geometry, capsule, scene]},
org.ode4j.ode.internal.DxBody#dBodyAddRelTorque: {[ball, body, joints, friction, arena, torque, piston, hinge, impulse, calculate, delta, motor, transmission, velocity, mass, speed, axes, bone, shape, collision, hallmarks, collect, vertices, volume, bounding, rotate, heightfield, emitter, collidable, shader, vecf, triangle, sphere, radius, square, quaternion, material, bitmap, rotation, collide, plane, texture, cinematic, matrix, light, camel, spatial, geometry, capsule, scene]},
org.ode4j.ode.internal.ragdoll.DxRagdoll#setAngularDamping: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, speed, transmission, velocity, mass, axes, bone, collision, shape, collidable, hallmarks, bitmap, shader, cinematic, radius, collect, rotate, bounding, sphere, volume, capsule, material, texture, light, vertices, spatial, scene, geometry, rotation, matrix, collide, camel, plane, vecf, heightfield, quaternion, triangle, square, emitter]},
org.ode4j.ode.internal.joints.DxJointPR#getInfo1: {[body, ball, joints, friction, arena, torque, piston, hinge, calculate, impulse, delta, motor, speed, velocity, transmission, mass, axes, bone, collision, shape, hallmarks, rotate, collidable, bounding, radius, volume, collect, sphere, shader, bitmap, vertices, cinematic, material, texture, heightfield, capsule, emitter, light, matrix, square, spatial, scene, vecf, quaternion, camel, triangle, geometry, plane, rotation, collide]},
org.ode4j.ode.internal.joints.DxJointDHinge#dJointSetDHingeAxis: {[body, ball, joints, friction, arena, torque, piston, hinge, calculate, impulse, delta, motor, speed, velocity, transmission, mass, axes, bone, collision, shape, hallmarks, rotate, collidable, bounding, radius, volume, collect, sphere, shader, bitmap, vertices, cinematic, material, texture, heightfield, capsule, emitter, light, matrix, square, spatial, scene, vecf, quaternion, camel, triangle, geometry, plane, rotation, collide]},
org.ode4j.ode.internal.DxBody#addRelTorque: {[ball, body, joints, friction, arena, torque, piston, hinge, impulse, calculate, delta, motor, transmission, velocity, mass, speed, axes, bone, shape, collision, hallmarks, collect, vertices, volume, bounding, rotate, heightfield, emitter, collidable, shader, vecf, triangle, sphere, radius, square, quaternion, material, bitmap, rotation, collide, plane, texture, cinematic, matrix, light, camel, spatial, geometry, capsule, scene]},
org.ode4j.ode.internal.joints.DxJointDHinge#dJointGetDHingeAxis: {[body, ball, joints, friction, arena, torque, piston, hinge, calculate, impulse, delta, motor, speed, velocity, transmission, mass, axes, bone, collision, shape, hallmarks, rotate, collidable, bounding, radius, volume, collect, sphere, shader, bitmap, vertices, cinematic, material, texture, heightfield, capsule, emitter, light, matrix, square, spatial, scene, vecf, quaternion, camel, triangle, geometry, plane, rotation, collide]},
org.ode4j.ode.internal.DxBody#getTorque: {[ball, body, joints, friction, arena, torque, piston, hinge, impulse, calculate, delta, motor, transmission, velocity, mass, speed, axes, bone, shape, collision, hallmarks, collect, vertices, volume, bounding, rotate, heightfield, emitter, collidable, shader, vecf, triangle, sphere, radius, square, quaternion, material, bitmap, rotation, collide, plane, texture, cinematic, matrix, light, camel, spatial, geometry, capsule, scene]},
net.smert.jreactphysics3d.engine.DynamicsWorld#resetBodiesForceAndTorque: {[ball, body, joints, friction, arena, torque, piston, hinge, impulse, calculate, delta, motor, transmission, velocity, mass, speed, axes, bone, shape, collision, hallmarks, collect, vertices, volume, bounding, rotate, heightfield, emitter, collidable, shader, vecf, triangle, sphere, radius, square, quaternion, material, bitmap, rotation, collide, plane, texture, cinematic, matrix, light, camel, spatial, geometry, capsule, scene]},
org.ode4j.ode.internal.DxBody#dBodyGetTorque: {[ball, body, joints, friction, arena, torque, piston, hinge, impulse, calculate, delta, motor, transmission, velocity, mass, speed, axes, bone, shape, collision, hallmarks, collect, vertices, volume, bounding, rotate, heightfield, emitter, collidable, shader, vecf, triangle, sphere, radius, square, quaternion, material, bitmap, rotation, collide, plane, texture, cinematic, matrix, light, camel, spatial, geometry, capsule, scene]},
org.ode4j.ode.internal.joints.DxJointHinge#dJointGetHingeAngle: {[body, ball, joints, friction, arena, torque, piston, hinge, calculate, impulse, delta, motor, speed, velocity, transmission, mass, axes, bone, collision, shape, hallmarks, rotate, collidable, bounding, radius, volume, collect, sphere, shader, bitmap, vertices, cinematic, material, texture, heightfield, capsule, emitter, light, matrix, square, spatial, scene, vecf, quaternion, camel, triangle, geometry, plane, rotation, collide]},
org.ode4j.ode.internal.joints.DxJointPR#dJointGetPRAngle: {[body, ball, joints, friction, arena, torque, piston, hinge, calculate, impulse, delta, motor, speed, velocity, transmission, mass, axes, bone, collision, shape, hallmarks, rotate, collidable, bounding, radius, volume, collect, sphere, shader, bitmap, vertices, cinematic, material, texture, heightfield, capsule, emitter, light, matrix, square, spatial, scene, vecf, quaternion, camel, triangle, geometry, plane, rotation, collide]},
net.smert.jreactphysics3d.collision.broadphase.BodyPair#setBody2: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]},
org.dyn4j.geometry.Capsule#rotate: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]},
org.dyn4j.geometry.Geometry#getCounterClockwiseEdgeNormals: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]},
org.ode4j.ode.internal.joints.DxJointHinge2#dJointGetHinge2Anchor2: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]},
org.ode4j.ode.ragdoll.DRagdollJointConfig#getBone: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]},
net.smert.jreactphysics3d.engine.DynamicsWorld#addContactManifoldToBody: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]},
com.jme3.animation.EffectTrack#setUserData: {[emitter, heightfield, vertices, triangle, shape, vecf, bone, collide, collision, plane, collidable, quaternion, rotate, axes, capsule, volume, rotation, hallmarks, cinematic, spatial, bitmap, arena, sphere, square, piston, bounding, friction, mass, speed, hinge, delta, impulse, torque, matrix, scene, texture, camel, radius, geometry, light, transmission, motor, ball, shader, material, velocity, body, collect, joints, calculate]},
org.dyn4j.dynamics.joint.PrismaticJoint#setLimitsEnabled: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]},
org.ode4j.ode.internal.gimpact.GimTrimesh#gim_trimesh_get_triangle_data: {[triangle, vecf, vertices, collision, plane, collidable, heightfield, shape, collide, emitter, volume, mass, hallmarks, bounding, square, impulse, delta, velocity, axes, motor, collect, torque, sphere, friction, shader, calculate, rotate, spatial, bitmap, scene, speed, cinematic, geometry, light, quaternion, arena, capsule, transmission, rotation, bone, piston, texture, camel, radius, ball, matrix, joints, material, body, hinge]},
com.jme3.shadow.DirectionalLightShadowRenderer#DirectionalLightShadowRenderer(C): {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]},
com.jme3.effect.shapes.EmitterMeshVertexShape#getRandomPointAndNormal: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]},
org.ode4j.ode.internal.DxConvex#GetSupportSide: {[vertices, triangle, vecf, plane, collidable, collision, heightfield, shape, collide, emitter, scene, volume, spatial, bounding, geometry, camel, material, hallmarks, texture, mass, impulse, velocity, motor, square, sphere, light, delta, collect, axes, torque, shader, calculate, speed, bone, friction, rotate, cinematic, capsule, ball, transmission, piston, body, arena, radius, quaternion, rotation, hinge, matrix, joints, bitmap]},
org.ode4j.ode.internal.DxHeightfield#allocatePlaneBuffer: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]},
org.ode4j.ode.internal.DxMass#setBox: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]},
com.jme3.scene.shape.Cylinder#write: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]},
org.ode4j.ode.OdeMath#dMULTIPLY0_331: {[matrix, collect, calculate, arena, speed, collidable, emitter, volume, piston, bounding, velocity, torque, vertices, bone, collide, mass, heightfield, rotate, plane, motor, impulse, delta, vecf, friction, transmission, shader, joints, light, rotation, hinge, camel, spatial, material, collision, triangle, axes, square, shape, quaternion, cinematic, scene, radius, ball, texture, hallmarks, capsule, body, bitmap, geometry, sphere]},
org.ode4j.ode.internal.joints.DxJointUniversal#getLimot1: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]},
org.dyn4j.collision.broadphase.Sap#update: {[vecf, collision, collidable, triangle, plane, shape, heightfield, collide, vertices, emitter, volume, hallmarks, square, collect, sphere, bounding, calculate, axes, impulse, delta, motor, mass, shader, velocity, light, torque, material, texture, friction, radius, camel, speed, ball, rotate, bitmap, bone, piston, body, quaternion, joints, transmission, geometry, capsule, cinematic, hinge, matrix, scene, rotation, spatial, arena]},
org.dyn4j.dynamics.joint.RevoluteJoint#getMotorTorque: {[delta, mass, velocity, motor, impulse, torque, speed, heightfield, friction, triangle, vecf, collidable, transmission, collision, collide, plane, hinge, rotate, piston, rotation, joints, vertices, square, radius, axes, body, shape, quaternion, bitmap, cinematic, arena, emitter, collect, ball, capsule, hallmarks, spatial, scene, bone, texture, shader, sphere, volume, light, material, camel, geometry, bounding, matrix, calculate]},
org.dyn4j.dynamics.joint.PrismaticJoint#toString: {[motor, velocity, speed, delta, impulse, mass, rotate, rotation, torque, quaternion, piston, hinge, axes, collidable, heightfield, friction, triangle, vecf, collision, collide, plane, joints, bone, transmission, collect, square, body, radius, vertices, shape, hallmarks, calculate, scene, bitmap, volume, shader, texture, bounding, ball, matrix, material, cinematic, light, capsule, spatial, arena, emitter, camel, sphere, geometry]},
org.ode4j.ode.internal.DxTriMesh#FetchTriangleCount: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]},
com.jme3.effect.shapes.EmitterMeshConvexHullShape#EmitterMeshConvexHullShape(C): {[vecf, shape, collision, triangle, heightfield, plane, collide, collidable, vertices, emitter, volume, hallmarks, square, sphere, axes, bounding, collect, shader, calculate, impulse, delta, rotate, mass, light, motor, material, bone, radius, texture, friction, quaternion, torque, camel, velocity, piston, capsule, rotation, ball, hinge, transmission, joints, body, geometry, bitmap, arena, matrix, scene, cinematic, speed, spatial]},
org.ode4j.ode.internal.CollideSphereSphere#dCollideSphereSphere: {[sphere, hallmarks, collide, square, shape, plane, volume, radius, bounding, collidable, heightfield, collision, vertices, vecf, triangle, transmission, emitter, collect, calculate, shader, axes, mass, material, camel, texture, light, bitmap, spatial, capsule, quaternion, motor, velocity, hinge, ball, piston, rotate, scene, impulse, bone, speed, geometry, cinematic, delta, joints, rotation, torque, matrix, friction, body, arena]},
org.ode4j.ode.internal.CollideCylinderTrimesh#dColliderFn: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]},
org.ode4j.ode.OdeHelper#spaceCollide2: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]},
org.ode4j.ode.internal.gimpact.GimGeometry#OUTER_PRODUCT_3X3: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]},
com.jme3.util.mikktspace.MikktspaceTangentGenerator#generateSharedVerticesIndexListSlow: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]},
org.dyn4j.collision.broadphase.Sap#raycast: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]},
org.dyn4j.dynamics.Body#getMass: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]},
org.ode4j.ode.internal.DxCollisionUtil#dClipEdgeToPlane: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]},
org.ode4j.ode.internal.joints.DxJointAMotor#setMode: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]},
com.jme3.util.TangentBinormalGenerator#generate: {[scene, spatial, geometry, camel, material, vertices, texture, triangle, light, shader, bounding, plane, vecf, volume, emitter, collidable, collision, heightfield, shape, hallmarks, collide, bone, mass, velocity, impulse, motor, torque, axes, square, sphere, rotate, delta, bitmap, transmission, capsule, arena, rotation, friction, cinematic, quaternion, speed, piston, collect, matrix, joints, hinge, calculate, radius, ball, body]},
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_CROSS: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]},
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_COPY: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]},
org.ode4j.ode.internal.DxMass#adjust: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]},
org.dyn4j.geometry.Segment#getVertexIterator: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]},
org.dyn4j.geometry.Mass#getInertia: {[mass, velocity, delta, impulse, motor, transmission, torque, radius, triangle, speed, vecf, friction, heightfield, square, collidable, collision, hallmarks, sphere, plane, collide, vertices, rotate, rotation, joints, hinge, piston, spatial, shape, bitmap, axes, scene, body, emitter, cinematic, bounding, arena, texture, ball, quaternion, shader, material, camel, capsule, collect, volume, light, bone, calculate, geometry, matrix]},
org.dyn4j.dynamics.joint.Joint#isCollisionAllowed: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]},
net.smert.jreactphysics3d.body.RigidBody#applyForce: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]},
org.ode4j.ode.internal.joints.DxJointLMotor#dJointSetLMotorParam: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]},
com.jme3.effect.shapes.EmitterPointShape#EmitterPointShape(C): {[vecf, shape, collision, triangle, heightfield, plane, collide, collidable, vertices, emitter, volume, hallmarks, square, sphere, axes, bounding, collect, shader, calculate, impulse, delta, rotate, mass, light, motor, material, bone, radius, texture, friction, quaternion, torque, camel, velocity, piston, capsule, rotation, ball, hinge, transmission, joints, body, geometry, bitmap, arena, matrix, scene, cinematic, speed, spatial]},
net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleComparison#compare: {[vertices, vecf, triangle, plane, collision, collidable, shape, heightfield, collide, emitter, square, hallmarks, volume, bounding, sphere, axes, collect, bitmap, shader, cinematic, rotate, impulse, mass, motor, radius, calculate, delta, capsule, velocity, torque, light, friction, geometry, rotation, quaternion, scene, texture, arena, spatial, piston, speed, transmission, material, bone, matrix, ball, hinge, camel, joints, body]},
org.ode4j.ode.internal.DxGimpact#dGeomTriMeshSetData: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]},
com.jme3.shadow.PointLightShadowFilter#write: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]},
org.dyn4j.geometry.Ellipse#rotate: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]},
org.dyn4j.geometry.Slice#getFarthestFeature: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]},
com.jme3.effect.ParticleEmitter#oldClone: {[triangle, vertices, vecf, plane, collidable, collision, heightfield, shape, collide, emitter, spatial, scene, volume, geometry, bounding, camel, mass, material, texture, impulse, velocity, motor, delta, hallmarks, light, torque, axes, collect, shader, sphere, bone, square, friction, calculate, speed, transmission, rotate, quaternion, bitmap, arena, piston, ball, rotation, radius, body, joints, cinematic, capsule, matrix, hinge]},
org.dyn4j.dynamics.joint.RevoluteJoint#getMaximumMotorTorque: {[velocity, delta, motor, mass, impulse, torque, speed, heightfield, friction, triangle, collidable, transmission, vecf, collision, hinge, collide, piston, rotate, rotation, plane, joints, axes, square, vertices, radius, body, quaternion, shape, collect, bitmap, cinematic, ball, arena, capsule, hallmarks, scene, emitter, spatial, bone, shader, texture, volume, light, sphere, material, camel, matrix, bounding, calculate, geometry]},
org.dyn4j.geometry.Segment#getAxes: {[vertices, triangle, vecf, plane, shape, square, collision, collidable, hallmarks, collide, emitter, heightfield, volume, bounding, sphere, axes, rotate, bitmap, cinematic, radius, rotation, shader, capsule, quaternion, geometry, collect, transmission, piston, light, arena, scene, spatial, speed, hinge, calculate, bone, texture, matrix, friction, joints, velocity, camel, impulse, material, delta, torque, motor, body, mass, ball]},
org.ode4j.ode.internal.DxSAPSpace#collide2: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]},
net.smert.jreactphysics3d.engine.OverlappingPair#getBody1: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
net.smert.jreactphysics3d.engine.OverlappingPair#getBody2: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
org.dyn4j.geometry.Triangle#contains: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.ode4j.ode.internal.DxMass#add: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
org.ode4j.ode.DAMotorJoint#from: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.dyn4j.dynamics.Settings#getRestitutionVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
net.smert.jreactphysics3d.collision.shapes.SphereShape#clone: {[plane, collision, vecf, shape, collidable, collide, heightfield, triangle, vertices, emitter, volume, hallmarks, sphere, square, bounding, collect, calculate, motor, impulse, radius, axes, shader, delta, mass, velocity, light, torque, transmission, material, speed, texture, friction, ball, camel, bitmap, rotate, bone, capsule, body, joints, cinematic, rotation, piston, quaternion, spatial, geometry, hinge, arena, matrix, scene]}
org.ode4j.ode.internal.DxHeightfieldData#setBounds: {[heightfield, collision, vecf, collide, collidable, triangle, plane, shape, vertices, emitter, delta, volume, impulse, mass, motor, collect, velocity, torque, calculate, bounding, friction, hallmarks, sphere, capsule, axes, cinematic, speed, bone, square, bitmap, shader, material, transmission, light, quaternion, geometry, camel, matrix, texture, spatial, rotate, ball, arena, radius, joints, hinge, scene, rotation, body, piston]}
com.jme3.audio.Listener#Listener(C): {[collision, ball, shape, collidable, body, calculate, joints, vecf, triangle, plane, arena, heightfield, collide, piston, vertices, hinge, axes, friction, emitter, torque, transmission, volume, square, collect, speed, bone, impulse, bounding, sphere, light, hallmarks, motor, delta, shader, rotate, camel, velocity, texture, material, radius, rotation, capsule, mass, geometry, cinematic, spatial, scene, matrix, bitmap, quaternion]}
org.dyn4j.collision.broadphase.BroadphaseItem#hashCode: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
com.jme3.bounding.BoundingVolume#whichSide: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.ode4j.ode.internal.gimpact.GimAABBSet#GIM_CONVERT_VEC3F_GUINT_XZ_CLAMPED: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
com.jme3.collision.bih.BIHTriangle#BIHTriangle(C): {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.CollideSpaceGeom#space_geom_collider: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.ode4j.ode.internal.gimpact.GimTrimeshTrimeshCol#gim_triangle_triangle_collision: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, volume, mass, impulse, delta, hallmarks, bounding, velocity, motor, square, axes, collect, torque, sphere, friction, calculate, shader, speed, rotate, spatial, scene, light, bitmap, cinematic, quaternion, transmission, bone, geometry, ball, piston, arena, texture, capsule, material, rotation, body, matrix, hinge, radius, joints, camel]}
org.ode4j.ode.internal.DxGeom#dGeomGetCollideBits: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.ode4j.ode.internal.DxMass#dMassAdd: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
com.jme3.renderer.opengl.GLDebugES#glFramebufferTexture2DEXT: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.ode4j.ode.DPRJoint#addTorque: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
org.ode4j.ode.DBody#addRelTorque: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
com.jme3.scene.debug.WireBox#makeGeometry: {[velocity, motor, delta, impulse, speed, mass, torque, rotate, rotation, piston, hinge, heightfield, friction, collidable, triangle, vecf, axes, quaternion, transmission, collision, collide, joints, plane, square, collect, body, bone, radius, vertices, shape, hallmarks, bitmap, ball, scene, cinematic, shader, arena, volume, texture, matrix, spatial, capsule, material, light, calculate, bounding, sphere, camel, emitter, geometry]}
org.ode4j.ode.internal.joints.DxJointPlane2D#dJointSetPlane2DAngleParam: {[shape, vertices, plane, vecf, triangle, collision, collidable, square, collide, heightfield, hallmarks, emitter, axes, volume, sphere, bounding, rotate, radius, collect, rotation, calculate, bitmap, shader, transmission, piston, quaternion, cinematic, hinge, joints, light, speed, texture, bone, body, ball, velocity, capsule, material, mass, delta, geometry, motor, torque, matrix, impulse, friction, arena, camel, scene, spatial]}
com.jme3.input.InputManager#invokeUpdateActions: {[mass, delta, velocity, impulse, motor, torque, transmission, heightfield, friction, speed, vecf, triangle, collidable, collision, radius, square, collide, plane, rotate, joints, hinge, rotation, piston, hallmarks, cinematic, vertices, bitmap, shape, sphere, body, capsule, axes, emitter, arena, ball, collect, geometry, bounding, quaternion, spatial, scene, shader, texture, bone, matrix, calculate, volume, camel, light, material]}
org.dyn4j.geometry.Slice#translate: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
net.smert.jreactphysics3d.collision.CollisionDetection#removeNoCollisionPair: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
com.jme3.collision.bih.BIHTree#getTriangle: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
net.smert.jreactphysics3d.engine.ContactSolver#computeFriction2Impulse: {[mass, delta, velocity, impulse, motor, torque, heightfield, speed, friction, transmission, vecf, triangle, collidable, collision, collide, plane, joints, hinge, radius, square, piston, vertices, rotate, rotation, shape, body, axes, emitter, arena, bitmap, cinematic, ball, capsule, hallmarks, quaternion, collect, sphere, spatial, scene, geometry, texture, shader, bone, volume, bounding, calculate, light, matrix, material, camel]}
com.jme3.cinematic.MotionPath#disableDebugShape: {[vecf, shape, collision, triangle, plane, heightfield, collidable, collide, vertices, emitter, volume, hallmarks, square, sphere, bounding, axes, collect, shader, calculate, light, impulse, material, delta, texture, motor, mass, radius, camel, rotate, velocity, torque, friction, bone, ball, bitmap, piston, quaternion, transmission, geometry, joints, body, hinge, scene, rotation, capsule, speed, spatial, matrix, arena, cinematic]}
org.dyn4j.collision.broadphase.AbstractBroadphaseDetector#update: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.ode4j.ode.internal.joints.DxJointAMotor#getAxis: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_INV_LENGTH_4: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.gimpact.GimGeometry#MAT_DOT_VEC_3X4: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.dyn4j.collision.broadphase.BroadphaseItem#BroadphaseItem(C): {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.gimpact.GimGeometry#MAT_DOT_VEC_3X3: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.ode4j.ode.internal.joints.DxJoint#setAxes: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.CollideRayCylinder_ODE_0_12#dColliderFn: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.dyn4j.geometry.Ellipse#Ellipse(C): {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.dyn4j.geometry.decompose.DoubleEdgeList#hertelMehlhorn: {[vertices, triangle, vecf, plane, shape, collidable, collision, heightfield, collide, emitter, hallmarks, square, volume, bounding, sphere, axes, rotate, geometry, radius, cinematic, bitmap, scene, spatial, collect, impulse, rotation, arena, capsule, friction, motor, quaternion, shader, mass, torque, camel, delta, calculate, bone, transmission, velocity, matrix, piston, material, light, body, texture, joints, ball, hinge, speed]}
com.jme3.scene.Geometry#write: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.dyn4j.geometry.HalfEllipse#HalfEllipse(C): {[vertices, triangle, vecf, plane, shape, collidable, collision, heightfield, collide, emitter, hallmarks, square, volume, bounding, sphere, axes, rotate, geometry, radius, cinematic, bitmap, scene, spatial, collect, impulse, rotation, arena, capsule, friction, motor, quaternion, shader, mass, torque, camel, delta, calculate, bone, transmission, velocity, matrix, piston, material, light, body, texture, joints, ball, hinge, speed]}
org.dyn4j.geometry.Mass#toString: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
com.jme3.light.PointLight#intersectsSphere: {[vecf, shape, collision, triangle, heightfield, plane, collide, collidable, vertices, emitter, volume, hallmarks, square, sphere, axes, bounding, collect, shader, calculate, impulse, delta, rotate, mass, light, motor, material, bone, radius, texture, friction, quaternion, torque, camel, velocity, piston, capsule, rotation, ball, hinge, transmission, joints, body, geometry, bitmap, arena, matrix, scene, cinematic, speed, spatial]}
org.ode4j.ode.DBody#setTorque: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
org.dyn4j.collision.broadphase.DynamicAABBTreeLeaf#hashCode: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
net.smert.jreactphysics3d.engine.Material#getFrictionCoefficient: {[mass, friction, delta, torque, impulse, transmission, velocity, motor, arena, joints, body, heightfield, vecf, ball, triangle, emitter, speed, vertices, collide, calculate, collision, collidable, hinge, plane, radius, piston, shape, square, cinematic, capsule, quaternion, geometry, sphere, bitmap, bounding, material, hallmarks, shader, light, axes, spatial, matrix, texture, camel, bone, collect, rotation, scene, rotate, volume]}
org.dyn4j.dynamics.BodyFixture#setFriction: {[mass, friction, delta, torque, impulse, transmission, velocity, motor, arena, joints, body, heightfield, vecf, ball, triangle, emitter, speed, vertices, collide, calculate, collision, collidable, hinge, plane, radius, piston, shape, square, cinematic, capsule, quaternion, geometry, sphere, bitmap, bounding, material, hallmarks, shader, light, axes, spatial, matrix, texture, camel, bone, collect, rotation, scene, rotate, volume]}
org.ode4j.ode.internal.DxSimpleSpace#collide2: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.ode4j.ode.internal.gimpact.GimContact#GIM_CALC_KEY_CONTACT: {[vecf, collision, collidable, triangle, plane, heightfield, shape, collide, vertices, emitter, collect, volume, calculate, bounding, delta, motor, impulse, mass, velocity, hallmarks, square, sphere, axes, torque, shader, speed, light, friction, ball, texture, bitmap, material, matrix, camel, body, cinematic, arena, joints, rotation, radius, rotate, piston, scene, geometry, capsule, spatial, hinge, quaternion, transmission, bone]}
com.jme3.collision.bih.TriangleAxisComparator#compare: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.DxGeom#getCollideBits: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.dyn4j.geometry.Link#translate: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.ode4j.ode.DGeom#getBody: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
com.jme3.scene.mesh.VirtualIndexBuffer#VirtualIndexBuffer(C): {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.joints.OdeJointsFactoryImpl#dJointCreateAMotor: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
net.smert.jreactphysics3d.constraint.HingeJoint#computeCurrentHingeAngle: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
com.jme3.scene.Mesh#cloneFields: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
org.dyn4j.collision.broadphase.DynamicAABBTree#detect: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, collect, impulse, motor, velocity, calculate, bounding, hallmarks, torque, sphere, square, axes, shader, friction, speed, light, ball, material, texture, camel, body, bitmap, bone, rotate, transmission, piston, geometry, rotation, joints, capsule, matrix, spatial, scene, quaternion, arena, hinge, cinematic, radius]}
com.jme3.bounding.BoundingSphere#collideWithTri: {[plane, shape, collide, collidable, vertices, collision, vecf, heightfield, hallmarks, sphere, triangle, square, volume, bounding, emitter, radius, collect, transmission, calculate, axes, shader, bitmap, light, material, motor, texture, impulse, rotate, camel, cinematic, speed, ball, friction, delta, geometry, bone, torque, spatial, hinge, capsule, joints, quaternion, arena, mass, rotation, scene, velocity, piston, body, matrix]}
org.ode4j.ode.internal.DxHeightfield#getHeightfieldData: {[heightfield, collision, vecf, collide, collidable, triangle, plane, shape, vertices, emitter, delta, volume, impulse, mass, motor, collect, velocity, torque, calculate, bounding, friction, hallmarks, sphere, capsule, axes, cinematic, speed, bone, square, bitmap, shader, material, transmission, light, quaternion, geometry, camel, matrix, texture, spatial, rotate, ball, arena, radius, joints, hinge, scene, rotation, body, piston]}
net.smert.jreactphysics3d.engine.CollisionWorld#getBodies: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
org.ode4j.ode.internal.DxBody#addRelForceAtPos: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.dyn4j.geometry.AbstractShape#getRadius: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
com.jme3.util.TriangleData#TriangleData(C): {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
com.jme3.scene.shape.StripBox#duUpdateGeometryVertices: {[vertices, triangle, scene, geometry, spatial, plane, vecf, camel, collidable, material, collision, bounding, volume, emitter, texture, heightfield, shape, collide, light, hallmarks, square, shader, sphere, mass, axes, impulse, velocity, motor, rotate, capsule, cinematic, torque, bone, delta, collect, friction, arena, rotation, speed, radius, calculate, quaternion, piston, matrix, transmission, joints, bitmap, hinge, body, ball]}
org.ode4j.ode.internal.gimpact.GimGeometry#TRANSPOSE_MATRIX_2X2: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.math.DMatrixN#subEq: {[shape, collision, ball, body, joints, calculate, collidable, piston, plane, vecf, collide, triangle, hinge, arena, axes, heightfield, vertices, friction, transmission, torque, emitter, square, speed, impulse, volume, hallmarks, delta, sphere, motor, velocity, bone, rotate, mass, bounding, shader, collect, light, texture, radius, material, camel, quaternion, bitmap, rotation, scene, spatial, geometry, capsule, cinematic, matrix]}
org.dyn4j.dynamics.Torque#toString: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
com.jme3.cinematic.events.MotionEvent#setRotation: {[mass, delta, velocity, impulse, motor, torque, speed, heightfield, triangle, vecf, friction, collidable, transmission, collision, collide, plane, hinge, joints, rotate, rotation, piston, vertices, radius, square, shape, axes, body, emitter, bitmap, arena, quaternion, cinematic, ball, capsule, hallmarks, collect, spatial, scene, sphere, texture, bone, volume, shader, light, material, geometry, matrix, camel, calculate, bounding]}
org.dyn4j.geometry.Mass#Mass(C): {[mass, velocity, delta, impulse, motor, transmission, torque, radius, triangle, speed, vecf, friction, heightfield, square, collidable, collision, hallmarks, sphere, plane, collide, vertices, rotate, rotation, joints, hinge, piston, spatial, shape, bitmap, axes, scene, body, emitter, cinematic, bounding, arena, texture, ball, quaternion, shader, material, camel, capsule, collect, volume, light, bone, calculate, geometry, matrix]}
org.ode4j.ode.internal.DxHeightfield#setHeightfieldData: {[heightfield, collision, vecf, collide, collidable, triangle, plane, shape, vertices, emitter, delta, volume, impulse, mass, motor, collect, velocity, torque, calculate, bounding, friction, hallmarks, sphere, capsule, axes, cinematic, speed, bone, square, bitmap, shader, material, transmission, light, quaternion, geometry, camel, matrix, texture, spatial, rotate, ball, arena, radius, joints, hinge, scene, rotation, body, piston]}
org.ode4j.ode.internal.gimpact.GimTrimesh#gim_trimesh_update_aabbset: {[triangle, vecf, vertices, collision, plane, collidable, heightfield, shape, collide, emitter, volume, mass, impulse, hallmarks, delta, square, bounding, axes, velocity, motor, torque, friction, sphere, collect, rotate, spatial, shader, scene, bitmap, cinematic, calculate, speed, quaternion, geometry, arena, capsule, light, transmission, rotation, piston, bone, matrix, camel, texture, joints, ball, hinge, body, material, radius]}
org.ode4j.ode.internal.libccd.CCDPolyTope#ccdPtAddVertex: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
com.jme3.effect.shapes.EmitterMeshFaceShape#getRandomPointAndNormal: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
com.jme3.collision.bih.BIHTree#sortTriangles: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
com.jme3.animation.Bone#setUserTransformsInModelSpace: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
org.dyn4j.geometry.Triangle#Triangle(C): {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.DxHeightfieldData#dGeomHeightfieldDataBuildDouble: {[heightfield, collision, vecf, collide, collidable, triangle, plane, shape, vertices, emitter, delta, volume, impulse, mass, motor, collect, velocity, torque, calculate, bounding, friction, hallmarks, sphere, capsule, axes, cinematic, speed, bone, square, bitmap, shader, material, transmission, light, quaternion, geometry, camel, matrix, texture, spatial, rotate, ball, arena, radius, joints, hinge, scene, rotation, body, piston]}
com.jme3.input.event.MouseMotionEvent#getDeltaWheel: {[mass, delta, velocity, impulse, motor, torque, transmission, heightfield, friction, speed, vecf, triangle, collidable, collision, radius, square, collide, plane, rotate, joints, hinge, rotation, piston, hallmarks, cinematic, vertices, bitmap, shape, sphere, body, capsule, axes, emitter, arena, ball, collect, geometry, bounding, quaternion, spatial, scene, shader, texture, bone, matrix, calculate, volume, camel, light, material]}
org.ode4j.ode.internal.joints.DxJointAMotor#getParamVel: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.internal.gimpact.GimTrimeshRayCollision#gim_trimesh_ray_collision: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, volume, mass, impulse, delta, hallmarks, bounding, motor, velocity, square, collect, axes, torque, sphere, friction, calculate, shader, speed, rotate, light, bitmap, spatial, scene, cinematic, quaternion, transmission, texture, bone, ball, geometry, arena, piston, material, capsule, rotation, radius, body, camel, matrix, hinge, joints]}
org.ode4j.ode.internal.DxGeom#dGeomSetCollideBits: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
com.jme3.collision.bih.BIHNode#intersectWhere: {[collidable, plane, heightfield, collision, triangle, collide, vecf, collect, shape, vertices, volume, calculate, bounding, matrix, emitter, hallmarks, motor, velocity, delta, sphere, impulse, torque, square, speed, mass, axes, scene, arena, friction, spatial, geometry, camel, ball, radius, piston, material, cinematic, hinge, transmission, bitmap, shader, texture, joints, body, rotate, light, capsule, rotation, quaternion, bone]}
org.dyn4j.dynamics.joint.AngleJoint#getReactionTorque: {[mass, delta, velocity, impulse, motor, torque, speed, heightfield, friction, triangle, transmission, vecf, collidable, collision, collide, plane, joints, hinge, piston, vertices, radius, rotate, square, rotation, body, shape, axes, arena, emitter, bitmap, ball, cinematic, capsule, quaternion, hallmarks, collect, spatial, scene, sphere, texture, shader, volume, bone, light, material, camel, calculate, geometry, bounding, matrix]}
org.dyn4j.collision.AbstractCollidable#equals: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.ode4j.ode.internal.gimpact.GimGeometry#PLANE_MINOR_AXES: {[vecf, triangle, collision, vertices, collidable, plane, shape, heightfield, collide, emitter, volume, hallmarks, square, axes, bounding, collect, mass, sphere, impulse, delta, shader, motor, velocity, torque, rotate, calculate, friction, light, bitmap, quaternion, texture, cinematic, rotation, material, piston, speed, bone, spatial, arena, capsule, scene, radius, hinge, ball, camel, transmission, geometry, body, joints, matrix]}
com.jme3.renderer.Renderer#modifyTexture: {[vecf, triangle, collision, vertices, collidable, plane, heightfield, shape, collide, emitter, volume, mass, impulse, delta, hallmarks, axes, bounding, square, velocity, motor, torque, collect, sphere, friction, calculate, shader, rotate, spatial, speed, light, quaternion, scene, bitmap, bone, transmission, arena, piston, cinematic, rotation, texture, geometry, ball, material, capsule, hinge, matrix, body, radius, camel, joints]}
com.jme3.effect.ParticleEmitterControl#cloneFields: {[emitter, heightfield, vertices, triangle, shape, vecf, bone, collide, collision, plane, collidable, quaternion, rotate, axes, capsule, volume, rotation, hallmarks, cinematic, spatial, bitmap, arena, sphere, square, piston, bounding, friction, mass, speed, hinge, delta, impulse, torque, matrix, scene, texture, camel, radius, geometry, light, transmission, motor, ball, shader, material, velocity, body, collect, joints, calculate]}
com.jme3.renderer.opengl.GLRenderer#convertElementMode: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.dyn4j.geometry.decompose.Bayazit#decomposePolygon: {[geometry, scene, spatial, camel, vertices, material, bounding, texture, volume, hallmarks, light, triangle, plane, square, shader, sphere, vecf, emitter, collidable, shape, collision, cinematic, radius, capsule, heightfield, collide, rotate, axes, bone, transmission, rotation, arena, bitmap, delta, collect, matrix, piston, friction, quaternion, speed, calculate, motor, joints, impulse, hinge, mass, ball, torque, body, velocity]}
com.jme3.effect.influencers.RadialParticleInfluencer#applyVelocityVariation: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.ode4j.ode.internal.gimpact.GimGeometry#AABB_GET_MAX: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
com.jme3.scene.debug.SkeletonWire#writeConnections: {[triangle, vecf, vertices, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, mass, impulse, sphere, delta, collect, velocity, motor, torque, rotate, friction, spatial, scene, calculate, bitmap, shader, quaternion, cinematic, geometry, rotation, capsule, arena, bone, speed, piston, light, transmission, camel, radius, hinge, ball, texture, matrix, material, joints, body]}
org.ode4j.ode.DBody#getMass: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
org.ode4j.ode.OdeMath#dMultiply0_133: {[collect, matrix, calculate, collidable, emitter, collide, volume, plane, heightfield, arena, vertices, bounding, vecf, shape, collision, triangle, speed, bone, torque, velocity, piston, mass, shader, hallmarks, square, sphere, impulse, motor, light, material, camel, delta, friction, rotate, axes, spatial, capsule, transmission, radius, cinematic, texture, joints, geometry, ball, hinge, scene, rotation, bitmap, quaternion, body]}
net.smert.jreactphysics3d.collision.broadphase.NoBroadPhaseAlgorithm#addObject: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
org.dyn4j.dynamics.joint.PinJoint#isCollisionAllowed: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
net.smert.jreactphysics3d.collision.shapes.CylinderShape#CylinderShape(C): {[sphere, hallmarks, square, collide, shape, plane, radius, volume, bounding, vertices, collidable, collision, heightfield, vecf, triangle, transmission, emitter, collect, calculate, shader, axes, mass, material, bitmap, light, texture, camel, velocity, spatial, rotate, cinematic, quaternion, capsule, delta, ball, scene, bone, torque, joints, geometry, hinge, motor, piston, friction, impulse, body, speed, rotation, arena, matrix]}
org.dyn4j.collision.broadphase.DynamicAABBTree#raycast: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.dyn4j.geometry.decompose.MonotonePolygon#getMaximum: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.dyn4j.collision.Collidable#addFixture: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.ode4j.ode.internal.gimpact.GimTrimesh#gim_trimesh_create_from_data: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_PARALLEL: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.dyn4j.dynamics.joint.FrictionJoint#getReactionTorque: {[mass, delta, velocity, impulse, motor, torque, speed, heightfield, friction, triangle, transmission, vecf, collidable, collision, collide, plane, joints, hinge, piston, vertices, radius, rotate, square, rotation, body, shape, axes, arena, emitter, bitmap, ball, cinematic, capsule, quaternion, hallmarks, collect, spatial, scene, sphere, texture, shader, volume, bone, light, material, camel, calculate, geometry, bounding, matrix]}
com.jme3.math.Transform#interpolateTransforms: {[mass, delta, velocity, impulse, motor, torque, transmission, heightfield, friction, speed, vecf, triangle, collidable, collision, radius, square, collide, plane, rotate, joints, hinge, rotation, piston, hallmarks, cinematic, vertices, bitmap, shape, sphere, body, capsule, axes, emitter, arena, ball, collect, geometry, bounding, quaternion, spatial, scene, shader, texture, bone, matrix, calculate, volume, camel, light, material]}
org.dyn4j.collision.broadphase.AbstractBroadphaseDetector#getAABB: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.ode4j.ode.OdeHelper#spaceCollide: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.dyn4j.collision.broadphase.AbstractBroadphaseDetector#remove: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
com.jme3.renderer.opengl.GLRenderer#convertWrapMode: {[mass, delta, velocity, impulse, motor, torque, speed, heightfield, friction, triangle, transmission, vecf, collidable, collision, collide, plane, joints, hinge, piston, vertices, radius, rotate, square, rotation, body, shape, axes, arena, emitter, bitmap, ball, cinematic, capsule, quaternion, hallmarks, collect, spatial, scene, sphere, texture, shader, volume, bone, light, material, camel, calculate, geometry, bounding, matrix]}
org.dyn4j.collision.broadphase.BroadphasePair#hashCode: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_COPY_4: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_COPY_2: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.DxWorld#dWorldImpulseToForce: {[mass, delta, velocity, impulse, motor, torque, speed, heightfield, triangle, vecf, friction, collidable, transmission, collision, collide, plane, hinge, joints, rotate, rotation, piston, vertices, radius, square, shape, axes, body, emitter, bitmap, arena, quaternion, cinematic, ball, capsule, hallmarks, collect, spatial, scene, sphere, texture, bone, volume, shader, light, material, geometry, matrix, camel, calculate, bounding]}
org.dyn4j.geometry.Mass#setType: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
org.dyn4j.dynamics.joint.DistanceJoint#getReactionForce: {[mass, delta, velocity, impulse, motor, torque, speed, heightfield, triangle, vecf, friction, collidable, transmission, collision, collide, plane, hinge, joints, rotate, rotation, piston, vertices, radius, square, shape, axes, body, emitter, bitmap, arena, quaternion, cinematic, ball, capsule, hallmarks, collect, spatial, scene, sphere, texture, bone, volume, shader, light, material, geometry, matrix, camel, calculate, bounding]}
com.jme3.effect.ParticleEmitter#setFacingVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
net.smert.jreactphysics3d.collision.CollisionDetection#addBody: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
net.smert.jreactphysics3d.engine.ContactSolver#setIsSolveFrictionAtContactManifoldCenterActive: {[mass, friction, delta, torque, impulse, transmission, velocity, motor, arena, joints, body, heightfield, vecf, ball, triangle, emitter, speed, vertices, collide, calculate, collision, collidable, hinge, plane, radius, piston, shape, square, cinematic, capsule, quaternion, geometry, sphere, bitmap, bounding, material, hallmarks, shader, light, axes, spatial, matrix, texture, camel, bone, collect, rotation, scene, rotate, volume]}
net.smert.jreactphysics3d.collision.CollisionDetection#addNoCollisionPair: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
org.dyn4j.dynamics.TimeOfImpactListener#collision: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
org.ode4j.ode.internal.joints.DxJointAMotor#getAngleRate: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.internal.gimpact.GimGeometry#COMPUTEAABB_FOR_TRIANGLE: {[vecf, triangle, collision, vertices, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, delta, volume, velocity, motor, torque, axes, hallmarks, bounding, square, collect, friction, sphere, shader, speed, calculate, rotate, transmission, bitmap, light, spatial, scene, cinematic, quaternion, arena, capsule, texture, geometry, piston, bone, rotation, radius, material, ball, joints, matrix, hinge, body, camel]}
com.jme3.effect.shapes.EmitterShape#deepClone: {[vecf, shape, collision, triangle, heightfield, plane, collide, collidable, vertices, emitter, volume, hallmarks, square, sphere, axes, bounding, collect, shader, calculate, impulse, delta, rotate, mass, light, motor, material, bone, radius, texture, friction, quaternion, torque, camel, velocity, piston, capsule, rotation, ball, hinge, transmission, joints, body, geometry, bitmap, arena, matrix, scene, cinematic, speed, spatial]}
com.jme3.renderer.Camera#setGuiBounding: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.dyn4j.dynamics.BodyFixture#getFriction: {[mass, friction, delta, torque, impulse, transmission, velocity, motor, arena, joints, body, heightfield, vecf, ball, triangle, emitter, speed, vertices, collide, calculate, collision, collidable, hinge, plane, radius, piston, shape, square, cinematic, capsule, quaternion, geometry, sphere, bitmap, bounding, material, hallmarks, shader, light, axes, spatial, matrix, texture, camel, bone, collect, rotation, scene, rotate, volume]}
com.jme3.scene.Mesh#createCollisionData: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.internal.joints.DxJointAMotor#getAngle: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
com.jme3.audio.AudioNode#isVelocityFromTranslation: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.ode4j.ode.internal.DxMass#setBoxTotal: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
org.ode4j.ode.internal.OdeInit#AllocateODEDataForThreadForMode: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
net.smert.jreactphysics3d.collision.narrowphase.GJK.GJKAlgorithm#testCollision: {[mass, delta, velocity, impulse, motor, torque, speed, heightfield, triangle, vecf, friction, collidable, transmission, collision, collide, plane, hinge, joints, rotate, rotation, piston, vertices, radius, square, shape, axes, body, emitter, bitmap, arena, quaternion, cinematic, ball, capsule, hallmarks, collect, spatial, scene, sphere, texture, bone, volume, shader, light, material, geometry, matrix, camel, calculate, bounding]}
org.ode4j.ode.internal.gimpact.GimGeometry#OUTER_PRODUCT_4X4: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.gimpact.GimTrimeshTrimeshCol#gim_trimesh_plane_collision: {[vecf, triangle, collision, collidable, plane, vertices, heightfield, shape, collide, emitter, volume, hallmarks, mass, bounding, impulse, square, delta, collect, motor, velocity, sphere, axes, torque, calculate, friction, shader, speed, light, bitmap, rotate, spatial, cinematic, scene, texture, ball, quaternion, material, bone, piston, arena, geometry, transmission, radius, capsule, camel, body, rotation, hinge, matrix, joints]}
net.smert.jreactphysics3d.constraint.SliderJoint#isMotorEnabled: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.internal.gimpact.GimContact#getPoint: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.sCylinderTrimeshColliderData#_cldClipCylinderToTriangle: {[sphere, hallmarks, square, volume, bounding, radius, plane, collide, shape, vertices, collidable, collision, heightfield, vecf, triangle, transmission, emitter, collect, calculate, axes, bitmap, mass, shader, geometry, cinematic, rotate, velocity, hinge, light, material, delta, texture, quaternion, piston, motor, camel, arena, spatial, bone, torque, body, impulse, rotation, speed, scene, ball, capsule, joints, matrix, friction]}
org.dyn4j.dynamics.joint.FrictionJoint#setMaximumTorque: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
org.ode4j.ode.OdeHelper#collide: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.ode4j.ode.internal.DxTrimeshHeightfield#dCollideHeightfieldZone: {[vecf, triangle, vertices, collision, plane, collidable, heightfield, shape, collide, emitter, volume, hallmarks, bounding, mass, impulse, square, delta, motor, sphere, collect, velocity, axes, torque, friction, calculate, shader, rotate, spatial, speed, scene, bitmap, quaternion, geometry, bone, light, arena, cinematic, radius, transmission, rotation, piston, texture, ball, capsule, joints, material, camel, matrix, body, hinge]}
com.jme3.collision.bih.BIHNode#setLeftPlane: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
com.jme3.animation.EffectTrack#clone: {[emitter, heightfield, vertices, triangle, shape, vecf, bone, collide, collision, plane, collidable, quaternion, rotate, axes, capsule, volume, rotation, hallmarks, cinematic, spatial, bitmap, arena, sphere, square, piston, bounding, friction, mass, speed, hinge, delta, impulse, torque, matrix, scene, texture, camel, radius, geometry, light, transmission, motor, ball, shader, material, velocity, body, collect, joints, calculate]}
org.dyn4j.dynamics.joint.FrictionJoint#getReactionForce: {[mass, delta, velocity, impulse, motor, torque, speed, heightfield, triangle, vecf, friction, collidable, transmission, collision, collide, plane, hinge, joints, rotate, rotation, piston, vertices, radius, square, shape, axes, body, emitter, bitmap, arena, quaternion, cinematic, ball, capsule, hallmarks, collect, spatial, scene, sphere, texture, bone, volume, shader, light, material, geometry, matrix, camel, calculate, bounding]}
org.dyn4j.dynamics.contact.ContactConstraintSolver#solveVelocityContraints: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.dyn4j.collision.broadphase.BroadphaseDetector#contains: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.ode4j.ode.internal.DxTrimeshHeightfield#DxTrimeshHeightfield(C): {[triangle, vecf, collision, vertices, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, delta, volume, velocity, motor, torque, bounding, axes, hallmarks, collect, friction, square, sphere, spatial, speed, calculate, scene, transmission, shader, rotate, bitmap, quaternion, geometry, cinematic, light, arena, bone, capsule, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.joints.DxJointLMotor#getParamVel: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
net.smert.jreactphysics3d.body.RigidBody#RigidBody(C): {[ball, body, joints, friction, calculate, arena, piston, torque, transmission, hinge, shape, axes, delta, collision, impulse, velocity, square, collidable, mass, speed, motor, plane, vertices, collide, volume, hallmarks, bounding, triangle, sphere, vecf, emitter, heightfield, bone, rotate, radius, geometry, scene, spatial, collect, material, camel, rotation, texture, light, quaternion, shader, cinematic, bitmap, matrix, capsule]}
org.ode4j.ode.internal.DxMass#check: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
org.dyn4j.geometry.decompose.DoubleEdgeList#getTriangulation: {[vertices, triangle, geometry, scene, plane, spatial, vecf, collidable, bounding, camel, volume, collision, material, emitter, shape, heightfield, texture, collide, hallmarks, light, square, sphere, shader, axes, rotate, mass, cinematic, impulse, capsule, motor, velocity, bone, torque, collect, radius, delta, arena, rotation, friction, calculate, speed, quaternion, bitmap, piston, matrix, joints, hinge, body, transmission, ball]}
com.jme3.cinematic.MotionPath#enableDebugShape: {[vecf, shape, collision, triangle, plane, heightfield, collidable, collide, vertices, emitter, volume, hallmarks, square, sphere, bounding, axes, collect, shader, calculate, light, impulse, material, delta, texture, motor, mass, radius, camel, rotate, velocity, torque, friction, bone, ball, bitmap, piston, quaternion, transmission, geometry, joints, body, hinge, scene, rotation, capsule, speed, spatial, matrix, arena, cinematic]}
org.ode4j.ode.internal.DxMass#setMass: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
com.jme3.effect.influencers.DefaultParticleInfluencer#getVelocityVariation: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.dyn4j.collision.broadphase.SapProxy#compareTo: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
net.smert.jreactphysics3d.collision.broadphase.BroadPhaseAlgorithm#BroadPhaseAlgorithm(C): {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
org.ode4j.ode.internal.DxMass#toString: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
org.ode4j.ode.internal.HeightFieldPlane#resetTriangleListSize: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.DxGimpact#dGeomTriMeshGetTriangle: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.OdeHelper#createHeightfieldData: {[heightfield, collision, vecf, collide, collidable, triangle, plane, shape, vertices, emitter, delta, volume, impulse, mass, motor, collect, velocity, torque, calculate, bounding, friction, hallmarks, sphere, capsule, axes, cinematic, speed, bone, square, bitmap, shader, material, transmission, light, quaternion, geometry, camel, matrix, texture, spatial, rotate, ball, arena, radius, joints, hinge, scene, rotation, body, piston]}
org.ode4j.ode.internal.gimpact.GimAABBSet#gim_aabbset_box_collision: {[vertices, triangle, scene, geometry, plane, spatial, collidable, vecf, collision, camel, bounding, material, volume, heightfield, texture, shape, emitter, collide, light, hallmarks, shader, sphere, square, mass, motor, velocity, impulse, collect, axes, calculate, bone, torque, delta, speed, rotate, cinematic, capsule, ball, radius, friction, body, bitmap, piston, hinge, quaternion, transmission, arena, joints, matrix, rotation]}
org.dyn4j.dynamics.joint.PrismaticJoint#getMotorForce: {[delta, velocity, mass, motor, impulse, torque, speed, heightfield, triangle, vecf, friction, collidable, collision, transmission, collide, rotate, rotation, plane, hinge, piston, joints, vertices, axes, square, radius, shape, quaternion, body, bitmap, cinematic, collect, emitter, arena, capsule, ball, hallmarks, spatial, scene, bone, texture, volume, shader, sphere, light, material, camel, geometry, bounding, calculate, matrix]}
org.ode4j.ode.internal.DxGimpactData#GetVertex: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.ode4j.ode.internal.DxMass#setTrimesh: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
org.ode4j.ode.internal.DxGimpactCollision#gim_trimesh_ray_closest_collisionODE: {[vecf, triangle, collision, collidable, heightfield, plane, vertices, shape, collide, emitter, mass, volume, delta, impulse, velocity, motor, collect, torque, hallmarks, bounding, axes, square, calculate, friction, sphere, shader, speed, light, rotate, bitmap, transmission, texture, spatial, material, ball, scene, quaternion, cinematic, bone, piston, camel, arena, body, radius, capsule, hinge, geometry, rotation, matrix, joints]}
org.dyn4j.dynamics.Body#isConnected: {[collision, ball, shape, collidable, body, calculate, joints, vecf, triangle, plane, arena, heightfield, collide, piston, vertices, hinge, axes, friction, emitter, torque, transmission, volume, square, collect, speed, bone, impulse, bounding, sphere, light, hallmarks, motor, delta, shader, rotate, camel, velocity, texture, material, radius, rotation, capsule, mass, geometry, cinematic, spatial, scene, matrix, bitmap, quaternion]}
org.dyn4j.collision.Fixture#Fixture(C): {[vecf, shape, collision, triangle, plane, heightfield, collidable, collide, vertices, emitter, volume, hallmarks, square, sphere, bounding, axes, collect, shader, calculate, light, impulse, material, delta, texture, motor, mass, radius, camel, rotate, velocity, torque, friction, bone, ball, bitmap, piston, quaternion, transmission, geometry, joints, body, hinge, scene, rotation, capsule, speed, spatial, matrix, arena, cinematic]}
org.ode4j.ode.internal.sTrimeshBoxColliderData#_cldTestSeparatingAxes: {[square, hallmarks, vertices, rotate, axes, sphere, emitter, shape, radius, volume, plane, rotation, bounding, vecf, collide, triangle, quaternion, collision, collidable, speed, velocity, transmission, heightfield, mass, delta, motor, bone, piston, bitmap, hinge, shader, impulse, torque, collect, cinematic, geometry, joints, light, calculate, texture, arena, material, capsule, friction, body, spatial, scene, matrix, ball, camel]}
com.jme3.effect.influencers.ParticleInfluencer#setVelocityVariation: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.EdgeEPA#getTargetVertexIndex: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.dyn4j.geometry.Polygon#validate: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.ode4j.ode.internal.gimpact.GimTrimesh#gim_trimesh_plane_collision: {[vecf, triangle, collision, collidable, plane, heightfield, shape, collide, vertices, emitter, volume, collect, impulse, delta, mass, motor, bounding, velocity, hallmarks, calculate, square, sphere, torque, axes, shader, friction, speed, light, texture, material, bitmap, ball, camel, matrix, rotate, cinematic, radius, transmission, scene, body, spatial, bone, quaternion, piston, rotation, geometry, joints, hinge, arena, capsule]}
org.ode4j.ode.internal.joints.DxJointAMotor#setParamVel: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.internal.gimpact.GIM_TRIANGLE_RAY_CONTACT_DATA#getNormal: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
net.smert.jreactphysics3d.constraint.ContactPoint#setFrictionImpulse2: {[mass, delta, velocity, impulse, motor, torque, heightfield, speed, friction, vecf, triangle, transmission, collidable, collision, collide, plane, joints, hinge, vertices, piston, rotate, rotation, radius, square, shape, body, arena, axes, emitter, bitmap, ball, cinematic, capsule, quaternion, hallmarks, spatial, collect, scene, sphere, volume, texture, bone, shader, calculate, geometry, matrix, light, material, camel, bounding]}
net.smert.jreactphysics3d.constraint.ContactPoint#setFrictionImpulse1: {[mass, delta, velocity, impulse, motor, torque, heightfield, speed, friction, vecf, triangle, transmission, collidable, collision, collide, plane, joints, hinge, vertices, piston, rotate, rotation, radius, square, shape, body, arena, axes, emitter, bitmap, ball, cinematic, capsule, quaternion, hallmarks, spatial, collect, scene, sphere, volume, texture, bone, shader, calculate, geometry, matrix, light, material, camel, bounding]}
org.dyn4j.geometry.Segment#createAABB: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.ode4j.ode.internal.DxHeightfield#dCreateHeightfield: {[heightfield, collision, vecf, collide, collidable, triangle, plane, shape, vertices, emitter, delta, volume, impulse, mass, motor, collect, velocity, torque, calculate, bounding, friction, hallmarks, sphere, capsule, axes, cinematic, speed, bone, square, bitmap, shader, material, transmission, light, quaternion, geometry, camel, matrix, texture, spatial, rotate, ball, arena, radius, joints, hinge, scene, rotation, body, piston]}
org.dyn4j.dynamics.joint.RevoluteJoint#isMotorEnabled: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.dyn4j.geometry.Polygon#getVertices: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.ode4j.ode.internal.joints.DxJointLMotor#dJointGetLMotorParam: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.internal.DxTrimeshHeightfield#DESTRUCTOR: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
com.jme3.scene.Node#collideWith: {[triangle, vecf, collision, collidable, heightfield, plane, vertices, collide, shape, emitter, volume, mass, bounding, impulse, delta, motor, velocity, spatial, scene, collect, hallmarks, torque, calculate, sphere, axes, geometry, bone, camel, friction, square, texture, material, speed, light, capsule, bitmap, cinematic, transmission, ball, shader, rotate, quaternion, piston, body, matrix, arena, hinge, joints, rotation, radius]}
net.smert.jreactphysics3d.engine.ContactManifold#getFrictionImpulse2: {[mass, delta, velocity, impulse, motor, torque, heightfield, speed, friction, vecf, triangle, transmission, collidable, collision, collide, plane, joints, hinge, vertices, piston, rotate, rotation, radius, square, shape, body, arena, axes, emitter, bitmap, ball, cinematic, capsule, quaternion, hallmarks, spatial, collect, scene, sphere, volume, texture, bone, shader, calculate, geometry, matrix, light, material, camel, bounding]}
net.smert.jreactphysics3d.engine.ContactManifold#getFrictionImpulse1: {[mass, delta, velocity, impulse, motor, torque, heightfield, speed, friction, vecf, triangle, transmission, collidable, collision, collide, plane, joints, hinge, vertices, piston, rotate, rotation, radius, square, shape, body, arena, axes, emitter, bitmap, ball, cinematic, capsule, quaternion, hallmarks, spatial, collect, scene, sphere, volume, texture, bone, shader, calculate, geometry, matrix, light, material, camel, bounding]}
com.jme3.collision.bih.TriangleAxisComparator#TriangleAxisComparator(C): {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.DSliderJoint#setAxisDelta: {[mass, delta, velocity, impulse, motor, torque, transmission, heightfield, friction, speed, vecf, triangle, collidable, collision, radius, square, collide, plane, rotate, joints, hinge, rotation, piston, hallmarks, cinematic, vertices, bitmap, shape, sphere, body, capsule, axes, emitter, arena, ball, collect, geometry, bounding, quaternion, spatial, scene, shader, texture, bone, matrix, calculate, volume, camel, light, material]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_PERPENDICULAR: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.gimpact.GimGeometry#TRIANGLE_PLANE: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, volume, mass, impulse, delta, velocity, motor, hallmarks, bounding, collect, square, torque, axes, sphere, friction, calculate, shader, speed, bitmap, rotate, light, spatial, scene, cinematic, transmission, quaternion, arena, texture, capsule, geometry, bone, material, piston, ball, rotation, joints, hinge, radius, camel, body, matrix]}
org.ode4j.ode.internal.gimpact.GimGeometry#PLANE_CLIP_SEGMENT_CLOSEST: {[vecf, triangle, collision, collidable, plane, vertices, heightfield, shape, collide, emitter, volume, hallmarks, impulse, bounding, mass, square, collect, delta, motor, velocity, sphere, axes, torque, calculate, friction, shader, speed, light, bitmap, rotate, cinematic, texture, material, scene, spatial, arena, quaternion, radius, capsule, transmission, camel, ball, geometry, bone, piston, rotation, joints, matrix, hinge, body]}
org.dyn4j.dynamics.Body#accumulate: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
org.ode4j.ode.internal.CollideSphereSphere#dColliderFn: {[collide, plane, shape, sphere, heightfield, collidable, hallmarks, volume, collision, vecf, bounding, vertices, square, triangle, radius, emitter, collect, calculate, transmission, motor, shader, capsule, impulse, axes, material, speed, camel, quaternion, hinge, texture, light, piston, delta, spatial, torque, bone, friction, rotation, ball, matrix, bitmap, scene, velocity, cinematic, mass, rotate, geometry, body, arena, joints]}
org.dyn4j.collision.AbstractCollidable#removeFixture: {[vecf, shape, collision, triangle, plane, heightfield, collidable, collide, vertices, emitter, volume, hallmarks, square, sphere, bounding, axes, collect, shader, calculate, light, impulse, material, delta, texture, motor, mass, radius, camel, rotate, velocity, torque, friction, bone, ball, bitmap, piston, quaternion, transmission, geometry, joints, body, hinge, scene, rotation, capsule, speed, spatial, matrix, arena, cinematic]}
com.jme3.audio.AudioNode#clone: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
com.jme3.math.Triangle#Triangle(C): {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
com.jme3.input.event.MouseMotionEvent#MouseMotionEvent(C): {[mass, delta, velocity, impulse, motor, torque, transmission, heightfield, friction, speed, vecf, triangle, collidable, collision, radius, square, collide, plane, rotate, joints, hinge, rotation, piston, hallmarks, cinematic, vertices, bitmap, shape, sphere, body, capsule, axes, emitter, arena, ball, collect, geometry, bounding, quaternion, spatial, scene, shader, texture, bone, matrix, calculate, volume, camel, light, material]}
net.smert.jreactphysics3d.engine.DynamicsWorld#destroyJoint: {[collision, ball, shape, collidable, body, calculate, joints, vecf, triangle, plane, arena, heightfield, collide, piston, vertices, hinge, axes, friction, emitter, torque, transmission, volume, square, collect, speed, bone, impulse, bounding, sphere, light, hallmarks, motor, delta, shader, rotate, camel, velocity, texture, material, radius, rotation, capsule, mass, geometry, cinematic, spatial, scene, matrix, bitmap, quaternion]}
org.ode4j.ode.internal.gimpact.GimTrimeshCapsuleCollision#gim_closest_point_triangle_segment: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, volume, mass, impulse, delta, hallmarks, bounding, motor, velocity, square, collect, axes, torque, sphere, friction, calculate, shader, speed, rotate, light, bitmap, spatial, scene, cinematic, quaternion, transmission, texture, bone, ball, geometry, arena, piston, material, capsule, rotation, radius, body, camel, matrix, hinge, joints]}
org.ode4j.ode.internal.joints.DxJointPlane2D#getParam: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.dyn4j.dynamics.joint.PinJoint#getReactionForce: {[mass, delta, velocity, impulse, motor, torque, speed, heightfield, triangle, vecf, friction, collidable, transmission, collision, collide, plane, hinge, joints, rotate, rotation, piston, vertices, radius, square, shape, axes, body, emitter, bitmap, arena, quaternion, cinematic, ball, capsule, hallmarks, collect, spatial, scene, sphere, texture, bone, volume, shader, light, material, geometry, matrix, camel, calculate, bounding]}
org.dyn4j.geometry.Segment#getFarthestPoint: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
com.jme3.scene.Geometry#getTriangleCount: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.CollideCylinderPlane#dColliderFn: {[heightfield, collidable, plane, collision, collide, vecf, triangle, shape, vertices, emitter, volume, collect, hallmarks, bounding, sphere, square, calculate, motor, impulse, delta, mass, velocity, torque, axes, friction, radius, speed, shader, light, material, capsule, texture, matrix, camel, bone, ball, transmission, rotate, hinge, rotation, cinematic, bitmap, piston, scene, geometry, spatial, arena, joints, body, quaternion]}
org.ode4j.ode.internal.gimpact.GimGeometry#MAT_DOT_VEC_4X4: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.dyn4j.dynamics.Body#clearTorque: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
net.smert.jreactphysics3d.constraint.HingeJoint#getMaxMotorTorque: {[velocity, delta, motor, mass, impulse, torque, speed, heightfield, friction, triangle, collidable, transmission, vecf, collision, hinge, collide, piston, rotate, rotation, plane, joints, axes, square, vertices, radius, body, quaternion, shape, collect, bitmap, cinematic, ball, arena, capsule, hallmarks, scene, emitter, spatial, bone, shader, texture, volume, light, sphere, material, camel, matrix, bounding, calculate, geometry]}
com.jme3.audio.Listener#getVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.dyn4j.dynamics.joint.FrictionJoint#toString: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
org.dyn4j.collision.broadphase.BroadphasePair#BroadphasePair(C): {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
net.smert.jreactphysics3d.collision.CollisionDetection#CollisionDetection(C): {[plane, collision, collidable, vecf, shape, collide, heightfield, triangle, vertices, emitter, volume, sphere, hallmarks, bounding, square, collect, calculate, motor, radius, impulse, axes, delta, shader, velocity, mass, torque, transmission, light, speed, material, friction, texture, ball, camel, bitmap, capsule, rotate, body, bone, rotation, joints, quaternion, cinematic, hinge, matrix, arena, scene, piston, spatial, geometry]}
org.ode4j.ode.internal.DxPlane#setParams: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.ode4j.ode.internal.gimpact.GimGeometry#DISTANCE_PLANE_POINT: {[vecf, triangle, collision, collidable, plane, vertices, heightfield, shape, collide, emitter, volume, hallmarks, impulse, bounding, mass, square, collect, delta, motor, velocity, sphere, axes, torque, calculate, friction, shader, speed, light, bitmap, rotate, cinematic, texture, material, scene, spatial, arena, quaternion, radius, capsule, transmission, camel, ball, geometry, bone, piston, rotation, joints, matrix, hinge, body]}
org.dyn4j.dynamics.contact.SolvedContactPoint#getNormalImpulse: {[mass, delta, velocity, impulse, motor, torque, speed, heightfield, triangle, vecf, friction, collidable, transmission, collision, collide, plane, hinge, joints, rotate, rotation, piston, vertices, radius, square, shape, axes, body, emitter, bitmap, arena, quaternion, cinematic, ball, capsule, hallmarks, collect, spatial, scene, sphere, texture, bone, volume, shader, light, material, geometry, matrix, camel, calculate, bounding]}
com.jme3.animation.EffectTrack#cleanUp: {[emitter, heightfield, vertices, triangle, shape, vecf, bone, collide, collision, plane, collidable, quaternion, rotate, axes, capsule, volume, rotation, hallmarks, cinematic, spatial, bitmap, arena, sphere, square, piston, bounding, friction, mass, speed, hinge, delta, impulse, torque, matrix, scene, texture, camel, radius, geometry, light, transmission, motor, ball, shader, material, velocity, body, collect, joints, calculate]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA#computeClosestPointOfObject: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.dyn4j.dynamics.joint.PrismaticJoint#isMotorEnabled: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
com.jme3.effect.influencers.DefaultParticleInfluencer#cloneFields: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.ode4j.ode.internal.CollideConvexBoxCCD#dColliderFn: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.ode4j.ode.internal.DxHeightfieldData#IsOnHeightfield2: {[heightfield, collision, vecf, collide, collidable, triangle, plane, shape, vertices, emitter, delta, volume, impulse, mass, motor, collect, velocity, torque, calculate, bounding, friction, hallmarks, sphere, capsule, axes, cinematic, speed, bone, square, bitmap, shader, material, transmission, light, quaternion, geometry, camel, matrix, texture, spatial, rotate, ball, arena, radius, joints, hinge, scene, rotation, body, piston]}
com.jme3.renderer.opengl.GLTiming#invoke: {[mass, delta, velocity, impulse, motor, torque, transmission, heightfield, friction, speed, vecf, triangle, collidable, collision, radius, square, collide, plane, rotate, joints, hinge, rotation, piston, hallmarks, cinematic, vertices, bitmap, shape, sphere, body, capsule, axes, emitter, arena, ball, collect, geometry, bounding, quaternion, spatial, scene, shader, texture, bone, matrix, calculate, volume, camel, light, material]}
org.dyn4j.geometry.Segment#getLineIntersection: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.dyn4j.geometry.Polygon#project: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm#removeObject: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
org.dyn4j.geometry.Geometry#createRightTriangle: {[scene, geometry, spatial, camel, material, vertices, texture, triangle, light, bounding, plane, volume, vecf, shader, collidable, collision, emitter, heightfield, shape, hallmarks, collide, square, sphere, mass, velocity, motor, impulse, capsule, bone, axes, cinematic, torque, rotate, delta, collect, speed, arena, friction, rotation, transmission, calculate, radius, joints, hinge, bitmap, piston, matrix, quaternion, ball, body]}
com.jme3.math.Plane#isOnPlane: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
com.jme3.math.Ray#collideWith: {[vecf, triangle, collidable, collision, plane, heightfield, collide, shape, vertices, emitter, volume, bounding, collect, hallmarks, sphere, square, impulse, motor, delta, mass, calculate, velocity, torque, axes, friction, speed, shader, radius, scene, spatial, light, ball, bone, rotate, geometry, bitmap, matrix, texture, material, capsule, body, cinematic, hinge, quaternion, rotation, piston, arena, camel, joints, transmission]}
org.ode4j.ode.internal.gimpact.GimTrimeshSphereCollision#gim_triangle_sphere_collision: {[plane, shape, vertices, collide, vecf, collidable, triangle, collision, heightfield, hallmarks, volume, sphere, square, bounding, emitter, radius, collect, calculate, axes, transmission, shader, motor, impulse, bitmap, rotate, cinematic, light, delta, geometry, torque, friction, speed, texture, material, velocity, mass, arena, scene, bone, ball, camel, hinge, spatial, rotation, matrix, capsule, quaternion, joints, piston, body]}
org.ode4j.ode.internal.DxGimpactCollision#gim_trimesh_ray_collisionODE: {[vecf, triangle, collision, collidable, heightfield, plane, vertices, shape, collide, emitter, mass, volume, delta, impulse, velocity, motor, collect, torque, hallmarks, bounding, axes, square, calculate, friction, sphere, shader, speed, light, rotate, bitmap, transmission, texture, spatial, material, ball, scene, quaternion, cinematic, bone, piston, camel, arena, body, radius, capsule, hinge, geometry, rotation, matrix, joints]}
com.jme3.effect.ParticleEmitter#getVelocityVariation: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.ode4j.ode.internal.joints.DxJointPR#addTorque: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
org.dyn4j.geometry.decompose.DoubleEdgeList#initialize: {[vertices, triangle, vecf, plane, shape, collidable, collision, heightfield, collide, emitter, hallmarks, square, volume, bounding, sphere, axes, rotate, geometry, radius, cinematic, bitmap, scene, spatial, collect, impulse, rotation, arena, capsule, friction, motor, quaternion, shader, mass, torque, camel, delta, calculate, bone, transmission, velocity, matrix, piston, material, light, body, texture, joints, ball, hinge, speed]}
org.ode4j.ode.internal.gimpact.GimTrimesh#gim_trimesh_ray_closest_collision: {[vecf, triangle, collision, collidable, heightfield, plane, vertices, shape, collide, emitter, mass, volume, delta, impulse, velocity, motor, collect, torque, hallmarks, bounding, axes, square, calculate, friction, sphere, shader, speed, light, rotate, bitmap, transmission, texture, spatial, material, ball, scene, quaternion, cinematic, bone, piston, camel, arena, body, radius, capsule, hinge, geometry, rotation, matrix, joints]}
org.ode4j.ode.DTriCallback#call: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.joints.DxJointAMotor#getParam: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_ACCUM_2: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
com.jme3.util.mikktspace.MikkTSpaceImpl#getNumVerticesOfFace: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.ode4j.ode.internal.gimpact.GimGeometry#SEGMENT_COLLISION: {[vecf, triangle, collision, collidable, plane, heightfield, shape, vertices, collide, emitter, volume, mass, impulse, delta, collect, motor, velocity, hallmarks, bounding, square, sphere, calculate, torque, axes, shader, friction, speed, light, texture, material, bitmap, ball, rotate, camel, cinematic, transmission, spatial, bone, quaternion, piston, scene, body, radius, matrix, arena, joints, geometry, rotation, hinge, capsule]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_ACCUM_4: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.gimpact.GimAABBSet#gim_aabbset_bipartite_intersections_sorted: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
org.ode4j.ode.internal.sTrimeshBoxColliderData#TestCollisionForSingleTriangle: {[vecf, triangle, collision, collidable, heightfield, plane, vertices, shape, collide, emitter, mass, volume, delta, impulse, velocity, motor, collect, bounding, torque, hallmarks, axes, square, calculate, sphere, friction, shader, speed, light, rotate, spatial, transmission, ball, bitmap, texture, scene, material, bone, quaternion, piston, cinematic, body, camel, arena, radius, hinge, geometry, joints, capsule, matrix, rotation]}
org.ode4j.ode.internal.DxHeightfieldData#dGeomHeightfieldDataCreate: {[heightfield, collision, vecf, collide, collidable, triangle, plane, shape, vertices, emitter, delta, volume, impulse, mass, motor, collect, velocity, torque, calculate, bounding, friction, hallmarks, sphere, capsule, axes, cinematic, speed, bone, square, bitmap, shader, material, transmission, light, quaternion, geometry, camel, matrix, texture, spatial, rotate, ball, arena, radius, joints, hinge, scene, rotation, body, piston]}
org.ode4j.ode.internal.gimpact.GimBufferArrayFloat#createCopy: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.dyn4j.dynamics.Step#getDeltaTime: {[mass, delta, velocity, impulse, motor, torque, transmission, heightfield, friction, speed, vecf, triangle, collidable, collision, radius, square, collide, plane, rotate, joints, hinge, rotation, piston, hallmarks, cinematic, vertices, bitmap, shape, sphere, body, capsule, axes, emitter, arena, ball, collect, geometry, bounding, quaternion, spatial, scene, shader, texture, bone, matrix, calculate, volume, camel, light, material]}
com.jme3.effect.influencers.EmptyParticleInfluencer#setInitialVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.ode4j.ode.internal.gimpact.GimTriCollision#gim_triangle_triangle_overlap: {[triangle, vecf, vertices, collision, plane, collidable, heightfield, shape, collide, emitter, volume, mass, impulse, hallmarks, delta, square, bounding, axes, velocity, motor, torque, friction, sphere, collect, rotate, spatial, shader, scene, bitmap, cinematic, calculate, speed, quaternion, geometry, arena, capsule, light, transmission, rotation, piston, bone, matrix, camel, texture, joints, ball, hinge, body, material, radius]}
com.jme3.util.TangentBinormalGenerator#processTriangles: {[triangle, vertices, vecf, plane, collidable, collision, heightfield, shape, collide, emitter, spatial, volume, scene, bounding, geometry, mass, camel, impulse, hallmarks, velocity, material, motor, delta, texture, torque, axes, square, sphere, friction, light, collect, bone, rotate, shader, transmission, speed, calculate, arena, quaternion, rotation, piston, cinematic, capsule, matrix, joints, ball, bitmap, radius, body, hinge]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_IMPACT_SQ: {[vertices, vecf, plane, triangle, shape, collision, collidable, collide, heightfield, square, hallmarks, emitter, sphere, volume, bounding, bitmap, shader, axes, cinematic, radius, collect, light, rotate, texture, capsule, transmission, calculate, material, impulse, rotation, camel, friction, motor, quaternion, arena, torque, delta, piston, mass, velocity, geometry, matrix, spatial, hinge, speed, joints, ball, bone, scene, body]}
org.dyn4j.geometry.HalfEllipse#getFarthestFeature: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
net.smert.jreactphysics3d.collision.shapes.BoxShape#BoxShape(C): {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, collect, delta, impulse, motor, hallmarks, calculate, velocity, bounding, square, sphere, axes, torque, shader, light, friction, speed, material, texture, ball, camel, rotate, body, bone, bitmap, piston, geometry, joints, capsule, quaternion, radius, hinge, transmission, rotation, spatial, arena, matrix, cinematic, scene]}
com.jme3.bounding.BoundingBox#collideWith: {[triangle, vecf, collidable, plane, vertices, collision, heightfield, collide, shape, emitter, volume, bounding, hallmarks, mass, impulse, motor, collect, delta, sphere, velocity, spatial, scene, square, torque, calculate, axes, geometry, friction, camel, bone, speed, material, texture, light, rotate, ball, radius, capsule, transmission, quaternion, bitmap, shader, matrix, arena, piston, body, cinematic, hinge, rotation, joints]}
com.jme3.audio.AudioNode#getVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA#isVisibleFromVertex: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.dyn4j.collision.broadphase.DynamicAABBTreeLeaf#toString: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
com.jme3.effect.ParticleMesh#initParticleData: {[emitter, heightfield, vertices, triangle, shape, vecf, bone, collide, collision, plane, collidable, quaternion, rotate, axes, capsule, volume, rotation, hallmarks, cinematic, spatial, bitmap, arena, sphere, square, piston, bounding, friction, mass, speed, hinge, delta, impulse, torque, matrix, scene, texture, camel, radius, geometry, light, transmission, motor, ball, shader, material, velocity, body, collect, joints, calculate]}
net.smert.jreactphysics3d.engine.Material#hashCode: {[mass, friction, delta, torque, impulse, transmission, velocity, motor, arena, joints, body, heightfield, vecf, ball, triangle, emitter, speed, vertices, collide, calculate, collision, collidable, hinge, plane, radius, piston, shape, square, cinematic, capsule, quaternion, geometry, sphere, bitmap, bounding, material, hallmarks, shader, light, axes, spatial, matrix, texture, camel, bone, collect, rotation, scene, rotate, volume]}
org.ode4j.ode.internal.DxHeightfield#dGeomPlaneSetNoNormalize: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.dyn4j.dynamics.Step#getPreviousInverseDeltaTime: {[mass, delta, velocity, impulse, motor, torque, transmission, heightfield, friction, speed, vecf, triangle, collidable, collision, radius, square, collide, plane, rotate, joints, hinge, rotation, piston, hallmarks, cinematic, vertices, bitmap, shape, sphere, body, capsule, axes, emitter, arena, ball, collect, geometry, bounding, quaternion, spatial, scene, shader, texture, bone, matrix, calculate, volume, camel, light, material]}
org.ode4j.ode.internal.CollideTrimeshSphere#dCollideSTL: {[sphere, hallmarks, collide, square, shape, plane, volume, radius, bounding, collidable, heightfield, collision, vertices, vecf, triangle, transmission, emitter, collect, calculate, shader, axes, mass, material, camel, texture, light, bitmap, spatial, capsule, quaternion, motor, velocity, hinge, ball, piston, rotate, scene, impulse, bone, speed, geometry, cinematic, delta, joints, rotation, torque, matrix, friction, body, arena]}
net.smert.jreactphysics3d.engine.ContactManifold#getBody2: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
net.smert.jreactphysics3d.engine.ContactManifold#getBody1: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
org.ode4j.ode.internal.joints.DxJointAMotor#dJointGetAMotorParam: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
com.jme3.animation.EffectTrack#cloneFields: {[emitter, heightfield, vertices, triangle, shape, vecf, bone, collide, collision, plane, collidable, quaternion, rotate, axes, capsule, volume, rotation, hallmarks, cinematic, spatial, bitmap, arena, sphere, square, piston, bounding, friction, mass, speed, hinge, delta, impulse, torque, matrix, scene, texture, camel, radius, geometry, light, transmission, motor, ball, shader, material, velocity, body, collect, joints, calculate]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA#isClosestPointInternalToTriangle: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
com.jme3.util.TangentBinormalGenerator#initVertexData: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
net.smert.jreactphysics3d.constraint.SliderJoint#getMotorSpeed: {[motor, velocity, speed, delta, impulse, mass, rotate, rotation, torque, quaternion, piston, hinge, axes, collidable, heightfield, friction, triangle, vecf, collision, collide, plane, joints, bone, transmission, collect, square, body, radius, vertices, shape, hallmarks, calculate, scene, bitmap, volume, shader, texture, bounding, ball, matrix, material, cinematic, light, capsule, spatial, arena, emitter, camel, sphere, geometry]}
org.dyn4j.geometry.Mass#hashCode: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
org.ode4j.ode.internal.joints.DxJointLMotor#dJointGetLMotorAxis: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
com.jme3.math.Matrix4f#multAcross: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
com.jme3.renderer.Camera#distanceToNearPlane: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.ode4j.ode.internal.CollideRayPlane#dColliderFn: {[heightfield, collidable, plane, collision, collide, vecf, triangle, shape, vertices, emitter, volume, collect, hallmarks, bounding, sphere, square, calculate, motor, impulse, delta, mass, velocity, torque, axes, friction, radius, speed, shader, light, material, capsule, texture, matrix, camel, bone, ball, transmission, rotate, hinge, rotation, cinematic, bitmap, piston, scene, geometry, spatial, arena, joints, body, quaternion]}
org.ode4j.ode.internal.DxSpace#collide: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
com.jme3.collision.SweepSphere#setVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.dyn4j.collision.BoundsAdapter#outside: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.dyn4j.dynamics.joint.WheelJoint#getMotorTorque: {[delta, mass, velocity, motor, impulse, torque, speed, heightfield, friction, triangle, vecf, collidable, transmission, collision, collide, plane, hinge, rotate, piston, rotation, joints, vertices, square, radius, axes, body, shape, quaternion, bitmap, cinematic, arena, emitter, collect, ball, capsule, hallmarks, spatial, scene, bone, texture, shader, sphere, volume, light, material, camel, geometry, bounding, matrix, calculate]}
org.ode4j.ode.DMass#getMass: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
org.dyn4j.geometry.decompose.MonotonePolygon#MonotonePolygon(C): {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
net.smert.jreactphysics3d.collision.broadphase.PairManager#PairManager(C): {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_DOT: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.gimpact.GimAABBSet#gim_aabbset_ray_collision: {[vertices, triangle, vecf, plane, collidable, collision, heightfield, shape, collide, scene, spatial, emitter, volume, geometry, bounding, camel, material, texture, hallmarks, mass, light, square, sphere, impulse, velocity, motor, delta, collect, shader, axes, torque, calculate, bone, speed, friction, rotate, cinematic, capsule, ball, radius, piston, body, transmission, arena, hinge, matrix, rotation, quaternion, joints, bitmap]}
net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm#addObject: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.EPAAlgorithm#computePenetrationDepthAndContactPoints: {[axes, triangle, shape, vecf, collision, collidable, vertices, plane, emitter, heightfield, rotate, quaternion, collide, rotation, hinge, piston, collect, square, volume, bone, hallmarks, calculate, speed, joints, matrix, bounding, body, ball, shader, motor, arena, sphere, bitmap, spatial, velocity, light, impulse, texture, scene, cinematic, delta, friction, material, torque, geometry, camel, capsule, radius, mass, transmission]}
com.jme3.effect.influencers.NewtonianParticleInfluencer#NewtonianParticleInfluencer(C): {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.dyn4j.geometry.decompose.MonotonePolygon#getMinimum: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.ode4j.ode.internal.joints.DxJointLMotor#getAxis: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.internal.CollideConvexConvex#dColliderFn: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.dyn4j.dynamics.joint.MotorJoint#getMaximumTorque: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
org.ode4j.ode.internal.DxSAPSpace#BoxPruning: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
net.smert.jreactphysics3d.collision.broadphase.BroadPhaseAlgorithm#updateObject: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
net.smert.jreactphysics3d.collision.shapes.ConvexMeshShape#clone: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, collect, delta, impulse, motor, hallmarks, calculate, velocity, bounding, square, sphere, axes, torque, shader, light, friction, speed, material, texture, ball, camel, rotate, body, bone, bitmap, piston, geometry, joints, capsule, quaternion, radius, hinge, transmission, rotation, spatial, arena, matrix, cinematic, scene]}
org.dyn4j.collision.broadphase.BroadphaseItem#toString: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.dyn4j.dynamics.joint.Joint#Joint(C): {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
org.dyn4j.collision.broadphase.BroadphaseFilter#isAllowed: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.EPAAlgorithm#EPAAlgorithm(C): {[ball, body, collision, shape, joints, piston, collidable, hinge, triangle, vecf, axes, calculate, arena, plane, vertices, heightfield, friction, collide, emitter, torque, speed, rotate, bone, transmission, impulse, motor, square, delta, velocity, volume, quaternion, spatial, scene, hallmarks, rotation, bounding, radius, mass, geometry, collect, sphere, shader, light, bitmap, capsule, cinematic, camel, matrix, material, texture]}
com.jme3.scene.BatchNode#collideWith: {[triangle, vecf, collision, collidable, heightfield, plane, vertices, collide, shape, emitter, volume, mass, bounding, impulse, delta, motor, velocity, spatial, scene, collect, hallmarks, torque, calculate, sphere, axes, geometry, bone, camel, friction, square, texture, material, speed, light, capsule, bitmap, cinematic, transmission, ball, shader, rotate, quaternion, piston, body, matrix, arena, hinge, joints, rotation, radius]}
net.smert.jreactphysics3d.engine.DynamicsWorld#solveContactsAndConstraints: {[velocity, mass, delta, motor, impulse, torque, speed, transmission, friction, hinge, rotate, piston, radius, triangle, joints, rotation, square, vecf, heightfield, collidable, axes, collision, body, quaternion, plane, hallmarks, collide, bone, vertices, ball, sphere, arena, scene, collect, spatial, bitmap, texture, material, shape, shader, camel, light, calculate, cinematic, bounding, matrix, emitter, volume, geometry, capsule]}
org.dyn4j.dynamics.joint.WheelJoint#getReactionTorque: {[delta, mass, velocity, motor, impulse, torque, speed, heightfield, friction, triangle, vecf, collidable, transmission, collision, collide, plane, hinge, rotate, piston, rotation, joints, vertices, square, radius, axes, body, shape, quaternion, bitmap, cinematic, arena, emitter, collect, ball, capsule, hallmarks, spatial, scene, bone, texture, shader, sphere, volume, light, material, camel, geometry, bounding, matrix, calculate]}
org.dyn4j.dynamics.joint.MotorJoint#getReactionTorque: {[mass, delta, velocity, impulse, motor, torque, speed, heightfield, friction, triangle, transmission, vecf, collidable, collision, collide, plane, joints, hinge, piston, vertices, radius, rotate, square, rotation, body, shape, axes, arena, emitter, bitmap, ball, cinematic, capsule, quaternion, hallmarks, collect, spatial, scene, sphere, texture, shader, volume, bone, light, material, camel, calculate, geometry, bounding, matrix]}
com.jme3.effect.influencers.DefaultParticleInfluencer#setVelocityVariation: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.ode4j.ode.internal.CollideConvexPlane#dColliderFn: {[heightfield, collidable, plane, collision, collide, vecf, triangle, shape, vertices, emitter, volume, collect, hallmarks, bounding, sphere, square, calculate, motor, impulse, delta, mass, velocity, torque, axes, friction, radius, speed, shader, light, material, capsule, texture, matrix, camel, bone, ball, transmission, rotate, hinge, rotation, cinematic, bitmap, piston, scene, geometry, spatial, arena, joints, body, quaternion]}
net.smert.jreactphysics3d.engine.ContactManifold#ContactManifold(C): {[ball, body, joints, calculate, collision, shape, arena, piston, collidable, hinge, friction, vecf, plane, axes, triangle, collide, torque, heightfield, transmission, vertices, impulse, speed, emitter, delta, motor, square, velocity, mass, volume, bone, rotate, sphere, hallmarks, collect, bounding, light, shader, texture, camel, material, bitmap, quaternion, cinematic, radius, rotation, matrix, geometry, spatial, scene, capsule]}
org.dyn4j.dynamics.joint.DistanceJoint#getReactionTorque: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_NORMALIZE: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
net.smert.jreactphysics3d.constraint.HingeJoint#getMotorTorque: {[delta, mass, velocity, motor, impulse, torque, speed, heightfield, friction, triangle, vecf, collidable, transmission, collision, collide, plane, hinge, rotate, piston, rotation, joints, vertices, square, radius, axes, body, shape, quaternion, bitmap, cinematic, arena, emitter, collect, ball, capsule, hallmarks, spatial, scene, bone, texture, shader, sphere, volume, light, material, camel, geometry, bounding, matrix, calculate]}
org.dyn4j.dynamics.contact.Contact#getTangentialImpulse: {[mass, delta, velocity, impulse, motor, torque, speed, heightfield, triangle, vecf, friction, collidable, transmission, collision, collide, plane, hinge, joints, rotate, rotation, piston, vertices, radius, square, shape, axes, body, emitter, bitmap, arena, quaternion, cinematic, ball, capsule, hallmarks, collect, spatial, scene, sphere, texture, bone, volume, shader, light, material, geometry, matrix, camel, calculate, bounding]}
org.dyn4j.geometry.Link#updateNormals: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.ode4j.ode.DUniversalJoint#addTorques: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
com.jme3.scene.Spatial#getTriangleCount: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.DBody#addTorque: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
org.ode4j.ode.internal.DxTrimeshHeightfield#getHeightfieldData: {[heightfield, collision, vecf, collide, collidable, triangle, plane, shape, vertices, emitter, delta, volume, impulse, mass, motor, collect, velocity, torque, calculate, bounding, friction, hallmarks, sphere, capsule, axes, cinematic, speed, bone, square, bitmap, shader, material, transmission, light, quaternion, geometry, camel, matrix, texture, spatial, rotate, ball, arena, radius, joints, hinge, scene, rotation, body, piston]}
org.dyn4j.collision.broadphase.SapProxy#SapProxy(C): {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
com.jme3.renderer.opengl.GLRenderer#renderMeshVertexArray: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.CollideConvexConvexCCD#dColliderFn: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.ode4j.ode.DAMotorJoint#getMode: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.internal.gimpact.GimTrimesh#gim_trimesh_ray_collision: {[vecf, triangle, collision, collidable, heightfield, plane, vertices, shape, collide, emitter, mass, volume, delta, impulse, velocity, motor, collect, torque, hallmarks, bounding, axes, square, calculate, friction, sphere, shader, speed, light, rotate, bitmap, transmission, texture, spatial, material, ball, scene, quaternion, cinematic, bone, piston, camel, arena, body, radius, capsule, hinge, geometry, rotation, matrix, joints]}
org.ode4j.ode.internal.DxGimpactCollision#FetchTriangleCount: {[vecf, triangle, collision, collidable, heightfield, plane, vertices, shape, collide, emitter, mass, volume, delta, impulse, velocity, motor, collect, bounding, torque, hallmarks, axes, square, calculate, sphere, friction, shader, speed, light, rotate, spatial, transmission, ball, bitmap, texture, scene, material, bone, quaternion, piston, cinematic, body, camel, arena, radius, hinge, geometry, joints, capsule, matrix, rotation]}
org.ode4j.ode.internal.DxGimpact#dGeomTriMeshGetPoint: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, volume, mass, impulse, delta, velocity, motor, hallmarks, bounding, square, axes, collect, torque, sphere, friction, calculate, shader, speed, rotate, light, bitmap, spatial, scene, cinematic, quaternion, transmission, texture, bone, piston, arena, ball, geometry, capsule, material, rotation, matrix, body, hinge, camel, joints, radius]}
org.ode4j.ode.DHeightfieldData#buildCallback: {[heightfield, collision, vecf, collide, collidable, triangle, plane, shape, vertices, emitter, delta, volume, impulse, mass, motor, collect, velocity, torque, calculate, bounding, friction, hallmarks, sphere, capsule, axes, cinematic, speed, bone, square, bitmap, shader, material, transmission, light, quaternion, geometry, camel, matrix, texture, spatial, rotate, ball, arena, radius, joints, hinge, scene, rotation, body, piston]}
org.ode4j.ode.internal.joints.DxJointAMotor#getAxisRel: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.internal.DxHeightfield#resetPlaneBuffer: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.dyn4j.geometry.decompose.DoubleEdgeList#addHalfEdges: {[vertices, triangle, vecf, plane, shape, collidable, collision, heightfield, collide, emitter, hallmarks, square, volume, bounding, sphere, axes, rotate, geometry, radius, cinematic, bitmap, scene, spatial, collect, impulse, rotation, arena, capsule, friction, motor, quaternion, shader, mass, torque, camel, delta, calculate, bone, transmission, velocity, matrix, piston, material, light, body, texture, joints, ball, hinge, speed]}
com.jme3.effect.influencers.ParticleInfluencer#setInitialVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
com.jme3.effect.influencers.RadialParticleInfluencer#getRadialVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.dyn4j.geometry.Polygon#getVertexIterator: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.ode4j.ode.internal.joints.DxJointLMotor#setParamVel3: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.internal.joints.DxJointLMotor#setParamVel2: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.OdeHelper#createPlane: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.ode4j.ode.internal.gimpact.GimTriCollision#GIM_CALC_TRIANGLE_DATA_PLANES: {[triangle, vecf, vertices, plane, collidable, collision, heightfield, shape, collide, emitter, volume, bounding, hallmarks, square, collect, mass, impulse, sphere, axes, delta, motor, velocity, torque, calculate, friction, scene, spatial, speed, rotate, bitmap, geometry, shader, cinematic, capsule, light, quaternion, radius, ball, bone, camel, piston, arena, rotation, transmission, body, matrix, material, texture, hinge, joints]}
org.ode4j.ode.internal.libccd.CCDPolyTope#ccdPtFaceVertices: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
net.smert.jreactphysics3d.engine.DynamicsWorld#destroyRigidBody: {[collision, shape, collidable, vecf, ball, triangle, plane, heightfield, calculate, collide, body, joints, vertices, arena, piston, hinge, axes, emitter, friction, transmission, volume, torque, square, collect, bone, sphere, bounding, hallmarks, speed, light, shader, rotate, camel, texture, impulse, material, motor, delta, capsule, velocity, geometry, rotation, bitmap, radius, cinematic, quaternion, spatial, matrix, scene, mass]}
com.jme3.bounding.BoundingSphere#collideWith: {[triangle, vecf, collidable, plane, vertices, collision, heightfield, collide, shape, emitter, volume, bounding, hallmarks, mass, impulse, motor, collect, delta, sphere, velocity, spatial, scene, square, torque, calculate, axes, geometry, friction, camel, bone, speed, material, texture, light, rotate, ball, radius, capsule, transmission, quaternion, bitmap, shader, matrix, arena, piston, body, cinematic, hinge, rotation, joints]}
org.ode4j.ode.internal.DxPlane#dCreatePlane: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.dyn4j.dynamics.Body#isKinematic: {[mass, velocity, delta, impulse, motor, transmission, torque, radius, triangle, speed, vecf, friction, heightfield, square, collidable, collision, hallmarks, sphere, plane, collide, vertices, rotate, rotation, joints, hinge, piston, spatial, shape, bitmap, axes, scene, body, emitter, cinematic, bounding, arena, texture, ball, quaternion, shader, material, camel, capsule, collect, volume, light, bone, calculate, geometry, matrix]}
com.jme3.math.AbstractTriangle#collideWith: {[collision, vecf, collidable, heightfield, triangle, plane, collide, shape, vertices, emitter, volume, collect, delta, impulse, motor, mass, calculate, hallmarks, bounding, velocity, sphere, square, torque, axes, shader, friction, speed, light, material, texture, ball, camel, capsule, bone, radius, geometry, body, matrix, rotation, rotate, cinematic, bitmap, joints, piston, transmission, quaternion, arena, spatial, scene, hinge]}
org.dyn4j.dynamics.joint.RopeJoint#getReactionTorque: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
org.ode4j.ode.internal.CollideTrimeshRay#dColliderFn: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.dyn4j.collision.broadphase.AbstractBroadphaseDetector#add: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
com.jme3.math.Plane#clone: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.ode4j.ode.DMass#add: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
org.dyn4j.dynamics.joint.PrismaticJoint#initializeConstraints: {[delta, torque, impulse, mass, velocity, motor, friction, transmission, joints, speed, body, hinge, piston, ball, arena, heightfield, triangle, vecf, axes, square, calculate, radius, collidable, rotate, collide, plane, vertices, collision, rotation, emitter, hallmarks, bone, bitmap, sphere, spatial, collect, cinematic, quaternion, scene, shape, capsule, texture, camel, shader, material, light, volume, geometry, bounding, matrix]}
org.ode4j.ode.internal.gimpact.GimGeometry#ACCUM_OUTER_PRODUCT_3X3: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.CollideTrimeshBox#dColliderFn: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_IMPACT: {[vertices, vecf, plane, triangle, shape, collision, collidable, collide, heightfield, square, hallmarks, emitter, sphere, volume, bounding, bitmap, shader, axes, cinematic, radius, collect, light, rotate, texture, capsule, transmission, calculate, material, impulse, rotation, camel, friction, motor, quaternion, arena, torque, delta, piston, mass, velocity, geometry, matrix, spatial, hinge, speed, joints, ball, bone, scene, body]}
org.dyn4j.geometry.Slice#getCircleCenter: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.dyn4j.dynamics.BodyFixture#toString: {[shape, collision, vecf, plane, collidable, collide, triangle, heightfield, vertices, emitter, square, hallmarks, volume, sphere, bounding, axes, calculate, collect, shader, radius, light, transmission, material, ball, texture, rotate, camel, piston, joints, body, bitmap, hinge, impulse, bone, motor, delta, mass, quaternion, arena, scene, spatial, rotation, geometry, cinematic, velocity, capsule, torque, friction, matrix, speed]}
org.dyn4j.geometry.Rectangle#createMass: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
org.dyn4j.dynamics.joint.WheelJoint#toString: {[velocity, motor, delta, impulse, speed, mass, torque, rotate, rotation, piston, hinge, heightfield, friction, collidable, triangle, vecf, axes, quaternion, transmission, collision, collide, joints, plane, square, collect, body, bone, radius, vertices, shape, hallmarks, bitmap, ball, scene, cinematic, shader, arena, volume, texture, matrix, spatial, capsule, material, light, calculate, bounding, sphere, camel, emitter, geometry]}
org.ode4j.ode.internal.joints.DxJointPlane2D#dJointSetPlane2DXParam: {[shape, vertices, plane, vecf, triangle, collision, collidable, square, collide, heightfield, hallmarks, emitter, axes, volume, sphere, bounding, rotate, radius, collect, rotation, calculate, bitmap, shader, transmission, piston, quaternion, cinematic, hinge, joints, light, speed, texture, bone, body, ball, velocity, capsule, material, mass, delta, geometry, motor, torque, matrix, impulse, friction, arena, camel, scene, spatial]}
com.jme3.collision.bih.BIHTree#createNode: {[plane, collidable, vertices, triangle, collide, vecf, shape, collision, heightfield, volume, bounding, hallmarks, sphere, square, emitter, collect, radius, calculate, geometry, motor, scene, transmission, impulse, axes, speed, spatial, velocity, torque, delta, camel, cinematic, matrix, bitmap, material, hinge, mass, friction, texture, quaternion, piston, light, rotate, ball, capsule, rotation, shader, bone, body, joints, arena]}
org.ode4j.ode.internal.DxSAPSpace2#collide: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.ode4j.ode.internal.DxPlane#dGeomPlaneSetParams: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
com.jme3.scene.BatchNode#mergeGeometries: {[scene, geometry, spatial, camel, material, vertices, texture, triangle, light, bounding, plane, volume, vecf, shader, collidable, collision, emitter, heightfield, shape, hallmarks, collide, square, sphere, mass, velocity, motor, impulse, capsule, bone, axes, cinematic, torque, rotate, delta, collect, speed, arena, friction, rotation, transmission, calculate, radius, joints, hinge, bitmap, piston, matrix, quaternion, ball, body]}
org.dyn4j.collision.broadphase.Sap#remove: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
com.jme3.util.TangentBinormalGenerator#processTriangleData: {[triangle, vecf, vertices, plane, collidable, collision, heightfield, shape, collide, emitter, volume, bounding, hallmarks, square, mass, impulse, collect, delta, axes, velocity, motor, sphere, torque, friction, scene, spatial, calculate, rotate, bitmap, cinematic, geometry, speed, shader, capsule, quaternion, arena, transmission, rotation, light, camel, bone, piston, radius, material, joints, matrix, ball, body, texture, hinge]}
org.ode4j.ode.internal.CollideCylinderTrimesh#dCollideCylinderTrimesh: {[vecf, triangle, collision, collidable, plane, heightfield, vertices, shape, collide, emitter, volume, mass, impulse, delta, hallmarks, motor, bounding, velocity, collect, square, axes, sphere, torque, calculate, friction, shader, speed, light, rotate, bitmap, spatial, scene, texture, quaternion, bone, material, transmission, ball, cinematic, arena, piston, geometry, camel, radius, rotation, body, capsule, matrix, hinge, joints]}
com.jme3.collision.CollisionResult#equals: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
com.jme3.math.Triangle#computeTriangleNormal: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
net.smert.jreactphysics3d.collision.narrowphase.GJK.GJKAlgorithm#computePenetrationDepthForEnlargedObjects: {[collision, shape, collidable, vecf, triangle, plane, collide, vertices, heightfield, ball, calculate, body, joints, axes, emitter, piston, hinge, arena, square, volume, transmission, hallmarks, friction, sphere, torque, bounding, rotate, collect, speed, shader, bone, light, impulse, texture, delta, motor, velocity, bitmap, material, camel, radius, quaternion, rotation, mass, cinematic, capsule, matrix, geometry, scene, spatial]}
org.dyn4j.dynamics.Settings#getVelocityConstraintSolverIterations: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
com.jme3.effect.ParticleEmitterControl#isEnabled: {[emitter, heightfield, vertices, triangle, shape, vecf, bone, collide, collision, plane, collidable, quaternion, rotate, axes, capsule, volume, rotation, hallmarks, cinematic, spatial, bitmap, arena, sphere, square, piston, bounding, friction, mass, speed, hinge, delta, impulse, torque, matrix, scene, texture, camel, radius, geometry, light, transmission, motor, ball, shader, material, velocity, body, collect, joints, calculate]}
org.ode4j.ode.internal.gimpact.GimGeometry#AABB_PROJECTION_INTERVAL: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
com.jme3.audio.AudioNode#updateGeometricState: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.ode4j.ode.internal.DxMass#dMassSetTrimesh: {[plane, shape, square, vertices, collidable, collision, hallmarks, collide, vecf, triangle, sphere, volume, bounding, heightfield, radius, calculate, collect, emitter, axes, transmission, bitmap, cinematic, rotate, shader, joints, ball, body, mass, piston, arena, capsule, hinge, friction, delta, light, torque, velocity, rotation, matrix, geometry, texture, impulse, speed, motor, material, quaternion, camel, scene, bone, spatial]}
com.jme3.util.TangentBinormalGenerator#writeColorBuffer: {[triangle, vertices, vecf, plane, collidable, collision, shape, heightfield, collide, emitter, volume, bounding, hallmarks, square, collect, sphere, axes, impulse, motor, mass, velocity, torque, delta, scene, cinematic, geometry, bitmap, calculate, rotate, spatial, friction, capsule, radius, shader, speed, camel, rotation, quaternion, arena, matrix, material, light, bone, body, piston, joints, hinge, texture, ball, transmission]}
org.ode4j.ode.internal.joints.DxJointLMotor#setParamFMax: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_INV_LENGTH: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.CollideCylinderSphere#dColliderFn: {[collide, plane, shape, sphere, heightfield, collidable, hallmarks, volume, collision, vecf, bounding, vertices, square, triangle, radius, emitter, collect, calculate, transmission, motor, shader, capsule, impulse, axes, material, speed, camel, quaternion, hinge, texture, light, piston, delta, spatial, torque, bone, friction, rotation, ball, matrix, bitmap, scene, velocity, cinematic, mass, rotate, geometry, body, arena, joints]}
org.ode4j.ode.internal.DxGimpactCollision#DVector3Tovec3f: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.CollideCylinderBox#dCollideCylinderBox: {[collision, vecf, collidable, heightfield, triangle, plane, collide, shape, vertices, emitter, volume, collect, delta, impulse, motor, mass, calculate, hallmarks, bounding, sphere, velocity, square, torque, axes, shader, friction, speed, light, material, texture, camel, ball, capsule, bone, radius, geometry, body, rotate, rotation, matrix, cinematic, joints, piston, bitmap, quaternion, transmission, arena, spatial, scene, hinge]}
org.ode4j.ode.internal.libccd.CCDPolyTope#ccdPtEdgeVertices: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.ode4j.ode.internal.DxMass#getMass: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
org.ode4j.ode.internal.joints.DxJointAMotor#dJointGetAMotorAngle: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.dyn4j.geometry.Mass#equals: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
com.jme3.effect.influencers.EmptyParticleInfluencer#influenceParticle: {[vecf, shape, collision, triangle, heightfield, plane, collide, collidable, vertices, emitter, volume, hallmarks, square, sphere, axes, bounding, collect, shader, calculate, impulse, delta, rotate, mass, light, motor, material, bone, radius, texture, friction, quaternion, torque, camel, velocity, piston, capsule, rotation, ball, hinge, transmission, joints, body, geometry, bitmap, arena, matrix, scene, cinematic, speed, spatial]}
org.ode4j.ode.internal.CollideConvexSphereCCD#dColliderFn: {[collide, plane, shape, sphere, heightfield, collidable, hallmarks, volume, collision, vecf, bounding, vertices, square, triangle, radius, emitter, collect, calculate, transmission, motor, shader, capsule, impulse, axes, material, speed, camel, quaternion, hinge, texture, light, piston, delta, spatial, torque, bone, friction, rotation, ball, matrix, bitmap, scene, velocity, cinematic, mass, rotate, geometry, body, arena, joints]}
org.ode4j.ode.internal.DxPlane#dGeomPlaneGetParams: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.ode4j.ode.internal.CollideConvexConvex#dCollideConvexConvex: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
net.smert.jreactphysics3d.collision.shapes.CollisionShape#equals: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, collect, delta, impulse, motor, hallmarks, calculate, velocity, bounding, square, sphere, axes, torque, shader, light, friction, speed, material, texture, ball, camel, rotate, body, bone, bitmap, piston, geometry, joints, capsule, quaternion, radius, hinge, transmission, rotation, spatial, arena, matrix, cinematic, scene]}
org.ode4j.ode.internal.gimpact.GimTrimeshTrimeshCol#CLASSIFY_TRI_BY_FACE: {[vecf, triangle, collision, collidable, plane, vertices, heightfield, shape, collide, emitter, volume, hallmarks, impulse, bounding, mass, square, collect, delta, motor, velocity, sphere, axes, torque, calculate, friction, shader, speed, light, bitmap, rotate, cinematic, texture, material, scene, spatial, arena, quaternion, radius, capsule, transmission, camel, ball, geometry, bone, piston, rotation, joints, matrix, hinge, body]}
net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex#getSimplex: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
com.jme3.audio.AudioNode#cloneFields: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
net.smert.jreactphysics3d.collision.broadphase.NoBroadPhaseAlgorithm#updateObject: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
net.smert.jreactphysics3d.collision.shapes.CollisionShape#computeLocalInertiaTensor: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_ZERO_4: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
com.jme3.collision.CollisionResults#getClosestCollision: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
org.ode4j.ode.internal.joints.DxJointLMotor#getParamFMax2: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_ZERO_2: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.joints.DxJointLMotor#getParamFMax3: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.dyn4j.geometry.Geometry#createEquilateralTriangle: {[scene, geometry, spatial, camel, material, vertices, texture, triangle, light, bounding, plane, volume, vecf, shader, collidable, collision, emitter, heightfield, shape, hallmarks, collide, square, sphere, mass, velocity, motor, impulse, capsule, bone, axes, cinematic, torque, rotate, delta, collect, speed, arena, friction, rotation, transmission, calculate, radius, joints, hinge, bitmap, piston, matrix, quaternion, ball, body]}
org.ode4j.ode.internal.gimpact.GimTrimesh#gim_trimesh_sphere_collision: {[sphere, hallmarks, square, collide, plane, shape, volume, bounding, radius, vertices, collidable, collision, heightfield, vecf, triangle, transmission, emitter, collect, calculate, shader, axes, bitmap, material, mass, light, texture, camel, spatial, cinematic, quaternion, rotate, motor, velocity, hinge, ball, geometry, impulse, capsule, piston, speed, scene, bone, delta, joints, torque, arena, rotation, matrix, body, friction]}
org.ode4j.ode.internal.DxHeightfieldData#dGeomHeightfieldDataBuildSingle: {[heightfield, collision, vecf, collide, collidable, triangle, plane, shape, vertices, emitter, delta, volume, impulse, mass, motor, collect, velocity, torque, calculate, bounding, friction, hallmarks, sphere, capsule, axes, cinematic, speed, bone, square, bitmap, shader, material, transmission, light, quaternion, geometry, camel, matrix, texture, spatial, rotate, ball, arena, radius, joints, hinge, scene, rotation, body, piston]}
net.smert.jreactphysics3d.collision.broadphase.NoBroadPhaseAlgorithm#NoBroadPhaseAlgorithm(C): {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA#computeSilhouette: {[triangle, vertices, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, impulse, delta, motor, collect, velocity, torque, rotate, friction, spatial, scene, geometry, bitmap, cinematic, shader, calculate, quaternion, arena, capsule, rotation, speed, radius, bone, camel, piston, light, matrix, transmission, material, joints, body, hinge, ball, texture]}
org.ode4j.ode.internal.DxGimpact#FetchTransformedTriangle: {[vecf, triangle, collision, collidable, heightfield, plane, vertices, shape, collide, emitter, mass, volume, delta, impulse, velocity, motor, collect, bounding, torque, hallmarks, axes, square, calculate, sphere, friction, shader, speed, light, rotate, spatial, transmission, ball, bitmap, texture, scene, material, bone, quaternion, piston, cinematic, body, camel, arena, radius, hinge, geometry, joints, capsule, matrix, rotation]}
org.ode4j.ode.OdeHelper#createMass: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
org.ode4j.ode.internal.joints.DxJointPlane2D#getInfo1: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
net.smert.jreactphysics3d.engine.CollisionWorld#CollisionWorld(C): {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
org.ode4j.ode.internal.gimpact.GimBufferArrayFloat#GIM_PROCESS_BUFFER_ARRAY: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
net.smert.jreactphysics3d.engine.Material#setFrictionCoefficient: {[mass, friction, delta, torque, impulse, transmission, velocity, motor, arena, joints, body, heightfield, vecf, ball, triangle, emitter, speed, vertices, collide, calculate, collision, collidable, hinge, plane, radius, piston, shape, square, cinematic, capsule, quaternion, geometry, sphere, bitmap, bounding, material, hallmarks, shader, light, axes, spatial, matrix, texture, camel, bone, collect, rotation, scene, rotate, volume]}
org.dyn4j.geometry.Rectangle#getAxes: {[vertices, triangle, vecf, plane, shape, square, collision, collidable, hallmarks, collide, emitter, heightfield, volume, bounding, sphere, axes, rotate, bitmap, cinematic, radius, rotation, shader, capsule, quaternion, geometry, collect, transmission, piston, light, arena, scene, spatial, speed, hinge, calculate, bone, texture, matrix, friction, joints, velocity, camel, impulse, material, delta, torque, motor, body, mass, ball]}
com.jme3.util.mikktspace.MikktspaceTangentGenerator#generateSharedVerticesIndexList: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
com.jme3.input.event.TouchEvent#setDeltaScaleSpan: {[mass, delta, velocity, impulse, motor, torque, transmission, heightfield, friction, speed, vecf, triangle, collidable, collision, radius, square, collide, plane, rotate, joints, hinge, rotation, piston, hallmarks, cinematic, vertices, bitmap, shape, sphere, body, capsule, axes, emitter, arena, ball, collect, geometry, bounding, quaternion, spatial, scene, shader, texture, bone, matrix, calculate, volume, camel, light, material]}
com.jme3.input.event.TouchEvent#toString: {[mass, delta, velocity, impulse, motor, torque, transmission, heightfield, friction, speed, vecf, triangle, collidable, collision, radius, square, collide, plane, rotate, joints, hinge, rotation, piston, hallmarks, cinematic, vertices, bitmap, shape, sphere, body, capsule, axes, emitter, arena, ball, collect, geometry, bounding, quaternion, spatial, scene, shader, texture, bone, matrix, calculate, volume, camel, light, material]}
org.ode4j.ode.internal.joints.DxJointLMotor#getParamFMax: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
com.jme3.effect.influencers.EmptyParticleInfluencer#setVelocityVariation: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.ode4j.ode.internal.CollideTrimeshCCylinder#VEC_SCALE: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.dyn4j.geometry.Geometry#createPolygonalHalfEllipse: {[vertices, triangle, vecf, plane, shape, collidable, collision, heightfield, collide, emitter, hallmarks, square, volume, bounding, sphere, axes, rotate, geometry, radius, cinematic, bitmap, scene, spatial, collect, impulse, rotation, arena, capsule, friction, motor, quaternion, shader, mass, torque, camel, delta, calculate, bone, transmission, velocity, matrix, piston, material, light, body, texture, joints, ball, hinge, speed]}
com.jme3.animation.KillParticleControl#controlUpdate: {[emitter, heightfield, vertices, triangle, shape, vecf, bone, collide, collision, plane, collidable, quaternion, rotate, axes, capsule, volume, rotation, hallmarks, cinematic, spatial, bitmap, arena, sphere, square, piston, bounding, friction, mass, speed, hinge, delta, impulse, torque, matrix, scene, texture, camel, radius, geometry, light, transmission, motor, ball, shader, material, velocity, body, collect, joints, calculate]}
org.ode4j.ode.internal.joints.DxJointLMotor#setParamFMax3: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.internal.joints.DxJointLMotor#setParamFMax2: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.DMass#setMass: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
net.smert.jreactphysics3d.engine.ConstraintSolver#solveVelocityConstraints: {[velocity, mass, delta, motor, impulse, torque, speed, transmission, friction, hinge, rotate, piston, radius, triangle, joints, rotation, square, vecf, heightfield, collidable, axes, collision, body, quaternion, plane, hallmarks, collide, bone, vertices, ball, sphere, arena, scene, collect, spatial, bitmap, texture, material, shape, shader, camel, light, calculate, cinematic, bounding, matrix, emitter, volume, geometry, capsule]}
org.ode4j.ode.internal.gimpact.GimGeometry#CLOSEST_POINT_ON_SEGMENT: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.DAMotorJoint#addTorques: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
org.dyn4j.collision.FixtureIterator#hasNext: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
com.jme3.effect.ParticleEmitterControl#ParticleEmitterControl(C): {[emitter, heightfield, vertices, triangle, shape, vecf, bone, collide, collision, plane, collidable, quaternion, rotate, axes, capsule, volume, rotation, hallmarks, cinematic, spatial, bitmap, arena, sphere, square, piston, bounding, friction, mass, speed, hinge, delta, impulse, torque, matrix, scene, texture, camel, radius, geometry, light, transmission, motor, ball, shader, material, velocity, body, collect, joints, calculate]}
net.smert.jreactphysics3d.constraint.ContactPoint#getFrictionImpulse2: {[mass, delta, velocity, impulse, motor, torque, heightfield, speed, friction, vecf, triangle, transmission, collidable, collision, collide, plane, joints, hinge, vertices, piston, rotate, rotation, radius, square, shape, body, arena, axes, emitter, bitmap, ball, cinematic, capsule, quaternion, hallmarks, spatial, collect, scene, sphere, volume, texture, bone, shader, calculate, geometry, matrix, light, material, camel, bounding]}
org.ode4j.ode.internal.DxConvex#CheckSATConvexFaces: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
net.smert.jreactphysics3d.constraint.ContactPoint#getFrictionImpulse1: {[mass, delta, velocity, impulse, motor, torque, heightfield, speed, friction, vecf, triangle, transmission, collidable, collision, collide, plane, joints, hinge, vertices, piston, rotate, rotation, radius, square, shape, body, arena, axes, emitter, bitmap, ball, cinematic, capsule, quaternion, hallmarks, spatial, collect, scene, sphere, volume, texture, bone, shader, calculate, geometry, matrix, light, material, camel, bounding]}
org.dyn4j.dynamics.joint.PrismaticJoint#setMaximumMotorForce: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.dyn4j.collision.broadphase.BroadphaseFilterAdapter#isAllowed: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.ode4j.ode.internal.joints.DxJointAMotor#addTorques: {[velocity, delta, motor, mass, impulse, torque, speed, heightfield, friction, triangle, collidable, transmission, vecf, collision, hinge, collide, piston, rotate, rotation, plane, joints, axes, square, vertices, radius, body, quaternion, shape, collect, bitmap, cinematic, ball, arena, capsule, hallmarks, scene, emitter, spatial, bone, shader, texture, volume, light, sphere, material, camel, matrix, bounding, calculate, geometry]}
org.dyn4j.dynamics.TimeOfImpactAdapter#collision: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
com.jme3.effect.ParticleEmitterControl#setEnabled: {[emitter, heightfield, vertices, triangle, shape, vecf, bone, collide, collision, plane, collidable, quaternion, rotate, axes, capsule, volume, rotation, hallmarks, cinematic, spatial, bitmap, arena, sphere, square, piston, bounding, friction, mass, speed, hinge, delta, impulse, torque, matrix, scene, texture, camel, radius, geometry, light, transmission, motor, ball, shader, material, velocity, body, collect, joints, calculate]}
com.jme3.renderer.Camera#setPlaneState: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.ode4j.ode.internal.CollideRayCylinder#dColliderFn: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.ode4j.ode.internal.DxMass#setZero: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
org.ode4j.ode.internal.CollideConvexPlane#dCollideConvexPlane: {[heightfield, collidable, plane, collision, collide, vecf, triangle, shape, vertices, emitter, volume, collect, hallmarks, bounding, sphere, square, calculate, motor, impulse, delta, mass, velocity, torque, axes, friction, radius, speed, shader, light, material, capsule, texture, matrix, camel, bone, ball, transmission, rotate, hinge, rotation, cinematic, bitmap, piston, scene, geometry, spatial, arena, joints, body, quaternion]}
com.jme3.audio.Listener#setVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
com.jme3.renderer.Camera#getPlaneState: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.dyn4j.dynamics.Body#setLinearVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
com.jme3.animation.EffectTrack#stop: {[emitter, heightfield, vertices, triangle, shape, vecf, bone, collide, collision, plane, collidable, quaternion, rotate, axes, capsule, volume, rotation, hallmarks, cinematic, spatial, bitmap, arena, sphere, square, piston, bounding, friction, mass, speed, hinge, delta, impulse, torque, matrix, scene, texture, camel, radius, geometry, light, transmission, motor, ball, shader, material, velocity, body, collect, joints, calculate]}
org.ode4j.ode.internal.DxSpace#dSpaceCollide: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.ode4j.ode.internal.DxGimpact#FetchTriangleCount: {[vecf, triangle, collision, collidable, heightfield, plane, vertices, shape, collide, emitter, mass, volume, delta, impulse, velocity, motor, collect, bounding, torque, hallmarks, axes, square, calculate, sphere, friction, shader, speed, light, rotate, spatial, transmission, ball, bitmap, texture, scene, material, bone, quaternion, piston, cinematic, body, camel, arena, radius, hinge, geometry, joints, capsule, matrix, rotation]}
com.jme3.renderer.Camera#contains: {[plane, collidable, vertices, collide, volume, triangle, bounding, shape, collision, heightfield, vecf, hallmarks, sphere, square, collect, emitter, radius, calculate, geometry, scene, transmission, motor, spatial, axes, impulse, camel, speed, matrix, material, torque, texture, velocity, delta, hinge, light, cinematic, piston, quaternion, friction, bitmap, rotate, mass, bone, ball, rotation, shader, body, joints, arena, capsule]}
org.ode4j.ode.internal.DxTrimeshHeightfield#dGeomHeightfieldSetHeightfieldData: {[heightfield, collision, vecf, collide, collidable, triangle, plane, shape, vertices, emitter, delta, volume, impulse, mass, motor, collect, velocity, torque, calculate, bounding, friction, hallmarks, sphere, capsule, axes, cinematic, speed, bone, square, bitmap, shader, material, transmission, light, quaternion, geometry, camel, matrix, texture, spatial, rotate, ball, arena, radius, joints, hinge, scene, rotation, body, piston]}
org.ode4j.ode.internal.gimpact.GimTrimeshRayCollision#gim_trimesh_ray_closest_collision: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, volume, mass, impulse, delta, hallmarks, bounding, motor, velocity, square, collect, axes, torque, sphere, friction, calculate, shader, speed, rotate, light, bitmap, spatial, scene, cinematic, quaternion, transmission, texture, bone, ball, geometry, arena, piston, material, capsule, rotation, radius, body, camel, matrix, hinge, joints]}
org.ode4j.ode.internal.CollideRayConvex#dColliderFn: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_REFLECT: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
com.jme3.scene.Node#getTriangleCount: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
com.jme3.util.mikktspace.MikktspaceTangentGenerator#generateInitialVerticesIndexList: {[vertices, triangle, plane, vecf, shape, square, collidable, collision, hallmarks, collide, heightfield, emitter, volume, bounding, sphere, axes, bitmap, radius, cinematic, rotate, capsule, shader, geometry, collect, transmission, rotation, scene, arena, quaternion, light, spatial, calculate, piston, matrix, friction, impulse, texture, motor, camel, torque, bone, hinge, speed, mass, body, material, joints, ball, delta, velocity]}
org.ode4j.ode.internal.DxTriMesh#FetchTransformedTriangle: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.dyn4j.geometry.Polygon#rotate: {[vertices, triangle, vecf, plane, shape, emitter, collision, collidable, heightfield, collide, axes, rotate, square, hallmarks, volume, rotation, quaternion, bounding, sphere, spatial, geometry, piston, bone, bitmap, scene, cinematic, arena, mass, friction, capsule, shader, hinge, camel, impulse, speed, torque, matrix, radius, collect, delta, light, velocity, material, motor, ball, transmission, joints, body, texture, calculate]}
org.dyn4j.geometry.Polygon#createAABB: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm#shrinkArrays: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
org.ode4j.ode.internal.DxTrimeshHeightfield#resetTriangleBuffer: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.DxHeightfield#dGeomHeightfieldGetHeightfieldData: {[heightfield, collision, vecf, collide, collidable, triangle, plane, shape, vertices, emitter, delta, volume, impulse, mass, motor, collect, velocity, torque, calculate, bounding, friction, hallmarks, sphere, capsule, axes, cinematic, speed, bone, square, bitmap, shader, material, transmission, light, quaternion, geometry, camel, matrix, texture, spatial, rotate, ball, arena, radius, joints, hinge, scene, rotation, body, piston]}
org.dyn4j.collision.broadphase.BroadphaseItem#equals: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
com.jme3.effect.influencers.ParticleInfluencer#getVelocityVariation: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.ode4j.ode.internal.DxGeom#setCollideBits: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.dyn4j.geometry.Segment#getPointOnSegmentClosestToPoint: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.dyn4j.dynamics.Torque#set: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
org.ode4j.ode.internal.DxCollisionUtil#dConstructPlane: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
com.jme3.effect.influencers.NewtonianParticleInfluencer#getNormalVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
net.smert.jreactphysics3d.constraint.SliderJoint#getMaxMotorForce: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.DAMotorJoint#setMode: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.dyn4j.collision.broadphase.SapProxy#toString: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.ode4j.ode.internal.CollideSpaceGeom#dCollideSpaceGeom: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.dyn4j.geometry.Geometry#createTriangle: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
com.jme3.renderer.opengl.GLRenderer#drawTriangleList: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.DxSAPSpace2#collide2: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.dyn4j.dynamics.joint.Joint#getReactionTorque: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
org.dyn4j.geometry.Geometry#getAreaWeightedCenter: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
net.smert.jreactphysics3d.engine.CollisionWorld#removeCollisionShape: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, collect, delta, impulse, motor, hallmarks, calculate, velocity, bounding, square, sphere, axes, torque, shader, light, friction, speed, material, texture, ball, camel, rotate, body, bone, bitmap, piston, geometry, joints, capsule, quaternion, radius, hinge, transmission, rotation, spatial, arena, matrix, cinematic, scene]}
org.dyn4j.dynamics.contact.ContactConstraint#setFriction: {[mass, friction, delta, torque, impulse, transmission, velocity, motor, arena, joints, body, heightfield, vecf, ball, triangle, emitter, speed, vertices, collide, calculate, collision, collidable, hinge, plane, radius, piston, shape, square, cinematic, capsule, quaternion, geometry, sphere, bitmap, bounding, material, hallmarks, shader, light, axes, spatial, matrix, texture, camel, bone, collect, rotation, scene, rotate, volume]}
com.jme3.math.Plane#Plane(C): {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.ode4j.ode.internal.CollideTrimeshTrimesh#dCollideTTL: {[collision, vecf, collidable, heightfield, triangle, plane, collide, shape, vertices, emitter, volume, collect, delta, impulse, motor, mass, calculate, hallmarks, bounding, sphere, velocity, square, torque, axes, shader, friction, speed, light, material, texture, camel, ball, capsule, bone, radius, geometry, body, rotate, rotation, matrix, cinematic, joints, piston, bitmap, quaternion, transmission, arena, spatial, scene, hinge]}
net.smert.jreactphysics3d.constraint.ContactPoint#setFrictionVector2: {[mass, friction, delta, torque, impulse, transmission, velocity, motor, arena, joints, body, heightfield, vecf, ball, triangle, emitter, speed, vertices, collide, calculate, collision, collidable, hinge, plane, radius, piston, shape, square, cinematic, capsule, quaternion, geometry, sphere, bitmap, bounding, material, hallmarks, shader, light, axes, spatial, matrix, texture, camel, bone, collect, rotation, scene, rotate, volume]}
net.smert.jreactphysics3d.constraint.ContactPoint#setFrictionVector1: {[mass, friction, delta, torque, impulse, transmission, velocity, motor, arena, joints, body, heightfield, vecf, ball, triangle, emitter, speed, vertices, collide, calculate, collision, collidable, hinge, plane, radius, piston, shape, square, cinematic, capsule, quaternion, geometry, sphere, bitmap, bounding, material, hallmarks, shader, light, axes, spatial, matrix, texture, camel, bone, collect, rotation, scene, rotate, volume]}
org.ode4j.ode.internal.gimpact.GimGeometry#ACCUM_OUTER_PRODUCT_4X4: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.CollideTrimeshBoxOld#dCollideBTL: {[vecf, triangle, collision, collidable, plane, heightfield, vertices, shape, collide, emitter, volume, mass, impulse, delta, hallmarks, motor, bounding, velocity, collect, square, axes, sphere, torque, calculate, friction, shader, speed, light, rotate, bitmap, spatial, scene, texture, quaternion, bone, material, transmission, ball, cinematic, arena, piston, geometry, camel, radius, rotation, body, capsule, matrix, hinge, joints]}
net.smert.jreactphysics3d.collision.CollisionDetection#removeBody: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
org.dyn4j.collision.broadphase.BroadphaseDetector#remove: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.ode4j.ode.internal.gimpact.GimTrimeshTrimeshCol#CLIP_TRI_POINTS_BY_TRI_EDGE_PLANES: {[vecf, triangle, collision, collidable, plane, heightfield, shape, vertices, collide, emitter, volume, mass, impulse, delta, collect, motor, velocity, hallmarks, bounding, square, sphere, calculate, torque, axes, shader, friction, speed, light, texture, material, bitmap, ball, rotate, camel, cinematic, transmission, spatial, bone, quaternion, piston, scene, body, radius, matrix, arena, joints, geometry, rotation, hinge, capsule]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_LENGTH_2: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
com.jme3.bounding.BoundingBox#collideWithRay: {[collision, vecf, collidable, heightfield, triangle, plane, collide, shape, vertices, emitter, volume, collect, delta, impulse, motor, mass, calculate, hallmarks, bounding, sphere, velocity, square, torque, axes, shader, friction, speed, light, material, texture, camel, ball, capsule, bone, radius, geometry, body, rotate, rotation, matrix, cinematic, joints, piston, bitmap, quaternion, transmission, arena, spatial, scene, hinge]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_LENGTH_4: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.dyn4j.dynamics.joint.PrismaticJoint#solveVelocityConstraints: {[delta, torque, impulse, mass, velocity, motor, friction, speed, transmission, joints, body, hinge, piston, ball, arena, heightfield, triangle, vecf, axes, rotate, square, collidable, radius, collide, calculate, plane, rotation, vertices, collision, bone, hallmarks, quaternion, collect, emitter, bitmap, sphere, spatial, cinematic, scene, shape, capsule, texture, camel, shader, material, light, volume, geometry, bounding, matrix]}
org.ode4j.ode.internal.joints.DxJointAMotor#setParamHiStop3: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
net.smert.jreactphysics3d.collision.BroadPhasePair#BroadPhasePair(C): {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
net.smert.jreactphysics3d.collision.shapes.ConvexMeshShape#getLocalSupportPointWithoutMargin: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.ode4j.ode.internal.joints.DxJointAMotor#setParamHiStop2: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.dyn4j.dynamics.joint.PrismaticJoint#getReactionForce: {[delta, velocity, mass, motor, impulse, torque, speed, heightfield, triangle, vecf, friction, collidable, collision, transmission, collide, rotate, rotation, plane, hinge, piston, joints, vertices, axes, square, radius, shape, quaternion, body, bitmap, cinematic, collect, emitter, arena, capsule, ball, hallmarks, spatial, scene, bone, texture, volume, shader, sphere, light, material, camel, geometry, bounding, calculate, matrix]}
org.dyn4j.dynamics.joint.RevoluteJoint#getMotorSpeed: {[motor, velocity, speed, delta, impulse, mass, rotate, rotation, torque, quaternion, piston, hinge, axes, collidable, heightfield, friction, triangle, vecf, collision, collide, plane, joints, bone, transmission, collect, square, body, radius, vertices, shape, hallmarks, calculate, scene, bitmap, volume, shader, texture, bounding, ball, matrix, material, cinematic, light, capsule, spatial, arena, emitter, camel, sphere, geometry]}
org.dyn4j.dynamics.joint.WheelJoint#isMotorEnabled: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.internal.joints.DxJointAMotor#setParamLoStop: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_PROJECT: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
com.jme3.collision.CollisionResult#getTriangleIndex: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.CollideConvexCylinderCCD#dColliderFn: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
net.smert.jreactphysics3d.collision.shapes.CollisionShape#getType: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, collect, delta, impulse, motor, hallmarks, calculate, velocity, bounding, square, sphere, axes, torque, shader, light, friction, speed, material, texture, ball, camel, rotate, body, bone, bitmap, piston, geometry, joints, capsule, quaternion, radius, hinge, transmission, rotation, spatial, arena, matrix, cinematic, scene]}
org.ode4j.ode.internal.DxGimpactData#DxGimpactData(C): {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
net.smert.jreactphysics3d.collision.narrowphase.NarrowPhaseAlgorithm#testCollision: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, collect, delta, impulse, motor, hallmarks, calculate, velocity, bounding, square, sphere, axes, torque, shader, light, friction, speed, material, texture, ball, camel, rotate, body, bone, bitmap, piston, geometry, joints, capsule, quaternion, radius, hinge, transmission, rotation, spatial, arena, matrix, cinematic, scene]}
net.smert.jreactphysics3d.engine.ContactManifold#getFrictionVector2: {[mass, friction, delta, torque, impulse, transmission, velocity, motor, arena, joints, body, heightfield, vecf, ball, triangle, emitter, speed, vertices, collide, calculate, collision, collidable, hinge, plane, radius, piston, shape, square, cinematic, capsule, quaternion, geometry, sphere, bitmap, bounding, material, hallmarks, shader, light, axes, spatial, matrix, texture, camel, bone, collect, rotation, scene, rotate, volume]}
net.smert.jreactphysics3d.engine.ContactManifold#getFrictionVector1: {[mass, friction, delta, torque, impulse, transmission, velocity, motor, arena, joints, body, heightfield, vecf, ball, triangle, emitter, speed, vertices, collide, calculate, collision, collidable, hinge, plane, radius, piston, shape, square, cinematic, capsule, quaternion, geometry, sphere, bitmap, bounding, material, hallmarks, shader, light, axes, spatial, matrix, texture, camel, bone, collect, rotation, scene, rotate, volume]}
org.dyn4j.collision.broadphase.SapProxy#isSearch: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
net.smert.jreactphysics3d.engine.ContactManifold#setFrictionImpulse2: {[mass, delta, velocity, impulse, motor, torque, heightfield, speed, friction, vecf, triangle, transmission, collidable, collision, collide, plane, joints, hinge, vertices, piston, rotate, rotation, radius, square, shape, body, arena, axes, emitter, bitmap, ball, cinematic, capsule, quaternion, hallmarks, spatial, collect, scene, sphere, volume, texture, bone, shader, calculate, geometry, matrix, light, material, camel, bounding]}
net.smert.jreactphysics3d.engine.ContactManifold#setFrictionImpulse1: {[mass, delta, velocity, impulse, motor, torque, heightfield, speed, friction, vecf, triangle, transmission, collidable, collision, collide, plane, joints, hinge, vertices, piston, rotate, rotation, radius, square, shape, body, arena, axes, emitter, bitmap, ball, cinematic, capsule, quaternion, hallmarks, spatial, collect, scene, sphere, volume, texture, bone, shader, calculate, geometry, matrix, light, material, camel, bounding]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.EPAAlgorithm#addFaceCandidate: {[vertices, vecf, triangle, plane, collision, collidable, shape, heightfield, collide, emitter, square, hallmarks, volume, bounding, sphere, axes, collect, bitmap, shader, cinematic, rotate, impulse, mass, motor, radius, calculate, delta, capsule, velocity, torque, light, friction, geometry, rotation, quaternion, scene, texture, arena, spatial, piston, speed, transmission, material, bone, matrix, ball, hinge, camel, joints, body]}
org.dyn4j.geometry.Segment#translate: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
net.smert.jreactphysics3d.body.RigidBody#setMassInverse: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
org.dyn4j.dynamics.Body#clearAccumulatedTorque: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
org.ode4j.ode.internal.gimpact.GimGeometry#MAT_DOT_VEC_2X3: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.gimpact.GimGeometry#MAT_DOT_VEC_2X2: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.gimpact.GimTrimesh#gim_trimesh_trimesh_collision: {[collision, collidable, vecf, triangle, heightfield, plane, collide, shape, vertices, emitter, collect, volume, calculate, delta, impulse, motor, mass, velocity, bounding, hallmarks, sphere, square, torque, axes, speed, shader, friction, light, ball, texture, material, matrix, camel, bitmap, body, geometry, arena, rotation, capsule, joints, radius, transmission, bone, rotate, piston, cinematic, scene, spatial, quaternion, hinge]}
org.ode4j.ode.internal.gimpact.GimTriCollision#CLASSIFY_TRIPOINTS_BY_FACE: {[vecf, triangle, collision, collidable, plane, vertices, heightfield, shape, collide, emitter, volume, hallmarks, impulse, bounding, mass, square, collect, delta, motor, velocity, sphere, axes, torque, calculate, friction, shader, speed, light, bitmap, rotate, cinematic, texture, material, scene, spatial, arena, quaternion, radius, capsule, transmission, camel, ball, geometry, bone, piston, rotation, joints, matrix, hinge, body]}
net.smert.jreactphysics3d.collision.shapes.ConvexMeshShape#ConvexMeshShape(C): {[vecf, triangle, collision, collidable, plane, vertices, heightfield, shape, collide, emitter, volume, hallmarks, square, bounding, mass, impulse, delta, axes, sphere, collect, motor, velocity, calculate, torque, shader, friction, light, rotate, speed, bitmap, ball, spatial, texture, bone, material, quaternion, scene, piston, cinematic, radius, body, arena, camel, geometry, rotation, hinge, joints, transmission, matrix, capsule]}
org.ode4j.ode.internal.DxTriMeshDisabled#FetchTransformedTriangle: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
net.smert.jreactphysics3d.engine.ContactSolver#setIsSplitImpulseActive: {[mass, delta, velocity, impulse, motor, torque, speed, heightfield, triangle, vecf, friction, collidable, transmission, collision, collide, plane, hinge, joints, rotate, rotation, piston, vertices, radius, square, shape, axes, body, emitter, bitmap, arena, quaternion, cinematic, ball, capsule, hallmarks, collect, spatial, scene, sphere, texture, bone, volume, shader, light, material, geometry, matrix, camel, calculate, bounding]}
org.ode4j.ode.internal.joints.DxJointAMotor#setParamLoStop2: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.internal.joints.DxJointAMotor#setParamLoStop3: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.internal.joints.DxJointAMotor#setParam: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
com.jme3.effect.influencers.DefaultParticleInfluencer#applyVelocityVariation: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
net.smert.jreactphysics3d.engine.DynamicsWorld#createJoint: {[collision, ball, shape, body, collidable, calculate, joints, vecf, triangle, arena, plane, heightfield, collide, piston, hinge, vertices, axes, friction, emitter, torque, transmission, speed, bone, volume, square, collect, impulse, motor, delta, rotate, light, bounding, sphere, hallmarks, shader, velocity, camel, texture, material, radius, mass, capsule, geometry, quaternion, cinematic, spatial, rotation, matrix, scene, bitmap]}
org.ode4j.ode.internal.gimpact.GimGeometry#PLANE_CLIP_SEGMENT: {[vecf, triangle, collision, collidable, plane, vertices, heightfield, shape, collide, emitter, volume, hallmarks, impulse, bounding, mass, square, collect, delta, motor, velocity, sphere, axes, torque, calculate, friction, shader, speed, light, bitmap, rotate, cinematic, texture, material, scene, spatial, arena, quaternion, radius, capsule, transmission, camel, ball, geometry, bone, piston, rotation, joints, matrix, hinge, body]}
net.smert.jreactphysics3d.engine.ContactManifold#setFrictionTwistImpulse: {[mass, delta, velocity, impulse, motor, torque, heightfield, speed, friction, vecf, triangle, transmission, collidable, collision, collide, plane, joints, hinge, vertices, piston, rotate, rotation, radius, square, shape, body, arena, axes, emitter, bitmap, ball, cinematic, capsule, quaternion, hallmarks, spatial, collect, scene, sphere, volume, texture, bone, shader, calculate, geometry, matrix, light, material, camel, bounding]}
org.ode4j.ode.DHingeJoint#addTorque: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
org.dyn4j.dynamics.joint.MotorJoint#toString: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
org.dyn4j.dynamics.joint.FrictionJoint#getMaximumTorque: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
org.ode4j.ode.internal.joints.DxJointPlane2D#setParam: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.internal.gimpact.GimTrimesh#gim_trimesh_update: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.dyn4j.geometry.decompose.DoubleEdgeList#DoubleEdgeList(C): {[vertices, triangle, vecf, plane, shape, collidable, collision, heightfield, collide, emitter, hallmarks, square, volume, bounding, sphere, axes, rotate, geometry, radius, cinematic, bitmap, scene, spatial, collect, impulse, rotation, arena, capsule, friction, motor, quaternion, shader, mass, torque, camel, delta, calculate, bone, transmission, velocity, matrix, piston, material, light, body, texture, joints, ball, hinge, speed]}
org.ode4j.ode.internal.joints.DxJointLMotor#getParamVel2: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.internal.joints.DxJointLMotor#getParamVel3: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
com.jme3.math.FastMath#getBezierP1toP2Length: {[mass, delta, velocity, impulse, motor, torque, transmission, heightfield, friction, speed, vecf, triangle, collidable, collision, radius, square, collide, plane, rotate, joints, hinge, rotation, piston, hallmarks, cinematic, vertices, bitmap, shape, sphere, body, capsule, axes, emitter, arena, ball, collect, geometry, bounding, quaternion, spatial, scene, shader, texture, bone, matrix, calculate, volume, camel, light, material]}
org.ode4j.ode.internal.joints.DxJointLMotor#DxJointLMotor(C): {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
net.smert.jreactphysics3d.body.RigidBody#setAngularVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
com.jme3.util.mikktspace.MikktspaceTangentGenerator#degenPrologue: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.joints.DxJointAMotor#setAngle: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.dyn4j.collision.FixtureIterator#next: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.ode4j.ode.internal.gimpact.GimGeometry#RAY_PLANE_COLLISION: {[vecf, triangle, collision, collidable, plane, heightfield, shape, vertices, collide, emitter, volume, mass, impulse, delta, collect, motor, velocity, hallmarks, bounding, square, sphere, calculate, torque, axes, shader, friction, speed, light, texture, material, bitmap, ball, rotate, camel, cinematic, transmission, spatial, bone, quaternion, piston, scene, body, radius, matrix, arena, joints, geometry, rotation, hinge, capsule]}
net.smert.jreactphysics3d.body.RigidBody#setLinearVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
com.jme3.util.mikktspace.MikkTSpaceImpl#getNumFaces: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.dyn4j.geometry.Mass#getMass: {[mass, velocity, delta, impulse, motor, transmission, torque, radius, triangle, speed, vecf, friction, heightfield, square, collidable, collision, hallmarks, sphere, plane, collide, vertices, rotate, rotation, joints, hinge, piston, spatial, shape, bitmap, axes, scene, body, emitter, cinematic, bounding, arena, texture, ball, quaternion, shader, material, camel, capsule, collect, volume, light, bone, calculate, geometry, matrix]}
org.ode4j.ode.internal.sTrimeshBoxColliderData#_cldClipPolyToPlane: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.dyn4j.geometry.Segment#getPointOnLineClosestToPoint: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.ode4j.ode.internal.libccd.CCD#penEPAPos: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.dyn4j.dynamics.Body#getAngularVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
com.jme3.effect.shapes.EmitterMeshVertexShape#cloneFields: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.ode4j.ode.internal.CollideTrimeshRay#dCollideRTL: {[vecf, triangle, collision, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, motor, collect, velocity, hallmarks, bounding, torque, calculate, sphere, square, axes, friction, shader, speed, light, material, texture, ball, rotate, bone, spatial, camel, transmission, bitmap, scene, quaternion, capsule, piston, body, radius, arena, matrix, cinematic, rotation, joints, geometry, hinge]}
org.ode4j.ode.internal.gimpact.GimBufferArrayFloat#createRef: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
net.smert.jreactphysics3d.engine.DynamicsWorld#setSleepLinearVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.dyn4j.collision.AbstractCollidable#contains: {[vecf, shape, collision, triangle, plane, heightfield, collidable, collide, vertices, emitter, volume, hallmarks, square, sphere, bounding, axes, collect, shader, calculate, light, impulse, material, delta, texture, motor, mass, radius, camel, rotate, velocity, torque, friction, bone, ball, bitmap, piston, quaternion, transmission, geometry, joints, body, hinge, scene, rotation, capsule, speed, spatial, matrix, arena, cinematic]}
org.dyn4j.dynamics.joint.Joint#setCollisionAllowed: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
com.jme3.util.mikktspace.MikkTSpaceContext#getNumVerticesOfFace: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.Utils#link: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
com.jme3.math.Plane#setPlanePoints: {[triangle, vecf, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, volume, mass, impulse, bounding, delta, hallmarks, velocity, motor, collect, square, torque, axes, sphere, friction, calculate, speed, shader, spatial, scene, rotate, bitmap, cinematic, light, geometry, transmission, quaternion, arena, capsule, bone, ball, texture, piston, rotation, camel, joints, radius, matrix, material, hinge, body]}
net.smert.jreactphysics3d.collision.broadphase.PairManager#removePair: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
org.ode4j.ode.internal.sCylinderTrimeshColliderData#TestCollisionForSingleTriangle: {[vecf, triangle, collision, collidable, heightfield, plane, vertices, shape, collide, emitter, mass, volume, delta, impulse, velocity, motor, collect, bounding, torque, hallmarks, axes, square, calculate, sphere, friction, shader, speed, light, rotate, spatial, transmission, ball, bitmap, texture, scene, material, bone, quaternion, piston, cinematic, body, camel, arena, radius, hinge, geometry, joints, capsule, matrix, rotation]}
org.ode4j.ode.internal.gimpact.GimAABBSet#gim_aabbset_bipartite_intersections_brute_force: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
org.ode4j.ode.DGeom#getCollideBits: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
net.smert.jreactphysics3d.engine.ContactSolver#initializeContactConstraints: {[torque, delta, impulse, mass, friction, velocity, motor, transmission, joints, body, speed, ball, hinge, arena, piston, heightfield, triangle, vecf, calculate, axes, square, radius, collidable, vertices, collide, rotate, plane, collision, rotation, emitter, sphere, hallmarks, bone, spatial, bitmap, cinematic, collect, scene, capsule, shape, quaternion, texture, camel, bounding, geometry, shader, material, light, volume, matrix]}
org.ode4j.ode.internal.CollideRayTrimesh#dColliderFn: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.ode4j.ode.internal.joints.DxJointAMotor#dJointGetAMotorMode: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.dyn4j.geometry.Segment#getSegmentIntersection: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.ode4j.ode.internal.gimpact.GimGeometry#PLANE_CLASSIFY_BOX_TZ: {[vecf, triangle, collision, collidable, plane, vertices, heightfield, shape, collide, emitter, volume, hallmarks, impulse, bounding, mass, square, collect, delta, motor, velocity, sphere, axes, torque, calculate, friction, shader, speed, light, bitmap, rotate, cinematic, texture, material, scene, spatial, arena, quaternion, radius, capsule, transmission, camel, ball, geometry, bone, piston, rotation, joints, matrix, hinge, body]}
org.ode4j.ode.internal.CollideConvexTrimeshTrianglesCCD#collide: {[vecf, triangle, vertices, collision, plane, collidable, heightfield, shape, collide, emitter, volume, hallmarks, bounding, mass, square, impulse, delta, motor, sphere, collect, velocity, axes, torque, friction, calculate, shader, rotate, spatial, speed, scene, bitmap, geometry, quaternion, bone, light, arena, cinematic, radius, transmission, rotation, piston, texture, ball, capsule, camel, joints, material, matrix, body, hinge]}
org.ode4j.ode.internal.gimpact.GIM_PROCESS_BUFFER_ARRAY_FN#run: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.dyn4j.geometry.Polygon#getFarthestPoint: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.ode4j.ode.internal.gimpact.GimGeometry#PLANE_CLIP_SEGMENT2: {[vecf, triangle, collision, collidable, plane, vertices, heightfield, shape, collide, emitter, volume, hallmarks, impulse, bounding, mass, square, collect, delta, motor, velocity, sphere, axes, torque, calculate, friction, shader, speed, light, bitmap, rotate, cinematic, texture, material, scene, spatial, arena, quaternion, radius, capsule, transmission, camel, ball, geometry, bone, piston, rotation, joints, matrix, hinge, body]}
org.ode4j.ode.internal.DxHeightfield#DescendingPlaneSort: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_SCALE: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.DBody#setMass: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
org.ode4j.ode.internal.gimpact.GimTrimesh#run: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.joints.DxJointAMotor#dJointSetAMotorMode: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
com.jme3.effect.influencers.NewtonianParticleInfluencer#applyVelocityVariation: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.dyn4j.geometry.decompose.DoubleEdgeList#triangulateYMonotonePolygon: {[vertices, triangle, vecf, plane, shape, collidable, collision, heightfield, collide, emitter, hallmarks, square, volume, bounding, sphere, axes, rotate, geometry, radius, cinematic, bitmap, scene, spatial, collect, impulse, rotation, arena, capsule, friction, motor, quaternion, shader, mass, torque, camel, delta, calculate, bone, transmission, velocity, matrix, piston, material, light, body, texture, joints, ball, hinge, speed]}
org.ode4j.ode.internal.dxTriMeshDisabledData#build: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.dyn4j.geometry.Mass#isInfinite: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
org.ode4j.ode.internal.DxMass#dMassSetTrimeshTotal: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
com.jme3.collision.Collidable#collideWith: {[collision, vecf, collidable, heightfield, triangle, plane, collide, shape, vertices, emitter, volume, collect, delta, impulse, motor, mass, calculate, hallmarks, bounding, velocity, sphere, square, torque, axes, shader, friction, speed, light, material, texture, ball, camel, capsule, bone, radius, geometry, body, matrix, rotation, rotate, cinematic, bitmap, joints, piston, transmission, quaternion, arena, spatial, scene, hinge]}
org.ode4j.ode.internal.DxQuadTreeSpace#collide: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.ode4j.ode.internal.gimpact.GimTrimeshSphereCollision#gim_trimesh_sphere_collision: {[plane, shape, collide, vertices, collidable, vecf, collision, heightfield, triangle, hallmarks, sphere, square, volume, bounding, emitter, radius, collect, transmission, calculate, axes, shader, bitmap, motor, impulse, light, material, texture, rotate, cinematic, camel, speed, geometry, friction, delta, torque, ball, hinge, bone, quaternion, arena, velocity, spatial, capsule, piston, joints, matrix, scene, mass, body, rotation]}
org.dyn4j.collision.broadphase.SapProxy#equals: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.dyn4j.collision.broadphase.BroadphaseDetector#update: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_SCALE_2: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_SCALE_4: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.DxTrimeshHeightfield#dCreateHeightfield: {[heightfield, collision, vecf, collide, collidable, triangle, plane, shape, vertices, emitter, delta, volume, impulse, mass, motor, collect, velocity, torque, calculate, bounding, friction, hallmarks, sphere, capsule, axes, cinematic, speed, bone, square, bitmap, shader, material, transmission, light, quaternion, geometry, camel, matrix, texture, spatial, rotate, ball, arena, radius, joints, hinge, scene, rotation, body, piston]}
org.ode4j.ode.internal.gimpact.GimContact#getNormal: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
com.jme3.effect.shapes.EmitterMeshVertexShape#EmitterMeshVertexShape(C): {[vecf, shape, collision, triangle, heightfield, plane, collide, collidable, vertices, emitter, volume, hallmarks, square, sphere, axes, bounding, collect, shader, calculate, impulse, delta, rotate, mass, light, motor, material, bone, radius, texture, friction, quaternion, torque, camel, velocity, piston, capsule, rotation, ball, hinge, transmission, joints, body, geometry, bitmap, arena, matrix, scene, cinematic, speed, spatial]}
org.dyn4j.dynamics.contact.SolvedContactPoint#getTangentialImpulse: {[mass, delta, velocity, impulse, motor, torque, speed, heightfield, triangle, vecf, friction, collidable, transmission, collision, collide, plane, hinge, joints, rotate, rotation, piston, vertices, radius, square, shape, axes, body, emitter, bitmap, arena, quaternion, cinematic, ball, capsule, hallmarks, collect, spatial, scene, sphere, texture, bone, volume, shader, light, material, geometry, matrix, camel, calculate, bounding]}
com.jme3.collision.SweepSphere#main: {[shape, collide, plane, collision, collidable, heightfield, vecf, triangle, vertices, emitter, volume, hallmarks, sphere, square, bounding, collect, calculate, radius, axes, transmission, shader, light, material, motor, impulse, texture, camel, rotate, ball, delta, bone, capsule, joints, bitmap, body, torque, mass, piston, friction, velocity, spatial, speed, scene, hinge, rotation, quaternion, arena, geometry, matrix, cinematic]}
net.smert.jreactphysics3d.engine.DynamicsWorld#getSleepAngularVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.ode4j.ode.internal.CollideRayPlane#dCollideRayPlane: {[collidable, plane, collide, heightfield, collision, vecf, triangle, shape, vertices, volume, collect, emitter, bounding, sphere, hallmarks, calculate, square, motor, impulse, delta, velocity, torque, mass, speed, radius, axes, matrix, friction, shader, light, material, texture, capsule, camel, ball, hinge, transmission, piston, rotation, bitmap, arena, bone, geometry, quaternion, rotate, cinematic, spatial, scene, joints, body]}
net.smert.jreactphysics3d.engine.CollisionWorld#destroyCollisionBody: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
com.jme3.scene.debug.SkeletonWire#SkeletonWire(C): {[vertices, triangle, vecf, plane, collision, shape, collidable, heightfield, emitter, collide, volume, hallmarks, square, bounding, axes, rotate, sphere, spatial, scene, geometry, mass, impulse, quaternion, rotation, delta, bone, friction, torque, motor, velocity, arena, camel, collect, piston, cinematic, bitmap, matrix, material, radius, capsule, texture, shader, calculate, hinge, transmission, joints, body, light, ball, speed]}
org.dyn4j.dynamics.joint.Joint#solveVelocityConstraints: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.dyn4j.dynamics.Body#getTorque: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
org.ode4j.ode.internal.DxGimpact#DESTRUCTOR: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
org.dyn4j.collision.Fixture#getShape: {[vecf, shape, collision, triangle, plane, heightfield, collidable, collide, vertices, emitter, volume, hallmarks, square, sphere, bounding, axes, collect, shader, calculate, light, impulse, material, delta, texture, motor, mass, radius, camel, rotate, velocity, torque, friction, bone, ball, bitmap, piston, quaternion, transmission, geometry, joints, body, hinge, scene, rotation, capsule, speed, spatial, matrix, arena, cinematic]}
com.jme3.collision.CollisionResult#getTriangle: {[scene, geometry, spatial, camel, vertices, material, texture, triangle, bounding, plane, light, volume, collidable, vecf, shader, collision, emitter, heightfield, shape, hallmarks, collide, sphere, square, velocity, motor, mass, impulse, collect, bone, axes, capsule, cinematic, torque, calculate, speed, rotate, delta, radius, ball, bitmap, hinge, body, friction, piston, rotation, matrix, quaternion, transmission, joints, arena]}
org.ode4j.ode.internal.DxCollisionUtil#dClipPolyToPlane: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
net.smert.jreactphysics3d.collision.shapes.ConeShape#clone: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, collect, delta, impulse, motor, hallmarks, calculate, velocity, bounding, square, sphere, axes, torque, shader, light, friction, speed, material, texture, ball, camel, rotate, body, bone, bitmap, piston, geometry, joints, capsule, quaternion, radius, hinge, transmission, rotation, spatial, arena, matrix, cinematic, scene]}
com.jme3.collision.CollisionResults#getCollision: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
org.ode4j.ode.internal.gimpact.GimGeometry#POINT_IN_HULL: {[vecf, triangle, collision, collidable, plane, vertices, heightfield, shape, collide, emitter, volume, hallmarks, impulse, bounding, mass, square, collect, delta, motor, velocity, sphere, axes, torque, calculate, friction, shader, speed, light, bitmap, rotate, cinematic, texture, material, scene, spatial, arena, quaternion, radius, capsule, transmission, camel, ball, geometry, bone, piston, rotation, joints, matrix, hinge, body]}
org.ode4j.ode.internal.gimpact.GimTriCollision#EDGE_EDGE_TEST: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
com.jme3.effect.ParticlePointMesh#initParticleData: {[emitter, heightfield, vertices, triangle, shape, vecf, bone, collide, collision, plane, collidable, quaternion, rotate, axes, capsule, volume, rotation, hallmarks, cinematic, spatial, bitmap, arena, sphere, square, piston, bounding, friction, mass, speed, hinge, delta, impulse, torque, matrix, scene, texture, camel, radius, geometry, light, transmission, motor, ball, shader, material, velocity, body, collect, joints, calculate]}
org.ode4j.ode.internal.gimpact.GimGeometry#LINE_PLANE_COLLISION: {[vecf, triangle, collision, collidable, plane, heightfield, shape, vertices, collide, emitter, volume, mass, impulse, delta, collect, motor, velocity, hallmarks, bounding, square, sphere, calculate, torque, axes, shader, friction, speed, light, texture, material, bitmap, ball, rotate, camel, cinematic, transmission, spatial, bone, quaternion, piston, scene, body, radius, matrix, arena, joints, geometry, rotation, hinge, capsule]}
org.ode4j.ode.internal.libccd.CCD#expandPolytope: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
net.smert.jreactphysics3d.engine.CollisionWorld#createCollisionShape: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, collect, delta, impulse, motor, hallmarks, calculate, velocity, bounding, square, sphere, axes, torque, shader, light, friction, speed, material, texture, ball, camel, rotate, body, bone, bitmap, piston, geometry, joints, capsule, quaternion, radius, hinge, transmission, rotation, spatial, arena, matrix, cinematic, scene]}
com.jme3.renderer.opengl.GLRenderer#drawTriangleArray: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_ZERO: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.TrianglesStore#last: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.gimpact.GimTrimesh#GIM_CREATE_TRIMESHPLANE_CONTACTS: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.CollideRayBox#dColliderFn: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA#TriangleEPA(C): {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, square, hallmarks, volume, bounding, sphere, axes, bitmap, collect, rotate, cinematic, impulse, mass, shader, motor, delta, velocity, torque, geometry, friction, capsule, scene, spatial, radius, calculate, rotation, quaternion, arena, light, piston, speed, bone, matrix, texture, camel, transmission, hinge, ball, body, joints, material]}
org.ode4j.ode.internal.joints.DxJointAMotor#dJointGetAMotorAxisRel: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.internal.gimpact.GimGeometry#PLANE_CLASSIFY_BOX: {[vecf, triangle, collision, collidable, plane, vertices, heightfield, shape, collide, emitter, volume, hallmarks, impulse, bounding, mass, square, collect, delta, motor, velocity, sphere, axes, torque, calculate, friction, shader, speed, light, bitmap, rotate, cinematic, texture, material, scene, spatial, arena, quaternion, radius, capsule, transmission, camel, ball, geometry, bone, piston, rotation, joints, matrix, hinge, body]}
org.ode4j.ode.internal.DxGimpactCollision#gim_trimesh_sphere_collisionODE: {[sphere, hallmarks, square, collide, plane, shape, volume, bounding, radius, vertices, collidable, collision, heightfield, vecf, triangle, transmission, emitter, collect, calculate, shader, axes, bitmap, material, mass, light, texture, camel, spatial, cinematic, quaternion, rotate, motor, velocity, hinge, ball, geometry, impulse, capsule, piston, speed, scene, bone, delta, joints, torque, arena, rotation, matrix, body, friction]}
org.ode4j.ode.internal.joints.DxJointSlider#setAxisDelta: {[mass, delta, velocity, impulse, motor, torque, transmission, heightfield, friction, speed, vecf, triangle, collidable, collision, radius, square, collide, plane, rotate, joints, hinge, rotation, piston, hallmarks, cinematic, vertices, bitmap, shape, sphere, body, capsule, axes, emitter, arena, ball, collect, geometry, bounding, quaternion, spatial, scene, shader, texture, bone, matrix, calculate, volume, camel, light, material]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_LENGTH: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.CollideRayBox#dCollideRayBox: {[collide, heightfield, collidable, plane, collision, shape, vecf, triangle, vertices, collect, volume, emitter, calculate, sphere, bounding, hallmarks, motor, square, impulse, delta, velocity, torque, matrix, speed, radius, mass, capsule, friction, shader, axes, material, camel, texture, light, geometry, piston, cinematic, transmission, hinge, rotation, spatial, ball, arena, scene, quaternion, bone, rotate, bitmap, body, joints]}
org.ode4j.ode.internal.DxHeightfield#allocateTriangleBuffer: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.joints.DxJointAMotor#setAxis: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.internal.joints.DxJointPlane2D#dJointSetPlane2DYParam: {[shape, vertices, plane, vecf, triangle, collision, collidable, square, collide, heightfield, hallmarks, emitter, axes, volume, sphere, bounding, rotate, radius, collect, rotation, calculate, bitmap, shader, transmission, piston, quaternion, cinematic, hinge, joints, light, speed, texture, bone, body, ball, velocity, capsule, material, mass, delta, geometry, motor, torque, matrix, impulse, friction, arena, camel, scene, spatial]}
net.smert.jreactphysics3d.collision.shapes.BoxShape#isEqualTo: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, collect, delta, impulse, motor, hallmarks, calculate, velocity, bounding, square, sphere, axes, torque, shader, light, friction, speed, material, texture, ball, camel, rotate, body, bone, bitmap, piston, geometry, joints, capsule, quaternion, radius, hinge, transmission, rotation, spatial, arena, matrix, cinematic, scene]}
net.smert.jreactphysics3d.collision.CollisionDetection#selectNarrowPhaseAlgorithm: {[plane, collision, vecf, shape, collidable, collide, heightfield, triangle, vertices, emitter, volume, hallmarks, sphere, square, bounding, collect, calculate, motor, impulse, radius, axes, shader, delta, mass, velocity, light, torque, transmission, material, speed, texture, friction, ball, camel, bitmap, rotate, bone, capsule, body, joints, cinematic, rotation, piston, quaternion, spatial, geometry, hinge, arena, matrix, scene]}
org.dyn4j.geometry.Geometry#createPolygonalEllipse: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.dyn4j.collision.broadphase.DynamicAABBTree#validate: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.dyn4j.geometry.HalfEllipse#translate: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
com.jme3.bounding.BoundingBox#computeFromTris: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.dyn4j.geometry.Polygon#getAxes: {[vertices, triangle, vecf, plane, shape, square, collision, collidable, hallmarks, collide, emitter, heightfield, volume, bounding, sphere, axes, rotate, bitmap, cinematic, radius, rotation, shader, capsule, quaternion, geometry, collect, transmission, piston, light, arena, scene, spatial, speed, hinge, calculate, bone, texture, matrix, friction, joints, velocity, camel, impulse, material, delta, torque, motor, body, mass, ball]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.TrianglesStore#TrianglesStore(C): {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.DxSAPSpace#collide: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.dyn4j.geometry.Link#rotate: {[vertices, triangle, vecf, plane, shape, emitter, collision, collidable, heightfield, collide, axes, rotate, square, hallmarks, volume, rotation, quaternion, bounding, sphere, spatial, geometry, piston, bone, bitmap, scene, cinematic, arena, mass, friction, capsule, shader, hinge, camel, impulse, speed, torque, matrix, radius, collect, delta, light, velocity, material, motor, ball, transmission, joints, body, texture, calculate]}
com.jme3.effect.influencers.DefaultParticleInfluencer#getInitialVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.dyn4j.geometry.Geometry#createIsoscelesTriangle: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.joints.DxJointAMotor#setParamFMax3: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.dyn4j.geometry.Polygon#createMass: {[vertices, geometry, bounding, volume, hallmarks, scene, square, triangle, plane, spatial, camel, vecf, sphere, collidable, material, shape, emitter, collision, texture, collide, heightfield, radius, cinematic, light, axes, rotate, capsule, transmission, shader, bitmap, rotation, collect, bone, delta, calculate, piston, mass, quaternion, speed, friction, velocity, arena, joints, body, hinge, torque, ball, matrix, impulse, motor]}
org.ode4j.ode.internal.joints.DxJointAMotor#setParamFMax2: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
net.smert.jreactphysics3d.body.RigidBody#getExternalTorque: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
com.jme3.animation.EffectTrack#removeUserData: {[emitter, heightfield, vertices, triangle, shape, vecf, bone, collide, collision, plane, collidable, quaternion, rotate, axes, capsule, volume, rotation, hallmarks, cinematic, spatial, bitmap, arena, sphere, square, piston, bounding, friction, mass, speed, hinge, delta, impulse, torque, matrix, scene, texture, camel, radius, geometry, light, transmission, motor, ball, shader, material, velocity, body, collect, joints, calculate]}
com.jme3.effect.influencers.DefaultParticleInfluencer#setInitialVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
com.jme3.collision.SweepSphere#collideWithSweepSphere: {[shape, plane, collide, collision, collidable, vecf, vertices, heightfield, triangle, hallmarks, square, sphere, volume, emitter, bounding, radius, collect, calculate, axes, transmission, shader, light, material, texture, rotate, bitmap, camel, ball, motor, impulse, joints, bone, cinematic, spatial, piston, body, rotation, scene, delta, hinge, capsule, quaternion, friction, torque, mass, arena, matrix, speed, velocity, geometry]}
com.jme3.scene.mesh.VirtualIndexBuffer#get: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.dyn4j.geometry.Shape#createMass: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
com.jme3.collision.SweepSphere#getVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
com.jme3.audio.AudioSource#getVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.ode4j.ode.internal.DxAbstractHeightfield#dCollideHeightfieldZone: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, friction, radius, axes, speed, shader, material, cinematic, camel, light, texture, bone, geometry, matrix, ball, bitmap, transmission, rotation, hinge, scene, spatial, piston, rotate, joints, arena, quaternion, body]}
org.ode4j.ode.internal.DxHeightfield#resetTriangleBuffer: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
net.smert.jreactphysics3d.engine.CollisionWorld#createCollisionBody: {[collision, shape, collidable, vecf, triangle, plane, heightfield, ball, collide, calculate, body, vertices, joints, arena, piston, emitter, hinge, axes, friction, volume, transmission, square, torque, collect, sphere, bounding, bone, hallmarks, light, shader, speed, rotate, camel, texture, material, impulse, capsule, rotation, geometry, motor, delta, mass, radius, cinematic, bitmap, spatial, velocity, scene, quaternion, matrix]}
com.jme3.animation.EffectTrack#setEmitter: {[emitter, heightfield, vertices, triangle, shape, vecf, bone, collide, collision, plane, collidable, quaternion, rotate, axes, capsule, volume, rotation, hallmarks, cinematic, spatial, bitmap, arena, sphere, square, piston, bounding, friction, mass, speed, hinge, delta, impulse, torque, matrix, scene, texture, camel, radius, geometry, light, transmission, motor, ball, shader, material, velocity, body, collect, joints, calculate]}
org.ode4j.ode.internal.DxGimpactData#getDataRef: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.ode4j.ode.DGeom#setCollideBits: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.ode4j.ode.internal.CollideTrimeshPlane#dColliderFn: {[heightfield, collidable, plane, collision, collide, vecf, triangle, shape, vertices, emitter, volume, collect, hallmarks, bounding, sphere, square, calculate, motor, impulse, delta, mass, velocity, torque, axes, friction, radius, speed, shader, light, material, capsule, texture, matrix, camel, bone, ball, transmission, rotate, hinge, rotation, cinematic, bitmap, piston, scene, geometry, spatial, arena, joints, body, quaternion]}
net.smert.jreactphysics3d.collision.shapes.ConvexMeshShape#addVertex: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.ode4j.ode.internal.joints.DxJointLMotor#getParam: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
com.jme3.scene.Mesh#deepClone: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
com.jme3.input.InputManager#invokeTimedActions: {[mass, delta, velocity, impulse, motor, torque, transmission, heightfield, friction, speed, vecf, triangle, collidable, collision, radius, square, collide, plane, rotate, joints, hinge, rotation, piston, hallmarks, cinematic, vertices, bitmap, shape, sphere, body, capsule, axes, emitter, arena, ball, collect, geometry, bounding, quaternion, spatial, scene, shader, texture, bone, matrix, calculate, volume, camel, light, material]}
org.dyn4j.dynamics.Body#getWorldCenter: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
com.jme3.input.InputManager#onMouseMotionEventQueued: {[mass, delta, velocity, impulse, motor, torque, transmission, heightfield, friction, speed, vecf, triangle, collidable, collision, radius, square, collide, plane, rotate, joints, hinge, rotation, piston, hallmarks, cinematic, vertices, bitmap, shape, sphere, body, capsule, axes, emitter, arena, ball, collect, geometry, bounding, quaternion, spatial, scene, shader, texture, bone, matrix, calculate, volume, camel, light, material]}
org.dyn4j.dynamics.CollisionListener#collision: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
org.dyn4j.collision.AbstractCollidable#removeFixtures: {[vecf, shape, collision, triangle, plane, heightfield, collidable, collide, vertices, emitter, volume, hallmarks, square, sphere, bounding, axes, collect, shader, calculate, light, impulse, material, delta, texture, motor, mass, radius, camel, rotate, velocity, torque, friction, bone, ball, bitmap, piston, quaternion, transmission, geometry, joints, body, hinge, scene, rotation, capsule, speed, spatial, matrix, arena, cinematic]}
net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm#SweepAndPruneAlgorithm(C): {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
org.ode4j.ode.internal.DxPlane#dGeomPlanePointDepth: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.ode4j.ode.internal.gimpact.GimBufferArrayFloat#cloneValues: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.DTriTriMergeCallback#call: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
com.jme3.input.InputManager#computeAnalogValue: {[mass, delta, velocity, impulse, motor, torque, transmission, heightfield, friction, speed, vecf, triangle, collidable, collision, radius, square, collide, plane, rotate, joints, hinge, rotation, piston, hallmarks, cinematic, vertices, bitmap, shape, sphere, body, capsule, axes, emitter, arena, ball, collect, geometry, bounding, quaternion, spatial, scene, shader, texture, bone, matrix, calculate, volume, camel, light, material]}
org.ode4j.ode.internal.gimpact.GimGeometry#NORM_XFORM_2X2: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
net.smert.jreactphysics3d.body.CollisionBody#updateAABB: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, collect, delta, impulse, motor, hallmarks, calculate, velocity, bounding, square, sphere, axes, torque, shader, light, friction, speed, material, texture, ball, camel, rotate, body, bone, bitmap, piston, geometry, joints, capsule, quaternion, radius, hinge, transmission, rotation, spatial, arena, matrix, cinematic, scene]}
com.jme3.renderer.Statistics#onMeshDrawn: {[triangle, vecf, vertices, collision, plane, collidable, heightfield, shape, collide, emitter, volume, mass, hallmarks, bounding, square, impulse, axes, delta, velocity, motor, torque, sphere, friction, collect, spatial, scene, rotate, geometry, bitmap, cinematic, shader, quaternion, calculate, arena, speed, capsule, transmission, rotation, camel, bone, piston, light, matrix, material, joints, hinge, ball, body, radius, texture]}
org.dyn4j.geometry.Segment#rotate: {[vertices, triangle, vecf, plane, shape, emitter, collision, collidable, heightfield, collide, axes, rotate, square, hallmarks, volume, rotation, quaternion, bounding, sphere, spatial, geometry, piston, bone, bitmap, scene, cinematic, arena, mass, friction, capsule, shader, hinge, camel, impulse, speed, torque, matrix, radius, collect, delta, light, velocity, material, motor, ball, transmission, joints, body, texture, calculate]}
org.dyn4j.dynamics.joint.WheelJoint#initializeConstraints: {[delta, torque, impulse, mass, friction, velocity, motor, transmission, speed, joints, body, piston, hinge, ball, geometry, arena, heightfield, material, camel, vecf, square, texture, light, radius, scene, axes, collide, rotate, triangle, shader, spatial, collidable, calculate, bounding, collision, hallmarks, rotation, bone, plane, sphere, cinematic, capsule, collect, volume, shape, vertices, emitter, quaternion, bitmap, matrix]}
org.dyn4j.collision.broadphase.DynamicAABBTree#update: {[vecf, collision, collidable, triangle, plane, shape, heightfield, collide, vertices, emitter, volume, hallmarks, square, collect, sphere, bounding, calculate, axes, impulse, delta, motor, mass, shader, velocity, light, torque, material, texture, friction, radius, camel, speed, ball, rotate, bitmap, bone, piston, body, quaternion, joints, transmission, geometry, capsule, cinematic, hinge, matrix, scene, rotation, spatial, arena]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_DIFF_4: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_DIFF_2: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.dyn4j.geometry.Slice#getFoci: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.dyn4j.dynamics.joint.WheelJoint#solveVelocityConstraints: {[delta, torque, impulse, mass, velocity, motor, friction, speed, transmission, joints, body, hinge, piston, ball, arena, heightfield, triangle, vecf, axes, rotate, square, collidable, radius, collide, plane, calculate, vertices, rotation, collision, bone, hallmarks, collect, quaternion, emitter, bitmap, sphere, spatial, cinematic, scene, shape, capsule, texture, camel, shader, material, light, volume, geometry, bounding, matrix]}
org.ode4j.ode.internal.gimpact.GimGeometry#EDGE_PLANE: {[vecf, triangle, collision, collidable, plane, vertices, heightfield, shape, collide, emitter, volume, hallmarks, impulse, bounding, mass, square, collect, delta, motor, velocity, sphere, axes, torque, calculate, friction, shader, speed, light, bitmap, rotate, cinematic, texture, material, scene, spatial, arena, quaternion, radius, capsule, transmission, camel, ball, geometry, bone, piston, rotation, joints, matrix, hinge, body]}
net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex#computeClosestPointsOfAandB: {[mass, delta, velocity, impulse, motor, torque, transmission, heightfield, friction, speed, vecf, triangle, collidable, collision, radius, square, collide, plane, rotate, joints, hinge, rotation, piston, hallmarks, cinematic, vertices, bitmap, shape, sphere, body, capsule, axes, emitter, arena, ball, collect, geometry, bounding, quaternion, spatial, scene, shader, texture, bone, matrix, calculate, volume, camel, light, material]}
org.ode4j.ode.internal.gimpact.GIM_TRIANGLE_RAY_CONTACT_DATA#getPoint: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.CollideRaySphere#dColliderFn: {[collide, plane, shape, sphere, heightfield, collidable, hallmarks, volume, collision, vecf, bounding, vertices, square, triangle, radius, emitter, collect, calculate, transmission, motor, shader, capsule, impulse, axes, material, speed, camel, quaternion, hinge, texture, light, piston, delta, spatial, torque, bone, friction, rotation, ball, matrix, bitmap, scene, velocity, cinematic, mass, rotate, geometry, body, arena, joints]}
org.ode4j.ode.internal.DxHeightfieldData#build: {[heightfield, collision, vecf, collide, collidable, triangle, plane, shape, vertices, emitter, delta, volume, impulse, mass, motor, collect, velocity, torque, calculate, bounding, friction, hallmarks, sphere, capsule, axes, cinematic, speed, bone, square, bitmap, shader, material, transmission, light, quaternion, geometry, camel, matrix, texture, spatial, rotate, ball, arena, radius, joints, hinge, scene, rotation, body, piston]}
org.dyn4j.geometry.Polygon#toString: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.ode4j.ode.internal.DxHeightfield#dCollideHeightfieldZone: {[heightfield, collide, collision, shape, collidable, plane, vecf, triangle, emitter, vertices, volume, capsule, sphere, hallmarks, bounding, impulse, delta, motor, cinematic, collect, bone, mass, calculate, torque, bitmap, velocity, square, friction, axes, radius, spatial, speed, quaternion, rotate, ball, scene, arena, material, texture, piston, body, camel, shader, light, geometry, transmission, rotation, matrix, joints, hinge]}
org.dyn4j.dynamics.Torque#Torque(C): {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
com.jme3.collision.CollisionResult#toString: {[scene, geometry, spatial, camel, material, vertices, texture, triangle, light, bounding, plane, volume, vecf, shader, collidable, collision, emitter, heightfield, shape, hallmarks, collide, square, sphere, mass, velocity, motor, impulse, capsule, bone, axes, cinematic, torque, rotate, delta, collect, speed, arena, friction, rotation, transmission, calculate, radius, joints, hinge, bitmap, piston, matrix, quaternion, ball, body]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_ACCUM: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.dyn4j.dynamics.joint.MotorJoint#setMaximumTorque: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.EdgeEPA#getSourceVertexIndex: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
com.jme3.effect.influencers.ParticleInfluencer#influenceParticle: {[vecf, shape, collision, triangle, heightfield, plane, collide, collidable, vertices, emitter, volume, hallmarks, square, sphere, axes, bounding, collect, shader, calculate, impulse, delta, rotate, mass, light, motor, material, bone, radius, texture, friction, quaternion, torque, camel, velocity, piston, capsule, rotation, ball, hinge, transmission, joints, body, geometry, bitmap, arena, matrix, scene, cinematic, speed, spatial]}
com.jme3.scene.Mesh#clone: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
com.jme3.math.FastMath#pointInsideTriangle: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.Utils#halfLink: {[triangle, vecf, vertices, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, bounding, square, sphere, axes, impulse, mass, collect, delta, motor, velocity, torque, friction, rotate, calculate, spatial, scene, shader, bitmap, geometry, cinematic, speed, quaternion, arena, radius, light, rotation, bone, capsule, piston, camel, transmission, texture, joints, ball, matrix, body, hinge, material]}
org.dyn4j.dynamics.joint.Joint#toString: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
org.ode4j.ode.internal.joints.DxJointPlane2D#getYParamVel: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.dyn4j.geometry.Geometry#createTriangleAtOrigin: {[scene, geometry, spatial, camel, material, vertices, texture, triangle, light, bounding, plane, volume, vecf, shader, collidable, collision, emitter, heightfield, shape, hallmarks, collide, square, sphere, mass, velocity, motor, impulse, capsule, bone, axes, cinematic, torque, rotate, delta, collect, speed, arena, friction, rotation, transmission, calculate, radius, joints, hinge, bitmap, piston, matrix, quaternion, ball, body]}
com.jme3.effect.ParticleEmitter#cloneFields: {[vecf, shape, collision, triangle, plane, heightfield, collidable, collide, vertices, emitter, volume, hallmarks, square, sphere, bounding, axes, collect, shader, calculate, light, impulse, material, delta, texture, motor, mass, radius, camel, rotate, velocity, torque, friction, bone, ball, bitmap, piston, quaternion, transmission, geometry, joints, body, hinge, scene, rotation, capsule, speed, spatial, matrix, arena, cinematic]}
org.ode4j.math.DMatrixN#clearUpperTriangle: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm#updateObjectIntegerAABB: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
org.ode4j.ode.internal.gimpact.GimContact#GIM_PUSH_CONTACT: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_SUM: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.DGeom#collide2: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.EdgeEPA#EdgeEPA(C): {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.DxCollisionUtil#dCollideSpheres: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.ode4j.ode.internal.CollisionLibccd#run: {[hallmarks, sphere, square, bounding, volume, radius, plane, shape, vertices, collide, collidable, vecf, collision, triangle, heightfield, transmission, emitter, collect, calculate, axes, bitmap, geometry, mass, shader, cinematic, rotate, velocity, delta, arena, hinge, light, quaternion, scene, bone, rotation, material, texture, torque, piston, matrix, body, motor, capsule, impulse, camel, ball, friction, joints, speed, spatial]}
net.smert.jreactphysics3d.collision.CollisionDetection#computeCollisionDetection: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
org.dyn4j.collision.broadphase.BroadphasePair#equals: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.ode4j.ode.OdeHelper#createPlane2DJoint: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.dyn4j.dynamics.contact.ContactConstraint#getFriction: {[mass, friction, delta, torque, impulse, transmission, velocity, motor, arena, joints, body, heightfield, vecf, ball, triangle, emitter, speed, vertices, collide, calculate, collision, collidable, hinge, plane, radius, piston, shape, square, cinematic, capsule, quaternion, geometry, sphere, bitmap, bounding, material, hallmarks, shader, light, axes, spatial, matrix, texture, camel, bone, collect, rotation, scene, rotate, volume]}
com.jme3.effect.influencers.EmptyParticleInfluencer#getVelocityVariation: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
com.jme3.util.TangentBinormalGenerator#splitVertices: {[triangle, vecf, vertices, collision, plane, collidable, heightfield, shape, collide, emitter, volume, mass, hallmarks, bounding, square, impulse, axes, delta, velocity, motor, torque, sphere, friction, collect, spatial, scene, rotate, geometry, bitmap, cinematic, shader, quaternion, calculate, arena, speed, capsule, transmission, rotation, camel, bone, piston, light, matrix, material, joints, hinge, ball, body, radius, texture]}
org.dyn4j.dynamics.joint.RevoluteJoint#getReactionForce: {[mass, delta, velocity, impulse, motor, torque, speed, heightfield, triangle, vecf, friction, collidable, transmission, collision, collide, plane, hinge, joints, rotate, rotation, piston, vertices, radius, square, shape, axes, body, emitter, bitmap, arena, quaternion, cinematic, ball, capsule, hallmarks, collect, spatial, scene, sphere, texture, bone, volume, shader, light, material, geometry, matrix, camel, calculate, bounding]}
com.jme3.effect.shapes.EmitterSphereShape#deepClone: {[sphere, hallmarks, square, collide, shape, plane, volume, radius, bounding, vertices, collidable, heightfield, collision, vecf, triangle, emitter, transmission, collect, calculate, axes, shader, mass, material, bitmap, rotate, light, texture, camel, velocity, capsule, bone, geometry, motor, spatial, quaternion, ball, cinematic, hinge, impulse, delta, joints, arena, matrix, torque, scene, piston, speed, rotation, body, friction]}
org.dyn4j.geometry.Rectangle#Rectangle(C): {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.dyn4j.collision.FixtureIterator#remove: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.dyn4j.dynamics.joint.PrismaticJoint#getReactionTorque: {[mass, delta, velocity, impulse, motor, torque, speed, heightfield, friction, triangle, transmission, vecf, collidable, collision, collide, plane, joints, hinge, piston, vertices, radius, rotate, square, rotation, body, shape, axes, arena, emitter, bitmap, ball, cinematic, capsule, quaternion, hallmarks, collect, spatial, scene, sphere, texture, shader, volume, bone, light, material, camel, calculate, geometry, bounding, matrix]}
org.ode4j.ode.ragdoll.DRagdollConfig#getMass: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
org.ode4j.ode.internal.joints.DxJointAMotor#getMode: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
com.jme3.input.event.MouseMotionEvent#toString: {[mass, delta, velocity, impulse, motor, torque, transmission, heightfield, friction, speed, vecf, triangle, collidable, collision, radius, square, collide, plane, rotate, joints, hinge, rotation, piston, hallmarks, cinematic, vertices, bitmap, shape, sphere, body, capsule, axes, emitter, arena, ball, collect, geometry, bounding, quaternion, spatial, scene, shader, texture, bone, matrix, calculate, volume, camel, light, material]}
org.dyn4j.dynamics.contact.WarmStartingContactManager#WarmStartingContactManager(C): {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
org.ode4j.ode.DMassC#getMass: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.TrianglesStore#newTriangle: {[triangle, vecf, vertices, collision, plane, collidable, heightfield, shape, collide, emitter, volume, mass, hallmarks, bounding, square, impulse, axes, delta, velocity, motor, torque, sphere, friction, collect, spatial, scene, rotate, geometry, bitmap, cinematic, shader, quaternion, calculate, arena, speed, capsule, transmission, rotation, camel, bone, piston, light, matrix, material, joints, hinge, ball, body, radius, texture]}
net.smert.jreactphysics3d.constraint.HingeJoint#getMotorSpeed: {[motor, velocity, speed, delta, impulse, mass, rotate, rotation, torque, quaternion, piston, hinge, axes, collidable, heightfield, friction, triangle, vecf, collision, collide, plane, joints, bone, transmission, collect, square, body, radius, vertices, shape, hallmarks, calculate, scene, bitmap, volume, shader, texture, bounding, ball, matrix, material, cinematic, light, capsule, spatial, arena, emitter, camel, sphere, geometry]}
org.ode4j.ode.DHeightfield#setHeightfieldData: {[heightfield, collision, vecf, collide, collidable, triangle, plane, shape, vertices, emitter, delta, volume, impulse, mass, motor, collect, velocity, torque, calculate, bounding, friction, hallmarks, sphere, capsule, axes, cinematic, speed, bone, square, bitmap, shader, material, transmission, light, quaternion, geometry, camel, matrix, texture, spatial, rotate, ball, arena, radius, joints, hinge, scene, rotation, body, piston]}
com.jme3.input.InputManager#update: {[mass, delta, velocity, impulse, motor, torque, transmission, heightfield, friction, speed, vecf, triangle, collidable, collision, radius, square, collide, plane, rotate, joints, hinge, rotation, piston, hallmarks, cinematic, vertices, bitmap, shape, sphere, body, capsule, axes, emitter, arena, ball, collect, geometry, bounding, quaternion, spatial, scene, shader, texture, bone, matrix, calculate, volume, camel, light, material]}
org.ode4j.ode.internal.DxQuadTreeSpace#collide2: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.dyn4j.collision.broadphase.Sap#detect: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, collect, impulse, motor, velocity, calculate, bounding, hallmarks, torque, sphere, square, axes, shader, friction, speed, light, ball, material, texture, camel, body, bitmap, bone, rotate, transmission, piston, geometry, rotation, joints, capsule, matrix, spatial, scene, quaternion, arena, hinge, cinematic, radius]}
com.jme3.bounding.BoundingSphere#collideWithRay: {[sphere, collide, hallmarks, shape, plane, square, volume, collidable, heightfield, radius, bounding, collision, vertices, vecf, triangle, emitter, transmission, collect, calculate, shader, axes, material, camel, texture, light, capsule, mass, spatial, motor, bitmap, quaternion, impulse, ball, scene, rotate, hinge, bone, speed, velocity, piston, joints, cinematic, rotation, matrix, geometry, body, friction, arena, delta, torque]}
com.jme3.math.CurveAndSurfaceMath#prepareNurbsKnots: {[mass, delta, velocity, impulse, motor, torque, transmission, heightfield, friction, speed, vecf, triangle, collidable, collision, radius, square, collide, plane, rotate, joints, hinge, rotation, piston, hallmarks, cinematic, vertices, bitmap, shape, sphere, body, capsule, axes, emitter, arena, ball, collect, geometry, bounding, quaternion, spatial, scene, shader, texture, bone, matrix, calculate, volume, camel, light, material]}
com.jme3.audio.AudioNode#setVelocityFromTranslation: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.ode4j.ode.internal.DxHeightfieldData#dGeomHeightfieldDataBuildShort: {[heightfield, collision, vecf, collide, collidable, triangle, plane, shape, vertices, emitter, delta, volume, impulse, mass, motor, collect, velocity, torque, calculate, bounding, friction, hallmarks, sphere, capsule, axes, cinematic, speed, bone, square, bitmap, shader, material, transmission, light, quaternion, geometry, camel, matrix, texture, spatial, rotate, ball, arena, radius, joints, hinge, scene, rotation, body, piston]}
org.ode4j.ode.internal.gimpact.GimGeometry#AABB_POINT_EXTEND: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.DxMass#setTrimeshTotal: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
com.jme3.effect.shapes.EmitterMeshVertexShape#getRandomPoint: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.dyn4j.collision.AbstractCollidable#getFixture: {[vecf, shape, collision, triangle, plane, heightfield, collidable, collide, vertices, emitter, volume, hallmarks, square, sphere, bounding, axes, collect, shader, calculate, light, impulse, material, delta, texture, motor, mass, radius, camel, rotate, velocity, torque, friction, bone, ball, bitmap, piston, quaternion, transmission, geometry, joints, body, hinge, scene, rotation, capsule, speed, spatial, matrix, arena, cinematic]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_DOT_MAT_3X3: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.dyn4j.dynamics.joint.PinJoint#getReactionTorque: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
org.dyn4j.collision.broadphase.BroadphasePair#toString: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
net.smert.jreactphysics3d.body.RigidBody#applyTorque: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
com.jme3.bounding.BoundingVolume#getCheckPlane: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
com.jme3.effect.shapes.EmitterBoxShape#EmitterBoxShape(C): {[vecf, shape, collision, triangle, heightfield, plane, collide, collidable, vertices, emitter, volume, hallmarks, square, sphere, axes, bounding, collect, shader, calculate, impulse, delta, rotate, mass, light, motor, material, bone, radius, texture, friction, quaternion, torque, camel, velocity, piston, capsule, rotation, ball, hinge, transmission, joints, body, geometry, bitmap, arena, matrix, scene, cinematic, speed, spatial]}
org.ode4j.ode.internal.joints.DxJointPlane2D#DxJointPlane2D(C): {[shape, vertices, plane, vecf, triangle, collision, collidable, square, collide, heightfield, hallmarks, emitter, axes, volume, sphere, bounding, rotate, radius, collect, rotation, calculate, bitmap, shader, transmission, piston, quaternion, cinematic, hinge, joints, light, speed, texture, bone, body, ball, velocity, capsule, material, mass, delta, geometry, motor, torque, matrix, impulse, friction, arena, camel, scene, spatial]}
org.dyn4j.geometry.Segment#getPoint1: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.dyn4j.geometry.Segment#getPoint2: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
com.jme3.animation.EffectTrack#setTime: {[emitter, heightfield, vertices, triangle, shape, vecf, bone, collide, collision, plane, collidable, quaternion, rotate, axes, capsule, volume, rotation, hallmarks, cinematic, spatial, bitmap, arena, sphere, square, piston, bounding, friction, mass, speed, hinge, delta, impulse, torque, matrix, scene, texture, camel, radius, geometry, light, transmission, motor, ball, shader, material, velocity, body, collect, joints, calculate]}
org.dyn4j.dynamics.CollisionAdapter#collision: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
org.ode4j.ode.internal.DxMass#dMassSetBoxTotal: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
com.jme3.bounding.BoundingVolume#setCheckPlane: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.ode4j.ode.internal.DxMass#translate: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
net.smert.jreactphysics3d.collision.shapes.ConeShape#isEqualTo: {[sphere, hallmarks, square, collide, shape, plane, radius, volume, bounding, vertices, collidable, collision, heightfield, vecf, triangle, transmission, emitter, collect, calculate, shader, axes, mass, material, bitmap, light, texture, camel, velocity, spatial, rotate, cinematic, quaternion, capsule, delta, ball, scene, bone, torque, joints, geometry, hinge, motor, piston, friction, impulse, body, speed, rotation, arena, matrix]}
net.smert.jreactphysics3d.collision.broadphase.BroadPhaseAlgorithm#removeObject: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
net.smert.jreactphysics3d.constraint.ContactPoint#setPenetrationImpulse: {[mass, delta, velocity, impulse, motor, torque, speed, heightfield, triangle, vecf, friction, collidable, transmission, collision, collide, plane, hinge, joints, rotate, rotation, piston, vertices, radius, square, shape, axes, body, emitter, bitmap, arena, quaternion, cinematic, ball, capsule, hallmarks, collect, spatial, scene, sphere, texture, bone, volume, shader, light, material, geometry, matrix, camel, calculate, bounding]}
net.smert.jreactphysics3d.engine.OverlappingPair#OverlappingPair(C): {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
org.ode4j.ode.OdeHelper#createLMotorJoint: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
net.smert.jreactphysics3d.engine.ContactManifold#getFrictionTwistImpulse: {[mass, delta, velocity, impulse, motor, torque, heightfield, speed, friction, vecf, triangle, transmission, collidable, collision, collide, plane, joints, hinge, vertices, piston, rotate, rotation, radius, square, shape, body, arena, axes, emitter, bitmap, ball, cinematic, capsule, quaternion, hallmarks, spatial, collect, scene, sphere, volume, texture, bone, shader, calculate, geometry, matrix, light, material, camel, bounding]}
com.jme3.effect.shapes.EmitterMeshFaceShape#EmitterMeshFaceShape(C): {[vecf, shape, collision, triangle, heightfield, plane, collide, collidable, vertices, emitter, volume, hallmarks, square, sphere, axes, bounding, collect, shader, calculate, impulse, delta, rotate, mass, light, motor, material, bone, radius, texture, friction, quaternion, torque, camel, velocity, piston, capsule, rotation, ball, hinge, transmission, joints, body, geometry, bitmap, arena, matrix, scene, cinematic, speed, spatial]}
net.smert.jreactphysics3d.collision.shapes.ConeShape#ConeShape(C): {[sphere, hallmarks, square, collide, shape, plane, radius, volume, bounding, vertices, collidable, collision, heightfield, vecf, triangle, transmission, emitter, collect, calculate, shader, axes, mass, material, bitmap, light, texture, camel, velocity, spatial, rotate, cinematic, quaternion, capsule, delta, ball, scene, bone, torque, joints, geometry, hinge, motor, piston, friction, impulse, body, speed, rotation, arena, matrix]}
com.jme3.collision.MotionAllowedListener#checkMotionAllowed: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA#computeClosestPoint: {[vertices, triangle, plane, vecf, shape, square, collidable, collision, hallmarks, collide, heightfield, emitter, volume, bounding, sphere, axes, bitmap, radius, cinematic, rotate, capsule, shader, geometry, collect, transmission, rotation, scene, arena, quaternion, light, spatial, calculate, piston, matrix, friction, impulse, texture, motor, camel, torque, bone, hinge, speed, mass, body, material, joints, ball, delta, velocity]}
net.smert.jreactphysics3d.collision.broadphase.PairManager#addPair: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.EdgeEPA#computeSilhouette: {[triangle, vertices, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, impulse, delta, motor, collect, velocity, torque, rotate, friction, spatial, scene, geometry, bitmap, cinematic, shader, calculate, quaternion, arena, capsule, rotation, speed, radius, bone, camel, piston, light, matrix, transmission, material, joints, body, hinge, ball, texture]}
org.ode4j.ode.internal.DxCollisionUtil#dPointPlaneDistance: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.ode4j.ode.OdeHelper#createAMotorJoint: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.dyn4j.geometry.decompose.SweepLine#triangulate: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.gimpact.GimGeometry#ACCUM_OUTER_PRODUCT_2X2: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.Block#CollideLocal: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.ode4j.ode.internal.gimpact.GimTriCollision#PLANE_CLIP_POLYGON: {[vecf, triangle, collision, collidable, plane, vertices, heightfield, shape, collide, emitter, volume, hallmarks, impulse, bounding, mass, square, collect, delta, motor, velocity, sphere, axes, torque, calculate, friction, shader, speed, light, bitmap, rotate, cinematic, texture, material, scene, spatial, arena, quaternion, radius, capsule, transmission, camel, ball, geometry, bone, piston, rotation, joints, matrix, hinge, body]}
org.ode4j.ode.internal.DxHeightfieldData#dGeomHeightfieldDataSetBounds: {[heightfield, collision, vecf, collide, collidable, triangle, plane, shape, vertices, emitter, delta, volume, impulse, mass, motor, collect, velocity, torque, calculate, bounding, friction, hallmarks, sphere, capsule, axes, cinematic, speed, bone, square, bitmap, shader, material, transmission, light, quaternion, geometry, camel, matrix, texture, spatial, rotate, ball, arena, radius, joints, hinge, scene, rotation, body, piston]}
net.smert.jreactphysics3d.collision.shapes.AABB#testCollision: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
org.ode4j.ode.OdeHelper#createHeightfield: {[heightfield, collision, vecf, collide, collidable, triangle, plane, shape, vertices, emitter, delta, volume, impulse, mass, motor, collect, velocity, torque, calculate, bounding, friction, hallmarks, sphere, capsule, axes, cinematic, speed, bone, square, bitmap, shader, material, transmission, light, quaternion, geometry, camel, matrix, texture, spatial, rotate, ball, arena, radius, joints, hinge, scene, rotation, body, piston]}
org.ode4j.ode.internal.DxHeightfieldData#dGeomHeightfieldDataBuildByte: {[heightfield, collision, vecf, collide, collidable, triangle, plane, shape, vertices, emitter, delta, volume, impulse, mass, motor, collect, velocity, torque, calculate, bounding, friction, hallmarks, sphere, capsule, axes, cinematic, speed, bone, square, bitmap, shader, material, transmission, light, quaternion, geometry, camel, matrix, texture, spatial, rotate, ball, arena, radius, joints, hinge, scene, rotation, body, piston]}
net.smert.jreactphysics3d.engine.DynamicsWorld#createRigidBody: {[shape, ball, collision, calculate, body, joints, collidable, arena, plane, collide, vecf, piston, triangle, friction, hinge, heightfield, transmission, axes, vertices, torque, square, emitter, sphere, volume, hallmarks, impulse, delta, speed, velocity, bounding, mass, motor, collect, shader, radius, rotate, light, bone, texture, camel, material, bitmap, spatial, cinematic, scene, geometry, matrix, rotation, quaternion, capsule]}
org.dyn4j.collision.AbstractCollidable#getFixtures: {[vecf, shape, collision, triangle, plane, heightfield, collidable, collide, vertices, emitter, volume, hallmarks, square, sphere, bounding, axes, collect, shader, calculate, light, impulse, material, delta, texture, motor, mass, radius, camel, rotate, velocity, torque, friction, bone, ball, bitmap, piston, quaternion, transmission, geometry, joints, body, hinge, scene, rotation, capsule, speed, spatial, matrix, arena, cinematic]}
org.ode4j.ode.internal.joints.DxJointAMotor#getParamFMax3: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.internal.joints.DxJointAMotor#getParamFMax2: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
com.jme3.scene.mesh.WrappedIndexBuffer#WrappedIndexBuffer(C): {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.dyn4j.geometry.Segment#getFarthestFeature: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.ode4j.ode.internal.CollideTrimeshBoxOld#CONSTRUCTPLANE: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
com.jme3.input.event.TouchEvent#getDeltaX: {[mass, delta, velocity, impulse, motor, torque, transmission, heightfield, friction, speed, vecf, triangle, collidable, collision, radius, square, collide, plane, rotate, joints, hinge, rotation, piston, hallmarks, cinematic, vertices, bitmap, shape, sphere, body, capsule, axes, emitter, arena, ball, collect, geometry, bounding, quaternion, spatial, scene, shader, texture, bone, matrix, calculate, volume, camel, light, material]}
com.jme3.input.event.TouchEvent#getDeltaY: {[mass, delta, velocity, impulse, motor, torque, transmission, heightfield, friction, speed, vecf, triangle, collidable, collision, radius, square, collide, plane, rotate, joints, hinge, rotation, piston, hallmarks, cinematic, vertices, bitmap, shape, sphere, body, capsule, axes, emitter, arena, ball, collect, geometry, bounding, quaternion, spatial, scene, shader, texture, bone, matrix, calculate, volume, camel, light, material]}
org.ode4j.ode.internal.OdeInit#FreeThreadCollisionData: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
org.ode4j.ode.internal.DxConvex#IntersectSegmentPlane: {[collidable, plane, collision, collide, heightfield, vecf, shape, triangle, vertices, volume, collect, bounding, calculate, emitter, sphere, hallmarks, square, motor, impulse, velocity, delta, radius, speed, matrix, axes, ball, mass, torque, arena, transmission, shader, rotation, quaternion, body, joints, light, bitmap, scene, friction, texture, cinematic, material, geometry, capsule, camel, hinge, rotate, piston, spatial, bone]}
org.dyn4j.dynamics.joint.RopeJoint#getReactionForce: {[mass, delta, velocity, impulse, motor, torque, speed, heightfield, triangle, vecf, friction, collidable, transmission, collision, collide, plane, hinge, joints, rotate, rotation, piston, vertices, radius, square, shape, axes, body, emitter, bitmap, arena, quaternion, cinematic, ball, capsule, hallmarks, collect, spatial, scene, sphere, texture, bone, volume, shader, light, material, geometry, matrix, camel, calculate, bounding]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_RENORMALIZE: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
net.smert.jreactphysics3d.engine.DynamicsWorld#update: {[collision, vecf, triangle, collidable, shape, heightfield, plane, collide, vertices, emitter, volume, calculate, collect, hallmarks, square, mass, bounding, delta, axes, impulse, sphere, motor, velocity, shader, light, torque, ball, material, texture, friction, speed, body, camel, piston, joints, bitmap, rotate, bone, hinge, arena, geometry, radius, quaternion, capsule, cinematic, rotation, transmission, spatial, matrix, scene]}
org.ode4j.ode.internal.DxTrimeshHeightfield#allocateTriangleBuffer: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
net.smert.jreactphysics3d.body.CollisionBody#setCollisionShape: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, collect, delta, impulse, motor, hallmarks, calculate, velocity, bounding, square, sphere, axes, torque, shader, light, friction, speed, material, texture, ball, camel, rotate, body, bone, bitmap, piston, geometry, joints, capsule, quaternion, radius, hinge, transmission, rotation, spatial, arena, matrix, cinematic, scene]}
org.dyn4j.dynamics.joint.MotorJoint#getReactionForce: {[mass, delta, velocity, impulse, motor, torque, speed, heightfield, triangle, vecf, friction, collidable, transmission, collision, collide, plane, hinge, joints, rotate, rotation, piston, vertices, radius, square, shape, axes, body, emitter, bitmap, arena, quaternion, cinematic, ball, capsule, hallmarks, collect, spatial, scene, sphere, texture, bone, volume, shader, light, material, geometry, matrix, camel, calculate, bounding]}
com.jme3.bounding.BoundingSphere#computeFromTris: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
com.jme3.scene.Mesh#clearCollisionData: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
com.jme3.effect.influencers.DefaultParticleInfluencer#clone: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.ode4j.ode.internal.gimpact.GimGeometry#BOX_INTERSECTS_RAY: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
com.jme3.util.TangentBinormalGenerator#processTriangleStrip: {[triangle, vertices, vecf, plane, collidable, collision, heightfield, shape, collide, emitter, spatial, volume, scene, bounding, geometry, mass, camel, impulse, hallmarks, velocity, material, motor, delta, texture, torque, axes, square, sphere, friction, light, collect, bone, rotate, shader, transmission, speed, calculate, arena, quaternion, rotation, piston, cinematic, capsule, matrix, joints, ball, bitmap, radius, body, hinge]}
net.smert.jreactphysics3d.collision.CollisionDetection#computeNarrowPhase: {[collision, shape, collidable, vecf, triangle, plane, heightfield, ball, collide, calculate, body, vertices, joints, arena, piston, emitter, hinge, axes, friction, volume, transmission, square, torque, collect, sphere, bounding, bone, hallmarks, light, shader, speed, rotate, camel, texture, material, impulse, capsule, rotation, geometry, motor, delta, mass, radius, cinematic, bitmap, spatial, velocity, scene, quaternion, matrix]}
org.dyn4j.dynamics.joint.PrismaticJoint#getMaximumMotorForce: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.internal.DxHashSpace#collide: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.ode4j.ode.internal.joints.DxJointUniversal#addTorques: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
org.ode4j.ode.internal.joints.DxJointPlane2D#setXParamFMax: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.dyn4j.geometry.Wound#getVertices: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
com.jme3.effect.ParticleEmitterControl#update: {[emitter, heightfield, vertices, triangle, shape, vecf, bone, collide, collision, plane, collidable, quaternion, rotate, axes, capsule, volume, rotation, hallmarks, cinematic, spatial, bitmap, arena, sphere, square, piston, bounding, friction, mass, speed, hinge, delta, impulse, torque, matrix, scene, texture, camel, radius, geometry, light, transmission, motor, ball, shader, material, velocity, body, collect, joints, calculate]}
net.smert.jreactphysics3d.constraint.HingeJoint#isMotorEnabled: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.dyn4j.collision.broadphase.BroadphaseDetector#getAABB: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
com.jme3.collision.SweepSphere#isPointInTriangle: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
com.jme3.util.TangentBinormalGenerator#isDegenerateTriangle: {[vertices, vecf, triangle, plane, collision, collidable, shape, heightfield, collide, emitter, square, hallmarks, volume, bounding, sphere, axes, collect, bitmap, shader, cinematic, rotate, impulse, mass, motor, radius, calculate, delta, capsule, velocity, torque, light, friction, geometry, rotation, quaternion, scene, texture, arena, spatial, piston, speed, transmission, material, bone, matrix, ball, hinge, camel, joints, body]}
org.ode4j.ode.internal.CollideBoxCylinderCCD#dColliderFn: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.ode4j.ode.internal.CollideTrimeshPlane#dCollideTrimeshPlane: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, collect, impulse, delta, mass, motor, hallmarks, bounding, velocity, sphere, square, calculate, torque, axes, shader, friction, speed, light, material, texture, camel, ball, rotate, bitmap, radius, bone, capsule, quaternion, body, matrix, geometry, spatial, piston, transmission, scene, rotation, cinematic, arena, joints, hinge]}
org.ode4j.ode.internal.OdeInit#AllocateThreadCollisionDataIfNecessary: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
com.jme3.math.Ray#intersectsWherePlane: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.ode4j.ode.internal.DxHeightfieldData#destroy: {[heightfield, collision, vecf, collide, collidable, triangle, plane, shape, vertices, emitter, delta, volume, impulse, mass, motor, collect, velocity, torque, calculate, bounding, friction, hallmarks, sphere, capsule, axes, cinematic, speed, bone, square, bitmap, shader, material, transmission, light, quaternion, geometry, camel, matrix, texture, spatial, rotate, ball, arena, radius, joints, hinge, scene, rotation, body, piston]}
com.jme3.collision.SweepSphere#collideWith: {[vecf, collision, triangle, collidable, plane, heightfield, shape, collide, vertices, emitter, volume, hallmarks, bounding, sphere, collect, square, impulse, motor, calculate, delta, mass, velocity, axes, torque, shader, friction, speed, radius, light, material, texture, ball, bitmap, rotate, bone, camel, scene, spatial, capsule, transmission, cinematic, body, matrix, rotation, hinge, arena, geometry, piston, quaternion, joints]}
org.ode4j.ode.internal.DxSAPSpace2#boxPruning: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
net.smert.jreactphysics3d.body.CollisionBody#getCollisionShape: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, collect, delta, impulse, motor, hallmarks, calculate, velocity, bounding, square, sphere, axes, torque, shader, light, friction, speed, material, texture, ball, camel, rotate, body, bone, bitmap, piston, geometry, joints, capsule, quaternion, radius, hinge, transmission, rotation, spatial, arena, matrix, cinematic, scene]}
org.ode4j.ode.internal.DxHashSpace#collide2: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_BLEND_AB: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.math.DMatrixN#clearLowerTriangle: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
com.jme3.bounding.BoundingVolume#collideWith: {[collision, vecf, collidable, heightfield, triangle, plane, collide, shape, vertices, emitter, volume, collect, delta, impulse, motor, mass, calculate, hallmarks, bounding, velocity, sphere, square, torque, axes, shader, friction, speed, light, material, texture, ball, camel, capsule, bone, radius, geometry, body, matrix, rotation, rotate, cinematic, bitmap, joints, piston, transmission, quaternion, arena, spatial, scene, hinge]}
com.jme3.collision.CollisionResult#setTriangleIndex: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.DxHeightfieldData#buildCallback: {[heightfield, collision, vecf, collide, collidable, triangle, plane, shape, vertices, emitter, delta, volume, impulse, mass, motor, collect, velocity, torque, calculate, bounding, friction, hallmarks, sphere, capsule, axes, cinematic, speed, bone, square, bitmap, shader, material, transmission, light, quaternion, geometry, camel, matrix, texture, spatial, rotate, ball, arena, radius, joints, hinge, scene, rotation, body, piston]}
net.smert.jreactphysics3d.engine.DynamicsWorld#setNumIterationsVelocitySolver: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.ode4j.ode.internal.DxSpace#dSpaceCollide2: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.dyn4j.collision.broadphase.DynamicAABBTree#getAABB: {[vecf, collision, collidable, triangle, plane, shape, heightfield, collide, vertices, emitter, volume, hallmarks, square, collect, sphere, bounding, calculate, axes, impulse, delta, motor, mass, shader, velocity, light, torque, material, texture, friction, radius, camel, speed, ball, rotate, bitmap, bone, piston, body, quaternion, joints, transmission, geometry, capsule, cinematic, hinge, matrix, scene, rotation, spatial, arena]}
org.dyn4j.collision.broadphase.BroadphaseKey#computeHashCode: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.ode4j.ode.internal.CollideTrimeshCCylinder#VEC_SUM: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.dyn4j.collision.Collisions#getEstimatedCollisionPairs: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
org.ode4j.ode.internal.DxTriMeshDisabled#FetchTriangleCount: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.dyn4j.dynamics.Settings#getSleepAngularVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.ode4j.ode.internal.CollideConvexTrimesh#dColliderFn: {[collision, vecf, collidable, heightfield, triangle, plane, collide, shape, vertices, emitter, volume, collect, delta, impulse, motor, mass, calculate, hallmarks, bounding, sphere, velocity, square, torque, axes, shader, friction, speed, light, material, texture, camel, ball, capsule, bone, radius, geometry, body, rotate, rotation, matrix, cinematic, joints, piston, bitmap, quaternion, transmission, arena, spatial, scene, hinge]}
org.dyn4j.collision.Bounds#isOutside: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.dyn4j.dynamics.CoefficientMixer#mixFriction: {[mass, friction, delta, torque, impulse, transmission, velocity, motor, arena, joints, body, heightfield, vecf, ball, triangle, emitter, speed, vertices, collide, calculate, collision, collidable, hinge, plane, radius, piston, shape, square, cinematic, capsule, quaternion, geometry, sphere, bitmap, bounding, material, hallmarks, shader, light, axes, spatial, matrix, texture, camel, bone, collect, rotation, scene, rotate, volume]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_CONJUGATE_LENGTH: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
net.smert.jreactphysics3d.engine.Timer#update: {[mass, delta, velocity, impulse, motor, torque, transmission, heightfield, friction, speed, vecf, triangle, collidable, collision, radius, square, collide, plane, rotate, joints, hinge, rotation, piston, hallmarks, cinematic, vertices, bitmap, shape, sphere, body, capsule, axes, emitter, arena, ball, collect, geometry, bounding, quaternion, spatial, scene, shader, texture, bone, matrix, calculate, volume, camel, light, material]}
com.jme3.scene.shape.AbstractBox#computeVertices: {[vertices, triangle, vecf, plane, collision, shape, collidable, heightfield, emitter, collide, square, axes, hallmarks, volume, rotate, bounding, sphere, quaternion, rotation, spatial, geometry, bitmap, cinematic, scene, mass, piston, bone, capsule, impulse, shader, friction, collect, arena, torque, delta, hinge, velocity, camel, motor, radius, matrix, light, calculate, speed, material, joints, transmission, body, ball, texture]}
org.ode4j.ode.internal.joints.DxJointPlane2D#setAngleParam: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
com.jme3.effect.influencers.EmptyParticleInfluencer#getInitialVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.ode4j.ode.internal.sCylinderTrimeshColliderData#TestOneTriangleVsCylinder: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, volume, hallmarks, axes, square, bounding, mass, collect, impulse, delta, velocity, motor, sphere, torque, friction, rotate, calculate, shader, quaternion, spatial, bitmap, scene, cinematic, light, speed, rotation, bone, geometry, piston, transmission, arena, capsule, texture, ball, hinge, material, radius, camel, matrix, body, joints]}
com.jme3.effect.shapes.EmitterMeshVertexShape#setMeshes: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.dyn4j.geometry.Geometry#createPolygon: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
net.smert.jreactphysics3d.collision.shapes.CollisionShape#clone: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, collect, delta, impulse, motor, hallmarks, calculate, velocity, bounding, square, sphere, axes, torque, shader, light, friction, speed, material, texture, ball, camel, rotate, body, bone, bitmap, piston, geometry, joints, capsule, quaternion, radius, hinge, transmission, rotation, spatial, arena, matrix, cinematic, scene]}
org.dyn4j.geometry.Polygon#contains: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
com.jme3.math.Ray#intersectWherePlanar: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.CollideSphereConvex#dColliderFn: {[collide, plane, shape, sphere, heightfield, collidable, hallmarks, volume, collision, vecf, bounding, vertices, square, triangle, radius, emitter, collect, calculate, transmission, motor, shader, capsule, impulse, axes, material, speed, camel, quaternion, hinge, texture, light, piston, delta, spatial, torque, bone, friction, rotation, ball, matrix, bitmap, scene, velocity, cinematic, mass, rotate, geometry, body, arena, joints]}
org.dyn4j.collision.FixtureIterator#FixtureIterator(C): {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.dyn4j.geometry.Mass#getType: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
org.ode4j.ode.DHinge2Joint#addTorques: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
com.jme3.scene.mesh.WrappedIndexBuffer#convertToList: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.CollideConvexBox#dColliderFn: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
net.smert.jreactphysics3d.body.CollisionBody#isCollisionEnabled: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
org.ode4j.ode.internal.HeightFieldTriangle#setMinMax: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.dyn4j.collision.broadphase.BroadphasePair#getCollidable2: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.dyn4j.collision.broadphase.BroadphasePair#getCollidable1: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
com.jme3.renderer.opengl.GLRenderer#renderMesh: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
com.jme3.effect.shapes.EmitterBoxShape#deepClone: {[vecf, shape, collision, triangle, heightfield, plane, collide, collidable, vertices, emitter, volume, hallmarks, square, sphere, axes, bounding, collect, shader, calculate, impulse, delta, rotate, mass, light, motor, material, bone, radius, texture, friction, quaternion, torque, camel, velocity, piston, capsule, rotation, ball, hinge, transmission, joints, body, geometry, bitmap, arena, matrix, scene, cinematic, speed, spatial]}
org.ode4j.ode.internal.joints.DxJointAMotor#getParamVel3: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.internal.joints.DxJointAMotor#getParamVel2: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
net.smert.jreactphysics3d.engine.ContactSolver#computeFrictionVectors: {[mass, velocity, delta, impulse, motor, torque, speed, transmission, friction, heightfield, triangle, vecf, radius, collidable, collision, square, rotate, rotation, collide, plane, hinge, piston, joints, hallmarks, vertices, axes, sphere, body, shape, quaternion, bitmap, collect, bone, ball, arena, cinematic, spatial, scene, emitter, bounding, capsule, shader, texture, material, geometry, matrix, camel, light, volume, calculate]}
org.ode4j.ode.internal.libccd.CCDPolyTope#_ccdPtNearestRenew: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.ode4j.ode.internal.CollideBoxBox#dColliderFn: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.ode4j.ode.internal.DxConvex#CheckSATConvexEdges: {[collidable, plane, collision, collide, heightfield, vecf, shape, triangle, vertices, volume, collect, bounding, calculate, emitter, sphere, hallmarks, square, motor, impulse, velocity, delta, radius, speed, matrix, axes, ball, mass, torque, arena, transmission, shader, rotation, quaternion, body, joints, light, bitmap, scene, friction, texture, cinematic, material, geometry, capsule, camel, hinge, rotate, piston, spatial, bone]}
com.jme3.scene.Mesh#getTriangleCount: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.DWorld#impulseToForce: {[mass, delta, velocity, impulse, motor, torque, speed, heightfield, triangle, vecf, friction, collidable, transmission, collision, collide, plane, hinge, joints, rotate, rotation, piston, vertices, radius, square, shape, axes, body, emitter, bitmap, arena, quaternion, cinematic, ball, capsule, hallmarks, collect, spatial, scene, sphere, texture, bone, volume, shader, light, material, geometry, matrix, camel, calculate, bounding]}
com.jme3.effect.ParticleEmitter#isFacingVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
net.smert.jreactphysics3d.collision.shapes.CylinderShape#isEqualTo: {[sphere, hallmarks, square, collide, shape, plane, radius, volume, bounding, vertices, collidable, collision, heightfield, vecf, triangle, transmission, emitter, collect, calculate, shader, axes, mass, material, bitmap, light, texture, camel, velocity, spatial, rotate, cinematic, quaternion, capsule, delta, ball, scene, bone, torque, joints, geometry, hinge, motor, piston, friction, impulse, body, speed, rotation, arena, matrix]}
net.smert.jreactphysics3d.engine.DynamicsWorld#setIsSolveFrictionAtContactManifoldCenterActive: {[mass, friction, delta, torque, impulse, transmission, velocity, motor, arena, joints, body, heightfield, vecf, ball, triangle, emitter, speed, vertices, collide, calculate, collision, collidable, hinge, plane, radius, piston, shape, square, cinematic, capsule, quaternion, geometry, sphere, bitmap, bounding, material, hallmarks, shader, light, axes, spatial, matrix, texture, camel, bone, collect, rotation, scene, rotate, volume]}
net.smert.jreactphysics3d.collision.shapes.CollisionShape#CollisionShape(C): {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, collect, delta, impulse, motor, hallmarks, calculate, velocity, bounding, square, sphere, axes, torque, shader, light, friction, speed, material, texture, ball, camel, rotate, body, bone, bitmap, piston, geometry, joints, capsule, quaternion, radius, hinge, transmission, rotation, spatial, arena, matrix, cinematic, scene]}
org.ode4j.ode.internal.CollideTrimeshBox#CONSTRUCTPLANE: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.dyn4j.dynamics.Body#isDynamic: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
org.ode4j.ode.internal.DxConvex#TestConvexIntersection: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
net.smert.jreactphysics3d.collision.BroadPhasePair#getBody2: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
net.smert.jreactphysics3d.collision.BroadPhasePair#getBody1: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
org.ode4j.ode.internal.gimpact.GimTriCollision#EDGE_AGAINST_TRI_EDGES: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.dyn4j.dynamics.Step#getPrevousDeltaTime: {[mass, delta, velocity, impulse, motor, torque, transmission, heightfield, friction, speed, vecf, triangle, collidable, collision, radius, square, collide, plane, rotate, joints, hinge, rotation, piston, hallmarks, cinematic, vertices, bitmap, shape, sphere, body, capsule, axes, emitter, arena, ball, collect, geometry, bounding, quaternion, spatial, scene, shader, texture, bone, matrix, calculate, volume, camel, light, material]}
org.ode4j.ode.internal.DxGeom#collide2: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.ode4j.ode.internal.gimpact.GimAABBSet#GIM_CONVERT_VEC3F_GUINT_XZ_UPPER_CLAMPED: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
net.smert.jreactphysics3d.body.RigidBody#getMass: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
net.smert.jreactphysics3d.engine.ContactSolver#computeFriction1Impulse: {[mass, delta, velocity, impulse, motor, torque, heightfield, speed, friction, transmission, vecf, triangle, collidable, collision, collide, plane, joints, hinge, radius, square, piston, vertices, rotate, rotation, shape, body, axes, emitter, arena, bitmap, cinematic, ball, capsule, hallmarks, quaternion, collect, sphere, spatial, scene, geometry, texture, shader, bone, volume, bounding, calculate, light, matrix, material, camel]}
com.jme3.collision.CollisionResults#toString: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
org.ode4j.ode.internal.DxTrimeshHeightfield#dGeomHeightfieldGetHeightfieldData: {[heightfield, collision, vecf, collide, collidable, triangle, plane, shape, vertices, emitter, delta, volume, impulse, mass, motor, collect, velocity, torque, calculate, bounding, friction, hallmarks, sphere, capsule, axes, cinematic, speed, bone, square, bitmap, shader, material, transmission, light, quaternion, geometry, camel, matrix, texture, spatial, rotate, ball, arena, radius, joints, hinge, scene, rotation, body, piston]}
org.ode4j.ode.internal.DxSimpleSpace#collide: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.dyn4j.collision.broadphase.BroadphaseKey#get: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.ode4j.ode.internal.DxPlane#DxPlane(C): {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.dyn4j.collision.broadphase.DynamicAABBTree#remove: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
com.jme3.effect.ParticleEmitter#setMeshType: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.DxSpace#collide2: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
com.jme3.effect.shapes.EmitterMeshFaceShape#setMeshes: {[triangle, vecf, vertices, collision, plane, collidable, heightfield, shape, collide, emitter, volume, mass, hallmarks, bounding, square, impulse, axes, delta, velocity, motor, torque, sphere, friction, collect, spatial, scene, rotate, geometry, bitmap, cinematic, shader, quaternion, calculate, arena, speed, capsule, transmission, rotation, camel, bone, piston, light, matrix, material, joints, hinge, ball, body, radius, texture]}
org.ode4j.ode.internal.Block#Collide: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.dyn4j.geometry.Polygon#translate: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.ode4j.ode.internal.DxConvex#IsPointInPolygon: {[collidable, plane, collision, collide, heightfield, vecf, shape, triangle, vertices, volume, collect, bounding, calculate, emitter, sphere, hallmarks, square, motor, impulse, velocity, delta, radius, speed, matrix, axes, ball, mass, torque, arena, transmission, shader, rotation, quaternion, body, joints, light, bitmap, scene, friction, texture, cinematic, material, geometry, capsule, camel, hinge, rotate, piston, spatial, bone]}
org.ode4j.ode.internal.joints.DxJointAMotor#getParamFMax: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
net.smert.jreactphysics3d.body.CollisionBody#CollisionBody(C): {[collision, shape, collidable, vecf, triangle, plane, heightfield, ball, collide, calculate, body, vertices, joints, arena, piston, emitter, hinge, axes, friction, volume, transmission, square, torque, collect, sphere, bounding, bone, hallmarks, light, shader, speed, rotate, camel, texture, material, impulse, capsule, rotation, geometry, motor, delta, mass, radius, cinematic, bitmap, spatial, velocity, scene, quaternion, matrix]}
org.dyn4j.dynamics.Settings#setVelocityConstraintSolverIterations: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.ode4j.ode.internal.CollideTrimeshTrimesh#dColliderFn: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
com.jme3.math.Triangle#clone: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA#getIndexVertex: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.ode4j.ode.internal.DxWorld#impulseToForce: {[mass, delta, velocity, impulse, motor, torque, speed, heightfield, triangle, vecf, friction, collidable, transmission, collision, collide, plane, hinge, joints, rotate, rotation, piston, vertices, radius, square, shape, axes, body, emitter, bitmap, arena, quaternion, cinematic, ball, capsule, hallmarks, collect, spatial, scene, sphere, texture, bone, volume, shader, light, material, geometry, matrix, camel, calculate, bounding]}
org.ode4j.ode.internal.DxHeightfield#dGeomHeightfieldSetHeightfieldData: {[heightfield, collision, vecf, collide, collidable, triangle, plane, shape, vertices, emitter, delta, volume, impulse, mass, motor, collect, velocity, torque, calculate, bounding, friction, hallmarks, sphere, capsule, axes, cinematic, speed, bone, square, bitmap, shader, material, transmission, light, quaternion, geometry, camel, matrix, texture, spatial, rotate, ball, arena, radius, joints, hinge, scene, rotation, body, piston]}
org.ode4j.ode.internal.DxGimpactCollision#FetchTransformedTriangle: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, volume, mass, impulse, delta, velocity, motor, hallmarks, bounding, square, axes, collect, torque, sphere, friction, calculate, shader, speed, rotate, light, bitmap, spatial, scene, cinematic, quaternion, transmission, texture, bone, piston, arena, ball, geometry, capsule, material, rotation, matrix, body, hinge, camel, joints, radius]}
org.ode4j.ode.internal.OdeInit#CloseODEForMode: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
com.jme3.util.mikktspace.MikktspaceTangentGenerator#genTangSpace: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
com.jme3.animation.EffectTrack#EffectTrack(C): {[emitter, heightfield, vertices, triangle, shape, vecf, bone, collide, collision, plane, collidable, quaternion, rotate, axes, capsule, volume, rotation, hallmarks, cinematic, spatial, bitmap, arena, sphere, square, piston, bounding, friction, mass, speed, hinge, delta, impulse, torque, matrix, scene, texture, camel, radius, geometry, light, transmission, motor, ball, shader, material, velocity, body, collect, joints, calculate]}
org.ode4j.ode.OdeMath#dPlaneSpace: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.ode4j.ode.internal.CollideSphereBox#dColliderFn: {[collide, plane, shape, sphere, heightfield, collidable, hallmarks, volume, collision, vecf, bounding, vertices, square, triangle, radius, emitter, collect, calculate, transmission, motor, shader, capsule, impulse, axes, material, speed, camel, quaternion, hinge, texture, light, piston, delta, spatial, torque, bone, friction, rotation, ball, matrix, bitmap, scene, velocity, cinematic, mass, rotate, geometry, body, arena, joints]}
net.smert.jreactphysics3d.collision.shapes.CylinderShape#clone: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, collect, delta, impulse, motor, hallmarks, calculate, velocity, bounding, square, sphere, axes, torque, shader, light, friction, speed, material, texture, ball, camel, rotate, body, bone, bitmap, piston, geometry, joints, capsule, quaternion, radius, hinge, transmission, rotation, spatial, arena, matrix, cinematic, scene]}
org.dyn4j.geometry.Segment#createMass: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
com.jme3.scene.shape.Surface#buildSurface: {[vertices, triangle, vecf, plane, shape, collision, collidable, square, emitter, heightfield, hallmarks, collide, volume, bounding, axes, sphere, rotate, cinematic, geometry, bitmap, capsule, rotation, scene, spatial, radius, quaternion, piston, shader, camel, collect, transmission, bone, hinge, matrix, arena, speed, calculate, material, impulse, joints, mass, friction, light, body, ball, torque, texture, motor, velocity, delta]}
org.ode4j.ode.internal.gimpact.GimTriCollision#TRIANGLE_GET_UVPARAMETERS: {[vecf, triangle, collision, vertices, collidable, plane, heightfield, shape, collide, emitter, volume, mass, hallmarks, axes, impulse, square, delta, bounding, velocity, collect, motor, torque, sphere, friction, shader, calculate, rotate, bitmap, light, quaternion, speed, spatial, cinematic, scene, transmission, rotation, piston, texture, bone, arena, capsule, geometry, material, ball, hinge, body, radius, camel, matrix, joints]}
org.ode4j.ode.internal.joints.DxJointAMotor#dJointSetAMotorAngle: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.dyn4j.collision.broadphase.Sap#add: {[vecf, collision, collidable, triangle, plane, shape, heightfield, collide, vertices, emitter, volume, hallmarks, square, collect, sphere, bounding, calculate, axes, impulse, delta, motor, mass, shader, velocity, light, torque, material, texture, friction, radius, camel, speed, ball, rotate, bitmap, bone, piston, body, quaternion, joints, transmission, geometry, capsule, cinematic, hinge, matrix, scene, rotation, spatial, arena]}
org.ode4j.ode.internal.CollideConvexTrimeshTrianglesCCD#addPerturbedContacts: {[triangle, vecf, vertices, emitter, collision, heightfield, shape, plane, collidable, collide, axes, rotate, quaternion, rotation, volume, hallmarks, bone, square, mass, friction, piston, delta, bounding, torque, impulse, spatial, hinge, arena, shader, collect, sphere, transmission, velocity, motor, speed, light, scene, texture, geometry, bitmap, material, calculate, ball, capsule, camel, joints, matrix, radius, body, cinematic]}
org.ode4j.ode.internal.joints.DxJointAMotor#setParamHiStop: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
net.smert.jreactphysics3d.body.RigidBody#getMassInverse: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
org.ode4j.ode.internal.DxMass#setParameters: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
org.dyn4j.geometry.Polygon#getFarthestFeature: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
net.smert.jreactphysics3d.collision.broadphase.NoBroadPhaseAlgorithm#removeObject: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
com.jme3.bounding.BoundingBox#clone: {[plane, collidable, vertices, collide, volume, triangle, bounding, shape, collision, heightfield, vecf, hallmarks, sphere, square, collect, emitter, radius, calculate, geometry, scene, transmission, motor, spatial, axes, impulse, camel, speed, matrix, material, torque, texture, velocity, delta, hinge, light, cinematic, piston, quaternion, friction, bitmap, rotate, mass, bone, ball, rotation, shader, body, joints, arena, capsule]}
com.jme3.collision.bih.BIHTree#getTriangleIndex: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.dyn4j.collision.broadphase.DynamicAABBTree#add: {[vecf, collision, collidable, triangle, plane, shape, heightfield, collide, vertices, emitter, volume, hallmarks, square, collect, sphere, bounding, calculate, axes, impulse, delta, motor, mass, shader, velocity, light, torque, material, texture, friction, radius, camel, speed, ball, rotate, bitmap, bone, piston, body, quaternion, joints, transmission, geometry, capsule, cinematic, hinge, matrix, scene, rotation, spatial, arena]}
org.dyn4j.collision.AbstractCollidable#createAABB: {[vecf, shape, collision, triangle, plane, heightfield, collidable, collide, vertices, emitter, volume, hallmarks, square, sphere, bounding, axes, collect, shader, calculate, light, impulse, material, delta, texture, motor, mass, radius, camel, rotate, velocity, torque, friction, bone, ball, bitmap, piston, quaternion, transmission, geometry, joints, body, hinge, scene, rotation, capsule, speed, spatial, matrix, arena, cinematic]}
org.dyn4j.dynamics.joint.RevoluteJoint#solveVelocityConstraints: {[delta, torque, impulse, mass, velocity, motor, friction, speed, transmission, joints, body, hinge, piston, ball, arena, heightfield, triangle, vecf, axes, rotate, square, collidable, radius, collide, plane, calculate, vertices, rotation, collision, bone, hallmarks, collect, quaternion, emitter, bitmap, sphere, spatial, cinematic, scene, shape, capsule, texture, camel, shader, material, light, volume, geometry, bounding, matrix]}
org.dyn4j.collision.broadphase.DefaultBroadphaseFilter#isAllowed: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
com.jme3.util.BufferUtils#createVector2Buffer: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
com.jme3.scene.Mesh#computeNumElements: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.dyn4j.geometry.Segment#project: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.dyn4j.dynamics.Body#getLocalCenter: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
org.dyn4j.dynamics.joint.WheelJoint#getMotorSpeed: {[motor, velocity, speed, delta, impulse, mass, rotate, rotation, torque, quaternion, piston, hinge, axes, collidable, heightfield, friction, triangle, vecf, collision, collide, plane, joints, bone, transmission, collect, square, body, radius, vertices, shape, hallmarks, calculate, scene, bitmap, volume, shader, texture, bounding, ball, matrix, material, cinematic, light, capsule, spatial, arena, emitter, camel, sphere, geometry]}
org.dyn4j.dynamics.joint.WeldJoint#getReactionForce: {[mass, delta, velocity, impulse, motor, torque, speed, heightfield, triangle, vecf, friction, collidable, transmission, collision, collide, plane, hinge, joints, rotate, rotation, piston, vertices, radius, square, shape, axes, body, emitter, bitmap, arena, quaternion, cinematic, ball, capsule, hallmarks, collect, spatial, scene, sphere, texture, bone, volume, shader, light, material, geometry, matrix, camel, calculate, bounding]}
org.ode4j.ode.internal.joints.DxJointPlane2D#setYParamFMax: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.ode4j.ode.internal.gimpact.GimAABBSet#GIM_CONVERT_VEC3F_GUINT_XZ: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
net.smert.jreactphysics3d.engine.DynamicsWorld#setSleepAngularVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
net.smert.jreactphysics3d.engine.ContactSolver#storeImpulses: {[mass, delta, velocity, impulse, motor, torque, heightfield, speed, friction, vecf, triangle, transmission, collidable, collision, collide, plane, joints, hinge, vertices, piston, rotate, rotation, radius, square, shape, body, arena, axes, emitter, bitmap, ball, cinematic, capsule, quaternion, hallmarks, spatial, collect, scene, sphere, volume, texture, bone, shader, calculate, geometry, matrix, light, material, camel, bounding]}
org.dyn4j.collision.broadphase.DynamicAABBTreeLeaf#DynamicAABBTreeLeaf(C): {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.ode4j.ode.internal.DxGimpactData#check: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
com.jme3.util.TangentBinormalGenerator#processTriangle: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.gimpact.GimTrimesh#gim_trimesh_get_triangle_count: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.dyn4j.dynamics.joint.WeldJoint#getReactionTorque: {[mass, delta, velocity, impulse, motor, torque, speed, heightfield, friction, triangle, transmission, vecf, collidable, collision, collide, plane, joints, hinge, piston, vertices, radius, rotate, square, rotation, body, shape, axes, arena, emitter, bitmap, ball, cinematic, capsule, quaternion, hallmarks, collect, spatial, scene, sphere, texture, shader, volume, bone, light, material, camel, calculate, geometry, bounding, matrix]}
org.dyn4j.collision.Fixture#toString: {[vecf, shape, collision, triangle, plane, heightfield, collidable, collide, vertices, emitter, volume, hallmarks, square, sphere, bounding, axes, collect, shader, calculate, light, impulse, material, delta, texture, motor, mass, radius, camel, rotate, velocity, torque, friction, bone, ball, bitmap, piston, quaternion, transmission, geometry, joints, body, hinge, scene, rotation, capsule, speed, spatial, matrix, arena, cinematic]}
com.jme3.input.event.TouchEvent#set: {[mass, delta, velocity, impulse, motor, torque, transmission, heightfield, friction, speed, vecf, triangle, collidable, collision, radius, square, collide, plane, rotate, joints, hinge, rotation, piston, hallmarks, cinematic, vertices, bitmap, shape, sphere, body, capsule, axes, emitter, arena, ball, collect, geometry, bounding, quaternion, spatial, scene, shader, texture, bone, matrix, calculate, volume, camel, light, material]}
org.dyn4j.dynamics.Step#getInverseDeltaTime: {[mass, delta, velocity, impulse, motor, torque, transmission, heightfield, friction, speed, vecf, triangle, collidable, collision, radius, square, collide, plane, rotate, joints, hinge, rotation, piston, hallmarks, cinematic, vertices, bitmap, shape, sphere, body, capsule, axes, emitter, arena, ball, collect, geometry, bounding, quaternion, spatial, scene, shader, texture, bone, matrix, calculate, volume, camel, light, material]}
org.dyn4j.collision.broadphase.BroadphaseKey#equals: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.ode4j.ode.internal.joints.OdeJointsFactoryImpl#dJointCreateLMotor: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
com.jme3.util.TangentBinormalGenerator#processTriangleFan: {[triangle, vertices, vecf, plane, collidable, collision, heightfield, shape, collide, emitter, spatial, volume, scene, bounding, geometry, mass, camel, impulse, hallmarks, velocity, material, motor, delta, texture, torque, axes, square, sphere, friction, light, collect, bone, rotate, shader, transmission, speed, calculate, arena, quaternion, rotation, piston, cinematic, capsule, matrix, joints, ball, bitmap, radius, body, hinge]}
com.jme3.audio.AudioNode#setVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
com.jme3.effect.ParticleEmitter#getShape: {[vecf, shape, collision, triangle, heightfield, plane, collide, collidable, vertices, emitter, volume, hallmarks, square, sphere, axes, bounding, collect, shader, calculate, impulse, delta, rotate, mass, light, motor, material, bone, radius, texture, friction, quaternion, torque, camel, velocity, piston, capsule, rotation, ball, hinge, transmission, joints, body, geometry, bitmap, arena, matrix, scene, cinematic, speed, spatial]}
com.jme3.effect.ParticleEmitter#setShape: {[vecf, shape, collision, triangle, heightfield, plane, collide, collidable, vertices, emitter, volume, hallmarks, square, sphere, axes, bounding, collect, shader, calculate, impulse, delta, rotate, mass, light, motor, material, bone, radius, texture, friction, quaternion, torque, camel, velocity, piston, capsule, rotation, ball, hinge, transmission, joints, body, geometry, bitmap, arena, matrix, scene, cinematic, speed, spatial]}
org.dyn4j.collision.broadphase.Sap#contains: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
com.jme3.collision.bih.BIHNode#getLeftPlane: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
net.smert.jreactphysics3d.body.RigidBody#setMass: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
org.ode4j.ode.internal.joints.DxJointPlane2D#getXParamFMax: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.DHeightfield#getHeightfieldData: {[heightfield, collision, vecf, collide, collidable, triangle, plane, shape, vertices, emitter, delta, volume, impulse, mass, motor, collect, velocity, torque, calculate, bounding, friction, hallmarks, sphere, capsule, axes, cinematic, speed, bone, square, bitmap, shader, material, transmission, light, quaternion, geometry, camel, matrix, texture, spatial, rotate, ball, arena, radius, joints, hinge, scene, rotation, body, piston]}
com.jme3.math.Ray#intersectWhere: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.sTrimeshBoxColliderData#_cldTestOneTriangle: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, axes, volume, mass, hallmarks, delta, square, impulse, bounding, velocity, rotate, torque, motor, collect, friction, quaternion, sphere, shader, spatial, rotation, scene, bitmap, calculate, transmission, piston, bone, cinematic, light, geometry, arena, capsule, hinge, speed, texture, radius, ball, camel, body, material, joints, matrix]}
org.dyn4j.collision.broadphase.DynamicAABBTreeLeaf#equals: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.ode4j.ode.internal.DxHeightfield#DESTRUCTOR: {[triangle, vecf, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, volume, mass, impulse, bounding, delta, hallmarks, velocity, motor, collect, square, torque, axes, sphere, friction, calculate, speed, shader, spatial, scene, rotate, bitmap, cinematic, light, geometry, transmission, quaternion, arena, capsule, bone, ball, texture, piston, rotation, camel, joints, radius, matrix, material, hinge, body]}
org.dyn4j.collision.broadphase.BroadphaseKey#toString: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
com.jme3.renderer.opengl.GLRenderer#renderMeshDefault: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
com.jme3.scene.shape.Curve#createNurbMesh: {[mass, delta, velocity, impulse, motor, torque, transmission, heightfield, friction, speed, vecf, triangle, collidable, collision, radius, square, collide, plane, rotate, joints, hinge, rotation, piston, hallmarks, cinematic, vertices, bitmap, shape, sphere, body, capsule, axes, emitter, arena, ball, collect, geometry, bounding, quaternion, spatial, scene, shader, texture, bone, matrix, calculate, volume, camel, light, material]}
org.ode4j.ode.internal.CollideBoxPlane#dColliderFn: {[heightfield, collidable, plane, collision, collide, vecf, triangle, shape, vertices, emitter, volume, collect, hallmarks, bounding, sphere, square, calculate, motor, impulse, delta, mass, velocity, torque, axes, friction, radius, speed, shader, light, material, capsule, texture, matrix, camel, bone, ball, transmission, rotate, hinge, rotation, cinematic, bitmap, piston, scene, geometry, spatial, arena, joints, body, quaternion]}
org.ode4j.ode.internal.sCylinderBoxData#PerformCollisionChecking: {[vecf, collision, triangle, collidable, heightfield, shape, plane, collide, vertices, emitter, volume, axes, mass, collect, delta, impulse, hallmarks, calculate, square, motor, velocity, bounding, sphere, shader, torque, light, friction, rotate, texture, material, ball, piston, quaternion, speed, bone, camel, body, bitmap, hinge, joints, geometry, rotation, transmission, spatial, capsule, matrix, cinematic, scene, arena, radius]}
com.jme3.effect.ParticleEmitterControl#render: {[emitter, heightfield, vertices, triangle, shape, vecf, bone, collide, collision, plane, collidable, quaternion, rotate, axes, capsule, volume, rotation, hallmarks, cinematic, spatial, bitmap, arena, sphere, square, piston, bounding, friction, mass, speed, hinge, delta, impulse, torque, matrix, scene, texture, camel, radius, geometry, light, transmission, motor, ball, shader, material, velocity, body, collect, joints, calculate]}
org.dyn4j.collision.broadphase.SapProxy#hashCode: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.ode4j.ode.internal.gimpact.GimTrimeshTrimeshCol#_gim_triangle_triangle_collision: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, volume, mass, impulse, delta, velocity, motor, hallmarks, bounding, square, axes, collect, torque, sphere, friction, calculate, shader, speed, rotate, light, bitmap, spatial, scene, cinematic, quaternion, transmission, texture, bone, piston, arena, ball, geometry, capsule, material, rotation, matrix, body, hinge, camel, joints, radius]}
org.dyn4j.geometry.decompose.MonotonePolygon#toString: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.ode4j.ode.internal.gimpact.GimGeometry#AABB_GET_MIN: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm#updateObject: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
com.jme3.animation.EffectTrack#getEmitter: {[emitter, heightfield, vertices, triangle, shape, vecf, bone, collide, collision, plane, collidable, quaternion, rotate, axes, capsule, volume, rotation, hallmarks, cinematic, spatial, bitmap, arena, sphere, square, piston, bounding, friction, mass, speed, hinge, delta, impulse, torque, matrix, scene, texture, camel, radius, geometry, light, transmission, motor, ball, shader, material, velocity, body, collect, joints, calculate]}
org.ode4j.ode.internal.DxHeightfieldData#dGeomHeightfieldDataDestroy: {[heightfield, collision, vecf, collide, collidable, triangle, plane, shape, vertices, emitter, delta, volume, impulse, mass, motor, collect, velocity, torque, calculate, bounding, friction, hallmarks, sphere, capsule, axes, cinematic, speed, bone, square, bitmap, shader, material, transmission, light, quaternion, geometry, camel, matrix, texture, spatial, rotate, ball, arena, radius, joints, hinge, scene, rotation, body, piston]}
org.ode4j.ode.internal.DxMass#dMassSetBox: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
org.ode4j.ode.internal.libccd.CCDPolyTope#ccdPtDestroy: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.dyn4j.dynamics.joint.WheelJoint#getMaximumMotorTorque: {[velocity, delta, motor, mass, impulse, torque, speed, heightfield, friction, triangle, collidable, transmission, vecf, collision, hinge, collide, piston, rotate, rotation, plane, joints, axes, square, vertices, radius, body, quaternion, shape, collect, bitmap, cinematic, ball, arena, capsule, hallmarks, scene, emitter, spatial, bone, shader, texture, volume, light, sphere, material, camel, matrix, bounding, calculate, geometry]}
org.dyn4j.collision.broadphase.DynamicAABBTree#contains: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
net.smert.jreactphysics3d.collision.broadphase.BodyPair#getBody1: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
net.smert.jreactphysics3d.collision.broadphase.BodyPair#getBody2: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
com.jme3.effect.ParticleEmitter#getInitialVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_DIFF: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.DxMass#dMassAdjust: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
org.dyn4j.dynamics.contact.SimpleContactManager#SimpleContactManager(C): {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
org.dyn4j.dynamics.Body#getAccumulatedTorque: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
org.dyn4j.dynamics.Step#getDeltaTimeRatio: {[mass, delta, velocity, impulse, motor, torque, transmission, heightfield, friction, speed, vecf, triangle, collidable, collision, radius, square, collide, plane, rotate, joints, hinge, rotation, piston, hallmarks, cinematic, vertices, bitmap, shape, sphere, body, capsule, axes, emitter, arena, ball, collect, geometry, bounding, quaternion, spatial, scene, shader, texture, bone, matrix, calculate, volume, camel, light, material]}
com.jme3.effect.ParticleTriMesh#initParticleData: {[emitter, heightfield, vertices, triangle, shape, vecf, bone, collide, collision, plane, collidable, quaternion, rotate, axes, capsule, volume, rotation, hallmarks, cinematic, spatial, bitmap, arena, sphere, square, piston, bounding, friction, mass, speed, hinge, delta, impulse, torque, matrix, scene, texture, camel, radius, geometry, light, transmission, motor, ball, shader, material, velocity, body, collect, joints, calculate]}
net.smert.jreactphysics3d.constraint.Joint#Joint(C): {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
org.ode4j.ode.internal.gimpact.GimGeometry#OUTER_PRODUCT_2X2: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
net.smert.jreactphysics3d.engine.ContactSolver#computePenetrationImpulse: {[mass, delta, velocity, impulse, motor, torque, speed, heightfield, friction, vecf, triangle, transmission, collidable, collision, collide, plane, hinge, radius, joints, rotate, square, rotation, piston, vertices, shape, axes, body, bitmap, cinematic, emitter, arena, hallmarks, capsule, quaternion, ball, collect, sphere, spatial, scene, texture, shader, geometry, bone, volume, bounding, light, material, calculate, matrix, camel]}
org.ode4j.ode.internal.joints.DxJointHinge2#getLimot1: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.internal.joints.DxJointHinge2#getLimot2: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
net.smert.jreactphysics3d.engine.ContactSolver#isSplitImpulseActive: {[mass, delta, velocity, impulse, motor, torque, speed, heightfield, triangle, vecf, friction, collidable, transmission, collision, collide, plane, hinge, joints, rotate, rotation, piston, vertices, radius, square, shape, axes, body, emitter, bitmap, arena, quaternion, cinematic, ball, capsule, hallmarks, collect, spatial, scene, sphere, texture, bone, volume, shader, light, material, geometry, matrix, camel, calculate, bounding]}
org.dyn4j.dynamics.joint.PulleyJoint#getReactionForce: {[mass, delta, velocity, impulse, motor, torque, speed, heightfield, triangle, vecf, friction, collidable, transmission, collision, collide, plane, hinge, joints, rotate, rotation, piston, vertices, radius, square, shape, axes, body, emitter, bitmap, arena, quaternion, cinematic, ball, capsule, hallmarks, collect, spatial, scene, sphere, texture, bone, volume, shader, light, material, geometry, matrix, camel, calculate, bounding]}
org.ode4j.ode.internal.gimpact.GimTrimesh#gim_trimesh_get_triangle_vertices: {[triangle, vecf, vertices, collision, plane, collidable, heightfield, shape, collide, emitter, volume, mass, impulse, hallmarks, delta, square, bounding, axes, velocity, motor, torque, friction, sphere, collect, rotate, spatial, shader, scene, bitmap, cinematic, calculate, speed, quaternion, geometry, arena, capsule, light, transmission, rotation, piston, bone, matrix, camel, texture, joints, ball, hinge, body, material, radius]}
org.ode4j.ode.internal.joints.OdeJointsFactoryImpl#dJointCreatePlane2D: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
net.smert.jreactphysics3d.constraint.Joint#solveVelocityConstraint: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.ode4j.ode.internal.gimpact.GimGeometry#PROJECT_POINT_PLANE: {[vecf, triangle, collision, collidable, plane, vertices, heightfield, shape, collide, emitter, volume, hallmarks, impulse, bounding, mass, square, collect, delta, motor, velocity, sphere, axes, torque, calculate, friction, shader, speed, light, bitmap, rotate, cinematic, texture, material, scene, spatial, arena, quaternion, radius, capsule, transmission, camel, ball, geometry, bone, piston, rotation, joints, matrix, hinge, body]}
com.jme3.collision.CollisionResults#addCollision: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.TrianglesStore#get: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.sCylinderTrimeshColliderData#_cldTestSeparatingAxes: {[shape, calculate, collidable, collision, plane, collide, collect, heightfield, axes, vecf, triangle, volume, square, vertices, joints, matrix, arena, hallmarks, emitter, ball, bounding, hinge, body, sphere, piston, transmission, rotate, friction, radius, rotation, mass, quaternion, speed, impulse, torque, velocity, bone, motor, delta, shader, texture, material, light, camel, spatial, capsule, bitmap, scene, geometry, cinematic]}
org.dyn4j.geometry.Mass#getInverseMass: {[mass, velocity, delta, impulse, motor, transmission, torque, radius, triangle, speed, vecf, friction, heightfield, square, collidable, collision, hallmarks, sphere, plane, collide, vertices, rotate, rotation, joints, hinge, piston, spatial, shape, bitmap, axes, scene, body, emitter, cinematic, bounding, arena, texture, ball, quaternion, shader, material, camel, capsule, collect, volume, light, bone, calculate, geometry, matrix]}
org.dyn4j.dynamics.Body#isStatic: {[mass, velocity, delta, impulse, motor, transmission, torque, radius, triangle, speed, vecf, friction, heightfield, square, collidable, collision, hallmarks, sphere, plane, collide, vertices, rotate, rotation, joints, hinge, piston, spatial, shape, bitmap, axes, scene, body, emitter, cinematic, bounding, arena, texture, ball, quaternion, shader, material, camel, capsule, collect, volume, light, bone, calculate, geometry, matrix]}
org.ode4j.ode.internal.joints.DxJointAMotor#setParamVel3: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
net.smert.jreactphysics3d.constraint.Joint#isCollisionEnabled: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
org.ode4j.ode.internal.CollideRayConvex#dCollideRayConvex: {[collidable, collide, plane, heightfield, collision, shape, vecf, triangle, vertices, collect, volume, calculate, bounding, emitter, sphere, hallmarks, square, motor, impulse, delta, velocity, matrix, speed, radius, torque, mass, axes, shader, friction, ball, capsule, transmission, arena, material, light, texture, rotation, camel, quaternion, piston, hinge, body, joints, spatial, geometry, rotate, cinematic, bitmap, bone, scene]}
org.ode4j.ode.internal.joints.DxJointAMotor#setParamVel2: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
com.jme3.input.event.TouchEvent#getDeltaScaleSpan: {[mass, delta, velocity, impulse, motor, torque, transmission, heightfield, friction, speed, vecf, triangle, collidable, collision, radius, square, collide, plane, rotate, joints, hinge, rotation, piston, hallmarks, cinematic, vertices, bitmap, shape, sphere, body, capsule, axes, emitter, arena, ball, collect, geometry, bounding, quaternion, spatial, scene, shader, texture, bone, matrix, calculate, volume, camel, light, material]}
com.jme3.collision.bih.BIHNode#setRightPlane: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.dyn4j.dynamics.Torque#getTorque: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
org.dyn4j.dynamics.World#detect: {[collision, shape, collidable, vecf, triangle, plane, heightfield, collide, ball, calculate, vertices, body, joints, arena, piston, emitter, axes, hinge, friction, volume, transmission, square, collect, torque, bounding, sphere, hallmarks, bone, shader, light, speed, rotate, camel, texture, material, rotation, impulse, capsule, mass, geometry, bitmap, delta, motor, scene, spatial, matrix, radius, cinematic, velocity, quaternion]}
org.ode4j.ode.internal.CollisionLibccd#ccdCollide: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
com.jme3.renderer.Camera#getWorldPlane: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.dyn4j.geometry.HalfEllipse#rotate: {[vertices, triangle, vecf, plane, shape, emitter, collision, collidable, heightfield, collide, axes, rotate, square, hallmarks, volume, rotation, quaternion, bounding, sphere, spatial, geometry, piston, bone, bitmap, scene, cinematic, arena, mass, friction, capsule, shader, hinge, camel, impulse, speed, torque, matrix, radius, collect, delta, light, velocity, material, motor, ball, transmission, joints, body, texture, calculate]}
net.smert.jreactphysics3d.constraint.SliderJoint#getMotorForce: {[delta, velocity, mass, motor, impulse, torque, speed, heightfield, triangle, vecf, friction, collidable, collision, transmission, collide, rotate, rotation, plane, hinge, piston, joints, vertices, axes, square, radius, shape, quaternion, body, bitmap, cinematic, collect, emitter, arena, capsule, ball, hallmarks, spatial, scene, bone, texture, volume, shader, sphere, light, material, camel, geometry, bounding, calculate, matrix]}
org.ode4j.ode.internal.CollideTrimeshBoxOld#dColliderFn: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.ode4j.ode.internal.gimpact.GimTrimeshTrimeshCol#MOST_DEEP_POINTS: {[vecf, triangle, collision, collidable, plane, vertices, heightfield, shape, collide, emitter, volume, hallmarks, impulse, bounding, mass, square, collect, delta, motor, velocity, sphere, axes, torque, calculate, friction, shader, speed, light, bitmap, rotate, cinematic, texture, material, scene, spatial, arena, quaternion, radius, capsule, transmission, camel, ball, geometry, bone, piston, rotation, joints, matrix, hinge, body]}
org.dyn4j.collision.BoundsListener#outside: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.ode4j.ode.internal.joints.DxJointPlane2D#setXParamVel: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.ode4j.ode.internal.gimpact.GimBufferArrayFloat#GIM_BUFFER_ARRAY_POINTER: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.joints.DxJointLMotor#setParam: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
com.jme3.scene.Mesh#getTriangle: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.dyn4j.dynamics.Body#getLinearVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
com.jme3.util.TangentBinormalGenerator#linkVertices: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.EdgeEPA#getOwnerTriangle: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
com.jme3.effect.influencers.RadialParticleInfluencer#setRadialVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.ode4j.ode.internal.joints.DxJointLMotor#setParamVel: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.internal.gimpact.GimTriCollision#gim_triangle_triangle_collision: {[vecf, triangle, collision, collidable, plane, heightfield, shape, vertices, collide, emitter, volume, mass, collect, delta, impulse, velocity, motor, bounding, hallmarks, torque, calculate, square, axes, sphere, friction, speed, shader, light, ball, bitmap, texture, transmission, rotate, spatial, material, scene, matrix, cinematic, quaternion, bone, camel, body, piston, joints, rotation, geometry, capsule, arena, hinge, radius]}
net.smert.jreactphysics3d.engine.DynamicsWorld#setContactsPositionCorrectionTechnique: {[mass, delta, velocity, impulse, motor, torque, speed, heightfield, triangle, vecf, friction, collidable, transmission, collision, collide, plane, hinge, joints, rotate, rotation, piston, vertices, radius, square, shape, axes, body, emitter, bitmap, arena, quaternion, cinematic, ball, capsule, hallmarks, collect, spatial, scene, sphere, texture, bone, volume, shader, light, material, geometry, matrix, camel, calculate, bounding]}
org.dyn4j.dynamics.Body#setAngularVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.ode4j.ode.DTriMeshData#build: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.dyn4j.collision.broadphase.BroadphaseKey#BroadphaseKey(C): {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.dyn4j.collision.broadphase.BroadphaseDetector#add: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.ode4j.ode.internal.DxGimpactData#build: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.ode4j.ode.internal.joints.DxJointAMotor#setParamFMax: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.internal.CollideTrimeshBox#dCollideBTL: {[vecf, triangle, collision, collidable, plane, heightfield, vertices, shape, collide, emitter, volume, mass, impulse, delta, hallmarks, motor, bounding, velocity, collect, square, axes, sphere, torque, calculate, friction, shader, speed, light, rotate, bitmap, spatial, scene, texture, quaternion, bone, material, transmission, ball, cinematic, arena, piston, geometry, camel, radius, rotation, body, capsule, matrix, hinge, joints]}
org.ode4j.ode.internal.DxTrimeshHeightfield#setHeightfieldData: {[heightfield, collision, vecf, collide, collidable, triangle, plane, shape, vertices, emitter, delta, volume, impulse, mass, motor, collect, velocity, torque, calculate, bounding, friction, hallmarks, sphere, capsule, axes, cinematic, speed, bone, square, bitmap, shader, material, transmission, light, quaternion, geometry, camel, matrix, texture, spatial, rotate, ball, arena, radius, joints, hinge, scene, rotation, body, piston]}
org.dyn4j.geometry.Rectangle#contains: {[vertices, triangle, plane, vecf, shape, square, collidable, collision, hallmarks, collide, heightfield, emitter, volume, bounding, sphere, axes, bitmap, radius, cinematic, rotate, capsule, shader, geometry, collect, transmission, rotation, scene, arena, quaternion, light, spatial, calculate, piston, matrix, friction, impulse, texture, motor, camel, torque, bone, hinge, speed, mass, body, material, joints, ball, delta, velocity]}
com.jme3.effect.influencers.ParticleInfluencer#getInitialVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
com.jme3.collision.bih.BIHTree#createBox: {[triangle, vecf, vertices, plane, collidable, collision, heightfield, shape, collide, emitter, volume, bounding, hallmarks, square, sphere, collect, impulse, motor, mass, velocity, delta, axes, torque, scene, spatial, geometry, calculate, friction, speed, cinematic, camel, rotate, bitmap, radius, material, capsule, shader, arena, texture, bone, quaternion, hinge, ball, matrix, joints, rotation, body, transmission, piston, light]}
org.ode4j.ode.internal.HeightFieldPlane#addTriangle: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.joints.DxJointAMotor#dJointSetAMotorParam: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.internal.gimpact.GimTrimeshTrimeshCol#gim_trimesh_trimesh_collision: {[vecf, triangle, collision, collidable, heightfield, plane, vertices, shape, collide, emitter, mass, volume, delta, impulse, velocity, motor, collect, bounding, torque, hallmarks, axes, square, calculate, sphere, friction, shader, speed, light, rotate, spatial, transmission, ball, bitmap, texture, scene, material, bone, quaternion, piston, cinematic, body, camel, arena, radius, hinge, geometry, joints, capsule, matrix, rotation]}
org.ode4j.ode.internal.gimpact.GimGeometry#POINT_IN_HULL_TZ: {[vecf, triangle, collision, collidable, plane, vertices, heightfield, shape, collide, emitter, volume, hallmarks, impulse, bounding, mass, square, collect, delta, motor, velocity, sphere, axes, torque, calculate, friction, shader, speed, light, bitmap, rotate, cinematic, texture, material, scene, spatial, arena, quaternion, radius, capsule, transmission, camel, ball, geometry, bone, piston, rotation, joints, matrix, hinge, body]}
net.smert.jreactphysics3d.collision.BroadPhasePair#ComputeBodiesIndexPair: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
net.smert.jreactphysics3d.collision.CollisionDetection#computeBroadPhase: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
net.smert.jreactphysics3d.collision.shapes.CollisionShape#isEqualTo: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, collect, delta, impulse, motor, hallmarks, calculate, velocity, bounding, square, sphere, axes, torque, shader, light, friction, speed, material, texture, ball, camel, rotate, body, bone, bitmap, piston, geometry, joints, capsule, quaternion, radius, hinge, transmission, rotation, spatial, arena, matrix, cinematic, scene]}
com.jme3.effect.ParticleEmitter#setVelocityVariation: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.ode4j.ode.internal.CollideTrimeshPlane#compare: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.gimpact.GimGeometry#TRIANGLE_NORMAL: {[vecf, triangle, collision, vertices, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, delta, volume, velocity, motor, torque, axes, hallmarks, bounding, square, collect, friction, sphere, shader, speed, calculate, rotate, transmission, bitmap, light, spatial, scene, cinematic, quaternion, arena, capsule, texture, geometry, piston, bone, rotation, radius, material, ball, joints, matrix, hinge, body, camel]}
net.smert.jreactphysics3d.body.RigidBody#setIsSleeping: {[velocity, mass, delta, motor, impulse, torque, speed, transmission, friction, triangle, heightfield, vecf, radius, collidable, square, collision, rotate, rotation, hinge, piston, plane, joints, collide, hallmarks, axes, vertices, sphere, body, quaternion, collect, shape, scene, bone, spatial, bitmap, ball, arena, texture, shader, material, cinematic, camel, matrix, emitter, light, bounding, capsule, geometry, calculate, volume]}
org.ode4j.ode.internal.joints.DxJointPlane2D#getYParamFMax: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.dyn4j.collision.broadphase.DynamicAABBTree#detectNonRecursive: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
org.ode4j.ode.internal.gimpact.GimTrimeshCapsuleCollision#gim_triangle_capsule_collision: {[collide, heightfield, shape, plane, emitter, collision, collidable, vecf, volume, triangle, sphere, vertices, hallmarks, capsule, bounding, radius, cinematic, square, bone, calculate, collect, bitmap, motor, impulse, transmission, delta, axes, torque, friction, mass, material, rotate, velocity, ball, camel, arena, quaternion, spatial, speed, geometry, light, hinge, shader, matrix, joints, body, texture, scene, rotation, piston]}
org.ode4j.ode.internal.CollideSpherePlane#dColliderFn: {[collide, plane, shape, collidable, heightfield, collision, vecf, triangle, vertices, volume, sphere, hallmarks, bounding, square, emitter, collect, radius, calculate, transmission, motor, impulse, axes, shader, delta, speed, torque, velocity, friction, material, light, capsule, texture, hinge, camel, mass, bitmap, quaternion, piston, matrix, ball, bone, rotation, rotate, geometry, spatial, cinematic, arena, scene, body, joints]}
net.smert.jreactphysics3d.collision.shapes.BoxShape#clone: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, collect, delta, impulse, motor, hallmarks, calculate, velocity, bounding, square, sphere, axes, torque, shader, light, friction, speed, material, texture, ball, camel, rotate, body, bone, bitmap, piston, geometry, joints, capsule, quaternion, radius, hinge, transmission, rotation, spatial, arena, matrix, cinematic, scene]}
org.ode4j.ode.internal.DxGimpactCollision#gim_trimesh_plane_collisionODE: {[vecf, triangle, collision, collidable, plane, heightfield, shape, vertices, collide, emitter, volume, mass, impulse, delta, collect, motor, velocity, hallmarks, bounding, square, sphere, calculate, torque, axes, shader, friction, speed, light, texture, material, bitmap, ball, rotate, camel, cinematic, transmission, spatial, bone, quaternion, piston, scene, body, radius, matrix, arena, joints, geometry, rotation, hinge, capsule]}
org.dyn4j.dynamics.contact.Contact#getNormalImpulse: {[mass, delta, velocity, impulse, motor, torque, speed, heightfield, triangle, vecf, friction, collidable, transmission, collision, collide, plane, hinge, joints, rotate, rotation, piston, vertices, radius, square, shape, axes, body, emitter, bitmap, arena, quaternion, cinematic, ball, capsule, hallmarks, collect, spatial, scene, sphere, texture, bone, volume, shader, light, material, geometry, matrix, camel, calculate, bounding]}
org.ode4j.ode.internal.sCylinderBoxData#_cldTestSeparatingAxes: {[vertices, plane, triangle, vecf, shape, collidable, square, collision, collide, hallmarks, heightfield, volume, emitter, bounding, sphere, axes, rotate, bitmap, radius, collect, cinematic, shader, rotation, capsule, transmission, calculate, geometry, quaternion, light, piston, scene, texture, spatial, arena, hinge, friction, bone, impulse, speed, joints, torque, matrix, material, motor, camel, velocity, ball, mass, body, delta]}
net.smert.jreactphysics3d.collision.shapes.ConvexMeshShape#isEqualTo: {[vecf, triangle, collision, collidable, plane, vertices, heightfield, shape, collide, emitter, volume, hallmarks, square, bounding, mass, impulse, delta, axes, sphere, collect, motor, velocity, calculate, torque, shader, friction, light, rotate, speed, bitmap, ball, spatial, texture, bone, material, quaternion, scene, piston, cinematic, radius, body, arena, camel, geometry, rotation, hinge, joints, transmission, matrix, capsule]}
org.ode4j.ode.internal.CollideSpaceGeom#dColliderFn: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
com.jme3.effect.shapes.EmitterMeshFaceShape#getRandomPoint: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.ode4j.ode.internal.DxTriMeshDisabled#dGeomTriMeshGetTriangleCount: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.dyn4j.collision.broadphase.BroadphaseItem#getCollidable: {[collidable, vecf, collision, triangle, plane, heightfield, collide, shape, vertices, emitter, collect, volume, motor, impulse, delta, bounding, velocity, calculate, mass, hallmarks, sphere, torque, square, speed, axes, friction, shader, matrix, light, ball, bitmap, scene, texture, rotation, material, cinematic, spatial, arena, body, transmission, camel, radius, hinge, quaternion, joints, geometry, piston, rotate, capsule, bone]}
net.smert.jreactphysics3d.body.CollisionBody#setIsCollisionEnabled: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
org.ode4j.ode.internal.DxGimpactCollision#DVector4Tovec4f: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.DTriRayCallback#call: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.DxGimpact#dGeomTriMeshGetTriangleCount: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
net.smert.jreactphysics3d.constraint.ContactPointInfo#setCollisionData: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
org.ode4j.ode.internal.DxHeightfield#DxHeightfield(C): {[triangle, vecf, collision, collidable, plane, vertices, heightfield, shape, collide, emitter, volume, mass, impulse, bounding, delta, hallmarks, motor, velocity, collect, square, torque, axes, sphere, friction, calculate, speed, shader, spatial, scene, rotate, bitmap, light, cinematic, geometry, transmission, quaternion, arena, bone, capsule, ball, texture, piston, rotation, camel, joints, radius, matrix, material, hinge, body]}
com.jme3.effect.influencers.NewtonianParticleInfluencer#setNormalVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.ode4j.ode.internal.gimpact.GimTriCollision#RAY_TRIANGLE_INTERSECTION: {[vecf, triangle, collision, collidable, plane, heightfield, vertices, shape, collide, emitter, volume, mass, impulse, delta, motor, velocity, collect, hallmarks, bounding, square, torque, axes, sphere, calculate, friction, shader, speed, light, bitmap, rotate, texture, spatial, transmission, scene, material, ball, cinematic, quaternion, bone, piston, camel, arena, body, capsule, geometry, matrix, rotation, hinge, radius, joints]}
com.jme3.scene.shape.Surface#addNormal: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_UNPROJECT: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.gimpact.GimAABBSet#gim_aabbset_bipartite_intersections: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
org.ode4j.ode.internal.CollideCylinderCylinder#dColliderFn: {[collision, vecf, collidable, heightfield, triangle, plane, collide, shape, vertices, emitter, volume, collect, delta, impulse, motor, mass, calculate, hallmarks, bounding, sphere, velocity, square, torque, axes, shader, friction, speed, light, material, texture, camel, ball, capsule, bone, radius, geometry, body, rotate, rotation, matrix, cinematic, joints, piston, bitmap, quaternion, transmission, arena, spatial, scene, hinge]}
org.ode4j.ode.internal.gimpact.GimAABBSet#GIM_CONVERT_VEC3F_GUINT_XZ_UPPER: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
com.jme3.collision.CollisionResults#getCollisionDirect: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
com.jme3.collision.CollisionResults#getFarthestCollision: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
org.ode4j.ode.internal.joints.DxJointPlane2D#setYParamVel: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.ode4j.ode.internal.Misc#dMaxDifferenceLowerTriangle: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_SUM_4: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_SUM_2: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.dyn4j.geometry.Mass#getInverseInertia: {[mass, velocity, delta, impulse, motor, transmission, torque, radius, triangle, speed, vecf, friction, heightfield, square, collidable, collision, hallmarks, sphere, plane, collide, vertices, rotate, rotation, joints, hinge, piston, spatial, shape, bitmap, axes, scene, body, emitter, cinematic, bounding, arena, texture, ball, quaternion, shader, material, camel, capsule, collect, volume, light, bone, calculate, geometry, matrix]}
net.smert.jreactphysics3d.constraint.ContactPoint#getFrictionVector1: {[mass, friction, delta, torque, impulse, transmission, velocity, motor, arena, joints, body, heightfield, vecf, ball, triangle, emitter, speed, vertices, collide, calculate, collision, collidable, hinge, plane, radius, piston, shape, square, cinematic, capsule, quaternion, geometry, sphere, bitmap, bounding, material, hallmarks, shader, light, axes, spatial, matrix, texture, camel, bone, collect, rotation, scene, rotate, volume]}
net.smert.jreactphysics3d.constraint.ContactPoint#getFrictionVector2: {[mass, friction, delta, torque, impulse, transmission, velocity, motor, arena, joints, body, heightfield, vecf, ball, triangle, emitter, speed, vertices, collide, calculate, collision, collidable, hinge, plane, radius, piston, shape, square, cinematic, capsule, quaternion, geometry, sphere, bitmap, bounding, material, hallmarks, shader, light, axes, spatial, matrix, texture, camel, bone, collect, rotation, scene, rotate, volume]}
org.dyn4j.dynamics.joint.PulleyJoint#getReactionTorque: {[mass, delta, velocity, torque, impulse, motor, transmission, friction, speed, heightfield, triangle, vecf, joints, collidable, radius, collision, body, collide, hinge, piston, plane, square, ball, vertices, arena, emitter, bitmap, rotate, collect, shape, cinematic, axes, sphere, hallmarks, spatial, rotation, capsule, scene, calculate, matrix, texture, shader, camel, light, material, volume, quaternion, bounding, bone, geometry]}
org.ode4j.ode.internal.HeightFieldTriangle#HeightFieldTriangle(C): {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.joints.DxJointPlane2D#getXParamVel: {[motor, velocity, delta, impulse, mass, speed, torque, heightfield, rotate, rotation, collidable, triangle, vecf, collision, hinge, friction, piston, collide, plane, quaternion, axes, transmission, joints, square, vertices, shape, collect, radius, body, bitmap, cinematic, bone, capsule, scene, hallmarks, shader, volume, texture, spatial, ball, arena, emitter, light, calculate, material, bounding, camel, matrix, sphere, geometry]}
org.ode4j.ode.internal.DxAbstractHeightfield#DxAbstractHeightfield(C): {[heightfield, collision, vecf, collide, collidable, triangle, plane, shape, vertices, emitter, delta, volume, impulse, mass, motor, collect, velocity, torque, calculate, bounding, friction, hallmarks, sphere, capsule, axes, cinematic, speed, bone, square, bitmap, shader, material, transmission, light, quaternion, geometry, camel, matrix, texture, spatial, rotate, ball, arena, radius, joints, hinge, scene, rotation, body, piston]}
net.smert.jreactphysics3d.constraint.JointInfo#JointInfo(C): {[collision, ball, shape, collidable, body, calculate, joints, vecf, triangle, plane, arena, heightfield, collide, piston, vertices, hinge, axes, friction, emitter, torque, transmission, volume, square, collect, speed, bone, impulse, bounding, sphere, light, hallmarks, motor, delta, shader, rotate, camel, velocity, texture, material, radius, rotation, capsule, mass, geometry, cinematic, spatial, scene, matrix, bitmap, quaternion]}
com.jme3.effect.shapes.EmitterMeshVertexShape#deepClone: {[vertices, triangle, vecf, plane, collision, shape, collidable, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, rotate, mass, impulse, delta, collect, motor, torque, friction, velocity, spatial, shader, bitmap, quaternion, scene, geometry, calculate, rotation, cinematic, bone, radius, arena, piston, light, matrix, capsule, hinge, speed, camel, texture, ball, material, transmission, body, joints]}
org.ode4j.ode.DConvex#setConvex: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.ode4j.ode.internal.CollideHeightfield#dColliderFn: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, friction, radius, axes, speed, shader, material, cinematic, camel, light, texture, bone, geometry, matrix, ball, bitmap, transmission, rotation, hinge, scene, spatial, piston, rotate, joints, arena, quaternion, body]}
org.ode4j.ode.internal.CollideTrimeshSphere#dColliderFn: {[collide, plane, shape, sphere, heightfield, collidable, hallmarks, volume, collision, vecf, bounding, vertices, square, triangle, radius, emitter, collect, calculate, transmission, motor, shader, capsule, impulse, axes, material, speed, camel, quaternion, hinge, texture, light, piston, delta, spatial, torque, bone, friction, rotation, ball, matrix, bitmap, scene, velocity, cinematic, mass, rotate, geometry, body, arena, joints]}
org.dyn4j.collision.broadphase.Sap#getAABB: {[vecf, collision, collidable, triangle, plane, shape, heightfield, collide, vertices, emitter, volume, hallmarks, square, collect, sphere, bounding, calculate, axes, impulse, delta, motor, mass, shader, velocity, light, torque, material, texture, friction, radius, camel, speed, ball, rotate, bitmap, bone, piston, body, quaternion, joints, transmission, geometry, capsule, cinematic, hinge, matrix, scene, rotation, spatial, arena]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_DOT_4: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_DOT_2: {[vecf, triangle, collision, collidable, vertices, plane, heightfield, shape, collide, emitter, mass, impulse, delta, velocity, volume, motor, torque, axes, square, hallmarks, friction, shader, collect, bounding, light, sphere, bitmap, speed, calculate, texture, rotate, transmission, material, cinematic, quaternion, arena, capsule, camel, spatial, piston, scene, rotation, matrix, radius, ball, bone, joints, geometry, hinge, body]}
org.ode4j.ode.internal.CollideConvexBox#dCollideConvexBox: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
org.ode4j.ode.internal.DxPlane#make_sure_plane_normal_has_unit_length: {[plane, vertices, shape, vecf, square, triangle, collidable, collide, hallmarks, collision, sphere, heightfield, volume, bounding, emitter, radius, collect, bitmap, axes, transmission, shader, cinematic, calculate, rotate, light, capsule, texture, material, geometry, rotation, impulse, motor, camel, mass, friction, arena, joints, ball, quaternion, matrix, spatial, piston, torque, speed, bone, scene, velocity, body, hinge, delta]}
org.ode4j.ode.DMisc#dMaxDifferenceLowerTriangle: {[triangle, vecf, vertices, collision, collidable, plane, heightfield, shape, collide, emitter, mass, impulse, volume, delta, velocity, motor, torque, axes, bounding, hallmarks, collect, friction, square, sphere, spatial, scene, speed, calculate, transmission, shader, rotate, bitmap, cinematic, quaternion, geometry, light, arena, capsule, bone, piston, radius, rotation, camel, ball, joints, texture, matrix, hinge, body, material]}
org.ode4j.ode.internal.DxHeightfieldData#dGeomHeightfieldDataBuildCallback: {[heightfield, collision, vecf, collide, collidable, triangle, plane, shape, vertices, emitter, delta, volume, impulse, mass, motor, collect, velocity, torque, calculate, bounding, friction, hallmarks, sphere, capsule, axes, cinematic, speed, bone, square, bitmap, shader, material, transmission, light, quaternion, geometry, camel, matrix, texture, spatial, rotate, ball, arena, radius, joints, hinge, scene, rotation, body, piston]}
net.smert.jreactphysics3d.body.RigidBody#getAngularVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.dyn4j.geometry.Slice#getAxes: {[vertices, triangle, vecf, plane, shape, square, collision, collidable, hallmarks, collide, emitter, heightfield, volume, bounding, sphere, axes, rotate, bitmap, cinematic, radius, rotation, shader, capsule, quaternion, geometry, collect, transmission, piston, light, arena, scene, spatial, speed, hinge, calculate, bone, texture, matrix, friction, joints, velocity, camel, impulse, material, delta, torque, motor, body, mass, ball]}
org.dyn4j.geometry.Slice#rotate: {[vertices, triangle, vecf, plane, shape, emitter, collision, collidable, heightfield, collide, axes, rotate, square, hallmarks, volume, rotation, quaternion, bounding, sphere, spatial, geometry, piston, bone, bitmap, scene, cinematic, arena, mass, friction, capsule, shader, hinge, camel, impulse, speed, torque, matrix, radius, collect, delta, light, velocity, material, motor, ball, transmission, joints, body, texture, calculate]}
org.ode4j.ode.internal.sCylinderTrimeshColliderData#_cldClipCylinderEdgeToTriangle: {[sphere, hallmarks, square, volume, bounding, radius, plane, collide, shape, vertices, collidable, collision, heightfield, vecf, triangle, transmission, emitter, collect, calculate, axes, bitmap, mass, shader, geometry, cinematic, rotate, velocity, hinge, light, material, delta, texture, quaternion, piston, motor, camel, arena, spatial, bone, torque, body, impulse, rotation, speed, scene, ball, capsule, joints, matrix, friction]}
net.smert.jreactphysics3d.collision.broadphase.BroadPhaseAlgorithm#addObject: {[collision, shape, collidable, ball, body, calculate, vecf, triangle, plane, heightfield, joints, collide, arena, vertices, piston, hinge, axes, friction, emitter, torque, transmission, volume, collect, square, bone, speed, bounding, sphere, hallmarks, light, impulse, shader, rotate, motor, delta, camel, texture, rotation, material, radius, capsule, velocity, geometry, cinematic, spatial, scene, quaternion, matrix, mass, bitmap]}
com.jme3.collision.bih.BIHNode#getRightPlane: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
com.jme3.collision.SweepSphere#collideWithTriangle: {[vecf, triangle, plane, collision, shape, collidable, vertices, heightfield, collide, emitter, volume, hallmarks, square, sphere, bounding, collect, axes, calculate, shader, impulse, motor, delta, mass, radius, light, velocity, rotate, torque, bitmap, friction, texture, material, ball, bone, quaternion, transmission, cinematic, piston, speed, camel, rotation, joints, body, hinge, spatial, scene, arena, geometry, matrix, capsule]}
org.ode4j.ode.internal.DxPlane#getParams: {[vecf, plane, triangle, collidable, collision, heightfield, vertices, shape, collide, emitter, volume, bounding, hallmarks, collect, square, sphere, impulse, calculate, motor, delta, velocity, mass, axes, torque, speed, friction, radius, shader, bitmap, light, scene, cinematic, rotate, matrix, spatial, geometry, ball, texture, material, hinge, transmission, bone, capsule, arena, piston, camel, quaternion, joints, rotation, body]}
org.dyn4j.dynamics.Settings#getSleepLinearVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
net.smert.jreactphysics3d.collision.shapes.ConvexMeshShape#recalculateBounds: {[vertices, triangle, vecf, plane, collision, collidable, shape, heightfield, collide, emitter, volume, hallmarks, square, bounding, axes, sphere, mass, rotate, spatial, geometry, impulse, scene, cinematic, delta, motor, bitmap, velocity, torque, friction, collect, capsule, arena, quaternion, rotation, camel, shader, matrix, bone, piston, radius, material, calculate, speed, light, texture, joints, transmission, hinge, body, ball]}
com.jme3.collision.CollisionResult#compareTo: {[vecf, collision, triangle, collidable, heightfield, plane, shape, collide, vertices, emitter, volume, mass, delta, impulse, collect, motor, velocity, calculate, hallmarks, bounding, torque, axes, sphere, square, shader, friction, speed, light, ball, material, texture, camel, body, bone, bitmap, piston, rotate, geometry, transmission, capsule, joints, rotation, quaternion, spatial, hinge, matrix, scene, arena, cinematic, radius]}
net.smert.jreactphysics3d.engine.ContactManifold#setFrictionVector1: {[mass, friction, delta, torque, impulse, transmission, velocity, motor, arena, joints, body, heightfield, vecf, ball, triangle, emitter, speed, vertices, collide, calculate, collision, collidable, hinge, plane, radius, piston, shape, square, cinematic, capsule, quaternion, geometry, sphere, bitmap, bounding, material, hallmarks, shader, light, axes, spatial, matrix, texture, camel, bone, collect, rotation, scene, rotate, volume]}
org.ode4j.ode.internal.CollideBoxBox#dCollideBoxBox: {[heightfield, collide, collision, collidable, plane, shape, vecf, triangle, vertices, emitter, volume, collect, sphere, hallmarks, bounding, calculate, motor, impulse, delta, square, mass, velocity, torque, capsule, radius, friction, axes, speed, shader, material, camel, light, cinematic, texture, bone, geometry, matrix, ball, transmission, bitmap, rotation, scene, hinge, spatial, piston, rotate, joints, body, arena, quaternion]}
net.smert.jreactphysics3d.engine.ContactManifold#setFrictionVector2: {[mass, friction, delta, torque, impulse, transmission, velocity, motor, arena, joints, body, heightfield, vecf, ball, triangle, emitter, speed, vertices, collide, calculate, collision, collidable, hinge, plane, radius, piston, shape, square, cinematic, capsule, quaternion, geometry, sphere, bitmap, bounding, material, hallmarks, shader, light, axes, spatial, matrix, texture, camel, bone, collect, rotation, scene, rotate, volume]}
org.dyn4j.dynamics.joint.RevoluteJoint#setMaximumMotorTorque: {[velocity, delta, motor, mass, impulse, torque, speed, heightfield, friction, triangle, collidable, transmission, vecf, collision, hinge, collide, piston, rotate, rotation, plane, joints, axes, square, vertices, radius, body, quaternion, shape, collect, bitmap, cinematic, ball, arena, capsule, hallmarks, scene, emitter, spatial, bone, shader, texture, volume, light, sphere, material, camel, matrix, bounding, calculate, geometry]}
net.smert.jreactphysics3d.body.RigidBody#getLinearVelocity: {[velocity, mass, delta, motor, impulse, speed, torque, transmission, radius, triangle, vecf, collidable, heightfield, rotate, friction, rotation, square, collision, hinge, piston, plane, hallmarks, axes, collide, joints, quaternion, vertices, sphere, bone, collect, body, scene, shape, spatial, bitmap, material, texture, shader, ball, camel, arena, matrix, cinematic, light, bounding, emitter, calculate, volume, capsule, geometry]}
org.ode4j.ode.internal.DxMass#dMassSetZero: {[mass, delta, velocity, transmission, impulse, motor, torque, radius, triangle, vecf, friction, heightfield, square, collision, speed, collidable, sphere, hallmarks, vertices, plane, collide, joints, bitmap, emitter, spatial, cinematic, shape, bounding, arena, rotate, rotation, hinge, scene, body, piston, capsule, axes, ball, texture, calculate, shader, volume, material, camel, light, matrix, geometry, bone, quaternion, collect]}
org.dyn4j.dynamics.joint.PrismaticJoint#getMotorSpeed: {[motor, velocity, speed, delta, impulse, mass, rotate, rotation, torque, quaternion, piston, hinge, axes, collidable, heightfield, friction, triangle, vecf, collision, collide, plane, joints, bone, transmission, collect, square, body, radius, vertices, shape, hallmarks, calculate, scene, bitmap, volume, shader, texture, bounding, ball, matrix, material, cinematic, light, capsule, spatial, arena, emitter, camel, sphere, geometry]}
org.ode4j.ode.internal.ragdoll.DxRagdoll#getBones: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
com.jme3.environment.LightProbeFactory#updateProbe: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
org.ode4j.ode.internal.ragdoll.DxRagdoll#addUniversalJoint: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, collidable, hallmarks, bounding, radius, volume, rotate, sphere, collect, shader, vertices, bitmap, cinematic, emitter, material, rotation, quaternion, heightfield, texture, square, capsule, vecf, light, triangle, camel, collide, scene, plane, geometry, spatial, matrix]},
com.jme3.util.BufferUtils#createVector3Buffer: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
org.dyn4j.dynamics.joint.AngleJoint#setLowerLimit: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
org.ode4j.ode.OdeHelper#createDBallJoint: {[ball, arena, body, calculate, joints, friction, torque, transmission, hinge, piston, rotation, quaternion, impulse, collision, delta, collidable, shape, mass, rotate, motor, velocity, collide, plane, speed, heightfield, emitter, collect, hallmarks, axes, shader, vecf, triangle, bitmap, cinematic, matrix, spatial, capsule, camel, sphere, bounding, texture, volume, material, radius, light, geometry, vertices, square, scene, bone]},
org.ode4j.ode.internal.DxWorld#dWorldGetAutoDisableFlag: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
org.ode4j.ode.internal.joints.DxJointBall#getInfo2: {[ball, arena, body, calculate, joints, friction, torque, transmission, hinge, piston, rotation, quaternion, impulse, collision, delta, collidable, shape, mass, rotate, motor, velocity, collide, plane, speed, heightfield, emitter, collect, hallmarks, axes, shader, vecf, triangle, bitmap, cinematic, matrix, spatial, capsule, camel, sphere, bounding, texture, volume, material, radius, light, geometry, vertices, square, scene, bone]},
org.ode4j.ode.internal.DxBody#setDynamic: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
org.ode4j.ode.internal.Step#dxStepIsland: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, bounding, radius, volume, sphere, rotate, vertices, shader, collect, bitmap, emitter, cinematic, rotation, material, quaternion, heightfield, texture, vecf, square, capsule, light, triangle, camel, matrix, collide, scene, plane, spatial, geometry]},
org.ode4j.ode.internal.DxBody#dBodySetAngularDampingThreshold: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
org.dyn4j.dynamics.joint.RopeJoint#setLimitsEnabled: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
org.ode4j.ode.internal.DxBody#getMaxAngularSpeed: {[body, ball, joints, friction, arena, torque, piston, hinge, impulse, delta, calculate, motor, speed, velocity, transmission, mass, axes, bone, shape, collision, rotate, collect, bounding, hallmarks, volume, sphere, radius, vertices, collidable, shader, bitmap, heightfield, cinematic, vecf, quaternion, rotation, triangle, square, material, matrix, capsule, texture, plane, collide, light, spatial, geometry, emitter, scene, camel]},
org.dyn4j.dynamics.joint.WheelJoint#getAnchor1: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
org.dyn4j.dynamics.joint.WheelJoint#getAnchor2: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
org.ode4j.ode.internal.DxBody#vectorFromWorld: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
org.ode4j.ode.internal.DxBody#getRelPointPos: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
com.jme3.cinematic.KeyFrame#isEmpty: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
org.ode4j.ode.internal.DxBody#dBodyGetAutoDisableAngularThreshold: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
org.ode4j.ode.internal.DxBody#setDampingDefaults: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
org.ode4j.ode.internal.joints.DxJointDBall#dJointSetDBallAnchor2: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, shader, sphere, collect, rotation, bitmap, vertices, quaternion, rotate, emitter, material, cinematic, texture, light, capsule, heightfield, scene, collide, plane, vecf, geometry, matrix, spatial, triangle, square, camel]},
org.ode4j.ode.internal.joints.DxJointDBall#dJointSetDBallAnchor1: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, shader, sphere, collect, rotation, bitmap, vertices, quaternion, rotate, emitter, material, cinematic, texture, light, capsule, heightfield, scene, collide, plane, vecf, geometry, matrix, spatial, triangle, square, camel]},
org.dyn4j.dynamics.World#step: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, collidable, hallmarks, bounding, radius, volume, rotate, sphere, collect, shader, vertices, bitmap, cinematic, emitter, material, rotation, quaternion, heightfield, texture, square, capsule, vecf, light, triangle, camel, collide, scene, plane, geometry, spatial, matrix]},
org.ode4j.ode.internal.DxBody#getAngularDamping: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
org.ode4j.ode.internal.DxBody#enable: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
org.ode4j.ode.internal.DxBody#dBodyGetForce: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
org.ode4j.ode.internal.DxGeom#dGeomSetPosition: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
org.ode4j.ode.internal.DxBody#setAngularDamping: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
org.ode4j.ode.internal.DxBody#dBodySetLinearDampingThreshold: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
org.ode4j.ode.internal.joints.DxJointBall#dJointSetBallParam: {[ball, arena, body, calculate, joints, friction, torque, transmission, hinge, piston, rotation, quaternion, impulse, collision, delta, collidable, shape, mass, rotate, motor, velocity, collide, plane, speed, heightfield, emitter, collect, hallmarks, axes, shader, vecf, triangle, bitmap, cinematic, matrix, spatial, capsule, camel, sphere, bounding, texture, volume, material, radius, light, geometry, vertices, square, scene, bone]},
org.ode4j.ode.internal.joints.DxJointTransmission#dJointGetTransmissionAnchor1: {[ball, body, joints, friction, arena, torque, piston, hinge, calculate, impulse, delta, motor, transmission, velocity, mass, speed, axes, collision, shape, bone, collidable, hallmarks, collect, shader, bounding, volume, quaternion, vertices, rotation, rotate, radius, emitter, bitmap, sphere, material, square, cinematic, heightfield, texture, vecf, light, triangle, capsule, collide, matrix, camel, geometry, plane, scene, spatial]},
org.ode4j.ode.internal.Step#dxEstimateMemoryRequirements: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
org.ode4j.ode.internal.joints.DxJointTransmission#dJointGetTransmissionAnchor2: {[ball, body, joints, friction, arena, torque, piston, hinge, calculate, impulse, delta, motor, transmission, velocity, mass, speed, axes, collision, shape, bone, collidable, hallmarks, collect, shader, bounding, volume, quaternion, vertices, rotation, rotate, radius, emitter, bitmap, sphere, material, square, cinematic, heightfield, texture, vecf, light, triangle, capsule, collide, matrix, camel, geometry, plane, scene, spatial]},
org.ode4j.ode.internal.joints.DxJoint#getAnchor: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
org.ode4j.ode.internal.DxGeom#dGeomGetBodyNext: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
org.ode4j.ode.internal.joints.DxJointPU#dJointGetPUAngle1Rate: {[ball, body, arena, joints, friction, calculate, torque, hinge, piston, impulse, delta, transmission, motor, mass, velocity, speed, axes, collision, shape, collidable, bone, rotation, quaternion, hallmarks, collide, shader, bitmap, plane, matrix, cinematic, radius, capsule, emitter, material, vertices, heightfield, texture, square, triangle, bounding, light, vecf, collect, sphere, volume, spatial, camel, scene, rotate, geometry]},
org.dyn4j.dynamics.DetectResult#setFixture: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
com.jme3.material.ShaderGenerationInfo#getVertexUniforms: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, collidable, hallmarks, bounding, radius, volume, rotate, sphere, collect, shader, vertices, bitmap, cinematic, emitter, material, rotation, quaternion, heightfield, texture, square, capsule, vecf, light, triangle, camel, collide, scene, plane, geometry, spatial, matrix]},
org.ode4j.ode.BodyMoveCallBack#run: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
org.ode4j.ode.internal.DxGeom#getOffsetQuaternion: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
org.dyn4j.dynamics.DetectResult#toString: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
org.dyn4j.dynamics.RaycastResult#setBody: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
org.dyn4j.dynamics.contact.ContactConstraintId#getBody1Id: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
org.dyn4j.dynamics.joint.MotorJoint#setAngularTarget: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
org.dyn4j.dynamics.DetectBroadphaseFilter#isAllowed: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
org.ode4j.ode.OdeHelper#createBody: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_INV_LENGTH_2: {[body, ball, joints, friction, arena, piston, hinge, torque, calculate, impulse, delta, motor, speed, velocity, transmission, mass, axes, shape, collision, bone, rotate, collidable, radius, hallmarks, bounding, collect, sphere, volume, square, plane, quaternion, triangle, collide, vecf, shader, rotation, bitmap, cinematic, material, emitter, spatial, texture, heightfield, scene, geometry, camel, capsule, matrix, vertices, light]},
org.ode4j.ode.internal.DxBody#setMaxAngularSpeed: {[body, ball, joints, friction, arena, torque, piston, hinge, impulse, delta, calculate, motor, speed, velocity, transmission, mass, axes, bone, shape, collision, rotate, collect, bounding, hallmarks, volume, sphere, radius, vertices, collidable, shader, bitmap, heightfield, cinematic, vecf, quaternion, rotation, triangle, square, material, matrix, capsule, texture, plane, collide, light, spatial, geometry, emitter, scene, camel]},
com.jme3.material.Material#setTexture: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]},
org.ode4j.ode.OdeHelper#connectingJoint: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, collidable, hallmarks, bounding, radius, volume, rotate, sphere, collect, shader, vertices, bitmap, cinematic, emitter, material, rotation, quaternion, heightfield, texture, square, capsule, vecf, light, triangle, camel, collide, scene, plane, geometry, spatial, matrix]},
org.dyn4j.dynamics.joint.PinJoint#getAnchor2: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.ragdoll.DxRagdoll#addConstrainedBallJoint: {[body, ball, joints, friction, arena, piston, hinge, torque, calculate, impulse, delta, motor, speed, velocity, transmission, mass, axes, shape, collision, bone, rotate, collidable, bounding, hallmarks, radius, square, collect, volume, sphere, plane, quaternion, rotation, collide, triangle, vecf, shader, bitmap, cinematic, emitter, material, camel, heightfield, light, capsule, matrix, texture, vertices, spatial, geometry, scene]}
org.ode4j.ode.internal.joints.DxJointLMotor#setAxis: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
com.jme3.texture.Image#write: {[ball, arena, body, calculate, joints, friction, torque, transmission, hinge, piston, rotation, quaternion, impulse, collision, delta, collidable, shape, mass, rotate, motor, velocity, collide, plane, speed, heightfield, emitter, collect, hallmarks, axes, shader, vecf, triangle, bitmap, cinematic, matrix, spatial, capsule, camel, sphere, bounding, texture, volume, material, radius, light, geometry, vertices, square, scene, bone]}
org.ode4j.ode.internal.joints.DxJointDBall#getAnchor2: {[ball, arena, body, calculate, joints, friction, torque, transmission, hinge, piston, rotation, quaternion, impulse, collision, delta, collidable, shape, mass, rotate, motor, velocity, collide, plane, speed, heightfield, emitter, collect, hallmarks, axes, shader, vecf, triangle, bitmap, cinematic, matrix, spatial, capsule, camel, sphere, bounding, texture, volume, material, radius, light, geometry, vertices, square, scene, bone]}
org.dyn4j.dynamics.ContactEdge#ContactEdge(C): {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointBall#dJointGetBallAnchor2: {[ball, arena, body, calculate, joints, friction, torque, transmission, hinge, piston, rotation, quaternion, impulse, collision, delta, collidable, shape, mass, rotate, motor, velocity, collide, plane, speed, heightfield, emitter, collect, hallmarks, axes, shader, vecf, triangle, bitmap, cinematic, matrix, spatial, capsule, camel, sphere, bounding, texture, volume, material, radius, light, geometry, vertices, square, scene, bone]}
net.smert.jreactphysics3d.constraint.BallAndSocketJointInfo#BallAndSocketJointInfo(C): {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, shader, sphere, collect, rotation, bitmap, vertices, quaternion, rotate, emitter, material, cinematic, texture, light, capsule, heightfield, scene, collide, plane, vecf, geometry, matrix, spatial, triangle, square, camel]}
org.ode4j.ode.DSpace#collide: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.RopeJoint#setUpperLimit: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#DxBody(C): {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.RevoluteJoint#setLimits: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyGetJoint: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.engine.DynamicsWorld#notifyRemovedOverlappingPair: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointSetTransmissionAxis: {[body, ball, joints, friction, arena, torque, piston, hinge, calculate, impulse, delta, motor, speed, transmission, velocity, mass, axes, shape, collision, bone, rotate, collidable, square, collect, bounding, plane, hallmarks, radius, collide, volume, triangle, rotation, vecf, sphere, shader, quaternion, material, emitter, bitmap, cinematic, camel, geometry, matrix, light, heightfield, texture, capsule, scene, spatial, vertices]}
org.ode4j.ode.internal.joints.DxJointDBall#dJointGetDBallDistance: {[ball, arena, body, calculate, joints, friction, torque, transmission, hinge, piston, rotation, quaternion, impulse, collision, delta, collidable, shape, mass, rotate, motor, velocity, collide, plane, speed, heightfield, emitter, collect, hallmarks, axes, shader, vecf, triangle, bitmap, cinematic, matrix, spatial, capsule, camel, sphere, bounding, texture, volume, material, radius, light, geometry, vertices, square, scene, bone]}
org.ode4j.ode.internal.processmem.DxStepperProcessingCallContext#m_islandBodiesStartA: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.RopeJoint#setLimits: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointBall#setAnchor: {[ball, arena, body, calculate, joints, friction, torque, transmission, hinge, piston, rotation, quaternion, impulse, collision, delta, collidable, shape, mass, rotate, motor, velocity, collide, plane, speed, heightfield, emitter, collect, hallmarks, axes, shader, vecf, triangle, bitmap, cinematic, matrix, spatial, capsule, camel, sphere, bounding, texture, volume, material, radius, light, geometry, vertices, square, scene, bone]}
net.smert.jreactphysics3d.constraint.Joint#isActive: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJoint#dJointGetBody: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointHinge#dJointAddHingeTorque: {[body, ball, joints, friction, arena, torque, piston, hinge, impulse, delta, calculate, motor, speed, velocity, transmission, mass, axes, bone, shape, collision, rotate, collect, bounding, hallmarks, volume, vertices, heightfield, sphere, collidable, vecf, radius, triangle, shader, square, emitter, collide, plane, bitmap, material, cinematic, matrix, rotation, texture, camel, quaternion, spatial, scene, light, geometry, capsule]}
org.dyn4j.dynamics.World#addJoint: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, collidable, hallmarks, bounding, radius, volume, rotate, sphere, collect, shader, vertices, bitmap, cinematic, emitter, material, rotation, quaternion, heightfield, texture, square, capsule, vecf, light, triangle, camel, collide, scene, plane, geometry, spatial, matrix]}
org.ode4j.ode.internal.processmem.DxSingleIslandCallContext#GetSelectedIslandBodiesA: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodySetPosition: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxGeom#dGeomSetOffsetWorldPosition: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#isKinematic: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyGetPointVel: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyGetNextGeom: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.geometry.Capsule#contains: {[ball, body, arena, joints, friction, calculate, torque, hinge, piston, impulse, delta, transmission, motor, mass, velocity, speed, axes, collision, shape, collidable, bone, rotation, quaternion, hallmarks, collide, shader, bitmap, plane, matrix, cinematic, radius, capsule, emitter, material, vertices, heightfield, texture, square, triangle, bounding, light, vecf, collect, sphere, volume, spatial, camel, scene, rotate, geometry]}
org.ode4j.ode.internal.joints.DxJointUniversal#dJointGetUniversalAngle1Rate: {[ball, body, arena, joints, friction, calculate, torque, hinge, piston, impulse, delta, transmission, motor, mass, velocity, speed, axes, collision, shape, collidable, bone, rotation, quaternion, hallmarks, collide, shader, bitmap, plane, matrix, cinematic, radius, capsule, emitter, material, vertices, heightfield, texture, square, triangle, bounding, light, vecf, collect, sphere, volume, spatial, camel, scene, rotate, geometry]}
org.ode4j.ode.internal.DxBody#dBodySetAutoDisableAverageSamplesCount: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodySetForce: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJoint#getBody: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#getPosition: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.Body#removeFixtures: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.RaycastAdapter#allow: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJoint#DxJoint(C): {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.AngleJoint#setUpperLimit: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.ConvexCastResult#ConvexCastResult(C): {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#setForce: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointHinge2#dJointGetHinge2Angle2Rate: {[ball, body, joints, arena, friction, torque, calculate, hinge, piston, impulse, delta, motor, transmission, velocity, speed, mass, axes, collision, shape, bone, collidable, hallmarks, collide, bitmap, shader, cinematic, rotate, plane, radius, matrix, capsule, rotation, bounding, quaternion, sphere, square, vertices, heightfield, material, volume, triangle, texture, vecf, light, emitter, camel, spatial, geometry, scene, collect]}
org.ode4j.ode.internal.DxWorld#dWorldSetAutoDisableFlag: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.World#getBodyCount: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.Constraint#toString: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointHinge2#getInfo2: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, speed, velocity, transmission, mass, axes, bone, collision, shape, hallmarks, collidable, bounding, rotate, radius, volume, sphere, collect, shader, bitmap, vertices, cinematic, material, texture, capsule, heightfield, emitter, light, square, matrix, scene, rotation, spatial, vecf, camel, collide, plane, triangle, geometry, quaternion]}
org.ode4j.ode.internal.DxBody#dBodyIsEnabled: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#addForceAtPos: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxWorld#dInternalHandleAutoDisabling: {[ball, body, arena, joints, friction, calculate, torque, hinge, piston, impulse, delta, transmission, motor, mass, velocity, speed, axes, collision, shape, collidable, bone, rotation, quaternion, hallmarks, collide, shader, bitmap, plane, matrix, cinematic, radius, capsule, emitter, material, vertices, heightfield, texture, square, triangle, bounding, light, vecf, collect, sphere, volume, spatial, camel, scene, rotate, geometry]}
org.ode4j.ode.internal.DxBody#dBodySetAutoDisableSteps: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodySetAutoDisableAngularThreshold: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyGetLinearVel: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.body.Body#getBodyID: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.collision.BodyIndexPair#BodyIndexPair(C): {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyGetLinearDamping: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointPU#dJointGetPUPosition: {[ball, body, arena, joints, friction, calculate, torque, hinge, piston, impulse, delta, transmission, motor, mass, velocity, speed, axes, collision, shape, collidable, bone, rotation, quaternion, hallmarks, collide, shader, bitmap, plane, matrix, cinematic, radius, capsule, emitter, material, vertices, heightfield, texture, square, triangle, bounding, light, vecf, collect, sphere, volume, spatial, camel, scene, rotate, geometry]}
org.ode4j.ode.internal.joints.DxJointBall#setParam: {[ball, arena, body, calculate, joints, friction, torque, transmission, hinge, piston, rotation, quaternion, impulse, collision, delta, collidable, shape, mass, rotate, motor, velocity, collide, plane, speed, heightfield, emitter, collect, hallmarks, axes, shader, vecf, triangle, bitmap, cinematic, matrix, spatial, capsule, camel, sphere, bounding, texture, volume, material, radius, light, geometry, vertices, square, scene, bone]}
org.dyn4j.dynamics.Body#isAutoSleepingEnabled: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.World#setBroadphaseDetector: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.engine.DynamicsWorld#getRigidBodies: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyGetAngularDamping: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.OdeJointsFactoryImpl#dConnectingJointList: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyAddForceAtPos: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.Capacity#Capacity(C): {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointBall#dJointGetBallParam: {[ball, arena, body, calculate, joints, friction, torque, transmission, hinge, piston, rotation, quaternion, impulse, collision, delta, collidable, shape, mass, rotate, motor, velocity, collide, plane, speed, heightfield, emitter, collect, hallmarks, axes, shader, vecf, triangle, bitmap, cinematic, matrix, spatial, capsule, camel, sphere, bounding, texture, volume, material, radius, light, geometry, vertices, square, scene, bone]}
org.ode4j.ode.OdeHelper#createBallJoint: {[ball, arena, body, calculate, joints, friction, torque, transmission, hinge, piston, rotation, quaternion, impulse, collision, delta, collidable, shape, mass, rotate, motor, velocity, collide, plane, speed, heightfield, emitter, collect, hallmarks, axes, shader, vecf, triangle, bitmap, cinematic, matrix, spatial, capsule, camel, sphere, bounding, texture, volume, material, radius, light, geometry, vertices, square, scene, bone]}
org.dyn4j.dynamics.RaycastBroadphaseFilter#isAllowed: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#setDamping: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodySetAngularDamping: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#addForceAtRelPos: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.Capacity#hashCode: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.OdeJointsFactoryImpl#dJointAttach: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointPU#dJointSetPUAnchorOffset: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#setAutoDisableFlag: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.engine.ContactSolver#computeMixedRestitutionFactor: {[ball, body, friction, arena, joints, torque, piston, hinge, calculate, material, shader, impulse, texture, delta, scene, light, camel, spatial, geometry, motor, speed, transmission, velocity, mass, bone, bitmap, axes, radius, hallmarks, collision, sphere, cinematic, collect, quaternion, heightfield, collide, square, vecf, collidable, rotation, shape, bounding, volume, capsule, rotate, emitter, matrix, plane, vertices, triangle]}
org.dyn4j.dynamics.Body#removeFixture: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.DJoint#getBody: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.engine.Island#getBodies: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointPiston#dJointGetPistonPositionRate: {[ball, body, arena, joints, friction, calculate, torque, hinge, piston, impulse, delta, transmission, motor, mass, velocity, speed, axes, collision, shape, collidable, bone, rotation, hallmarks, quaternion, collide, shader, bitmap, plane, cinematic, matrix, radius, capsule, material, vertices, heightfield, emitter, square, texture, bounding, triangle, vecf, light, sphere, rotate, volume, collect, camel, spatial, scene, geometry]}
org.dyn4j.dynamics.contact.ContactConstraint#ContactConstraint(C): {[body, ball, joints, friction, arena, torque, piston, hinge, impulse, delta, motor, calculate, speed, velocity, mass, transmission, axes, bone, shape, rotate, collision, collect, bounding, hallmarks, volume, vertices, heightfield, sphere, shader, vecf, triangle, radius, bitmap, collidable, cinematic, square, material, collide, plane, rotation, quaternion, texture, matrix, capsule, emitter, light, geometry, spatial, scene, camel]}
org.ode4j.ode.internal.DxBody#getPosRelPoint: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointHinge2#measureAngle2: {[ball, body, arena, joints, friction, calculate, torque, hinge, piston, impulse, delta, transmission, motor, mass, velocity, speed, axes, collision, shape, collidable, bone, rotation, quaternion, hallmarks, collide, shader, bitmap, plane, matrix, cinematic, radius, capsule, emitter, material, vertices, heightfield, texture, square, triangle, bounding, light, vecf, collect, sphere, volume, spatial, camel, scene, rotate, geometry]}
org.ode4j.ode.internal.joints.DxJointHinge2#measureAngle1: {[ball, body, arena, joints, friction, calculate, torque, hinge, piston, impulse, delta, transmission, motor, mass, velocity, speed, axes, collision, shape, collidable, bone, rotation, quaternion, hallmarks, collide, shader, bitmap, plane, matrix, cinematic, radius, capsule, emitter, material, vertices, heightfield, texture, square, triangle, bounding, light, vecf, collect, sphere, volume, spatial, camel, scene, rotate, geometry]}
org.dyn4j.dynamics.contact.ContactConstraintId#hashCode: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJoint#dJointAttach: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxGeom#setBody: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.collision.CollisionDetection#broadPhaseNotifyRemovedOverlappingPair: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#setMovedCallback: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.collision.AxisAlignedBounds#isOutside: {[ball, body, joints, arena, friction, calculate, piston, torque, hinge, impulse, delta, transmission, motor, speed, velocity, axes, mass, collision, shape, collidable, bone, plane, collide, triangle, vecf, heightfield, radius, hallmarks, rotation, rotate, shader, quaternion, bitmap, vertices, square, material, cinematic, bounding, sphere, scene, texture, emitter, volume, capsule, spatial, collect, geometry, camel, matrix, light]}
net.smert.jreactphysics3d.constraint.ContactPoint#getLocalPointOnBody2: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.constraint.ContactPoint#getLocalPointOnBody1: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#getNumJoints: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, collidable, hallmarks, bounding, radius, volume, rotate, sphere, collect, shader, vertices, bitmap, cinematic, emitter, material, rotation, quaternion, heightfield, texture, square, capsule, vecf, light, triangle, camel, collide, scene, plane, geometry, spatial, matrix]}
org.ode4j.ode.internal.ragdoll.DxRagdoll#addHingeJoint: {[body, ball, joints, friction, arena, torque, piston, hinge, calculate, impulse, delta, motor, speed, velocity, transmission, mass, axes, bone, shape, collision, rotate, hallmarks, collidable, bounding, radius, volume, collect, sphere, vertices, shader, bitmap, cinematic, heightfield, material, square, quaternion, capsule, texture, emitter, rotation, vecf, camel, triangle, light, geometry, matrix, spatial, plane, collide, scene]}
org.dyn4j.dynamics.joint.AngleJoint#setLimitEnabled: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyGetFirstGeom: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyGetPosRelPoint: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxGeom#dGeomSetBody: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxWorld#dWorldSetLinearDamping: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.Island#add: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, collidable, hallmarks, bounding, radius, volume, rotate, sphere, collect, shader, vertices, bitmap, cinematic, emitter, material, rotation, quaternion, heightfield, texture, square, capsule, vecf, light, triangle, camel, collide, scene, plane, geometry, spatial, matrix]}
org.ode4j.ode.internal.joints.DxJointPU#dJointGetPUAnchor: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.ConvexCastResult#setFixture: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.collision.broadphase.PairManager#reallocatePairs: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.contact.ContactConstraint#getFixture1: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.contact.ContactConstraint#getFixture2: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.engine.DynamicsWorld#setInterpolationFactorToAllBodies: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.RevoluteJoint#getAnchor1: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.RevoluteJoint#getAnchor2: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointHinge2#dJointGetHinge2Angle1Rate: {[ball, body, joints, arena, friction, torque, calculate, hinge, piston, impulse, delta, motor, transmission, velocity, speed, mass, axes, collision, shape, bone, collidable, hallmarks, collide, bitmap, shader, cinematic, rotate, plane, radius, matrix, capsule, rotation, bounding, quaternion, sphere, square, vertices, heightfield, material, volume, triangle, texture, vecf, light, emitter, camel, spatial, geometry, scene, collect]}
org.dyn4j.dynamics.DestructionAdapter#destroyed: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.Constraint#getBody1: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.Constraint#getBody2: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointDBall#dJointGetDBallAnchor2: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, shader, sphere, collect, rotation, bitmap, vertices, quaternion, rotate, emitter, material, cinematic, texture, light, capsule, heightfield, scene, collide, plane, vecf, geometry, matrix, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointPiston#dJointAddPistonForce: {[ball, body, joints, arena, friction, torque, calculate, hinge, piston, impulse, delta, transmission, motor, mass, velocity, speed, axes, shape, collision, bone, collidable, quaternion, square, vertices, rotation, shader, hallmarks, emitter, rotate, bitmap, matrix, collide, cinematic, spatial, material, plane, bounding, volume, capsule, vecf, camel, triangle, texture, heightfield, light, radius, collect, scene, sphere, geometry]}
org.ode4j.ode.internal.joints.DxJointDBall#dJointGetDBallAnchor1: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, shader, sphere, collect, rotation, bitmap, vertices, quaternion, rotate, emitter, material, cinematic, texture, light, capsule, heightfield, scene, collide, plane, vecf, geometry, matrix, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyEnable_noAdis: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointBall#setRelativeValues: {[ball, arena, body, calculate, joints, friction, torque, transmission, hinge, piston, rotation, quaternion, impulse, collision, delta, collidable, shape, mass, rotate, motor, velocity, collide, plane, speed, heightfield, emitter, collect, hallmarks, axes, shader, vecf, triangle, bitmap, cinematic, matrix, spatial, capsule, camel, sphere, bounding, texture, volume, material, radius, light, geometry, vertices, square, scene, bone]}
org.dyn4j.dynamics.contact.ContactConstraintId#equals: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointDHinge#getInfo2: {[ball, body, arena, joints, calculate, friction, piston, hinge, collision, torque, shape, collidable, transmission, axes, impulse, plane, collide, delta, triangle, vecf, heightfield, motor, mass, speed, velocity, vertices, square, collect, volume, bone, emitter, bounding, sphere, rotation, quaternion, matrix, hallmarks, scene, rotate, capsule, geometry, material, bitmap, cinematic, camel, spatial, radius, light, shader, texture]}
org.dyn4j.dynamics.ConvexCastListener#allow: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#getLinearDampingThreshold: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#setAutoDisableAngularThreshold: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.engine.DynamicsWorld#resetContactManifoldListsOfBodies: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxGeom#dCollide: {[ball, body, joints, arena, calculate, friction, piston, hinge, collision, shape, torque, collidable, transmission, axes, collide, plane, impulse, heightfield, vecf, triangle, delta, speed, motor, velocity, mass, vertices, bone, emitter, square, volume, collect, capsule, sphere, cinematic, bounding, bitmap, rotation, camel, hallmarks, rotate, quaternion, light, geometry, material, matrix, texture, spatial, shader, radius, scene]}
org.dyn4j.dynamics.joint.MotorJoint#setLinearTarget: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#getAngularDampingThreshold: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointDBall#setAnchor2: {[ball, arena, body, calculate, joints, friction, torque, transmission, hinge, piston, rotation, quaternion, impulse, collision, delta, collidable, shape, mass, rotate, motor, velocity, collide, plane, speed, heightfield, emitter, collect, hallmarks, axes, shader, vecf, triangle, bitmap, cinematic, matrix, spatial, capsule, camel, sphere, bounding, texture, volume, material, radius, light, geometry, vertices, square, scene, bone]}
org.ode4j.ode.internal.joints.DxJointDBall#setAnchor1: {[ball, arena, body, calculate, joints, friction, torque, transmission, hinge, piston, rotation, quaternion, impulse, collision, delta, collidable, shape, mass, rotate, motor, velocity, collide, plane, speed, heightfield, emitter, collect, hallmarks, axes, shader, vecf, triangle, bitmap, cinematic, matrix, spatial, capsule, camel, sphere, bounding, texture, volume, material, radius, light, geometry, vertices, square, scene, bone]}
org.ode4j.ode.internal.DxQuickStep#dxEstimateMemoryRequirements: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#addRelForce: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.World#shift: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, collidable, hallmarks, bounding, radius, volume, rotate, sphere, collect, shader, vertices, bitmap, cinematic, emitter, material, rotation, quaternion, heightfield, texture, square, capsule, vecf, light, triangle, camel, collide, scene, plane, geometry, spatial, matrix]}
org.ode4j.ode.OdeHelper#areConnected: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyAddRelForceAtPos: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJoint#getAxis2: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.BodyIterator#remove: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.World#containsBody: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#getRelPointVel: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyVectorToWorld: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodySetAutoDisableTime: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.processmem.DxWorldProcessIslandsInfo#BuildIslandsAndEstimateStepperMemoryRequirements: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, bounding, radius, volume, sphere, rotate, vertices, shader, collect, bitmap, emitter, cinematic, rotation, material, quaternion, heightfield, texture, vecf, square, capsule, light, triangle, camel, matrix, collide, scene, plane, spatial, geometry]}
org.dyn4j.dynamics.ConvexCastAdapter#allow: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.OdeJointsFactoryImpl#_dAreConnected: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.Capacity#toString: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.RopeJoint#RopeJoint(C): {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodySetGyroscopicMode: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.DBody#setMovedCallback: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.DBody#isConnectedTo: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.constraint.Joint#getBody2: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.constraint.Joint#getBody1: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.Body#isActive: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.OdeJointsFactoryImpl#_dAreConnectedExcluding: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#getPointVel: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyAddRelForceAtRelPos: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.collision.broadphase.PairManager#findPairWithHashValue: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJoint#getAnchor2: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.BodyIterator#BodyIterator(C): {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.processmem.DxWorldProcessIslandsInfo#AssignInfo: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, collidable, hallmarks, bounding, radius, volume, rotate, sphere, collect, shader, vertices, bitmap, cinematic, emitter, material, rotation, quaternion, heightfield, texture, square, capsule, vecf, light, triangle, camel, collide, scene, plane, geometry, spatial, matrix]}
org.dyn4j.dynamics.Constraint#Constraint(C): {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#getGyroscopicMode: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.RopeJoint#getAnchor1: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.RopeJoint#getAnchor2: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.collision.BroadPhasePair#newBodiesIndexPair: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.ragdoll.DxRagdollBody#getBody: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#vectorToWorld: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.contact.ContactConstraintId#ContactConstraintId(C): {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.contact.SimpleContactManager#postSolveNotify: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointSlider#dJointAddSliderForce: {[ball, body, arena, joints, friction, torque, calculate, hinge, piston, impulse, delta, transmission, motor, mass, velocity, speed, axes, shape, collision, bone, collidable, quaternion, rotation, vertices, square, emitter, shader, hallmarks, matrix, bitmap, collide, cinematic, rotate, spatial, material, plane, capsule, vecf, triangle, volume, camel, bounding, texture, light, heightfield, radius, scene, geometry, collect, sphere]}
org.ode4j.ode.internal.joints.DxJointDBall#getDistance: {[ball, arena, body, calculate, joints, friction, torque, transmission, hinge, piston, rotation, quaternion, impulse, collision, delta, collidable, shape, mass, rotate, motor, velocity, collide, plane, speed, heightfield, emitter, collect, hallmarks, axes, shader, vecf, triangle, bitmap, cinematic, matrix, spatial, capsule, camel, sphere, bounding, texture, volume, material, radius, light, geometry, vertices, square, scene, bone]}
org.dyn4j.dynamics.Body#getInContactBodies: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointHinge2#makeV1andV2: {[ball, body, arena, joints, friction, calculate, torque, hinge, piston, impulse, delta, transmission, motor, mass, velocity, speed, axes, collision, shape, collidable, bone, rotation, quaternion, hallmarks, collide, shader, bitmap, plane, matrix, cinematic, radius, capsule, emitter, material, vertices, heightfield, texture, square, triangle, bounding, light, vecf, collect, sphere, volume, spatial, camel, scene, rotate, geometry]}
org.ode4j.ode.internal.joints.DxJointConstrainedBall#setAxes: {[body, ball, joints, friction, arena, piston, hinge, torque, calculate, impulse, delta, motor, speed, velocity, transmission, mass, axes, shape, collision, bone, rotate, collidable, radius, hallmarks, bounding, collect, sphere, volume, square, plane, quaternion, triangle, collide, vecf, shader, rotation, bitmap, cinematic, material, emitter, spatial, texture, heightfield, scene, geometry, camel, capsule, matrix, vertices, light]}
org.dyn4j.dynamics.World#removeJoint: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, collidable, hallmarks, bounding, radius, volume, rotate, sphere, collect, shader, vertices, bitmap, cinematic, emitter, material, rotation, quaternion, heightfield, texture, square, capsule, vecf, light, triangle, camel, collide, scene, plane, geometry, spatial, matrix]}
org.dyn4j.dynamics.Body#setAutoSleepingEnabled: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.OdeHelper#areConnectedExcluding: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.RevoluteJoint#setLowerLimit: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.RopeJoint#setUpperLimitEnabled: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.RaycastResult#getBody: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.FrictionJoint#getAnchor1: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.FrictionJoint#getAnchor2: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.contact.ContactPoint#getBody2: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.contact.ContactPoint#getBody1: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxQuickStep#SOR_LCP: {[body, ball, joints, friction, arena, torque, piston, hinge, impulse, delta, calculate, motor, transmission, velocity, mass, speed, axes, bone, shape, collision, heightfield, vertices, rotate, vecf, collect, emitter, triangle, hallmarks, volume, square, shader, bounding, collide, material, plane, collidable, sphere, quaternion, texture, geometry, light, radius, bitmap, capsule, rotation, spatial, scene, matrix, camel, cinematic]}
org.ode4j.ode.internal.DxGeom#getBody: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
com.jme3.shader.ShaderGenerator#generateDeclarationAndMainBody: {[ball, body, arena, friction, joints, torque, piston, hinge, calculate, impulse, delta, motor, shader, speed, transmission, velocity, texture, light, material, mass, bone, bitmap, scene, spatial, camel, geometry, axes, cinematic, hallmarks, capsule, radius, square, vecf, collision, sphere, vertices, collect, rotation, quaternion, shape, heightfield, triangle, collide, plane, collidable, emitter, matrix, volume, bounding, rotate]}
org.ode4j.ode.internal.joints.DxJointBall#dJointSetBallAnchor2: {[ball, arena, body, calculate, joints, friction, torque, transmission, hinge, piston, rotation, quaternion, impulse, collision, delta, collidable, shape, mass, rotate, motor, velocity, collide, plane, speed, heightfield, emitter, collect, hallmarks, axes, shader, vecf, triangle, bitmap, cinematic, matrix, spatial, capsule, camel, sphere, bounding, texture, volume, material, radius, light, geometry, vertices, square, scene, bone]}
net.smert.jreactphysics3d.engine.DynamicsWorld#notifyNewContact: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointPR#dJointGetPRPositionRate: {[ball, body, arena, joints, friction, calculate, torque, hinge, piston, impulse, delta, transmission, motor, mass, velocity, speed, axes, collision, shape, collidable, bone, rotation, quaternion, hallmarks, collide, shader, bitmap, plane, matrix, cinematic, radius, capsule, emitter, material, vertices, heightfield, texture, square, triangle, bounding, light, vecf, collect, sphere, volume, spatial, camel, scene, rotate, geometry]}
org.dyn4j.dynamics.joint.AngleJoint#getAnchor1: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.AngleJoint#getAnchor2: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#isConnectedTo: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, collidable, hallmarks, bounding, radius, volume, rotate, sphere, collect, shader, vertices, bitmap, cinematic, emitter, material, rotation, quaternion, heightfield, texture, square, capsule, vecf, light, triangle, camel, collide, scene, plane, geometry, spatial, matrix]}
org.dyn4j.dynamics.RaycastListener#allow: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointHinge2#dJointAddHinge2Torques: {[body, ball, joints, friction, arena, torque, piston, hinge, impulse, delta, calculate, motor, speed, velocity, transmission, mass, axes, bone, shape, collision, rotate, collect, bounding, hallmarks, volume, vertices, heightfield, sphere, collidable, vecf, radius, triangle, shader, square, emitter, collide, plane, bitmap, material, cinematic, matrix, rotation, texture, camel, quaternion, spatial, scene, light, geometry, capsule]}
org.dyn4j.dynamics.contact.ContactConstraintId#getBody2Id: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.ConvexCastResult#setBody: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyGetPosition: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#addForce: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodySetAutoDisableDefaults: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.constraint.ContactPoint#getBody2: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.constraint.ContactPoint#getBody1: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointHinge2#getAxisInfo: {[ball, body, arena, joints, friction, calculate, torque, hinge, piston, impulse, delta, transmission, motor, mass, velocity, speed, axes, collision, shape, collidable, bone, rotation, quaternion, hallmarks, collide, shader, bitmap, plane, matrix, cinematic, radius, capsule, emitter, material, vertices, heightfield, texture, square, triangle, bounding, light, vecf, collect, sphere, volume, spatial, camel, scene, rotate, geometry]}
org.dyn4j.dynamics.ConvexCastResult#getBody: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#getAutoDisableSteps: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointBall#getParam: {[ball, arena, body, calculate, joints, friction, torque, transmission, hinge, piston, rotation, quaternion, impulse, collision, delta, collidable, shape, mass, rotate, motor, velocity, collide, plane, speed, heightfield, emitter, collect, hallmarks, axes, shader, vecf, triangle, bitmap, cinematic, matrix, spatial, capsule, camel, sphere, bounding, texture, volume, material, radius, light, geometry, vertices, square, scene, bone]}
org.dyn4j.dynamics.World#getDetectBroadphaseFilter: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.engine.DynamicsWorld#setIsSleepingEnabled: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.RevoluteJoint#setUpperLimit: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyGetWorld: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyGetData: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.DetectAdapter#allow: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointPiston#dJointGetPistonPosition: {[ball, body, arena, joints, friction, calculate, torque, hinge, piston, impulse, delta, transmission, motor, mass, velocity, speed, axes, collision, shape, collidable, bone, rotation, hallmarks, quaternion, collide, shader, bitmap, plane, cinematic, matrix, radius, capsule, material, vertices, heightfield, emitter, square, texture, bounding, triangle, vecf, light, sphere, rotate, volume, collect, camel, spatial, scene, geometry]}
org.dyn4j.dynamics.Body#isInContact: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.processmem.DxIslandsProcessingCallContext#ThreadedProcessJobStart: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, bounding, radius, volume, sphere, rotate, vertices, shader, collect, bitmap, emitter, cinematic, rotation, material, quaternion, heightfield, texture, vecf, square, capsule, light, triangle, camel, matrix, collide, scene, plane, spatial, geometry]}
org.ode4j.ode.internal.DxWorld#DxWorld(C): {[body, ball, joints, friction, arena, torque, piston, hinge, impulse, delta, calculate, motor, speed, velocity, transmission, mass, axes, bone, shape, collision, rotate, collect, bounding, hallmarks, volume, sphere, radius, vertices, collidable, shader, bitmap, heightfield, cinematic, vecf, quaternion, rotation, triangle, square, material, matrix, capsule, texture, plane, collide, light, spatial, geometry, emitter, scene, camel]}
org.ode4j.ode.internal.DxBody#setAngularDampingThreshold: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#setLinearDamping: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyGetAutoDisableFlag: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.collision.BodyIndexPair#equals: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxGeom#computePosr: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.processmem.DxIslandsProcessingCallContext#ThreadedProcessIslandSearch: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, bounding, radius, volume, sphere, rotate, vertices, shader, collect, bitmap, emitter, cinematic, rotation, material, quaternion, heightfield, texture, vecf, square, capsule, light, triangle, camel, matrix, collide, scene, plane, spatial, geometry]}
org.ode4j.ode.internal.OdeFactoryImpl#checkWorld: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyVectorFromWorld: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointDBall#updateTargetDistance: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointUniversal#getInfo2: {[ball, body, joints, arena, friction, torque, calculate, hinge, piston, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, collidable, bone, collide, plane, rotate, square, triangle, vecf, heightfield, matrix, hallmarks, bitmap, shader, radius, cinematic, capsule, collect, material, emitter, camel, vertices, bounding, rotation, quaternion, texture, sphere, spatial, scene, light, volume, geometry]}
net.smert.jreactphysics3d.engine.CollisionWorld#computeNextAvailableBodyID: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointGetTransmissionAxis: {[body, ball, joints, friction, arena, torque, piston, hinge, calculate, impulse, delta, motor, speed, transmission, velocity, mass, axes, shape, collision, bone, rotate, collidable, square, collect, bounding, plane, hallmarks, radius, collide, volume, triangle, rotation, vecf, sphere, shader, quaternion, material, emitter, bitmap, cinematic, camel, geometry, matrix, light, heightfield, texture, capsule, scene, spatial, vertices]}
org.dyn4j.dynamics.Body#setActive: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.Common#dUASSERT: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointPiston#dJointGetPistonAngleRate: {[ball, body, arena, joints, friction, calculate, torque, hinge, piston, impulse, delta, transmission, motor, mass, velocity, speed, axes, collision, shape, collidable, bone, rotation, hallmarks, quaternion, collide, shader, bitmap, plane, cinematic, matrix, radius, capsule, material, vertices, heightfield, emitter, square, texture, bounding, triangle, vecf, light, sphere, rotate, volume, collect, camel, spatial, scene, geometry]}
org.dyn4j.dynamics.Body#isAsleep: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.Body#isBullet: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.PinJoint#setTarget: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#getFirstGeom: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.collision.narrowphase.GJK.GJKAlgorithm#GJKAlgorithm(C): {[body, ball, joints, friction, piston, arena, hinge, torque, impulse, motor, delta, calculate, speed, velocity, axes, mass, transmission, bone, shape, rotate, collision, collidable, collect, quaternion, rotation, bounding, radius, sphere, volume, square, hallmarks, emitter, shader, material, spatial, bitmap, cinematic, triangle, plane, matrix, geometry, vecf, texture, scene, collide, heightfield, capsule, camel, light, vertices]}
org.ode4j.ode.internal.DxBody#dBodySetMovedCallback: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyGetNumJoints: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, collidable, hallmarks, bounding, radius, volume, rotate, sphere, collect, shader, vertices, bitmap, cinematic, emitter, material, rotation, quaternion, heightfield, texture, square, capsule, vecf, light, triangle, camel, collide, scene, plane, geometry, spatial, matrix]}
org.dyn4j.dynamics.Body#getJoinedBodies: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, collidable, hallmarks, bounding, radius, volume, rotate, sphere, collect, shader, vertices, bitmap, cinematic, emitter, material, rotation, quaternion, heightfield, texture, square, capsule, vecf, light, triangle, camel, collide, scene, plane, geometry, spatial, matrix]}
org.ode4j.ode.internal.joints.DxJointPiston#getInfo1: {[body, ball, joints, friction, arena, torque, piston, hinge, calculate, impulse, delta, motor, speed, velocity, transmission, mass, axes, bone, collision, shape, rotate, hallmarks, bounding, collidable, radius, collect, volume, sphere, shader, bitmap, cinematic, vertices, material, texture, heightfield, capsule, quaternion, matrix, square, spatial, light, emitter, rotation, scene, vecf, camel, triangle, geometry, plane, collide]}
net.smert.jreactphysics3d.constraint.FixedJointInfo#FixedJointInfo(C): {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.PulleyJoint#setLength: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.collision.broadphase.PairManager#removePairWithHashValue: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodySetData: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJoint#setAnchors: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#destroy: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.constraint.ContactPointInfo#getBody2: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.constraint.ContactPointInfo#getBody1: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointDBall#setParam: {[ball, arena, body, calculate, joints, friction, torque, transmission, hinge, piston, rotation, quaternion, impulse, collision, delta, collidable, shape, mass, rotate, motor, velocity, collide, plane, speed, heightfield, emitter, collect, hallmarks, axes, shader, vecf, triangle, bitmap, cinematic, matrix, spatial, capsule, camel, sphere, bounding, texture, volume, material, radius, light, geometry, vertices, square, scene, bone]}
org.ode4j.ode.internal.DxBody#disable: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.AngleJoint#setLimits: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.World#getBodyIterator: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.ConvexCastResult#getFixture: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#getAngularVel: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#setAutoDisableTime: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.constraint.ContactPointInfo#setBody2: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.constraint.ContactPointInfo#setBody1: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.DetectListener#allow: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#setLinearVel: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyGetAngularDampingThreshold: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.Body#getContacts: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#isFlagsGyroscopic: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.MotorJoint#getAnchor1: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.MotorJoint#getAnchor2: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyEnable: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJoint#getAxis: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.World#removeBody: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, collidable, hallmarks, bounding, radius, volume, rotate, sphere, collect, shader, vertices, bitmap, cinematic, emitter, material, rotation, quaternion, heightfield, texture, square, capsule, vecf, light, triangle, camel, collide, scene, plane, geometry, spatial, matrix]}
org.dyn4j.dynamics.joint.RopeJoint#setLowerLimitEnabled: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#getAutoDisableAverageSamplesCount: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.Capacity#getBodyCount: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.World#getBody: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxWorld#dWorldSetAngularDamping: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.PulleyJoint#setRatio: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyAddForce: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyGetAutoDisableLinearThreshold: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodySetMaxAngularSpeed: {[body, ball, joints, friction, arena, torque, piston, hinge, impulse, delta, calculate, motor, speed, velocity, transmission, mass, axes, bone, shape, collision, rotate, collect, bounding, hallmarks, volume, sphere, radius, vertices, collidable, shader, bitmap, heightfield, cinematic, vecf, quaternion, rotation, triangle, square, material, matrix, capsule, texture, plane, collide, light, spatial, geometry, emitter, scene, camel]}
org.dyn4j.dynamics.BodyIterator#next: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.RaycastResult#getFixture: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.engine.DynamicsWorld#resetBodiesMovementVariable: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#setGravityMode: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.engine.DynamicsWorld#updateOverlappingPair: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxSAPSpace#collideGeomsNoAABBs: {[ball, body, joints, arena, calculate, friction, piston, hinge, collision, shape, torque, collidable, transmission, axes, collide, plane, impulse, heightfield, vecf, triangle, delta, speed, motor, velocity, mass, vertices, bone, emitter, square, volume, collect, capsule, sphere, cinematic, bounding, bitmap, rotation, camel, hallmarks, rotate, quaternion, light, geometry, material, matrix, texture, spatial, shader, radius, scene]}
org.ode4j.ode.internal.DxQuickStep#dxQuickStepIsland_Stage2a: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyDestroy: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#getData: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.collision.broadphase.BodyPair#newBodiesIndexPair: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.DistanceJoint#DistanceJoint(C): {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.processmem.dmemestimate_fn_t#dxEstimateMemoryRequirements: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodySetGravityMode: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.contact.ContactConstraint#getBody1: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.contact.ContactConstraint#getBody2: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyCopyPosition: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.DetectResult#DetectResult(C): {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.RaycastResult#toString: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#getLinearDamping: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.contact.PersistedContactPoint#PersistedContactPoint(C): {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#getAutoDisableTime: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.WheelJoint#setFrequency: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#setPosition: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.Body#addFixture: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, velocity, speed, mass, axes, collision, shape, bone, hallmarks, collidable, bounding, volume, shader, radius, collect, vertices, sphere, emitter, rotate, rotation, quaternion, bitmap, material, heightfield, texture, cinematic, vecf, light, triangle, scene, geometry, square, capsule, matrix, collide, plane, spatial, camel]}
org.ode4j.ode.internal.processmem.DxWorldProcessMemArena#AllocateArrayDxBody: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyGetRelPointVel: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodySetAutoDisableLinearThreshold: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.Body#setBullet: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.World#World(C): {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, collidable, hallmarks, bounding, radius, volume, rotate, sphere, collect, shader, vertices, bitmap, cinematic, emitter, material, rotation, quaternion, heightfield, texture, square, capsule, vecf, light, triangle, camel, collide, scene, plane, geometry, spatial, matrix]}
net.smert.jreactphysics3d.engine.OverlappingPair#update: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#getAutoDisableAngularThreshold: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodySetDamping: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointPU#getInfo2: {[ball, body, arena, joints, calculate, friction, piston, hinge, collision, torque, shape, collidable, transmission, axes, impulse, plane, collide, delta, triangle, vecf, heightfield, motor, mass, speed, velocity, vertices, square, collect, volume, bone, emitter, bounding, sphere, rotation, quaternion, matrix, hallmarks, scene, rotate, capsule, geometry, material, bitmap, cinematic, camel, spatial, radius, light, shader, texture]}
org.ode4j.ode.internal.DxBody#dBodySetDampingDefaults: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJoint#dJointGetNumBodies: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.collision.broadphase.PairManager#lookForAPair: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#getLinearVel: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointPR#dJointGetPRAngleRate: {[ball, body, arena, joints, friction, calculate, torque, hinge, piston, impulse, delta, transmission, motor, mass, velocity, speed, axes, collision, shape, collidable, bone, rotation, quaternion, hallmarks, collide, shader, bitmap, plane, matrix, cinematic, radius, capsule, emitter, material, vertices, heightfield, texture, square, triangle, bounding, light, vecf, collect, sphere, volume, spatial, camel, scene, rotate, geometry]}
org.ode4j.ode.internal.ragdoll.DxRagdoll#destroy: {[ball, body, joints, friction, arena, torque, piston, hinge, calculate, impulse, delta, motor, speed, velocity, transmission, mass, axes, bone, collision, shape, collidable, rotate, hallmarks, bitmap, shader, cinematic, bounding, collect, radius, sphere, volume, capsule, material, vertices, texture, light, spatial, scene, collide, geometry, square, heightfield, vecf, camel, plane, matrix, quaternion, triangle, rotation, emitter]}
org.dyn4j.dynamics.RaycastResult#RaycastResult(C): {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.constraint.ContactPoint#setWorldPointOnBody2: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointDBall#getParam: {[ball, arena, body, calculate, joints, friction, torque, transmission, hinge, piston, rotation, quaternion, impulse, collision, delta, collidable, shape, mass, rotate, motor, velocity, collide, plane, speed, heightfield, emitter, collect, hallmarks, axes, shader, vecf, triangle, bitmap, cinematic, matrix, spatial, capsule, camel, sphere, bounding, texture, volume, material, radius, light, geometry, vertices, square, scene, bone]}
net.smert.jreactphysics3d.constraint.ContactPoint#setWorldPointOnBody1: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointSetTransmissionAxis2: {[body, ball, joints, friction, arena, torque, piston, hinge, calculate, impulse, delta, motor, speed, transmission, velocity, mass, axes, shape, collision, bone, rotate, collidable, square, collect, bounding, plane, hallmarks, radius, collide, volume, triangle, rotation, vecf, sphere, shader, quaternion, material, emitter, bitmap, cinematic, camel, geometry, matrix, light, heightfield, texture, capsule, scene, spatial, vertices]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointSetTransmissionAxis1: {[body, ball, joints, friction, arena, torque, piston, hinge, calculate, impulse, delta, motor, speed, transmission, velocity, mass, axes, shape, collision, bone, rotate, collidable, square, collect, bounding, plane, hallmarks, radius, collide, volume, triangle, rotation, vecf, sphere, shader, quaternion, material, emitter, bitmap, cinematic, camel, geometry, matrix, light, heightfield, texture, capsule, scene, spatial, vertices]}
org.ode4j.ode.internal.processmem.DxSingleIslandCallContext#DxSingleIslandCallContext(C): {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, bounding, radius, volume, sphere, rotate, vertices, shader, collect, bitmap, emitter, cinematic, rotation, material, quaternion, heightfield, texture, vecf, square, capsule, light, triangle, camel, matrix, collide, scene, plane, spatial, geometry]}
org.ode4j.ode.internal.DxBody#dBodyAddRelForce: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.ragdoll.DxRagdoll#addFixedJoint: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, collidable, hallmarks, bounding, radius, volume, rotate, sphere, collect, shader, vertices, bitmap, cinematic, emitter, material, rotation, quaternion, heightfield, texture, square, capsule, vecf, light, triangle, camel, collide, scene, plane, geometry, spatial, matrix]}
org.dyn4j.dynamics.JointEdge#JointEdge(C): {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.processmem.DxWorldProcessIslandsInfo#GetBodiesArray: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.DistanceJoint#getAnchor1: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.DistanceJoint#getAnchor2: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxGeom#dGeomClearOffset: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxGeom#collideAABBs: {[ball, body, joints, arena, calculate, friction, piston, hinge, collision, shape, torque, collidable, transmission, axes, collide, plane, impulse, heightfield, vecf, triangle, delta, speed, motor, velocity, mass, vertices, bone, emitter, square, volume, collect, capsule, sphere, cinematic, bounding, bitmap, rotation, camel, hallmarks, rotate, quaternion, light, geometry, material, matrix, texture, spatial, shader, radius, scene]}
net.smert.jreactphysics3d.engine.Island#Island(C): {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, collidable, hallmarks, bounding, radius, volume, rotate, sphere, collect, shader, vertices, bitmap, cinematic, emitter, material, rotation, quaternion, heightfield, texture, square, capsule, vecf, light, triangle, camel, collide, scene, plane, geometry, spatial, matrix]}
net.smert.jreactphysics3d.collision.broadphase.PairManager#findPair: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyAddForceAtRelPos: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.collision.broadphase.PairManager#computePairOffset: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxGeom#dGeomGetBody: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.Joint#isActive: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.DetectResult#getBody: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointPR#dJointGetPRAnchor: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.InteractionEdge#InteractionEdge(C): {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyGetLinearDampingThreshold: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxGeom#bodyRemove: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#setAutoDisableSteps: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.OdeJointsFactoryImpl#dJointCreateBall: {[ball, arena, body, calculate, joints, friction, torque, transmission, hinge, piston, rotation, quaternion, impulse, collision, delta, collidable, shape, mass, rotate, motor, velocity, collide, plane, speed, heightfield, emitter, collect, hallmarks, axes, shader, vecf, triangle, bitmap, cinematic, matrix, spatial, capsule, camel, sphere, bounding, texture, volume, material, radius, light, geometry, vertices, square, scene, bone]}
org.dyn4j.dynamics.joint.PrismaticJoint#getAnchor1: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.PrismaticJoint#getAnchor2: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.contact.ContactConstraintId#toString: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointSetTransmissionAnchor1: {[ball, body, joints, friction, arena, torque, piston, hinge, calculate, impulse, delta, motor, transmission, velocity, mass, speed, axes, collision, shape, bone, collidable, hallmarks, collect, shader, bounding, volume, quaternion, vertices, rotation, rotate, radius, emitter, bitmap, sphere, material, square, cinematic, heightfield, texture, vecf, light, triangle, capsule, collide, matrix, camel, geometry, plane, scene, spatial]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointSetTransmissionAnchor2: {[ball, body, joints, friction, arena, torque, piston, hinge, calculate, impulse, delta, motor, transmission, velocity, mass, speed, axes, collision, shape, bone, collidable, hallmarks, collect, shader, bounding, volume, quaternion, vertices, rotation, rotate, radius, emitter, bitmap, sphere, material, square, cinematic, heightfield, texture, vecf, light, triangle, capsule, collide, matrix, camel, geometry, plane, scene, spatial]}
org.dyn4j.dynamics.joint.PrismaticJoint#getJointTranslation: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointConstrainedBall#getInfo2: {[ball, arena, body, calculate, joints, friction, torque, transmission, hinge, piston, rotation, quaternion, impulse, collision, delta, collidable, shape, mass, rotate, motor, velocity, collide, plane, speed, heightfield, emitter, collect, hallmarks, axes, shader, vecf, triangle, bitmap, cinematic, matrix, spatial, capsule, camel, sphere, bounding, texture, volume, material, radius, light, geometry, vertices, square, scene, bone]}
org.ode4j.ode.internal.joints.DxJointPU#dJointGetPUAngle2Rate: {[ball, body, arena, joints, friction, calculate, torque, hinge, piston, impulse, delta, transmission, motor, mass, velocity, speed, axes, collision, shape, collidable, bone, rotation, quaternion, hallmarks, collide, shader, bitmap, plane, matrix, cinematic, radius, capsule, emitter, material, vertices, heightfield, texture, square, triangle, bounding, light, vecf, collect, sphere, volume, spatial, camel, scene, rotate, geometry]}
org.ode4j.ode.internal.DxBody#setData: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.OdeFactoryImpl#dTestDataStructures: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, shader, sphere, collect, rotation, bitmap, vertices, quaternion, rotate, emitter, material, cinematic, texture, light, capsule, heightfield, scene, collide, plane, vecf, geometry, matrix, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#getAutoDisableFlag: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.contact.PersistedContactPoint#toString: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.processmem.DxSingleIslandCallContext#AssignIslandSelection: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, collidable, hallmarks, bounding, radius, volume, rotate, sphere, collect, shader, vertices, bitmap, cinematic, emitter, material, rotation, quaternion, heightfield, texture, square, capsule, vecf, light, triangle, camel, collide, scene, plane, geometry, spatial, matrix]}
org.ode4j.ode.internal.DxBody#dBodyDisable: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#getForce: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.DistanceJoint#setDistance: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.processmem.DxStepperProcessingCallContext#AssignIslandSelection: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, collidable, hallmarks, bounding, radius, volume, rotate, sphere, collect, shader, vertices, bitmap, cinematic, emitter, material, rotation, quaternion, heightfield, texture, square, capsule, vecf, light, triangle, camel, collide, scene, plane, geometry, spatial, matrix]}
org.ode4j.ode.internal.joints.DxJoint#removeJointReferencesFromAttachedBodies: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.contact.SimpleContactManager#updateAndNotify: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointHinge2#dJointSetHinge2Axis2: {[body, ball, joints, friction, arena, piston, hinge, torque, impulse, calculate, motor, delta, speed, velocity, axes, transmission, mass, bone, shape, collision, rotate, collidable, quaternion, bounding, radius, collect, rotation, hallmarks, sphere, volume, square, emitter, triangle, plane, vecf, cinematic, bitmap, collide, shader, material, spatial, capsule, camel, heightfield, light, matrix, vertices, texture, scene, geometry]}
org.ode4j.ode.internal.joints.DxJointHinge2#dJointSetHinge2Axis1: {[body, ball, joints, friction, arena, piston, hinge, torque, impulse, calculate, motor, delta, speed, velocity, axes, transmission, mass, bone, shape, collision, rotate, collidable, quaternion, bounding, radius, collect, rotation, hallmarks, sphere, volume, square, emitter, triangle, plane, vecf, cinematic, bitmap, collide, shader, material, spatial, capsule, camel, heightfield, light, matrix, vertices, texture, scene, geometry]}
org.ode4j.ode.OdeHelper#connectingJointList: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, collidable, hallmarks, bounding, radius, volume, rotate, sphere, collect, shader, vertices, bitmap, cinematic, emitter, material, rotation, quaternion, heightfield, texture, square, capsule, vecf, light, triangle, camel, collide, scene, plane, geometry, spatial, matrix]}
org.dyn4j.dynamics.DetectResult#setBody: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.Body#removeAllFixtures: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointSlider#dJointGetSliderPosition: {[ball, body, arena, joints, friction, calculate, torque, hinge, piston, impulse, delta, transmission, motor, mass, velocity, speed, axes, collision, shape, collidable, bone, rotation, quaternion, hallmarks, collide, shader, bitmap, plane, matrix, cinematic, radius, capsule, emitter, material, vertices, heightfield, texture, square, triangle, bounding, light, vecf, collect, sphere, volume, spatial, camel, scene, rotate, geometry]}
org.ode4j.ode.DGeom#setBody: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.OdeJointsFactoryImpl#dConnectingJoint: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJoint#attach: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.BodyIterator#hasNext: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxGeom#dGeomSetOffsetPosition: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.WeldJoint#getAnchor1: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.WeldJoint#getAnchor2: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointLimitMotor#addLimot: {[ball, body, arena, joints, friction, torque, calculate, hinge, piston, impulse, delta, transmission, motor, mass, velocity, speed, axes, shape, collision, bone, collidable, quaternion, rotation, vertices, square, emitter, shader, hallmarks, matrix, bitmap, collide, cinematic, rotate, spatial, material, plane, capsule, vecf, triangle, volume, camel, bounding, texture, light, heightfield, radius, scene, geometry, collect, sphere]}
org.ode4j.ode.internal.DxBody#setAutoDisableAverageSamplesCount: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.DestructionListener#destroyed: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointAMotor#computeEulerAngles: {[ball, body, arena, joints, friction, calculate, torque, hinge, piston, impulse, delta, transmission, motor, mass, velocity, speed, axes, collision, shape, collidable, bone, rotation, quaternion, hallmarks, collide, shader, bitmap, plane, matrix, cinematic, radius, capsule, emitter, material, vertices, heightfield, texture, square, triangle, bounding, light, vecf, collect, sphere, volume, spatial, camel, scene, rotate, geometry]}
org.ode4j.ode.internal.joints.DxJointLMotor#computeGlobalAxes: {[body, ball, joints, friction, arena, piston, hinge, torque, calculate, impulse, delta, motor, speed, velocity, transmission, mass, axes, shape, collision, bone, rotate, collidable, radius, hallmarks, bounding, collect, sphere, volume, square, plane, quaternion, triangle, collide, vecf, shader, rotation, bitmap, cinematic, material, emitter, spatial, texture, heightfield, scene, geometry, camel, capsule, matrix, vertices, light]}
org.dyn4j.dynamics.World#removeAllBodiesAndJoints: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, collidable, hallmarks, bounding, radius, volume, rotate, sphere, collect, shader, vertices, bitmap, cinematic, emitter, material, rotation, quaternion, heightfield, texture, square, capsule, vecf, light, triangle, camel, collide, scene, plane, geometry, spatial, matrix]}
org.dyn4j.dynamics.contact.ContactPoint#getFixture2: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.contact.ContactPoint#getFixture1: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#getGravityMode: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.collision.broadphase.BodyPair#equals: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodySetLinearVel: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxGeom#toString: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointBall#dJointSetBallAnchor: {[ball, arena, body, calculate, joints, friction, torque, transmission, hinge, piston, rotation, quaternion, impulse, collision, delta, collidable, shape, mass, rotate, motor, velocity, collide, plane, speed, heightfield, emitter, collect, hallmarks, axes, shader, vecf, triangle, bitmap, cinematic, matrix, spatial, capsule, camel, sphere, bounding, texture, volume, material, radius, light, geometry, vertices, square, scene, bone]}
org.ode4j.ode.internal.DxSAPSpace2#collideGeomsNoAABBs: {[ball, body, joints, arena, calculate, friction, piston, hinge, collision, shape, torque, collidable, transmission, axes, collide, plane, impulse, heightfield, vecf, triangle, delta, speed, motor, velocity, mass, vertices, bone, emitter, square, volume, collect, capsule, sphere, cinematic, bounding, bitmap, rotation, camel, hallmarks, rotate, quaternion, light, geometry, material, matrix, texture, spatial, shader, radius, scene]}
org.ode4j.ode.internal.DxBody#isEnabled: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.engine.DynamicsWorld#addJointToBody: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, collidable, hallmarks, bounding, radius, volume, rotate, sphere, collect, shader, vertices, bitmap, cinematic, emitter, material, rotation, quaternion, heightfield, texture, square, capsule, vecf, light, triangle, camel, collide, scene, plane, geometry, spatial, matrix]}
org.ode4j.ode.internal.DxGeom#DESTRUCTOR: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointHinge#dJointGetHingeAngleRate: {[ball, body, joints, arena, friction, torque, calculate, hinge, piston, impulse, delta, motor, transmission, velocity, speed, mass, axes, collision, shape, bone, collidable, hallmarks, collide, bitmap, shader, cinematic, rotate, plane, radius, matrix, capsule, rotation, bounding, quaternion, sphere, square, vertices, heightfield, material, volume, triangle, texture, vecf, light, emitter, camel, spatial, geometry, scene, collect]}
org.ode4j.ode.internal.DxBody#getAutoDisableLinearThreshold: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointSlider#dJointGetSliderPositionRate: {[ball, body, arena, joints, friction, calculate, torque, hinge, piston, impulse, delta, transmission, motor, mass, velocity, speed, axes, collision, shape, collidable, bone, rotation, quaternion, hallmarks, collide, shader, bitmap, plane, matrix, cinematic, radius, capsule, emitter, material, vertices, heightfield, texture, square, triangle, bounding, light, vecf, collect, sphere, volume, spatial, camel, scene, rotate, geometry]}
org.dyn4j.dynamics.contact.SimpleContactManager#preSolveNotify: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.RaycastResult#setFixture: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.collision.broadphase.PairManager#isDifferentPair: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.World#getBodies: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.Body#setOnIsland: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyGetAutoDisableAverageSamplesCount: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.body.Body#Body(C): {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointHinge2#setRelativeValues: {[body, ball, joints, friction, arena, piston, hinge, torque, impulse, calculate, motor, delta, speed, velocity, axes, transmission, mass, bone, shape, collision, rotate, collidable, quaternion, bounding, radius, collect, rotation, hallmarks, sphere, volume, square, emitter, triangle, plane, vecf, cinematic, bitmap, collide, shader, material, spatial, capsule, camel, heightfield, light, matrix, vertices, texture, scene, geometry]}
net.smert.jreactphysics3d.engine.ContactSolver#computeMixedFrictionCoefficient: {[ball, body, friction, arena, joints, torque, piston, hinge, calculate, impulse, material, delta, shader, texture, scene, light, camel, motor, geometry, spatial, speed, transmission, velocity, mass, bone, axes, bitmap, hallmarks, radius, collision, heightfield, collect, vecf, collide, sphere, cinematic, quaternion, rotation, bounding, square, collidable, shape, emitter, volume, plane, rotate, vertices, matrix, capsule, triangle]}
org.dyn4j.dynamics.contact.ContactConstraint#toString: {[body, ball, joints, friction, arena, torque, piston, hinge, impulse, delta, motor, calculate, speed, velocity, mass, transmission, axes, bone, shape, rotate, collision, collect, bounding, hallmarks, volume, vertices, heightfield, sphere, shader, vecf, triangle, radius, bitmap, collidable, cinematic, square, material, collide, plane, rotation, quaternion, texture, matrix, capsule, emitter, light, geometry, spatial, scene, camel]}
org.ode4j.ode.internal.DxBody#dBodyGetAutoDisableTime: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.Step#dxEstimateStepMemoryRequirements: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.PulleyJoint#getAnchor2: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.constraint.ContactPoint#ContactPoint(C): {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, velocity, speed, mass, axes, collision, shape, bone, hallmarks, collidable, bounding, volume, shader, radius, collect, vertices, sphere, emitter, rotate, rotation, quaternion, bitmap, material, heightfield, texture, cinematic, vecf, light, triangle, scene, geometry, square, capsule, matrix, collide, plane, spatial, camel]}
org.dyn4j.dynamics.joint.PulleyJoint#getAnchor1: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointPiston#dJointGetPistonAngle: {[body, ball, joints, friction, arena, torque, piston, hinge, calculate, impulse, delta, motor, speed, velocity, transmission, mass, axes, bone, collision, shape, rotate, hallmarks, bounding, collidable, radius, collect, volume, sphere, shader, bitmap, cinematic, vertices, material, texture, heightfield, capsule, quaternion, matrix, square, spatial, light, emitter, rotation, scene, vecf, camel, triangle, geometry, plane, collide]}
org.dyn4j.dynamics.ConvexCastResult#toString: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyGetMaxAngularSpeed: {[body, ball, joints, friction, arena, torque, piston, hinge, impulse, delta, calculate, motor, speed, velocity, transmission, mass, axes, bone, shape, collision, rotate, collect, bounding, hallmarks, volume, sphere, radius, vertices, collidable, shader, bitmap, heightfield, cinematic, vecf, quaternion, rotation, triangle, square, material, matrix, capsule, texture, plane, collide, light, spatial, geometry, emitter, scene, camel]}
net.smert.jreactphysics3d.engine.DynamicsWorld#updateRigidBodiesAABB: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyGetAngularVel: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.engine.Island#addBody: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.collision.CollisionDetection#broadPhaseNotifyAddedOverlappingPair: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.engine.DynamicsWorld#computeIslands: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, collidable, hallmarks, bounding, radius, volume, rotate, sphere, collect, shader, vertices, bitmap, cinematic, emitter, material, rotation, quaternion, heightfield, texture, square, capsule, vecf, light, triangle, camel, collide, scene, plane, geometry, spatial, matrix]}
org.ode4j.ode.internal.DxBody#getNextGeom: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.WheelJoint#setDampingRatio: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointPU#dJointGetPUPositionRate: {[ball, body, arena, joints, friction, calculate, torque, hinge, piston, impulse, delta, transmission, motor, mass, velocity, speed, axes, collision, shape, collidable, bone, rotation, quaternion, hallmarks, collide, shader, bitmap, plane, matrix, cinematic, radius, capsule, emitter, material, vertices, heightfield, texture, square, triangle, bounding, light, vecf, collect, sphere, volume, spatial, camel, scene, rotate, geometry]}
org.ode4j.ode.internal.DxBody#setGyroscopicMode: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointHinge2#makeW1andW2: {[ball, body, arena, joints, friction, calculate, torque, hinge, piston, impulse, delta, transmission, motor, mass, velocity, speed, axes, collision, shape, collidable, bone, rotation, quaternion, hallmarks, collide, shader, bitmap, plane, matrix, cinematic, radius, capsule, emitter, material, vertices, heightfield, texture, square, triangle, bounding, light, vecf, collect, sphere, volume, spatial, camel, scene, rotate, geometry]}
org.ode4j.ode.internal.DxBody#setLinearDampingThreshold: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodySetAngularVel: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodySetAutoDisableFlag: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyGetGyroscopicMode: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointDBall#DxJointDBall(C): {[ball, arena, body, calculate, joints, friction, torque, transmission, hinge, piston, rotation, quaternion, impulse, collision, delta, collidable, shape, mass, rotate, motor, velocity, collide, plane, speed, heightfield, emitter, collect, hallmarks, axes, shader, vecf, triangle, bitmap, cinematic, matrix, spatial, capsule, camel, sphere, bounding, texture, volume, material, radius, light, geometry, vertices, square, scene, bone]}
org.ode4j.ode.internal.joints.OdeJointsFactoryImpl#dJointCreateDBall: {[ball, arena, body, calculate, joints, friction, torque, transmission, hinge, piston, rotation, quaternion, impulse, collision, delta, collidable, shape, mass, rotate, motor, velocity, collide, plane, speed, heightfield, emitter, collect, hallmarks, axes, shader, vecf, triangle, bitmap, cinematic, matrix, spatial, capsule, camel, sphere, bounding, texture, volume, material, radius, light, geometry, vertices, square, scene, bone]}
org.dyn4j.dynamics.Capacity#equals: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointUniversal#getAxes: {[body, ball, joints, friction, arena, piston, hinge, torque, calculate, impulse, delta, motor, speed, velocity, transmission, mass, axes, shape, collision, bone, rotate, collidable, radius, hallmarks, bounding, collect, sphere, volume, square, plane, quaternion, triangle, collide, vecf, shader, rotation, bitmap, cinematic, material, emitter, spatial, texture, heightfield, scene, geometry, camel, capsule, matrix, vertices, light]}
org.ode4j.ode.internal.joints.DxJointBall#getAnchor: {[ball, arena, body, calculate, joints, friction, torque, transmission, hinge, piston, rotation, quaternion, impulse, collision, delta, collidable, shape, mass, rotate, motor, velocity, collide, plane, speed, heightfield, emitter, collect, hallmarks, axes, shader, vecf, triangle, bitmap, cinematic, matrix, spatial, capsule, camel, sphere, bounding, texture, volume, material, radius, light, geometry, vertices, square, scene, bone]}
org.ode4j.ode.internal.DxGeom#DxGeom(C): {[ball, body, joints, arena, calculate, friction, piston, hinge, collision, shape, torque, collidable, transmission, axes, collide, plane, impulse, heightfield, vecf, triangle, delta, speed, motor, velocity, mass, vertices, bone, emitter, square, volume, collect, capsule, sphere, cinematic, bounding, bitmap, rotation, camel, hallmarks, rotate, quaternion, light, geometry, material, matrix, texture, spatial, shader, radius, scene]}
org.ode4j.ode.internal.DxBody#setKinematic: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.PrismaticJoint#setLimitEnabled: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.contact.ContactPoint#toString: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointAMotor#setEulerReferenceVectors: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyGetAutoDisableSteps: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.DetectResult#getFixture: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.World#setDetectBroadphaseFilter: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.constraint.ContactPoint#getWorldPointOnBody1: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointGetTransmissionAxis1: {[body, ball, joints, friction, arena, torque, piston, hinge, calculate, impulse, delta, motor, speed, transmission, velocity, mass, axes, shape, collision, bone, rotate, collidable, square, collect, bounding, plane, hallmarks, radius, collide, volume, triangle, rotation, vecf, sphere, shader, quaternion, material, emitter, bitmap, cinematic, camel, geometry, matrix, light, heightfield, texture, capsule, scene, spatial, vertices]}
org.ode4j.ode.internal.Step#dxStepIsland_Stage2c: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointGetTransmissionAxis2: {[body, ball, joints, friction, arena, torque, piston, hinge, calculate, impulse, delta, motor, speed, transmission, velocity, mass, axes, shape, collision, bone, rotate, collidable, square, collect, bounding, plane, hallmarks, radius, collide, volume, triangle, rotation, vecf, sphere, shader, quaternion, material, emitter, bitmap, cinematic, camel, geometry, matrix, light, heightfield, texture, capsule, scene, spatial, vertices]}
net.smert.jreactphysics3d.constraint.ContactPoint#getWorldPointOnBody2: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.WheelJoint#getLinearTranslation: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.DJoint#attach: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointDBall#dJointGetDBallParam: {[ball, arena, body, calculate, joints, friction, torque, transmission, hinge, piston, rotation, quaternion, impulse, collision, delta, collidable, shape, mass, rotate, motor, velocity, collide, plane, speed, heightfield, emitter, collect, hallmarks, axes, shader, vecf, triangle, bitmap, cinematic, matrix, spatial, capsule, camel, sphere, bounding, texture, volume, material, radius, light, geometry, vertices, square, scene, bone]}
org.ode4j.ode.internal.DxWorld#dWorldDestroy: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointDBall#dJointSetDBallParam: {[ball, arena, body, calculate, joints, friction, torque, transmission, hinge, piston, rotation, quaternion, impulse, collision, delta, collidable, shape, mass, rotate, motor, velocity, collide, plane, speed, heightfield, emitter, collect, hallmarks, axes, shader, vecf, triangle, bitmap, cinematic, matrix, spatial, capsule, camel, sphere, bounding, texture, volume, material, radius, light, geometry, vertices, square, scene, bone]}
org.ode4j.ode.internal.joints.DxJointUniversal#dJointGetUniversalAngle2Rate: {[ball, body, arena, joints, friction, calculate, torque, hinge, piston, impulse, delta, transmission, motor, mass, velocity, speed, axes, collision, shape, collidable, bone, rotation, quaternion, hallmarks, collide, shader, bitmap, plane, matrix, cinematic, radius, capsule, emitter, material, vertices, heightfield, texture, square, triangle, bounding, light, vecf, collect, sphere, volume, spatial, camel, scene, rotate, geometry]}
org.dyn4j.dynamics.joint.RopeJoint#setLowerLimit: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#getJoint: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.BodyFixture#BodyFixture(C): {[ball, body, joints, arena, friction, piston, calculate, hinge, torque, impulse, transmission, delta, motor, speed, axes, velocity, collision, shape, mass, collidable, bone, plane, collide, vecf, triangle, heightfield, square, vertices, rotate, emitter, camel, rotation, light, radius, cinematic, quaternion, sphere, capsule, volume, bitmap, matrix, hallmarks, texture, spatial, shader, geometry, material, scene, bounding, collect]}
org.ode4j.ode.internal.DxBody#dBodySetLinearDamping: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.World#getBroadphaseDetector: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.collision.broadphase.BodyPair#hashCode: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxWorld#dWorldSetMaxAngularSpeed: {[body, ball, joints, friction, arena, torque, piston, hinge, impulse, delta, calculate, motor, speed, velocity, transmission, mass, axes, bone, shape, collision, rotate, collect, bounding, hallmarks, volume, sphere, radius, vertices, collidable, shader, bitmap, heightfield, cinematic, vecf, quaternion, rotation, triangle, square, material, matrix, capsule, texture, plane, collide, light, spatial, geometry, emitter, scene, camel]}
org.dyn4j.dynamics.joint.PulleyJoint#getLength1: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.PulleyJoint#getLength2: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointBall#dJointGetBallAnchor: {[ball, arena, body, calculate, joints, friction, torque, transmission, hinge, piston, rotation, quaternion, impulse, collision, delta, collidable, shape, mass, rotate, motor, velocity, collide, plane, speed, heightfield, emitter, collect, hallmarks, axes, shader, vecf, triangle, bitmap, cinematic, matrix, spatial, capsule, camel, sphere, bounding, texture, volume, material, radius, light, geometry, vertices, square, scene, bone]}
org.ode4j.ode.internal.DxBody#dBodyGetGravityMode: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointBall#setAnchor2: {[ball, arena, body, calculate, joints, friction, torque, transmission, hinge, piston, rotation, quaternion, impulse, collision, delta, collidable, shape, mass, rotate, motor, velocity, collide, plane, speed, heightfield, emitter, collect, hallmarks, axes, shader, vecf, triangle, bitmap, cinematic, matrix, spatial, capsule, camel, sphere, bounding, texture, volume, material, radius, light, geometry, vertices, square, scene, bone]}
org.ode4j.ode.internal.DxGeom#bodyAdd: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointLimitMotor#addTwoPointLimot: {[ball, body, arena, joints, friction, torque, calculate, hinge, piston, impulse, delta, transmission, motor, mass, velocity, speed, axes, shape, collision, bone, collidable, quaternion, rotation, vertices, square, emitter, shader, hallmarks, matrix, bitmap, collide, cinematic, rotate, spatial, material, plane, capsule, vecf, triangle, volume, camel, bounding, texture, light, heightfield, radius, scene, geometry, collect, sphere]}
org.ode4j.ode.internal.DxGeom#dGeomCreateOffset: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
net.smert.jreactphysics3d.engine.DynamicsWorld#notifyAddedOverlappingPair: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#setAngularVel: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.PrismaticJoint#getAxis: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.joint.WheelJoint#getAxis: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointBall#DxJointBall(C): {[ball, arena, body, calculate, joints, friction, torque, transmission, hinge, piston, rotation, quaternion, impulse, collision, delta, collidable, shape, mass, rotate, motor, velocity, collide, plane, speed, heightfield, emitter, collect, hallmarks, axes, shader, vecf, triangle, bitmap, cinematic, matrix, spatial, capsule, camel, sphere, bounding, texture, volume, material, radius, light, geometry, vertices, square, scene, bone]}
org.ode4j.ode.internal.processmem.DxStepperProcessingCallContext#DxStepperProcessingCallContext(C): {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, bounding, radius, volume, sphere, rotate, vertices, shader, collect, bitmap, emitter, cinematic, rotation, material, quaternion, heightfield, texture, vecf, square, capsule, light, triangle, camel, matrix, collide, scene, plane, spatial, geometry]}
org.dyn4j.dynamics.World#raycast: {[ball, body, joints, arena, calculate, friction, piston, hinge, torque, collision, shape, transmission, collidable, axes, impulse, delta, speed, motor, plane, velocity, vecf, collide, triangle, mass, heightfield, vertices, bone, emitter, square, rotate, volume, collect, sphere, light, camel, rotation, bounding, radius, capsule, cinematic, hallmarks, quaternion, texture, shader, bitmap, material, scene, geometry, spatial, matrix]}
org.ode4j.ode.internal.DxBody#addRelForceAtRelPos: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.contact.ContactPoint#ContactPoint(C): {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.DxBody#dBodyGetRelPointPos: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.dyn4j.dynamics.World#addBody: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointBall#getAnchor2: {[ball, arena, body, calculate, joints, friction, torque, transmission, hinge, piston, rotation, quaternion, impulse, collision, delta, collidable, shape, mass, rotate, motor, velocity, collide, plane, speed, heightfield, emitter, collect, hallmarks, axes, shader, vecf, triangle, bitmap, cinematic, matrix, spatial, capsule, camel, sphere, bounding, texture, volume, material, radius, light, geometry, vertices, square, scene, bone]}
org.ode4j.ode.internal.joints.DxJointSlider#computeOffset: {[ball, body, joints, arena, friction, torque, piston, hinge, calculate, impulse, delta, motor, transmission, speed, velocity, mass, axes, collision, shape, bone, hallmarks, collidable, radius, bounding, volume, sphere, collect, shader, bitmap, vertices, rotate, rotation, quaternion, material, cinematic, emitter, texture, light, heightfield, capsule, scene, vecf, geometry, matrix, collide, plane, spatial, triangle, square, camel]}
org.ode4j.ode.internal.joints.DxJointHinge2#addTorques: {[motor, velocity, impulse, delta, speed, torque, mass, piston, hinge, friction, joints, rotate, axes, body, transmission, rotation, heightfield, ball, quaternion, triangle, collidable, vecf, collide, arena, plane, square, bone, collect, collision, vertices, radius, scene, bitmap, shader, volume, texture, hallmarks, light, spatial, material, bounding, cinematic, matrix, calculate, shape, capsule, camel, sphere, geometry, emitter]},
org.dyn4j.dynamics.joint.WeldJoint#initializeConstraints: {[delta, motor, velocity, impulse, speed, mass, torque, rotate, piston, hinge, friction, rotation, axes, joints, transmission, geometry, body, quaternion, bone, square, camel, heightfield, ball, material, spatial, hallmarks, scene, arena, radius, collide, texture, light, vecf, collidable, collision, shader, bounding, triangle, collect, plane, cinematic, sphere, capsule, volume, emitter, calculate, bitmap, shape, vertices, matrix]},
org.dyn4j.dynamics.joint.AngleJoint#initializeConstraints: {[motor, velocity, speed, impulse, delta, mass, torque, hinge, piston, rotate, axes, friction, rotation, joints, quaternion, body, transmission, square, bone, ball, heightfield, arena, vecf, triangle, collidable, radius, collide, hallmarks, plane, collision, collect, bitmap, calculate, vertices, cinematic, shader, scene, emitter, sphere, texture, capsule, light, material, geometry, spatial, shape, matrix, volume, camel, bounding]},
org.dyn4j.dynamics.joint.RevoluteJoint#initializeConstraints: {[motor, velocity, speed, impulse, delta, mass, torque, hinge, piston, rotate, friction, rotation, axes, joints, quaternion, transmission, body, square, bone, ball, heightfield, arena, vecf, triangle, collidable, collide, radius, plane, collision, hallmarks, collect, bitmap, vertices, calculate, cinematic, shader, scene, texture, sphere, capsule, emitter, light, material, spatial, geometry, shape, volume, matrix, camel, bounding]},
org.ode4j.ode.internal.joints.DxJointHinge#addTorque: {[motor, velocity, impulse, delta, speed, torque, mass, piston, hinge, friction, joints, rotate, axes, body, transmission, rotation, heightfield, ball, quaternion, triangle, collidable, vecf, collide, arena, plane, square, bone, collect, collision, vertices, radius, scene, bitmap, shader, volume, texture, hallmarks, light, spatial, material, bounding, cinematic, matrix, calculate, shape, capsule, camel, sphere, geometry, emitter]},
com.jme3.material.MatParam#getWrapMode: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.renderer.opengl.GLRenderer#setTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.texture.TextureProcessor#postProcess: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
org.dyn4j.dynamics.joint.WheelJoint#getJointSpeed: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.opencl.Context#bindImage: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
org.ode4j.ode.internal.DxConvex#setConvex: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.texture.FrameBuffer#checkSetTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
org.ode4j.ode.internal.DxBody#setAutoDisableDefaults: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.texture.Texture#createSimpleClone: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
isTextureType: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.shadow.PssmShadowFilter#isRequiresDepthTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
org.ode4j.ode.internal.DxPosR#Rw: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, shape, square, volume, capsule, vecf, collision, collide, axes, collidable, transmission, heightfield, plane, rotate, motor, velocity, mass, triangle, quaternion, matrix, rotation, radius, hinge, friction, emitter, torque, collect, sphere, piston, arena, speed, hallmarks, impulse, joints, vertices, ball, body, delta, calculate]},
com.jme3.effect.ParticleEmitter#ParticleEmitter(C): {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
org.dyn4j.dynamics.joint.RevoluteJoint#getReactionTorque: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.renderer.opengl.GL#glActiveTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.post.Pass#requiresDepthAsTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.renderer.opengl.TextureUtil#setupTextureSwizzle: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.texture.TextureArray#createSimpleClone: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.texture.FrameBuffer#setDepthTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.texture.image.LastTextureState#LastTextureState(C): {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.renderer.opengl.GLDebugDesktop#glFramebufferTextureLayer: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.renderer.opengl.GLRenderer#setFrameBuffer: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.environment.generation.IrradianceMapGenerator#generateIrradianceMap: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.environment.generation.PrefilteredEnvMapFaceGenerator#generatePrefilteredEnvMap: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.environment.EnvironmentCamera#initialize: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.environment.util.EnvMapUtils#generateIrradianceMap: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.renderer.opengl.GLRenderer#convertMagFilter: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.texture.Image#clone: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.post.Filter#isRequiresDepthTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.texture.TextureCubeMap#equals: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.renderer.Statistics#onNewTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.texture.RenderBuffer#getTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.renderer.opengl.GLRenderer#updateRenderTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.renderer.opengl.GLRenderer#checkNonPowerOfTwo: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.post.FilterPostProcessor#initialize: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.light.LightProbe#setPrefilteredMap: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.texture.Texture3D#createSimpleClone: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.texture.Texture2D#createSimpleClone: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.post.Pass#cleanup: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.opencl.Context#bindRenderBuffer: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.material.Material#clearParam: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.renderer.opengl.GLRenderer#deleteImage: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.renderer.opengl.GLRenderer#setupTextureParams: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.renderer.opengl.GLRenderer#getFrameBufferSamplePositions: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.renderer.opengl.TextureUtil#TextureUtil(C): {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.light.LightProbe#setIrradianceMap: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.post.Pass#setRenderedTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.renderer.opengl.GLRenderer#convertMinFilter: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.texture.Image#resetObject: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.texture.FrameBuffer#addColorTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]},
com.jme3.scene.shape.Sphere#getTextureMode: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.scene.Mesh#scaleTextureCoordinates: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.renderer.Renderer#setTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.texture.FrameBuffer#setColorTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.renderer.opengl.GL3#glFramebufferTextureLayer: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.asset.TextureKey#setTextureTypeHint: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.renderer.opengl.TextureUtil#uploadTextureLevel: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.renderer.opengl.GLDebugES#glBindTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.texture.TextureCubeMap#TextureCubeMap(C): {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.environment.util.EnvMapUtils#duplicateCubeMap: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.ui.Picture#setImage: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.asset.TextureKey#hashCode: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.environment.util.EnvMapUtils#makeCubeMap: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.material.MatParamTexture#getTextureValue: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.material.MatParamTexture#MatParamTexture(C): {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.renderer.opengl.GLRenderer#updateTexImageData: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.texture.Texture#equals: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.texture.Texture3D#equals: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.texture.TextureCubeMap#createSimpleClone: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.environment.generation.PrefilteredEnvMapFaceGenerator#setGenerationParam: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.environment.util.EnvMapUtils#createPrefilteredEnvMap: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.texture.Image#getLastTextureState: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.renderer.opengl.GLRenderer#convertTextureType: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.asset.TextureKey#equals: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.renderer.Statistics#onTextureUse: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.environment.util.EnvMapUtils#createIrradianceMap: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.material.Material#getSortId: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.texture.Texture2D#Texture2D(C): {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.asset.TextureKey#TextureKey(C): {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.material.MatParamTexture#setValue: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.renderer.opengl.GLDebugES#glActiveTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.post.Filter#init: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.asset.TextureKey#getProcessorType: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.light.LightProbe#getIrradianceMap: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.texture.Texture2D#equals: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.renderer.opengl.GLTracer#printArgsTexParameter: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.util.PlaceholderAssets#getPlaceholderImage: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.renderer.opengl.GLRenderer#updateFrameBufferAttachment: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.texture.TextureProcessor#createClone: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.shadow.PssmShadowRenderer#setFilterMode: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.material.Material#getTextureParam: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.post.FilterPostProcessor#getDepthTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.texture.Texture#clone: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.font.BitmapTextPage#getTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.environment.util.CubeMapWrapper#CubeMapWrapper(C): {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.renderer.opengl.GLRenderer#initialize: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.post.Pass#getDepthTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.post.FilterPostProcessor#cleanup: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.renderer.opengl.GL#glBindTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.post.Filter#setRenderedTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.post.FilterPostProcessor#reshape: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.renderer.opengl.GLRenderer#bindTextureOnly: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.environment.util.EnvMapUtils#generatePrefilteredEnvMap: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.post.Filter#getRenderedTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.environment.util.EnvMapUtils#getSphericalHarmonicsCoefficents: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.renderer.opengl.GLRenderer#modifyTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.system.NullRenderer#modifyTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.post.Pass#getRenderedTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.shadow.PointLightShadowRenderer#PointLightShadowRenderer(C): {[texture, light, shader, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, shape, capsule, square, vecf, collision, collide, axes, transmission, collidable, emitter, heightfield, plane, matrix, motor, mass, velocity, triangle, torque, rotate, friction, hinge, collect, joints, radius, quaternion, piston, impulse, arena, sphere, rotation, speed, vertices, body, hallmarks, delta, calculate, ball]}
com.jme3.texture.Image#getUniqueId: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.texture.Texture3D#Texture3D(C): {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.system.NullRenderer#setTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.texture.image.LastTextureState#reset: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.texture.Texture#setKey: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.shadow.AbstractShadowFilter#isRequiresDepthTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.renderer.Statistics#onDeleteTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.asset.TextureKey#getTextureTypeHint: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.asset.DesktopAssetManager#loadTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.renderer.opengl.GLFbo#glFramebufferTexture2DEXT: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.environment.generation.IrradianceMapGenerator#setGenerationParam: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.renderer.opengl.TextureUtil#uploadTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.texture.TextureArray#TextureArray(C): {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.light.LightProbe#getPrefilteredEnvMap: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.renderer.opengl.GLRenderer#GLRenderer(C): {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.shadow.AbstractShadowRenderer#setShadowCompareMode: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.texture.Texture#Texture(C): {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.asset.AssetManager#loadTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.post.Filter#getDefaultPassTextureFormat: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.asset.TextureKey#toString: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
VarType(C): {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.post.FilterPostProcessor#getFilterTexture: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.shadow.PssmShadowRenderer#setCompareMode: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.renderer.opengl.GLRenderer#bindTextureAndUnit: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.material.MatParamTexture#setTextureValue: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.post.FilterPostProcessor#initFilter: {[texture, shader, light, material, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, volume, square, capsule, shape, vecf, axes, collide, collision, transmission, emitter, mass, motor, velocity, collect, collidable, rotate, heightfield, torque, quaternion, impulse, hinge, rotation, radius, plane, joints, speed, friction, piston, vertices, sphere, delta, triangle, matrix, arena, hallmarks, ball, body, calculate]}
com.jme3.cinematic.events.AnimationTrack#AnimationTrack(C): {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]},
org.ode4j.ode.internal.DxBody#setAutoDisableLinearThreshold: {[texture, material, spatial, camel, scene, light, shader, geometry, bitmap, bone, bounding, volume, cinematic, square, emitter, capsule, transmission, shape, mass, vertices, velocity, collide, motor, radius, torque, collect, impulse, collision, vecf, axes, triangle, joints, sphere, delta, calculate, hinge, heightfield, collidable, speed, matrix, friction, arena, rotation, body, quaternion, hallmarks, ball, plane, rotate, piston]},
com.jme3.asset.DesktopAssetManager#loadMaterial: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]},
com.jme3.scene.Geometry#oldDeepClone: {[scene, geometry, camel, material, spatial, texture, light, shader, bounding, volume, vertices, bone, bitmap, emitter, triangle, hallmarks, collect, rotate, plane, collide, shape, calculate, transmission, rotation, mass, capsule, sphere, velocity, arena, friction, delta, joints, matrix, torque, motor, heightfield, collidable, piston, collision, hinge, impulse, axes, vecf, ball, speed, square, quaternion, body, cinematic, radius]},
org.ode4j.ode.OdeMath#dMULTIPLY0_333: {[matrix, collect, camel, material, geometry, spatial, scene, light, texture, shader, bounding, volume, calculate, arena, vertices, emitter, bone, collide, hallmarks, speed, collidable, plane, heightfield, piston, rotate, capsule, square, friction, sphere, cinematic, delta, triangle, torque, shape, bitmap, mass, transmission, radius, joints, velocity, hinge, collision, vecf, impulse, rotation, quaternion, motor, ball, axes, body]},
com.jme3.renderer.ViewPort#attachScene: {[scene, geometry, camel, material, spatial, texture, light, shader, bounding, volume, vertices, bone, bitmap, emitter, triangle, hallmarks, plane, collect, collide, transmission, rotate, mass, shape, calculate, velocity, capsule, rotation, sphere, motor, torque, joints, arena, friction, collidable, impulse, delta, matrix, hinge, heightfield, vecf, piston, collision, ball, radius, axes, cinematic, body, quaternion, speed, square]},
com.jme3.shadow.DirectionalLightShadowRenderer#setMaterialParameters: {[texture, material, light, shader, camel, scene, spatial, geometry, bitmap, bone, bounding, cinematic, volume, shape, square, vecf, capsule, collide, collision, axes, heightfield, transmission, collidable, velocity, plane, motor, rotate, mass, quaternion, matrix, emitter, friction, hinge, radius, torque, triangle, rotation, collect, piston, arena, speed, joints, impulse, sphere, vertices, hallmarks, body, ball, delta, calculate]},
org.ode4j.ode.OdeMath#dInvertMatrix3: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]},
com.jme3.scene.Node#depthFirstTraversal: {[spatial, scene, camel, material, texture, geometry, light, shader, bitmap, bone, bounding, vertices, emitter, volume, transmission, mass, triangle, cinematic, radius, velocity, square, torque, collect, impulse, motor, plane, calculate, rotate, delta, quaternion, rotation, capsule, collidable, sphere, vecf, arena, shape, joints, piston, heightfield, collide, matrix, friction, collision, hallmarks, axes, ball, body, hinge, speed]},
com.jme3.renderer.Statistics#getData: {[spatial, scene, camel, texture, material, geometry, light, shader, vertices, volume, bounding, emitter, triangle, bitmap, bone, plane, collidable, heightfield, vecf, collision, mass, collide, motor, impulse, velocity, shape, hallmarks, cinematic, torque, delta, capsule, sphere, transmission, speed, friction, rotate, axes, arena, joints, calculate, collect, hinge, quaternion, matrix, ball, rotation, piston, radius, square, body]},
com.jme3.scene.instancing.InstanceTypeKey#InstanceTypeKey(C): {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]},
com.jme3.collision.CollisionResult#setGeometry: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]},
org.dyn4j.geometry.Geometry#cleanse: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]},
com.jme3.shadow.PointLightShadowRenderer#getReceivers: {[scene, material, camel, spatial, texture, geometry, light, shader, bounding, bitmap, volume, bone, vertices, emitter, shape, collide, triangle, hallmarks, cinematic, transmission, mass, collect, velocity, collision, square, motor, calculate, torque, friction, heightfield, joints, plane, rotate, vecf, hinge, impulse, rotation, sphere, axes, arena, capsule, radius, delta, ball, quaternion, piston, body, speed, collidable, matrix]},
com.jme3.shadow.SpotLightShadowRenderer#doDisplayFrustumDebug: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]},
com.jme3.shadow.ShadowUtil#getLitGeometriesInViewPort: {[scene, material, camel, geometry, spatial, texture, light, shader, bounding, volume, vertices, bone, bitmap, emitter, triangle, hallmarks, collide, shape, transmission, collect, plane, mass, rotate, velocity, calculate, rotation, capsule, motor, torque, joints, friction, arena, sphere, impulse, collidable, heightfield, collision, delta, hinge, piston, radius, cinematic, matrix, ball, square, vecf, axes, quaternion, body, speed]},
com.jme3.material.Material#render: {[material, texture, camel, scene, light, geometry, spatial, shader, bitmap, bounding, volume, bone, shape, collide, vecf, collision, cinematic, vertices, heightfield, square, axes, emitter, friction, hallmarks, quaternion, collidable, hinge, collect, capsule, transmission, velocity, motor, delta, joints, mass, sphere, matrix, piston, rotate, speed, rotation, torque, plane, arena, calculate, body, impulse, triangle, ball, radius]},
com.jme3.animation.ClonableTrack#cloneForSpatial: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]},
com.jme3.app.StatsAppState#loadDarken: {[geometry, scene, material, camel, texture, spatial, light, shader, bounding, volume, vertices, bitmap, bone, hallmarks, shape, collide, capsule, heightfield, friction, emitter, delta, collision, triangle, sphere, quaternion, collect, hinge, vecf, cinematic, plane, calculate, radius, joints, axes, velocity, rotate, square, motor, transmission, speed, piston, collidable, impulse, rotation, body, mass, matrix, arena, ball, torque]},
com.jme3.scene.Batch#getGeometry: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]},
com.jme3.scene.GeometryGroupNode#GeometryGroupNode(C): {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]},
com.jme3.scene.BatchNode#doBatch: {[geometry, scene, material, camel, texture, spatial, light, shader, bounding, volume, vertices, bitmap, bone, hallmarks, shape, collide, capsule, heightfield, friction, emitter, delta, collision, triangle, sphere, quaternion, collect, hinge, vecf, cinematic, plane, calculate, radius, joints, axes, velocity, rotate, square, motor, transmission, speed, piston, collidable, impulse, rotation, body, mass, matrix, arena, ball, torque]},
com.jme3.shadow.AbstractShadowRenderer#clearMatParams: {[texture, material, light, shader, camel, scene, spatial, geometry, bitmap, bone, bounding, cinematic, volume, shape, square, vecf, capsule, collide, collision, axes, heightfield, transmission, collidable, velocity, plane, motor, rotate, mass, quaternion, matrix, emitter, friction, hinge, radius, torque, triangle, rotation, collect, piston, arena, speed, joints, impulse, sphere, vertices, hallmarks, body, ball, delta, calculate]},
com.jme3.animation.KillParticleControl#cloneForSpatial: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]},
com.jme3.scene.instancing.InstancedGeometry#swap: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]},
com.jme3.animation.SkeletonControl#updateTargetsAndMaterials: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]},
com.jme3.scene.control.AbstractControl#cloneForSpatial: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]},
org.dyn4j.dynamics.joint.RevoluteJoint#toString: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, sphere, square, radius, plane, triangle, capsule, bone, emitter, cinematic, delta, transmission, friction, bitmap, collidable, quaternion, hinge, mass, rotate, vecf, joints, collect, piston, impulse, torque, rotation, calculate, speed, velocity, axes, matrix, heightfield, collision, arena, collide, motor, ball, body, shape]},
com.jme3.renderer.RenderManager#setForcedMaterial: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]},
com.jme3.post.HDRRenderer#updateAverageLuminance: {[scene, material, camel, spatial, geometry, texture, light, shader, bounding, bitmap, volume, vertices, bone, triangle, mass, velocity, emitter, transmission, motor, plane, torque, impulse, radius, square, collidable, speed, shape, hinge, hallmarks, delta, joints, collide, vecf, cinematic, quaternion, collect, axes, capsule, calculate, matrix, collision, heightfield, piston, sphere, friction, rotation, body, arena, ball, rotate]},
com.jme3.renderer.opengl.GLDebugES#glDeleteShader: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]},
org.ode4j.ode.internal.DxHeightfieldData#DxHeightfieldData(C): {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]},
com.jme3.renderer.RenderManager#renderViewPort: {[spatial, scene, camel, material, texture, geometry, light, shader, bitmap, bone, bounding, vertices, emitter, volume, transmission, mass, triangle, cinematic, radius, velocity, square, torque, collect, impulse, motor, plane, calculate, rotate, delta, quaternion, rotation, capsule, collidable, sphere, vecf, arena, shape, joints, piston, heightfield, collide, matrix, friction, collision, hallmarks, axes, ball, body, hinge, speed]},
com.jme3.scene.Spatial#Spatial(C): {[texture, spatial, material, camel, light, scene, shader, geometry, bitmap, bone, cinematic, bounding, volume, emitter, capsule, square, transmission, mass, shape, vertices, velocity, radius, collect, torque, collide, motor, impulse, vecf, collision, triangle, sphere, delta, calculate, joints, axes, quaternion, rotation, collidable, arena, rotate, piston, hinge, heightfield, ball, plane, body, hallmarks, speed, matrix, friction]},
com.jme3.scene.Spatial#setMatParamOverrideRefresh: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]},
com.jme3.scene.control.AbstractControl#setSpatial: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]},
com.jme3.cinematic.MotionPath#CreateCatmullRomPath: {[geometry, scene, material, camel, texture, spatial, light, shader, bounding, volume, vertices, bitmap, bone, hallmarks, shape, collide, capsule, heightfield, friction, emitter, delta, collision, triangle, sphere, quaternion, collect, hinge, vecf, cinematic, plane, calculate, radius, joints, axes, velocity, rotate, square, motor, transmission, speed, piston, collidable, impulse, rotation, body, mass, matrix, arena, ball, torque]},
com.jme3.shadow.PointLightShadowRenderer#setMaterialParameters: {[texture, material, light, shader, camel, scene, spatial, geometry, bitmap, bone, bounding, cinematic, volume, shape, square, vecf, capsule, collide, collision, axes, heightfield, transmission, collidable, velocity, plane, motor, rotate, mass, quaternion, matrix, emitter, friction, hinge, radius, torque, triangle, rotation, collect, piston, arena, speed, joints, impulse, sphere, vertices, hallmarks, body, ball, delta, calculate]},
org.dyn4j.dynamics.joint.RevoluteJoint#setLimitEnabled: {[scene, geometry, spatial, camel, material, texture, light, shader, bounding, volume, vertices, emitter, bone, triangle, bitmap, hallmarks, plane, collidable, sphere, heightfield, vecf, collision, collide, shape, radius, square, cinematic, motor, capsule, rotate, impulse, torque, mass, collect, velocity, axes, calculate, rotation, arena, joints, hinge, matrix, delta, quaternion, speed, body, friction, ball, piston, transmission]},
com.jme3.material.logic.TechniqueDefLogic#render: {[material, texture, camel, scene, geometry, light, spatial, shader, bounding, bitmap, volume, bone, shape, collide, cinematic, vecf, collision, vertices, heightfield, emitter, hallmarks, friction, axes, quaternion, square, capsule, collidable, hinge, collect, sphere, delta, motor, joints, velocity, radius, transmission, piston, matrix, mass, rotate, rotation, calculate, plane, torque, speed, arena, body, triangle, ball, impulse]},
com.jme3.shader.Uniform#clearSetByCurrentMaterial: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]},
org.dyn4j.dynamics.joint.MotorJoint#initializeConstraints: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]},
com.jme3.renderer.queue.RenderQueue#setGeometryComparator: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]},
com.jme3.light.SpotLight#SpotLight(C): {[geometry, scene, material, camel, texture, spatial, light, shader, bounding, volume, bitmap, vertices, bone, shape, collide, hallmarks, heightfield, emitter, capsule, collision, friction, triangle, delta, sphere, vecf, collect, quaternion, hinge, calculate, joints, velocity, plane, axes, rotate, transmission, cinematic, radius, motor, mass, rotation, collidable, matrix, speed, piston, torque, body, impulse, square, ball, arena]},
com.jme3.scene.instancing.InstancedNode#onGeometryUnassociated: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]},
getMaterialParamValue: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]},
org.dyn4j.geometry.Geometry#createPolygonalCapsule: {[geometry, scene, material, camel, texture, spatial, light, shader, bounding, volume, vertices, bitmap, bone, hallmarks, shape, collide, capsule, heightfield, friction, emitter, delta, collision, triangle, sphere, quaternion, collect, hinge, vecf, cinematic, plane, calculate, radius, joints, axes, velocity, rotate, square, motor, transmission, speed, piston, collidable, impulse, rotation, body, mass, matrix, arena, ball, torque]},
com.jme3.font.BitmapText#render: {[texture, material, light, camel, shader, scene, spatial, geometry, bitmap, bone, bounding, volume, cinematic, shape, square, collide, vecf, capsule, collision, transmission, axes, velocity, mass, heightfield, motor, radius, emitter, collidable, quaternion, rotate, collect, torque, hinge, vertices, plane, impulse, friction, rotation, speed, sphere, matrix, joints, piston, arena, hallmarks, delta, body, ball, calculate, triangle]},
org.ode4j.ode.internal.DxCylinder#DxCylinder(C): {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]},
com.jme3.animation.AudioTrack#cloneForSpatial: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]},
com.jme3.scene.Node#swapChildren: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.animation.SkeletonControl#findTargets: {[scene, material, camel, geometry, spatial, texture, light, shader, bounding, volume, bitmap, bone, vertices, emitter, triangle, shape, hallmarks, collide, collect, transmission, mass, calculate, velocity, rotate, plane, friction, heightfield, collision, motor, joints, capsule, rotation, torque, delta, sphere, hinge, cinematic, square, arena, impulse, radius, vecf, piston, matrix, quaternion, axes, ball, collidable, body, speed]}
com.jme3.scene.shape.StripBox#duUpdateGeometryNormals: {[geometry, scene, spatial, camel, material, texture, vertices, light, bounding, shader, volume, triangle, plane, hallmarks, emitter, vecf, collidable, square, collision, sphere, shape, capsule, heightfield, cinematic, bone, collide, rotate, axes, radius, rotation, arena, mass, velocity, motor, impulse, torque, matrix, joints, piston, hinge, collect, bitmap, speed, transmission, quaternion, ball, delta, calculate, body, friction]}
com.jme3.app.state.RootNodeAppState#cleanup: {[scene, material, camel, spatial, geometry, texture, light, shader, bounding, bitmap, volume, vertices, bone, triangle, mass, velocity, emitter, transmission, motor, plane, torque, impulse, radius, square, collidable, speed, shape, hinge, hallmarks, delta, joints, collide, vecf, cinematic, quaternion, collect, axes, capsule, calculate, matrix, collision, heightfield, piston, sphere, friction, rotation, body, arena, ball, rotate]}
org.dyn4j.geometry.Segment#Segment(C): {[geometry, scene, spatial, camel, material, texture, vertices, light, bounding, shader, volume, triangle, plane, hallmarks, emitter, vecf, collidable, square, collision, sphere, shape, capsule, heightfield, cinematic, bone, collide, rotate, axes, radius, rotation, arena, mass, velocity, motor, impulse, torque, matrix, joints, piston, hinge, collect, bitmap, speed, transmission, quaternion, ball, delta, calculate, body, friction]}
com.jme3.animation.SkeletonControl#setSpatial: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.scene.GeometryGroupNode#setGeometryStartIndex: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.material.MaterialDef#getMaterialParams: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.material.Material#contentEquals: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.scene.AssetLinkNode#cloneFields: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.cinematic.events.AnimationEvent#initEvent: {[scene, material, spatial, camel, texture, geometry, light, shader, bitmap, bounding, volume, bone, vertices, emitter, mass, triangle, transmission, velocity, motor, square, cinematic, torque, impulse, radius, plane, collidable, delta, shape, speed, joints, hinge, capsule, collide, axes, hallmarks, collect, vecf, heightfield, quaternion, matrix, calculate, sphere, collision, rotation, piston, body, arena, ball, rotate, friction]}
com.jme3.cinematic.Cinematic#bindCamera: {[spatial, scene, camel, material, texture, geometry, light, shader, bitmap, bone, bounding, vertices, emitter, volume, transmission, mass, triangle, cinematic, radius, velocity, square, torque, collect, impulse, motor, plane, calculate, rotate, delta, quaternion, rotation, capsule, collidable, sphere, vecf, arena, shape, joints, piston, heightfield, collide, matrix, friction, collision, hallmarks, axes, ball, body, hinge, speed]}
com.jme3.scene.CameraNode#setCamera: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.scene.Node#setMatParamOverrideRefresh: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.shadow.DirectionalLightShadowRenderer#clearMaterialParameters: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.renderer.ViewPort#removeProcessor: {[scene, material, camel, spatial, geometry, texture, light, shader, bounding, bitmap, volume, vertices, bone, triangle, mass, velocity, emitter, transmission, motor, plane, torque, impulse, radius, square, collidable, speed, shape, hinge, hallmarks, delta, joints, collide, vecf, cinematic, quaternion, collect, axes, capsule, calculate, matrix, collision, heightfield, piston, sphere, friction, rotation, body, arena, ball, rotate]}
com.jme3.cinematic.events.MotionEvent#MotionEvent(C): {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.post.PreDepthProcessor#postQueue: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.material.MaterialProcessor#createClone: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
net.smert.jreactphysics3d.engine.Material#equals: {[material, camel, texture, scene, light, geometry, shader, spatial, bitmap, bounding, shape, volume, bone, collide, vecf, collision, heightfield, square, friction, axes, cinematic, collidable, quaternion, arena, transmission, plane, matrix, radius, delta, vertices, body, collect, rotate, velocity, ball, rotation, sphere, hinge, triangle, mass, motor, speed, impulse, capsule, piston, emitter, hallmarks, calculate, torque, joints]}
com.jme3.animation.SkeletonControl#switchToSoftware: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.scene.instancing.InstancedGeometry#getGeometries: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.shadow.PssmShadowRenderer#postFrame: {[texture, material, light, shader, camel, scene, spatial, geometry, bitmap, bone, bounding, cinematic, volume, shape, square, vecf, capsule, collide, collision, axes, heightfield, transmission, collidable, velocity, plane, motor, rotate, mass, quaternion, matrix, emitter, friction, hinge, radius, torque, triangle, rotation, collect, piston, arena, speed, joints, impulse, sphere, vertices, hallmarks, body, ball, delta, calculate]}
com.jme3.cinematic.events.MotionTrack#MotionTrack(C): {[spatial, scene, camel, texture, material, light, geometry, shader, bone, bitmap, emitter, vertices, bounding, volume, transmission, triangle, mass, cinematic, radius, quaternion, rotate, collect, square, torque, capsule, velocity, rotation, impulse, plane, calculate, vecf, motor, arena, delta, heightfield, piston, collidable, sphere, axes, matrix, collision, friction, joints, speed, hinge, hallmarks, ball, shape, collide, body]}
com.jme3.animation.EffectTrack#cloneForSpatial: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.shadow.PointLightShadowRenderer#getShadowCam: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.util.FileChangedTrigger#init: {[texture, material, shader, light, camel, scene, spatial, geometry, bitmap, bone, bounding, cinematic, shape, square, volume, vecf, collide, collision, capsule, axes, transmission, heightfield, collidable, rotate, plane, velocity, mass, radius, motor, quaternion, rotation, sphere, matrix, triangle, friction, hinge, torque, hallmarks, collect, speed, arena, piston, impulse, emitter, joints, ball, body, delta, vertices, calculate]}
com.jme3.input.ChaseCamera#setSpatial: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.scene.Node#descendantMatches: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.material.Material#setParam: {[material, texture, camel, light, scene, shader, spatial, geometry, bitmap, bounding, bone, volume, shape, cinematic, square, collide, vecf, collision, axes, transmission, capsule, velocity, heightfield, mass, motor, radius, quaternion, collidable, emitter, rotate, vertices, collect, torque, hinge, friction, plane, rotation, speed, impulse, sphere, matrix, joints, piston, arena, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.scene.Node#detachChildNamed: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.scene.Spatial#removeControl: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.scene.Node#getChildren: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.post.Filter#getMaterial: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.shadow.AbstractShadowRenderer#postQueue: {[texture, material, light, camel, shader, scene, spatial, geometry, bitmap, bone, bounding, volume, cinematic, shape, square, vecf, collide, collision, capsule, transmission, axes, heightfield, collidable, velocity, mass, emitter, motor, matrix, plane, radius, friction, torque, hinge, quaternion, rotate, collect, vertices, joints, sphere, piston, impulse, speed, arena, triangle, rotation, body, calculate, hallmarks, ball, delta]}
org.dyn4j.geometry.decompose.DoubleEdgeList#getConvexDecomposition: {[geometry, scene, spatial, camel, material, texture, vertices, bounding, light, volume, shader, triangle, hallmarks, plane, emitter, square, vecf, collidable, sphere, collision, shape, heightfield, collide, radius, cinematic, capsule, rotate, bone, axes, rotation, arena, transmission, motor, matrix, impulse, collect, velocity, torque, mass, delta, piston, joints, hinge, quaternion, ball, calculate, body, friction, bitmap, speed]}
com.jme3.post.HDRRenderer#cleanup: {[scene, material, camel, spatial, geometry, texture, light, shader, bounding, bitmap, volume, vertices, bone, triangle, mass, velocity, emitter, transmission, motor, plane, torque, impulse, radius, square, collidable, speed, shape, hinge, hallmarks, delta, joints, collide, vecf, cinematic, quaternion, collect, axes, capsule, calculate, matrix, collision, heightfield, piston, sphere, friction, rotation, body, arena, ball, rotate]}
com.jme3.scene.Geometry#breadthFirstTraversal: {[spatial, scene, camel, material, texture, geometry, light, shader, bitmap, bone, bounding, vertices, emitter, volume, transmission, mass, triangle, cinematic, radius, velocity, square, torque, collect, impulse, motor, plane, calculate, rotate, delta, quaternion, rotation, capsule, collidable, sphere, vecf, arena, shape, joints, piston, heightfield, collide, matrix, friction, collision, hallmarks, axes, ball, body, hinge, speed]}
com.jme3.post.FilterPostProcessor#renderProcessing: {[geometry, scene, material, camel, texture, spatial, light, shader, bounding, volume, vertices, bitmap, bone, hallmarks, shape, collide, capsule, heightfield, friction, emitter, delta, collision, triangle, sphere, quaternion, collect, hinge, vecf, cinematic, plane, calculate, radius, joints, axes, velocity, rotate, square, motor, transmission, speed, piston, collidable, impulse, rotation, body, mass, matrix, arena, ball, torque]}
com.jme3.environment.LightProbeFactory#done: {[texture, material, camel, light, shader, scene, spatial, geometry, bitmap, bone, bounding, volume, cinematic, shape, square, capsule, collide, vecf, transmission, collision, emitter, mass, axes, velocity, motor, vertices, heightfield, collect, radius, torque, collidable, impulse, hinge, joints, plane, friction, matrix, sphere, quaternion, rotate, speed, calculate, piston, rotation, delta, arena, body, hallmarks, ball, triangle]}
com.jme3.shadow.PointLightShadowRenderer#initFrustumCam: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.scene.instancing.InstanceTypeKey#hashCode: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.scene.CameraNode#isEnabled: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.shadow.ShadowUtil#updateFrustumPoints2: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.scene.Spatial#oldClone: {[texture, material, camel, spatial, scene, light, shader, geometry, bitmap, bone, bounding, volume, cinematic, square, shape, transmission, emitter, capsule, mass, collide, vertices, velocity, radius, vecf, collision, motor, collect, torque, impulse, axes, sphere, joints, heightfield, calculate, triangle, collidable, delta, hinge, friction, matrix, plane, speed, body, rotation, hallmarks, arena, quaternion, ball, rotate, piston]}
com.jme3.scene.instancing.InstancedNode#relocateInInstancedGeometry: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.cinematic.Cinematic#setEnableCurrentCam: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.material.MaterialDef#addMaterialParamTexture: {[material, texture, camel, light, scene, shader, spatial, geometry, bitmap, bounding, bone, volume, shape, cinematic, square, collide, vecf, collision, axes, transmission, capsule, velocity, heightfield, mass, motor, radius, quaternion, collidable, emitter, rotate, vertices, collect, torque, hinge, friction, plane, rotation, speed, impulse, sphere, matrix, joints, piston, arena, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.shadow.PointLightShadowRenderer#getOccludersToRender: {[scene, material, camel, geometry, spatial, texture, light, shader, bounding, volume, vertices, bone, bitmap, emitter, triangle, hallmarks, collide, shape, transmission, collect, plane, mass, rotate, velocity, calculate, rotation, capsule, motor, torque, joints, friction, arena, sphere, impulse, collidable, heightfield, collision, delta, hinge, piston, radius, cinematic, matrix, ball, square, vecf, axes, quaternion, body, speed]}
com.jme3.shadow.OccludersExtractor#addOccluders: {[spatial, scene, camel, material, texture, geometry, light, shader, bitmap, bone, bounding, vertices, emitter, volume, transmission, mass, triangle, cinematic, radius, velocity, square, torque, collect, impulse, motor, plane, calculate, rotate, delta, quaternion, rotation, capsule, collidable, sphere, vecf, arena, shape, joints, piston, heightfield, collide, matrix, friction, collision, hallmarks, axes, ball, body, hinge, speed]}
com.jme3.scene.Spatial#move: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.animation.Animation#cloneForSpatial: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.scene.GeometryGroupNode#onGeometryUnassociated: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.scene.Geometry#unassociateFromGroupNode: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.scene.instancing.InstancedNode#addToInstancedGeometry: {[geometry, scene, material, camel, texture, spatial, light, shader, bounding, volume, vertices, bitmap, bone, hallmarks, shape, collide, capsule, heightfield, friction, emitter, delta, collision, triangle, sphere, quaternion, collect, hinge, vecf, cinematic, plane, calculate, radius, joints, axes, velocity, rotate, square, motor, transmission, speed, piston, collidable, impulse, rotation, body, mass, matrix, arena, ball, torque]}
com.jme3.scene.Spatial#jmeClone: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.effect.ParticleEmitterControl#setSpatial: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.material.Material#resetUniformsNotSetByCurrent: {[texture, material, shader, light, camel, scene, spatial, geometry, bitmap, bone, bounding, cinematic, shape, square, volume, vecf, collide, collision, capsule, axes, transmission, heightfield, collidable, rotate, plane, velocity, mass, radius, motor, quaternion, rotation, sphere, matrix, triangle, friction, hinge, torque, hallmarks, collect, speed, arena, piston, impulse, emitter, joints, ball, body, delta, vertices, calculate]}
com.jme3.util.FilterBinding#reload: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.app.FlyCamAppState#setEnabled: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.animation.AnimControl#setSpatial: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.renderer.RenderManager#renderViewPortRaw: {[spatial, scene, camel, material, texture, geometry, light, shader, bitmap, bone, bounding, vertices, emitter, volume, transmission, mass, triangle, cinematic, radius, velocity, square, torque, collect, impulse, motor, plane, calculate, rotate, delta, quaternion, rotation, capsule, collidable, sphere, vecf, arena, shape, joints, piston, heightfield, collide, matrix, friction, collision, hallmarks, axes, ball, body, hinge, speed]}
com.jme3.scene.instancing.InstancedNode#onTransformChange: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.scene.Node#setLightListRefresh: {[texture, spatial, material, camel, light, scene, shader, geometry, bitmap, bone, cinematic, bounding, volume, emitter, capsule, square, transmission, mass, shape, vertices, velocity, radius, collect, torque, collide, motor, impulse, vecf, collision, triangle, sphere, delta, calculate, joints, axes, quaternion, rotation, collidable, arena, rotate, piston, hinge, heightfield, ball, plane, body, hallmarks, speed, matrix, friction]}
com.jme3.post.Pass#getPassMaterial: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
net.smert.jreactphysics3d.engine.Material#set: {[material, camel, texture, scene, light, geometry, shader, spatial, bitmap, bounding, shape, volume, bone, collide, vecf, collision, heightfield, square, friction, axes, cinematic, collidable, quaternion, arena, transmission, plane, matrix, radius, delta, vertices, body, collect, rotate, velocity, ball, rotation, sphere, hinge, triangle, mass, motor, speed, impulse, capsule, piston, emitter, hallmarks, calculate, torque, joints]}
com.jme3.scene.instancing.InstancedNodeControl#cloneForSpatial: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.asset.AssetManager#loadModel: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.renderer.queue.GeometryList#add: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.shadow.SpotLightShadowRenderer#getOccludersToRender: {[scene, material, camel, geometry, spatial, texture, light, shader, bounding, volume, vertices, bone, bitmap, emitter, triangle, hallmarks, collide, shape, transmission, collect, plane, mass, rotate, velocity, calculate, rotation, capsule, motor, torque, joints, friction, arena, sphere, impulse, collidable, heightfield, collision, delta, hinge, piston, radius, cinematic, matrix, ball, square, vecf, axes, quaternion, body, speed]}
com.jme3.animation.SkeletonControl#switchToHardware: {[material, texture, camel, scene, spatial, light, shader, geometry, bitmap, bone, bounding, volume, cinematic, shape, square, collide, transmission, vecf, collision, emitter, capsule, vertices, mass, heightfield, radius, collect, velocity, collidable, friction, axes, sphere, motor, torque, matrix, plane, calculate, body, impulse, joints, arena, rotation, hinge, ball, triangle, piston, delta, rotate, quaternion, speed, hallmarks]}
com.jme3.light.LightProbeBlendingProcessor#setPoi: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.shadow.AbstractShadowRenderer#init: {[texture, material, light, shader, camel, scene, spatial, geometry, bitmap, bone, bounding, cinematic, volume, shape, square, capsule, vecf, collide, collision, axes, transmission, heightfield, collidable, velocity, motor, mass, emitter, rotate, plane, quaternion, hinge, torque, collect, radius, matrix, friction, rotation, impulse, piston, triangle, joints, speed, arena, sphere, vertices, hallmarks, body, ball, delta, calculate]}
com.jme3.scene.instancing.InstancedGeometry#InstancedGeometry(C): {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.shadow.AbstractShadowFilter#postQueue: {[material, texture, camel, light, scene, shader, spatial, geometry, bitmap, bounding, bone, volume, shape, cinematic, square, collide, vecf, collision, axes, transmission, capsule, velocity, heightfield, mass, motor, radius, quaternion, collidable, emitter, rotate, vertices, collect, torque, hinge, friction, plane, rotation, speed, impulse, sphere, matrix, joints, piston, arena, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.scene.Node#setTransformRefresh: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.scene.control.AbstractControl#getSpatial: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.environment.util.BoundingSphereDebug#createDebugSphere: {[geometry, scene, material, camel, texture, spatial, light, shader, bounding, volume, hallmarks, sphere, vertices, radius, square, plane, transmission, triangle, emitter, bone, bitmap, delta, quaternion, collidable, friction, hinge, mass, capsule, cinematic, collect, calculate, piston, vecf, collide, torque, joints, velocity, collision, shape, rotate, impulse, speed, matrix, heightfield, motor, rotation, axes, body, ball, arena]}
com.jme3.renderer.ViewPort#getProcessors: {[scene, material, camel, spatial, geometry, texture, light, shader, bounding, bitmap, volume, vertices, bone, triangle, mass, velocity, emitter, transmission, motor, plane, torque, impulse, radius, square, collidable, speed, shape, hinge, hallmarks, delta, joints, collide, vecf, cinematic, quaternion, collect, axes, capsule, calculate, matrix, collision, heightfield, piston, sphere, friction, rotation, body, arena, ball, rotate]}
org.dyn4j.geometry.decompose.SweepLine#createTriangulation: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.environment.util.LightsDebugState#update: {[geometry, material, scene, texture, camel, light, bounding, spatial, shader, volume, hallmarks, sphere, radius, square, transmission, vertices, mass, bone, delta, bitmap, emitter, plane, friction, quaternion, velocity, calculate, hinge, collect, torque, impulse, piston, collide, triangle, capsule, collidable, vecf, axes, motor, cinematic, matrix, shape, collision, joints, rotation, speed, body, rotate, arena, heightfield, ball]}
com.jme3.scene.BatchNode#onMaterialChange: {[geometry, scene, material, camel, texture, spatial, light, shader, bounding, volume, vertices, bitmap, bone, hallmarks, shape, collide, capsule, heightfield, friction, emitter, delta, collision, triangle, sphere, quaternion, collect, hinge, vecf, cinematic, plane, calculate, radius, joints, axes, velocity, rotate, square, motor, transmission, speed, piston, collidable, impulse, rotation, body, mass, matrix, arena, ball, torque]}
com.jme3.cinematic.Cinematic#setScene: {[scene, material, camel, spatial, geometry, texture, light, shader, bounding, bitmap, volume, vertices, bone, triangle, mass, velocity, emitter, transmission, motor, plane, torque, impulse, radius, square, collidable, speed, shape, hinge, hallmarks, delta, joints, collide, vecf, cinematic, quaternion, collect, axes, capsule, calculate, matrix, collision, heightfield, piston, sphere, friction, rotation, body, arena, ball, rotate]}
com.jme3.effect.ParticleEmitter#clone: {[material, camel, scene, texture, spatial, light, geometry, shader, bitmap, bounding, bone, volume, shape, square, cinematic, collide, vertices, transmission, velocity, mass, emitter, collision, vecf, radius, motor, axes, heightfield, torque, capsule, friction, matrix, collect, impulse, hinge, triangle, quaternion, speed, joints, sphere, collidable, arena, rotate, calculate, piston, body, rotation, hallmarks, ball, delta, plane]}
com.jme3.light.Light#computeLastDistance: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.font.BitmapFont#getPage: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.scene.shape.Box#duUpdateGeometryNormals: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.renderer.queue.GeometryList#set: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.scene.Spatial#deepClone: {[texture, spatial, material, camel, light, scene, shader, geometry, bitmap, bone, cinematic, bounding, volume, emitter, capsule, square, transmission, mass, shape, vertices, velocity, radius, collect, torque, collide, motor, impulse, vecf, collision, triangle, sphere, delta, calculate, joints, axes, quaternion, rotation, collidable, arena, rotate, piston, hinge, heightfield, ball, plane, body, hallmarks, speed, matrix, friction]}
com.jme3.material.Material#Material(C): {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.cinematic.Cinematic#onStop: {[material, camel, texture, scene, spatial, light, shader, geometry, bitmap, bone, bounding, volume, cinematic, shape, square, transmission, emitter, collide, vertices, capsule, collision, mass, vecf, radius, velocity, torque, matrix, heightfield, motor, collect, sphere, rotation, collidable, calculate, joints, impulse, triangle, axes, rotate, quaternion, friction, plane, hinge, ball, delta, hallmarks, piston, arena, speed, body]}
org.dyn4j.geometry.Geometry#createPolygonAtOrigin: {[geometry, scene, spatial, camel, material, texture, vertices, light, bounding, shader, volume, triangle, plane, hallmarks, emitter, vecf, collidable, square, collision, sphere, shape, capsule, heightfield, cinematic, bone, collide, rotate, axes, radius, rotation, arena, mass, velocity, motor, impulse, torque, matrix, joints, piston, hinge, collect, bitmap, speed, transmission, quaternion, ball, delta, calculate, body, friction]}
org.dyn4j.geometry.Geometry#flipAlongTheXAxis: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.scene.CameraNode#cloneFields: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.scene.BatchNode#batch: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.app.SimpleApplication#getFlyByCamera: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.scene.Spatial#checkCulling: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.light.LightProbeBlendingStrategy#populateProbes: {[material, scene, geometry, camel, texture, spatial, light, shader, bounding, volume, bitmap, bone, vertices, shape, hallmarks, collide, emitter, collision, heightfield, sphere, friction, vecf, delta, quaternion, radius, hinge, collect, axes, cinematic, triangle, joints, collidable, calculate, motor, plane, piston, velocity, rotate, matrix, impulse, capsule, transmission, body, rotation, speed, ball, torque, arena, square, mass]}
com.jme3.post.HDRRenderer#reshape: {[material, texture, scene, camel, spatial, light, shader, geometry, bitmap, bounding, bone, volume, cinematic, square, shape, vertices, transmission, mass, emitter, velocity, capsule, motor, collide, axes, torque, impulse, radius, vecf, collision, collect, hinge, triangle, quaternion, speed, joints, rotate, delta, rotation, heightfield, friction, piston, sphere, matrix, calculate, collidable, body, hallmarks, arena, ball, plane]}
com.jme3.shadow.DirectionalLightShadowRenderer#checkCulling: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.shadow.AbstractShadowFilter#getMaterial: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.font.BitmapFont#merge: {[material, texture, camel, scene, light, shader, spatial, geometry, bitmap, bounding, bone, volume, shape, square, collide, cinematic, vecf, collision, transmission, axes, heightfield, velocity, mass, radius, motor, capsule, vertices, quaternion, collidable, matrix, friction, sphere, rotate, torque, hinge, collect, speed, emitter, plane, rotation, impulse, arena, joints, piston, hallmarks, body, calculate, ball, delta, triangle]}
com.jme3.asset.AssetManager#loadMaterial: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.shader.Shader#resetUniformsNotSetByCurrent: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.shadow.DirectionalLightShadowRenderer#initFrustumCam: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.post.FilterPostProcessor#postFrame: {[scene, material, camel, spatial, geometry, texture, light, shader, bounding, bitmap, volume, vertices, bone, triangle, mass, velocity, emitter, transmission, motor, plane, torque, impulse, radius, square, collidable, speed, shape, hinge, hallmarks, delta, joints, collide, vecf, cinematic, quaternion, collect, axes, capsule, calculate, matrix, collision, heightfield, piston, sphere, friction, rotation, body, arena, ball, rotate]}
com.jme3.scene.Node#getChild: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.scene.instancing.InstancedGeometry#deleteInstance: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.renderer.RenderManager#renderGeometryList: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.app.LegacyApplication#initCamera: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
org.ode4j.ode.internal.gimpact.GimAABBSet#gim_aabbset_alloc: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.scene.Node#setMaterial: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.material.Material#checkSetParam: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.scene.Node#updateModelBound: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.util.mikktspace.MikktspaceTangentGenerator#generate: {[scene, geometry, camel, material, spatial, texture, light, shader, bounding, volume, vertices, bone, bitmap, emitter, triangle, hallmarks, collect, rotate, plane, collide, shape, calculate, transmission, rotation, mass, capsule, sphere, velocity, arena, friction, delta, joints, matrix, torque, motor, heightfield, collidable, piston, collision, hinge, impulse, axes, vecf, ball, speed, square, quaternion, body, cinematic, radius]}
com.jme3.scene.GeometryGroupNode#getGeometryStartIndex: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.environment.util.LightsDebugState#render: {[scene, material, camel, spatial, geometry, texture, light, shader, bounding, bitmap, volume, vertices, bone, triangle, mass, velocity, emitter, transmission, motor, plane, torque, impulse, radius, square, collidable, speed, shape, hinge, hallmarks, delta, joints, collide, vecf, cinematic, quaternion, collect, axes, capsule, calculate, matrix, collision, heightfield, piston, sphere, friction, rotation, body, arena, ball, rotate]}
com.jme3.scene.SceneGraphVisitorAdapter#visit: {[scene, geometry, camel, material, spatial, texture, light, shader, bounding, volume, vertices, bone, bitmap, emitter, triangle, hallmarks, collect, rotate, plane, collide, shape, calculate, transmission, rotation, mass, capsule, sphere, velocity, arena, friction, delta, joints, matrix, torque, motor, heightfield, collidable, piston, collision, hinge, impulse, axes, vecf, ball, speed, square, quaternion, body, cinematic, radius]}
com.jme3.scene.Node#attachChild: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.input.ChaseCamera#ChaseCamera(C): {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.scene.instancing.InstancedNode#cloneFields: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.scene.control.LightControl#controlUpdate: {[texture, spatial, material, camel, light, scene, shader, geometry, bitmap, bone, cinematic, bounding, volume, emitter, capsule, square, transmission, mass, shape, vertices, velocity, radius, collect, torque, collide, motor, impulse, vecf, collision, triangle, sphere, delta, calculate, joints, axes, quaternion, rotation, collidable, arena, rotate, piston, hinge, heightfield, ball, plane, body, hallmarks, speed, matrix, friction]}
com.jme3.post.Filter#setDepthTexture: {[material, texture, camel, light, scene, shader, spatial, geometry, bitmap, bounding, bone, volume, shape, cinematic, square, collide, vecf, collision, axes, transmission, capsule, velocity, heightfield, mass, motor, radius, quaternion, collidable, emitter, rotate, vertices, collect, torque, hinge, friction, plane, rotation, speed, impulse, sphere, matrix, joints, piston, arena, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.scene.CameraNode#getControlDir: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.scene.debug.SkeletonDebugger#SkeletonDebugger(C): {[geometry, scene, camel, material, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, bitmap, emitter, sphere, triangle, delta, capsule, square, radius, rotate, collide, friction, plane, shape, cinematic, heightfield, collect, rotation, calculate, collision, impulse, speed, arena, matrix, hinge, transmission, mass, joints, torque, axes, quaternion, piston, motor, velocity, collidable, ball, vecf, body]}
com.jme3.shadow.AbstractShadowRenderer#setEdgeFilteringMode: {[material, texture, camel, light, scene, shader, spatial, geometry, bitmap, bounding, bone, volume, shape, cinematic, square, collide, vecf, collision, axes, transmission, capsule, velocity, heightfield, mass, motor, radius, quaternion, collidable, emitter, rotate, vertices, collect, torque, hinge, friction, plane, rotation, speed, impulse, sphere, matrix, joints, piston, arena, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.scene.Node#attachChildAt: {[texture, spatial, material, camel, light, scene, shader, geometry, bitmap, bone, cinematic, bounding, volume, emitter, capsule, square, transmission, mass, shape, vertices, velocity, radius, collect, torque, collide, motor, impulse, vecf, collision, triangle, sphere, delta, calculate, joints, axes, quaternion, rotation, collidable, arena, rotate, piston, hinge, heightfield, ball, plane, body, hallmarks, speed, matrix, friction]}
com.jme3.app.StatsView#cloneForSpatial: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.renderer.RenderManager#renderSubScene: {[scene, geometry, camel, material, spatial, texture, light, shader, bounding, volume, vertices, bitmap, bone, triangle, emitter, plane, hallmarks, collidable, mass, velocity, vecf, motor, transmission, torque, sphere, impulse, collision, heightfield, rotate, joints, hinge, capsule, speed, rotation, arena, cinematic, axes, friction, delta, square, collect, calculate, matrix, quaternion, radius, piston, body, collide, shape, ball]}
com.jme3.app.ChaseCameraAppState#ChaseCameraAppState(C): {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.app.ChaseCameraAppState#zoomCamera: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.scene.shape.AbstractBox#duUpdateGeometryNormals: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.material.Material#updateShaderMaterialParameters: {[texture, shader, material, light, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, square, shape, volume, capsule, vecf, collide, collision, axes, transmission, heightfield, collidable, velocity, mass, rotate, motor, plane, radius, quaternion, rotation, collect, hinge, emitter, torque, sphere, friction, matrix, impulse, triangle, speed, piston, hallmarks, arena, joints, delta, ball, body, vertices, calculate]}
com.jme3.scene.AssetLinkNode#detachLinkedChild: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.cinematic.MotionPath#interpolatePath: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.shadow.DirectionalLightShadowRenderer#init: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.scene.control.BillboardControl#fixRefreshFlags: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.post.HDRRenderer#renderToneMap: {[material, texture, scene, camel, spatial, light, shader, geometry, bitmap, bounding, bone, volume, cinematic, square, shape, vertices, transmission, mass, emitter, velocity, capsule, motor, collide, axes, torque, impulse, radius, vecf, collision, collect, hinge, triangle, quaternion, speed, joints, rotate, delta, rotation, heightfield, friction, piston, sphere, matrix, calculate, collidable, body, hallmarks, arena, ball, plane]}
com.jme3.post.PreDepthProcessor#PreDepthProcessor(C): {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.scene.Node#getUpdateList: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.shadow.ShadowUtil#computeUnionBound: {[geometry, scene, camel, material, spatial, texture, light, shader, bounding, volume, hallmarks, vertices, sphere, square, radius, plane, triangle, emitter, bone, transmission, collidable, capsule, delta, cinematic, bitmap, friction, quaternion, vecf, hinge, collect, mass, rotate, collision, calculate, collide, shape, piston, heightfield, joints, matrix, axes, speed, impulse, motor, torque, rotation, velocity, arena, body, ball]}
com.jme3.animation.SkeletonControl#testHardwareSupported: {[scene, spatial, material, camel, texture, geometry, light, shader, bitmap, bone, bounding, volume, vertices, transmission, emitter, mass, square, cinematic, velocity, triangle, radius, shape, torque, motor, collide, collect, impulse, calculate, sphere, capsule, delta, joints, plane, rotate, collision, rotation, arena, axes, speed, hinge, quaternion, piston, collidable, heightfield, hallmarks, body, vecf, friction, ball, matrix]}
com.jme3.app.FlyCamAppState#setCamera: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.renderer.RenderManager#getCurrentCamera: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
org.dyn4j.geometry.Geometry#createSegment: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.cinematic.MotionPath#CreateLinearPath: {[geometry, scene, material, camel, texture, spatial, light, shader, bounding, volume, vertices, bitmap, bone, hallmarks, shape, collide, capsule, heightfield, friction, emitter, delta, collision, triangle, sphere, quaternion, collect, hinge, vecf, cinematic, plane, calculate, radius, joints, axes, velocity, rotate, square, motor, transmission, speed, piston, collidable, impulse, rotation, body, mass, matrix, arena, ball, torque]}
com.jme3.scene.CameraNode#getCamera: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.scene.shape.AbstractBox#duUpdateGeometryVertices: {[geometry, scene, spatial, camel, material, texture, vertices, light, bounding, shader, volume, triangle, plane, hallmarks, emitter, vecf, collidable, square, collision, sphere, shape, capsule, heightfield, cinematic, bone, collide, rotate, axes, radius, rotation, arena, mass, velocity, motor, impulse, torque, matrix, joints, piston, hinge, collect, bitmap, speed, transmission, quaternion, ball, delta, calculate, body, friction]}
com.jme3.material.Material#clone: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
org.dyn4j.geometry.Geometry#flip: {[geometry, scene, spatial, camel, material, texture, vertices, light, bounding, shader, volume, triangle, plane, hallmarks, emitter, vecf, collidable, square, collision, sphere, shape, capsule, heightfield, cinematic, bone, collide, rotate, axes, radius, rotation, arena, mass, velocity, motor, impulse, torque, matrix, joints, piston, hinge, collect, bitmap, speed, transmission, quaternion, ball, delta, calculate, body, friction]}
com.jme3.post.HDRRenderer#initialize: {[material, texture, camel, scene, spatial, light, shader, geometry, bitmap, bounding, bone, volume, shape, square, cinematic, collide, transmission, vertices, velocity, mass, axes, vecf, collision, motor, emitter, radius, capsule, torque, heightfield, quaternion, impulse, hinge, collect, speed, rotate, friction, joints, rotation, matrix, sphere, collidable, triangle, piston, arena, delta, calculate, plane, body, ball, hallmarks]}
com.jme3.collision.bih.BIHTree#construct: {[geometry, scene, material, camel, texture, spatial, light, bounding, shader, volume, vertices, hallmarks, sphere, plane, triangle, collidable, radius, square, emitter, collect, collide, vecf, heightfield, collision, bitmap, calculate, bone, shape, transmission, quaternion, hinge, motor, matrix, speed, piston, velocity, impulse, torque, friction, cinematic, joints, capsule, rotation, delta, arena, body, ball, axes, mass, rotate]}
com.jme3.shader.Uniform#reset: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.scene.Spatial#addControl: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.scene.Geometry#getMaterial: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.light.BasicProbeBlendingStrategy#populateProbes: {[material, scene, geometry, camel, texture, spatial, light, shader, bounding, volume, bitmap, bone, vertices, shape, hallmarks, collide, emitter, collision, heightfield, sphere, friction, vecf, delta, quaternion, radius, hinge, collect, axes, cinematic, triangle, joints, collidable, calculate, motor, plane, piston, velocity, rotate, matrix, impulse, capsule, transmission, body, rotation, speed, ball, torque, arena, square, mass]}
com.jme3.scene.control.LodControl#setSpatial: {[scene, spatial, geometry, camel, material, texture, light, shader, vertices, triangle, bounding, volume, plane, emitter, vecf, collidable, collision, heightfield, bone, hallmarks, shape, mass, collide, velocity, bitmap, impulse, motor, torque, rotate, axes, sphere, transmission, square, delta, capsule, arena, rotation, friction, quaternion, speed, piston, joints, cinematic, matrix, collect, radius, hinge, calculate, body, ball]}
com.jme3.renderer.Statistics#clearFrame: {[spatial, scene, camel, texture, material, geometry, light, shader, vertices, volume, bounding, emitter, triangle, bitmap, bone, plane, collidable, heightfield, vecf, collision, mass, collide, motor, impulse, velocity, shape, hallmarks, cinematic, torque, delta, capsule, sphere, transmission, speed, friction, rotate, axes, arena, joints, calculate, collect, hinge, quaternion, matrix, ball, rotation, piston, radius, square, body]}
com.jme3.scene.Node#updateLogicalState: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.environment.EnvironmentCamera#call: {[scene, material, camel, spatial, geometry, texture, light, shader, bounding, bitmap, volume, vertices, bone, triangle, mass, velocity, emitter, transmission, motor, plane, torque, impulse, radius, square, collidable, speed, shape, hinge, hallmarks, delta, joints, collide, vecf, cinematic, quaternion, collect, axes, capsule, calculate, matrix, collision, heightfield, piston, sphere, friction, rotation, body, arena, ball, rotate]}
com.jme3.scene.shape.AbstractBox#updateGeometry: {[geometry, scene, spatial, camel, material, texture, vertices, light, bounding, shader, volume, triangle, plane, hallmarks, emitter, vecf, collidable, square, collision, sphere, shape, capsule, heightfield, cinematic, bone, collide, rotate, axes, radius, rotation, arena, mass, velocity, motor, impulse, torque, matrix, joints, piston, hinge, collect, bitmap, speed, transmission, quaternion, ball, delta, calculate, body, friction]}
com.jme3.scene.control.LodControl#cloneForSpatial: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.renderer.queue.RenderQueue#renderQueue: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.animation.SkeletonControl#cloneFields: {[material, texture, camel, scene, spatial, light, shader, geometry, bitmap, bone, bounding, volume, cinematic, shape, square, collide, transmission, vecf, collision, emitter, capsule, vertices, mass, heightfield, radius, collect, velocity, collidable, friction, axes, sphere, motor, torque, matrix, plane, calculate, body, impulse, joints, arena, rotation, hinge, ball, triangle, piston, delta, rotate, quaternion, speed, hallmarks]}
com.jme3.shadow.PssmShadowRenderer#PssmShadowRenderer(C): {[texture, material, light, shader, camel, scene, spatial, geometry, bitmap, bone, bounding, cinematic, volume, shape, square, vecf, capsule, collide, collision, axes, transmission, heightfield, collidable, emitter, mass, velocity, motor, plane, radius, rotate, torque, matrix, quaternion, hinge, collect, friction, impulse, joints, vertices, rotation, piston, sphere, speed, triangle, arena, body, hallmarks, calculate, delta, ball]}
com.jme3.post.Filter#isRequiresSceneTexture: {[material, texture, scene, camel, spatial, light, shader, geometry, bitmap, bounding, bone, volume, cinematic, square, shape, vertices, transmission, mass, emitter, velocity, capsule, motor, collide, axes, torque, impulse, radius, vecf, collision, collect, hinge, triangle, quaternion, speed, joints, rotate, delta, rotation, heightfield, friction, piston, sphere, matrix, calculate, collidable, body, hallmarks, arena, ball, plane]}
com.jme3.scene.Geometry#setMaterial: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.renderer.ViewPort#getScenes: {[spatial, scene, camel, material, texture, geometry, light, shader, bitmap, bone, bounding, vertices, emitter, volume, transmission, mass, triangle, cinematic, radius, velocity, square, torque, collect, impulse, motor, plane, calculate, rotate, delta, quaternion, rotation, capsule, collidable, sphere, vecf, arena, shape, joints, piston, heightfield, collide, matrix, friction, collision, hallmarks, axes, ball, body, hinge, speed]}
com.jme3.scene.instancing.InstancedGeometry#sanitize: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.material.Material#applyOverrides: {[texture, shader, material, light, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, square, shape, volume, capsule, vecf, collide, collision, axes, transmission, heightfield, collidable, velocity, mass, rotate, motor, plane, radius, quaternion, rotation, collect, hinge, emitter, torque, sphere, friction, matrix, impulse, triangle, speed, piston, hallmarks, arena, joints, delta, ball, body, vertices, calculate]}
com.jme3.scene.Node#detachChildAt: {[texture, spatial, material, camel, light, scene, shader, geometry, bitmap, bone, cinematic, bounding, volume, emitter, capsule, square, transmission, mass, shape, vertices, velocity, radius, collect, torque, collide, motor, impulse, vecf, collision, triangle, sphere, delta, calculate, joints, axes, quaternion, rotation, collidable, arena, rotate, piston, hinge, heightfield, ball, plane, body, hallmarks, speed, matrix, friction]}
com.jme3.post.HDRRenderer#postFrame: {[scene, material, camel, spatial, geometry, texture, light, shader, bounding, bitmap, volume, vertices, bone, triangle, mass, velocity, emitter, transmission, motor, plane, torque, impulse, radius, square, collidable, speed, shape, hinge, hallmarks, delta, joints, collide, vecf, cinematic, quaternion, collect, axes, capsule, calculate, matrix, collision, heightfield, piston, sphere, friction, rotation, body, arena, ball, rotate]}
com.jme3.scene.instancing.InstancedNodeControl#setSpatial: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.scene.Geometry#Geometry(C): {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.scene.Node#setLodLevel: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.scene.Node#oldDeepClone: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.renderer.queue.RenderQueue#renderShadowQueue: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.renderer.ViewPort#addProcessor: {[scene, material, camel, spatial, geometry, texture, light, shader, bounding, bitmap, volume, vertices, bone, triangle, mass, velocity, emitter, transmission, motor, plane, torque, impulse, radius, square, collidable, speed, shape, hinge, hallmarks, delta, joints, collide, vecf, cinematic, quaternion, collect, axes, capsule, calculate, matrix, collision, heightfield, piston, sphere, friction, rotation, body, arena, ball, rotate]}
com.jme3.scene.CameraNode#setControlDir: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.scene.instancing.InstancedGeometry#setMaxNumInstances: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.post.HDRRenderer#createLumShader: {[texture, shader, material, light, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, square, shape, volume, capsule, vecf, collide, collision, axes, transmission, heightfield, collidable, velocity, mass, rotate, motor, plane, radius, quaternion, rotation, collect, hinge, emitter, torque, sphere, friction, matrix, impulse, triangle, speed, piston, hallmarks, arena, joints, delta, ball, body, vertices, calculate]}
com.jme3.material.logic.SinglePassAndImageBasedLightingLogic#render: {[material, texture, camel, scene, geometry, light, spatial, shader, bounding, bitmap, volume, bone, shape, collide, cinematic, vecf, collision, vertices, heightfield, emitter, hallmarks, friction, axes, quaternion, square, capsule, collidable, hinge, collect, sphere, delta, motor, joints, velocity, radius, transmission, piston, matrix, mass, rotate, rotation, calculate, plane, torque, speed, arena, body, triangle, ball, impulse]}
com.jme3.scene.Node#deepClone: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.shader.Glsl100ShaderGenerator#generateNodeMainSection: {[texture, material, shader, light, camel, scene, spatial, geometry, bitmap, bone, bounding, cinematic, shape, square, volume, vecf, collide, collision, capsule, axes, transmission, heightfield, collidable, rotate, plane, velocity, mass, radius, motor, quaternion, rotation, sphere, matrix, triangle, friction, hinge, torque, hallmarks, collect, speed, arena, piston, impulse, emitter, joints, ball, body, delta, vertices, calculate]}
com.jme3.scene.Node#detachChild: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.renderer.opengl.GLImageFormats#getFormatsForCaps: {[texture, light, material, camel, scene, geometry, spatial, shader, bounding, volume, bitmap, bone, hallmarks, emitter, sphere, cinematic, vertices, radius, capsule, plane, triangle, transmission, square, hinge, friction, delta, calculate, motor, collidable, quaternion, heightfield, joints, piston, axes, collide, vecf, shape, mass, rotate, collect, matrix, arena, impulse, torque, collision, velocity, speed, rotation, body, ball]}
com.jme3.post.Pass#init: {[material, texture, camel, light, scene, shader, spatial, geometry, bitmap, bounding, bone, volume, shape, cinematic, square, collide, vecf, collision, axes, transmission, capsule, velocity, heightfield, mass, motor, radius, quaternion, collidable, emitter, rotate, vertices, collect, torque, hinge, friction, plane, rotation, speed, impulse, sphere, matrix, joints, piston, arena, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.cinematic.MotionPath#attachDebugNode: {[geometry, scene, material, camel, texture, spatial, light, shader, bounding, volume, vertices, bitmap, bone, hallmarks, shape, collide, capsule, heightfield, friction, emitter, delta, collision, triangle, sphere, quaternion, collect, hinge, vecf, cinematic, plane, calculate, radius, joints, axes, velocity, rotate, square, motor, transmission, speed, piston, collidable, impulse, rotation, body, mass, matrix, arena, ball, torque]}
com.jme3.light.PointLight#computeLastDistance: {[geometry, scene, bounding, camel, spatial, material, volume, texture, light, vertices, hallmarks, shader, sphere, plane, emitter, square, triangle, radius, collidable, vecf, shape, bone, collide, heightfield, collision, rotate, transmission, axes, collect, rotation, bitmap, calculate, delta, mass, arena, velocity, speed, quaternion, cinematic, friction, hinge, piston, motor, matrix, joints, body, ball, capsule, impulse, torque]}
com.jme3.renderer.RenderManager#preloadScene: {[scene, spatial, geometry, camel, material, texture, light, shader, vertices, bounding, volume, triangle, emitter, plane, bone, collidable, vecf, bitmap, mass, collision, heightfield, hallmarks, velocity, motor, impulse, torque, transmission, shape, collide, rotate, delta, sphere, axes, capsule, speed, arena, joints, rotation, radius, square, hinge, friction, piston, quaternion, matrix, calculate, body, cinematic, ball, collect]}
com.jme3.animation.KillParticleControl#jmeClone: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.post.FilterPostProcessor#renderFilterChain: {[material, texture, camel, scene, spatial, light, shader, geometry, bitmap, bounding, bone, volume, shape, square, cinematic, collide, transmission, vertices, velocity, mass, axes, vecf, collision, motor, emitter, radius, capsule, torque, heightfield, quaternion, impulse, hinge, collect, speed, rotate, friction, joints, rotation, matrix, sphere, collidable, triangle, piston, arena, delta, calculate, plane, body, ball, hallmarks]}
com.jme3.renderer.queue.NullComparator#compare: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.util.GeometryBinding#GeometryBinding(C): {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.shadow.PssmShadowRenderer#displayShadowMap: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.shadow.AbstractShadowRenderer#buildMatCache: {[geometry, scene, material, camel, texture, spatial, light, shader, bounding, volume, vertices, bitmap, bone, hallmarks, shape, collide, capsule, heightfield, friction, emitter, delta, collision, triangle, sphere, quaternion, collect, hinge, vecf, cinematic, plane, calculate, radius, joints, axes, velocity, rotate, square, motor, transmission, speed, piston, collidable, impulse, rotation, body, mass, matrix, arena, ball, torque]}
com.jme3.font.BitmapText#getColor: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.scene.Spatial#setLightListRefresh: {[texture, spatial, material, camel, light, scene, shader, geometry, bitmap, bone, cinematic, bounding, volume, emitter, capsule, square, transmission, mass, shape, vertices, velocity, radius, collect, torque, collide, motor, impulse, vecf, collision, triangle, sphere, delta, calculate, joints, axes, quaternion, rotation, collidable, arena, rotate, piston, hinge, heightfield, ball, plane, body, hallmarks, speed, matrix, friction]}
com.jme3.scene.BatchNode#setMaterial: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.shadow.BasicShadowRenderer#BasicShadowRenderer(C): {[material, texture, camel, scene, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, cinematic, square, collide, vecf, collision, transmission, axes, capsule, velocity, heightfield, mass, vertices, emitter, motor, radius, collidable, collect, torque, quaternion, hinge, friction, matrix, sphere, impulse, plane, rotate, joints, speed, rotation, piston, arena, calculate, body, delta, hallmarks, ball, triangle]}
com.jme3.app.state.RootNodeAppState#initialize: {[scene, material, camel, spatial, geometry, texture, light, shader, bounding, bitmap, volume, vertices, bone, triangle, mass, velocity, emitter, transmission, motor, plane, torque, impulse, radius, square, collidable, speed, shape, hinge, hallmarks, delta, joints, collide, vecf, cinematic, quaternion, collect, axes, capsule, calculate, matrix, collision, heightfield, piston, sphere, friction, rotation, body, arena, ball, rotate]}
com.jme3.scene.AssetLinkNode#detachLinkedChildren: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.app.SimpleApplication#SimpleApplication(C): {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.animation.EffectTrack#findEmitter: {[spatial, scene, camel, texture, material, light, geometry, shader, bone, bitmap, emitter, vertices, bounding, volume, transmission, triangle, mass, cinematic, radius, quaternion, rotate, collect, square, torque, capsule, velocity, rotation, impulse, plane, calculate, vecf, motor, arena, delta, heightfield, piston, collidable, sphere, axes, matrix, collision, friction, joints, speed, hinge, hallmarks, ball, shape, collide, body]}
com.jme3.scene.shape.Line#updateGeometry: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.scene.BatchNode#onGeometryUnassociated: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.cinematic.Cinematic#setActiveCamera: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.scene.instancing.InstancedNode#detachChildAt: {[spatial, scene, camel, material, texture, geometry, light, shader, bitmap, bone, bounding, vertices, emitter, volume, transmission, mass, triangle, cinematic, radius, velocity, square, torque, collect, impulse, motor, plane, calculate, rotate, delta, quaternion, rotation, capsule, collidable, sphere, vecf, arena, shape, joints, piston, heightfield, collide, matrix, friction, collision, hallmarks, axes, ball, body, hinge, speed]}
com.jme3.scene.shape.Box#Box(C): {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.scene.shape.Quad#updateGeometry: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.asset.MaterialKey#MaterialKey(C): {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.scene.shape.StripBox#StripBox(C): {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.scene.shape.AbstractBox#duUpdateGeometryIndices: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.app.ChaseCameraAppState#initialize: {[spatial, camel, scene, material, texture, geometry, light, shader, bone, bitmap, emitter, vertices, rotate, rotation, quaternion, bounding, volume, transmission, triangle, axes, piston, cinematic, collect, speed, calculate, mass, radius, arena, hinge, plane, square, capsule, torque, hallmarks, sphere, collide, vecf, ball, matrix, shape, heightfield, collidable, velocity, impulse, friction, joints, motor, collision, body, delta]}
com.jme3.scene.CameraNode#CameraNode(C): {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.scene.control.AbstractControl#cloneFields: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.renderer.queue.TransparentComparator#distanceToCam: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, bone, hallmarks, bitmap, capsule, collide, emitter, sphere, triangle, shape, delta, friction, heightfield, cinematic, square, plane, radius, collision, rotate, collect, calculate, hinge, quaternion, rotation, joints, vecf, impulse, arena, ball, velocity, mass, torque, matrix, collidable, transmission, speed, motor, body, axes, piston]}
com.jme3.renderer.queue.RenderQueue#renderGeometryList: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.scene.Geometry#depthFirstTraversal: {[scene, material, camel, spatial, geometry, texture, light, shader, bounding, bitmap, volume, vertices, bone, triangle, mass, velocity, emitter, transmission, motor, plane, torque, impulse, radius, square, collidable, speed, shape, hinge, hallmarks, delta, joints, collide, vecf, cinematic, quaternion, collect, axes, capsule, calculate, matrix, collision, heightfield, piston, sphere, friction, rotation, body, arena, ball, rotate]}
com.jme3.scene.shape.Box#duUpdateGeometryIndices: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.scene.control.Control#cloneForSpatial: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.shadow.AbstractShadowRenderer#getReceivers: {[material, scene, geometry, camel, texture, spatial, light, shader, bounding, volume, bitmap, bone, vertices, shape, hallmarks, collide, emitter, collision, heightfield, sphere, friction, vecf, delta, quaternion, radius, hinge, collect, axes, cinematic, triangle, joints, collidable, calculate, motor, plane, piston, velocity, rotate, matrix, impulse, capsule, transmission, body, rotation, speed, ball, torque, arena, square, mass]}
com.jme3.scene.shape.AbstractBox#duUpdateGeometryTextures: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.scene.BatchNode#clone: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.environment.LightProbeFactory#makeProbe: {[texture, material, spatial, camel, scene, light, shader, geometry, bitmap, bone, bounding, volume, cinematic, square, emitter, capsule, transmission, shape, mass, vertices, velocity, collide, motor, radius, torque, collect, impulse, collision, vecf, axes, triangle, joints, sphere, delta, calculate, hinge, heightfield, collidable, speed, matrix, friction, arena, rotation, body, quaternion, hallmarks, ball, plane, rotate, piston]}
com.jme3.scene.Node#setModelBound: {[scene, geometry, spatial, camel, material, texture, light, shader, bounding, volume, vertices, emitter, bone, triangle, bitmap, hallmarks, plane, collidable, sphere, heightfield, vecf, collision, collide, shape, radius, square, cinematic, motor, capsule, rotate, impulse, torque, mass, collect, velocity, axes, calculate, rotation, arena, joints, hinge, matrix, delta, quaternion, speed, body, friction, ball, piston, transmission]}
com.jme3.scene.shape.StripBox#duUpdateGeometryTextures: {[geometry, scene, material, camel, texture, spatial, light, shader, bounding, volume, bitmap, bone, vertices, hallmarks, shape, collide, emitter, sphere, friction, heightfield, triangle, collision, delta, collect, quaternion, capsule, hinge, radius, vecf, plane, calculate, joints, axes, rotate, velocity, motor, square, piston, collidable, arena, matrix, rotation, mass, speed, transmission, body, impulse, ball, torque, cinematic]}
com.jme3.renderer.queue.GeometryList#getComparator: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.scene.Geometry#cloneFields: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.shadow.PointLightShadowRenderer#init: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
org.dyn4j.geometry.decompose.Bayazit#decompose: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.util.PlaceholderAssets#getPlaceholderMaterial: {[material, texture, camel, light, scene, shader, spatial, geometry, bitmap, bounding, bone, volume, shape, cinematic, square, collide, vecf, collision, axes, transmission, capsule, velocity, heightfield, mass, motor, radius, quaternion, collidable, emitter, rotate, vertices, collect, torque, hinge, friction, plane, rotation, speed, impulse, sphere, matrix, joints, piston, arena, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.scene.Node#breadthFirstTraversal: {[spatial, scene, camel, material, texture, geometry, light, shader, bitmap, bone, bounding, vertices, emitter, volume, transmission, mass, triangle, cinematic, radius, velocity, square, torque, collect, impulse, motor, plane, calculate, rotate, delta, quaternion, rotation, capsule, collidable, sphere, vecf, arena, shape, joints, piston, heightfield, collide, matrix, friction, collision, hallmarks, axes, ball, body, hinge, speed]}
com.jme3.shader.ShaderGenerator#buildShader: {[material, scene, geometry, texture, camel, spatial, light, shader, friction, body, ball, arena, joints, torque, piston, delta, hinge, impulse, calculate, bone, bounding, bitmap, motor, transmission, speed, mass, volume, velocity, axes, vertices, collide, heightfield, collect, quaternion, vecf, emitter, cinematic, hallmarks, rotate, collidable, triangle, rotation, collision, sphere, plane, capsule, shape, radius, matrix, square]}
com.jme3.scene.AssetLinkNode#attachLinkedChild: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.scene.BatchNode#onTransformChange: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.shadow.SpotLightShadowRenderer#init: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.material.Technique#Technique(C): {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.scene.Spatial#matches: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.scene.instancing.InstanceTypeKey#equals: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.scene.BatchNode#gatherGeometries: {[scene, material, camel, geometry, spatial, texture, light, shader, bounding, volume, bitmap, bone, vertices, emitter, triangle, shape, hallmarks, collide, collect, transmission, mass, calculate, velocity, rotate, plane, friction, heightfield, collision, motor, joints, capsule, rotation, torque, delta, sphere, hinge, cinematic, square, arena, impulse, radius, vecf, piston, matrix, quaternion, axes, ball, collidable, body, speed]}
com.jme3.app.ChaseCameraAppState#setTarget: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.scene.SceneGraphVisitor#visit: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.shadow.ShadowUtil#addGeometriesInCamFrustumFromNode: {[scene, geometry, spatial, camel, material, texture, light, shader, bounding, vertices, volume, triangle, bone, emitter, bitmap, plane, hallmarks, collidable, vecf, mass, collision, velocity, sphere, heightfield, motor, torque, rotate, impulse, transmission, square, axes, rotation, capsule, shape, collide, joints, arena, hinge, speed, delta, piston, calculate, radius, friction, quaternion, collect, body, matrix, ball, cinematic]}
com.jme3.shadow.AbstractShadowRenderer#displayShadowMap: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.shadow.AbstractShadowRenderer#setMaterialParameters: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.app.BasicProfilerState#initialize: {[geometry, scene, material, camel, texture, spatial, light, shader, bounding, volume, vertices, bitmap, bone, hallmarks, shape, collide, capsule, heightfield, friction, emitter, delta, collision, triangle, sphere, quaternion, collect, hinge, vecf, cinematic, plane, calculate, radius, joints, axes, velocity, rotate, square, motor, transmission, speed, piston, collidable, impulse, rotation, body, mass, matrix, arena, ball, torque]}
org.dyn4j.geometry.decompose.EarClipping#createTriangulation: {[geometry, scene, camel, material, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, sphere, square, radius, bone, capsule, emitter, triangle, plane, delta, cinematic, transmission, friction, rotate, bitmap, mass, collidable, rotation, hinge, impulse, quaternion, torque, velocity, axes, collide, arena, heightfield, vecf, joints, speed, matrix, motor, calculate, collect, ball, shape, collision, body, piston]}
com.jme3.scene.Spatial#breadthFirstTraversal: {[spatial, scene, camel, material, texture, geometry, light, shader, bitmap, bone, bounding, vertices, emitter, volume, transmission, mass, triangle, cinematic, radius, velocity, square, torque, collect, impulse, motor, plane, calculate, rotate, delta, quaternion, rotation, capsule, collidable, sphere, vecf, arena, shape, joints, piston, heightfield, collide, matrix, friction, collision, hallmarks, axes, ball, body, hinge, speed]}
com.jme3.util.GeometryBinding#reload: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.scene.GeometryGroupNode#onMaterialChange: {[geometry, scene, material, camel, texture, spatial, light, shader, bounding, volume, vertices, bitmap, bone, hallmarks, shape, collide, capsule, heightfield, friction, emitter, delta, collision, triangle, sphere, quaternion, collect, hinge, vecf, cinematic, plane, calculate, radius, joints, axes, velocity, rotate, square, motor, transmission, speed, piston, collidable, impulse, rotation, body, mass, matrix, arena, ball, torque]}
com.jme3.post.HDRRenderer#createLumShaders: {[texture, material, shader, light, camel, scene, spatial, geometry, bitmap, bone, cinematic, bounding, square, volume, shape, capsule, transmission, vecf, axes, mass, collide, velocity, motor, collision, radius, emitter, rotate, torque, impulse, quaternion, rotation, speed, hinge, heightfield, sphere, collidable, matrix, collect, delta, plane, vertices, piston, hallmarks, joints, arena, friction, ball, body, triangle, calculate]}
com.jme3.cinematic.events.AnimationEvent#AnimationEvent(C): {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.renderer.opengl.GLRenderer#loadCapabilitiesGL2: {[material, geometry, scene, camel, texture, spatial, light, shader, bounding, volume, bitmap, bone, vertices, shape, hallmarks, collide, collision, heightfield, emitter, friction, sphere, vecf, delta, quaternion, collect, hinge, axes, radius, triangle, joints, collidable, calculate, capsule, cinematic, motor, velocity, plane, piston, rotate, body, impulse, speed, transmission, matrix, rotation, mass, ball, arena, square, torque]}
com.jme3.renderer.queue.GeometryList#GeometryList(C): {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.shader.Uniform#isSetByCurrentMaterial: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.scene.BatchNode#unbatchSubGraph: {[scene, geometry, camel, material, spatial, texture, light, shader, bounding, volume, vertices, bone, bitmap, emitter, triangle, hallmarks, collect, rotate, plane, collide, shape, calculate, transmission, rotation, mass, capsule, sphere, velocity, arena, friction, delta, joints, matrix, torque, motor, heightfield, collidable, piston, collision, hinge, impulse, axes, vecf, ball, speed, square, quaternion, body, cinematic, radius]}
com.jme3.renderer.queue.TransparentComparator#compare: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, bone, hallmarks, bitmap, capsule, collide, emitter, sphere, triangle, shape, delta, friction, heightfield, cinematic, square, plane, radius, collision, rotate, collect, calculate, hinge, quaternion, rotation, joints, vecf, impulse, arena, ball, velocity, mass, torque, matrix, collidable, transmission, speed, motor, body, axes, piston]}
com.jme3.shadow.ShadowUtil#getGeometriesInCamFrustum: {[scene, geometry, spatial, camel, material, texture, light, shader, bounding, vertices, volume, triangle, bone, emitter, bitmap, plane, hallmarks, collidable, vecf, mass, collision, velocity, sphere, heightfield, motor, torque, rotate, impulse, transmission, square, axes, rotation, capsule, shape, collide, joints, arena, hinge, speed, delta, piston, calculate, radius, friction, quaternion, collect, body, matrix, ball, cinematic]}
com.jme3.shadow.BasicShadowRenderer#getShadowCamera: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.scene.Spatial#checkDoTransformUpdate: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.scene.Spatial#setBoundRefresh: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.scene.BatchNode#getMaterial: {[geometry, scene, material, camel, texture, spatial, light, shader, bounding, volume, vertices, bitmap, bone, hallmarks, shape, collide, capsule, heightfield, friction, emitter, delta, collision, triangle, sphere, quaternion, collect, hinge, vecf, cinematic, plane, calculate, radius, joints, axes, velocity, rotate, square, motor, transmission, speed, piston, collidable, impulse, rotation, body, mass, matrix, arena, ball, torque]}
com.jme3.scene.Spatial#clone: {[texture, material, camel, spatial, scene, light, shader, geometry, bitmap, bone, bounding, volume, cinematic, square, shape, transmission, emitter, capsule, mass, collide, vertices, velocity, radius, vecf, collision, motor, collect, torque, impulse, axes, sphere, joints, heightfield, calculate, triangle, collidable, delta, hinge, friction, matrix, plane, speed, body, rotation, hallmarks, arena, quaternion, ball, rotate, piston]}
com.jme3.light.AmbientLight#computeLastDistance: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.material.Material#getMaterialDef: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.util.TangentBinormalGenerator#visit: {[scene, geometry, camel, material, spatial, texture, light, shader, bounding, volume, vertices, bone, bitmap, emitter, triangle, hallmarks, collect, rotate, plane, collide, shape, calculate, transmission, rotation, mass, capsule, sphere, velocity, arena, friction, delta, joints, matrix, torque, motor, heightfield, collidable, piston, collision, hinge, impulse, axes, vecf, ball, speed, square, quaternion, body, cinematic, radius]}
com.jme3.app.SimpleApplication#update: {[spatial, camel, scene, material, texture, geometry, light, shader, bone, bitmap, emitter, rotate, quaternion, rotation, vertices, collect, cinematic, bounding, volume, piston, transmission, speed, axes, calculate, triangle, hinge, capsule, radius, mass, square, matrix, arena, collide, sphere, shape, body, hallmarks, motor, delta, torque, plane, collision, vecf, joints, friction, collidable, ball, impulse, velocity, heightfield]}
com.jme3.shadow.PointLightShadowRenderer#doDisplayFrustumDebug: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, bone, hallmarks, bitmap, capsule, collide, emitter, sphere, triangle, shape, delta, friction, heightfield, cinematic, square, plane, radius, collision, rotate, collect, calculate, hinge, quaternion, rotation, joints, vecf, impulse, arena, ball, velocity, mass, torque, matrix, collidable, transmission, speed, motor, body, axes, piston]}
com.jme3.scene.instancing.InstancedNode#setGeometryStartIndex2: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.environment.SnapshotJob#SnapshotJob(C): {[spatial, scene, camel, material, texture, geometry, light, shader, bitmap, bone, bounding, vertices, emitter, volume, transmission, mass, triangle, cinematic, radius, velocity, square, torque, collect, impulse, motor, plane, calculate, rotate, delta, quaternion, rotation, capsule, collidable, sphere, vecf, arena, shape, joints, piston, heightfield, collide, matrix, friction, collision, hallmarks, axes, ball, body, hinge, speed]}
com.jme3.shadow.AbstractShadowRenderer#postFrame: {[texture, material, light, shader, camel, scene, spatial, geometry, bitmap, bone, bounding, cinematic, volume, shape, square, vecf, capsule, collide, collision, axes, heightfield, transmission, collidable, velocity, plane, motor, rotate, mass, quaternion, matrix, emitter, friction, hinge, radius, torque, triangle, rotation, collect, piston, arena, speed, joints, impulse, sphere, vertices, hallmarks, body, ball, delta, calculate]}
com.jme3.shadow.ShadowUtil#addGeometriesInCamFrustumAndViewPortFromNode: {[scene, geometry, spatial, camel, material, texture, light, shader, bounding, vertices, volume, triangle, bone, emitter, bitmap, plane, hallmarks, collidable, vecf, mass, collision, velocity, sphere, heightfield, motor, torque, rotate, impulse, transmission, square, axes, rotation, capsule, shape, collide, joints, arena, hinge, speed, delta, piston, calculate, radius, friction, quaternion, collect, body, matrix, ball, cinematic]}
com.jme3.renderer.queue.RenderQueue#getGeometryComparator: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.material.logic.SinglePassLightingLogic#render: {[material, texture, camel, scene, geometry, light, spatial, shader, bounding, bitmap, volume, bone, shape, collide, cinematic, vecf, collision, vertices, heightfield, emitter, hallmarks, friction, axes, quaternion, square, capsule, collidable, hinge, collect, sphere, delta, motor, joints, velocity, radius, transmission, piston, matrix, mass, rotate, rotation, calculate, plane, torque, speed, arena, body, triangle, ball, impulse]}
EdgeFilteringMode(C): {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.cinematic.events.MotionEvent#getSpatial: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.post.Pass#setPassMaterial: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
net.smert.jreactphysics3d.engine.Material#Material(C): {[material, camel, texture, scene, light, geometry, shader, spatial, bitmap, bounding, shape, volume, bone, collide, vecf, collision, heightfield, square, friction, axes, cinematic, collidable, quaternion, arena, transmission, plane, matrix, radius, delta, vertices, body, collect, rotate, velocity, ball, rotation, sphere, hinge, triangle, mass, motor, speed, impulse, capsule, piston, emitter, hallmarks, calculate, torque, joints]}
com.jme3.renderer.ViewPort#clearProcessors: {[scene, material, camel, spatial, geometry, texture, light, shader, bounding, bitmap, volume, vertices, bone, triangle, mass, velocity, emitter, transmission, motor, plane, torque, impulse, radius, square, collidable, speed, shape, hinge, hallmarks, delta, joints, collide, vecf, cinematic, quaternion, collect, axes, capsule, calculate, matrix, collision, heightfield, piston, sphere, friction, rotation, body, arena, ball, rotate]}
com.jme3.environment.util.BoundingSphereDebug#BoundingSphereDebug(C): {[geometry, scene, camel, material, bounding, texture, spatial, light, volume, shader, hallmarks, sphere, radius, vertices, square, plane, transmission, triangle, emitter, collidable, delta, mass, cinematic, quaternion, bone, collide, friction, collect, shape, capsule, vecf, hinge, calculate, collision, velocity, heightfield, torque, piston, rotate, impulse, bitmap, axes, joints, speed, arena, body, matrix, motor, rotation, ball]}
com.jme3.scene.Spatial#scale: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.scene.control.UpdateControl#cloneForSpatial: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.animation.KillParticleControl#setSpatial: {[spatial, scene, camel, texture, material, light, geometry, shader, bone, bitmap, emitter, vertices, bounding, volume, transmission, triangle, mass, cinematic, radius, quaternion, rotate, collect, square, torque, capsule, velocity, rotation, impulse, plane, calculate, vecf, motor, arena, delta, heightfield, piston, collidable, sphere, axes, matrix, collision, friction, joints, speed, hinge, hallmarks, ball, shape, collide, body]}
com.jme3.app.StatsView#setSpatial: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.scene.AssetLinkNode#attachLinkedChildren: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.environment.EnvironmentCamera#snapshot: {[spatial, scene, material, texture, camel, light, shader, geometry, bitmap, bone, bounding, volume, emitter, cinematic, vertices, transmission, mass, square, velocity, triangle, radius, capsule, torque, motor, shape, collect, impulse, collide, delta, calculate, sphere, joints, plane, arena, rotate, rotation, quaternion, axes, collision, piston, collidable, hinge, matrix, speed, heightfield, hallmarks, body, vecf, ball, friction]}
com.jme3.scene.Node#getChildIndex: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.renderer.ViewPort#detachScene: {[scene, geometry, camel, material, spatial, texture, light, shader, bounding, volume, vertices, bone, bitmap, emitter, triangle, hallmarks, plane, collect, collide, transmission, rotate, mass, shape, calculate, velocity, capsule, rotation, sphere, motor, torque, joints, arena, friction, collidable, impulse, delta, matrix, hinge, heightfield, vecf, piston, collision, ball, radius, axes, cinematic, body, quaternion, speed, square]}
com.jme3.scene.control.LightControl#lightToSpatial: {[texture, spatial, material, camel, light, scene, shader, geometry, bitmap, bone, cinematic, bounding, volume, emitter, capsule, square, transmission, mass, shape, vertices, velocity, radius, collect, torque, collide, motor, impulse, vecf, collision, triangle, sphere, delta, calculate, joints, axes, quaternion, rotation, collidable, arena, rotate, piston, hinge, heightfield, ball, plane, body, hallmarks, speed, matrix, friction]}
com.jme3.renderer.RenderManager#notifyReshape: {[scene, material, camel, spatial, geometry, texture, light, shader, bounding, bitmap, volume, vertices, bone, triangle, mass, velocity, emitter, transmission, motor, plane, torque, impulse, radius, square, collidable, speed, shape, hinge, hallmarks, delta, joints, collide, vecf, cinematic, quaternion, collect, axes, capsule, calculate, matrix, collision, heightfield, piston, sphere, friction, rotation, body, arena, ball, rotate]}
com.jme3.renderer.queue.GeometryList#setComparator: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.scene.instancing.InstancedNode#lookUpByGeometry: {[geometry, scene, material, camel, texture, spatial, light, shader, bounding, volume, vertices, bitmap, bone, hallmarks, shape, collide, capsule, heightfield, friction, emitter, delta, collision, triangle, sphere, quaternion, collect, hinge, vecf, cinematic, plane, calculate, radius, joints, axes, velocity, rotate, square, motor, transmission, speed, piston, collidable, impulse, rotation, body, mass, matrix, arena, ball, torque]}
com.jme3.shadow.SpotLightShadowRenderer#getShadowCam: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.shadow.AbstractShadowFilter#postFrame: {[scene, material, camel, spatial, geometry, texture, light, shader, bounding, bitmap, volume, vertices, bone, triangle, mass, velocity, emitter, transmission, motor, plane, torque, impulse, radius, square, collidable, speed, shape, hinge, hallmarks, delta, joints, collide, vecf, cinematic, quaternion, collect, axes, capsule, calculate, matrix, collision, heightfield, piston, sphere, friction, rotation, body, arena, ball, rotate]}
com.jme3.shadow.AbstractShadowFilter#AbstractShadowFilter(C): {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.renderer.RenderManager#renderScene: {[spatial, scene, camel, geometry, material, texture, light, shader, vertices, triangle, emitter, volume, bounding, plane, collidable, vecf, heightfield, collision, bone, bitmap, mass, collide, shape, velocity, impulse, motor, torque, hallmarks, delta, transmission, axes, rotate, cinematic, friction, sphere, speed, quaternion, radius, arena, rotation, collect, capsule, joints, piston, calculate, square, hinge, ball, body, matrix]}
com.jme3.effect.ParticleEmitterControl#cloneForSpatial: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.app.FlyCamAppState#cleanup: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.app.FlyCamAppState#getCamera: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.scene.instancing.InstancedNode#removeFromInstancedGeometry: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.light.LightList#LightList(C): {[texture, spatial, material, camel, light, scene, shader, geometry, bitmap, bone, cinematic, bounding, volume, emitter, capsule, square, transmission, mass, shape, vertices, velocity, radius, collect, torque, collide, motor, impulse, vecf, collision, triangle, sphere, delta, calculate, joints, axes, quaternion, rotation, collidable, arena, rotate, piston, hinge, heightfield, ball, plane, body, hallmarks, speed, matrix, friction]}
com.jme3.shadow.PointLightShadowRenderer#clearMaterialParameters: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.shadow.PssmShadowFilter#PssmShadowFilter(C): {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.scene.GeometryGroupNode#onTransformChange: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.scene.debug.SkeletonDebugger#updateLogicalState: {[geometry, scene, camel, material, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, bitmap, emitter, sphere, triangle, delta, capsule, square, radius, rotate, collide, friction, plane, shape, cinematic, heightfield, collect, rotation, calculate, collision, impulse, speed, arena, matrix, hinge, transmission, mass, joints, torque, axes, quaternion, piston, motor, velocity, collidable, ball, vecf, body]}
com.jme3.post.HDRRenderer#createDisplayQuad: {[material, texture, camel, scene, spatial, light, shader, geometry, bitmap, bounding, bone, volume, shape, square, cinematic, collide, transmission, vertices, velocity, mass, axes, vecf, collision, motor, emitter, radius, capsule, torque, heightfield, quaternion, impulse, hinge, collect, speed, rotate, friction, joints, rotation, matrix, sphere, collidable, triangle, piston, arena, delta, calculate, plane, body, ball, hallmarks]}
com.jme3.scene.instancing.InstanceTypeKey#cloneFields: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.scene.shape.Line#Line(C): {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.cinematic.events.MotionEvent#setSpatial: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.shadow.AbstractShadowRenderer#getOccludersToRender: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.shadow.AbstractShadowRenderer#initFrustumCam: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.light.DirectionalLight#computeLastDistance: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.post.HDRRenderer#renderProcessing: {[scene, material, geometry, camel, spatial, texture, light, shader, bounding, volume, bitmap, vertices, bone, shape, collide, hallmarks, emitter, triangle, heightfield, capsule, friction, collision, delta, velocity, collect, sphere, quaternion, hinge, transmission, plane, vecf, calculate, joints, motor, mass, axes, rotate, torque, speed, matrix, cinematic, rotation, piston, impulse, body, radius, square, ball, arena, collidable]}
com.jme3.renderer.queue.GeometryList#iterator: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.scene.SimpleBatchNode#setTransformRefresh: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.shadow.SpotLightShadowRenderer#setMaterialParameters: {[texture, material, light, shader, camel, scene, spatial, geometry, bitmap, bone, bounding, cinematic, volume, shape, square, vecf, capsule, collide, collision, axes, heightfield, transmission, collidable, velocity, plane, motor, rotate, mass, quaternion, matrix, emitter, friction, hinge, radius, torque, triangle, rotation, collect, piston, arena, speed, joints, impulse, sphere, vertices, hallmarks, body, ball, delta, calculate]}
com.jme3.scene.Spatial#depthFirstTraversal: {[scene, material, camel, spatial, geometry, texture, light, shader, bounding, bitmap, volume, vertices, bone, triangle, mass, velocity, emitter, transmission, motor, plane, torque, impulse, radius, square, collidable, speed, shape, hinge, hallmarks, delta, joints, collide, vecf, cinematic, quaternion, collect, axes, capsule, calculate, matrix, collision, heightfield, piston, sphere, friction, rotation, body, arena, ball, rotate]}
com.jme3.asset.DesktopAssetManager#loadModel: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.renderer.queue.RenderQueue#RenderQueue(C): {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.scene.Geometry#oldClone: {[geometry, scene, material, camel, texture, spatial, light, shader, bounding, volume, vertices, bitmap, bone, hallmarks, shape, collide, capsule, heightfield, friction, emitter, delta, collision, triangle, sphere, quaternion, collect, hinge, vecf, cinematic, plane, calculate, radius, joints, axes, velocity, rotate, square, motor, transmission, speed, piston, collidable, impulse, rotation, body, mass, matrix, arena, ball, torque]}
com.jme3.shader.Uniform#setVector4InArray: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.renderer.queue.RenderQueue#addToQueue: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.util.MaterialDebugAppState#registerBinding: {[scene, material, camel, spatial, geometry, texture, light, shader, bounding, bitmap, volume, bone, vertices, emitter, shape, collide, hallmarks, triangle, collect, cinematic, transmission, mass, collision, velocity, calculate, square, friction, heightfield, motor, rotate, joints, torque, plane, vecf, rotation, hinge, sphere, impulse, delta, arena, axes, matrix, radius, capsule, piston, quaternion, body, ball, collidable, speed]}
com.jme3.shadow.SpotLightShadowRenderer#initFrustumCam: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.scene.instancing.InstancedNode#renderFromControl: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.material.logic.DefaultTechniqueDefLogic#render: {[material, texture, camel, scene, geometry, light, spatial, shader, bounding, bitmap, volume, bone, shape, collide, cinematic, vecf, collision, vertices, heightfield, emitter, hallmarks, friction, axes, quaternion, square, capsule, collidable, hinge, collect, sphere, delta, motor, joints, velocity, radius, transmission, piston, matrix, mass, rotate, rotation, calculate, plane, torque, speed, arena, body, triangle, ball, impulse]}
com.jme3.scene.shape.Box#duUpdateGeometryTextures: {[geometry, scene, material, camel, texture, spatial, light, shader, bounding, volume, bitmap, bone, vertices, hallmarks, shape, collide, emitter, sphere, friction, heightfield, triangle, collision, delta, collect, quaternion, capsule, hinge, radius, vecf, plane, calculate, joints, axes, rotate, velocity, motor, square, piston, collidable, arena, matrix, rotation, mass, speed, transmission, body, impulse, ball, torque, cinematic]}
com.jme3.light.LightFilter#filterLights: {[material, scene, geometry, camel, texture, spatial, light, shader, bounding, volume, bitmap, bone, vertices, shape, hallmarks, collide, emitter, collision, heightfield, sphere, friction, vecf, delta, quaternion, radius, hinge, collect, axes, cinematic, triangle, joints, collidable, calculate, motor, plane, piston, velocity, rotate, matrix, impulse, capsule, transmission, body, rotation, speed, ball, torque, arena, square, mass]}
com.jme3.input.ChaseCamera#cloneForSpatial: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.material.Material#setTextureParam: {[material, texture, camel, light, scene, shader, spatial, geometry, bitmap, bounding, bone, volume, shape, cinematic, square, collide, vecf, collision, axes, transmission, capsule, velocity, heightfield, mass, motor, radius, quaternion, collidable, emitter, rotate, vertices, collect, torque, hinge, friction, plane, rotation, speed, impulse, sphere, matrix, joints, piston, arena, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.material.Technique#render: {[material, texture, camel, scene, geometry, light, spatial, shader, bounding, bitmap, volume, bone, shape, collide, cinematic, vecf, collision, vertices, heightfield, emitter, hallmarks, friction, axes, quaternion, square, capsule, collidable, hinge, collect, sphere, delta, motor, joints, velocity, radius, transmission, piston, matrix, mass, rotate, rotation, calculate, plane, torque, speed, arena, body, triangle, ball, impulse]}
com.jme3.shadow.AbstractShadowRenderer#setPostShadowMaterial: {[material, texture, camel, light, scene, shader, spatial, geometry, bitmap, bounding, bone, volume, shape, cinematic, square, collide, vecf, collision, axes, transmission, capsule, velocity, heightfield, mass, motor, radius, quaternion, collidable, emitter, rotate, vertices, collect, torque, hinge, friction, plane, rotation, speed, impulse, sphere, matrix, joints, piston, arena, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.app.FlyCamAppState#initialize: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.material.Material#clearUniformsSetByCurrent: {[texture, material, shader, light, camel, scene, spatial, geometry, bitmap, bone, bounding, cinematic, shape, square, volume, vecf, collide, collision, capsule, axes, transmission, heightfield, collidable, rotate, plane, velocity, mass, radius, motor, quaternion, rotation, sphere, matrix, triangle, friction, hinge, torque, hallmarks, collect, speed, arena, piston, impulse, emitter, joints, ball, body, delta, vertices, calculate]}
com.jme3.shadow.AbstractShadowRenderer#createFrustum: {[scene, material, camel, geometry, spatial, texture, light, shader, bounding, volume, bitmap, bone, vertices, emitter, triangle, shape, hallmarks, collide, collect, transmission, mass, calculate, velocity, rotate, plane, friction, heightfield, collision, motor, joints, capsule, rotation, torque, delta, sphere, hinge, cinematic, square, arena, impulse, radius, vecf, piston, matrix, quaternion, axes, ball, collidable, body, speed]}
com.jme3.post.Pass#requiresSceneAsTexture: {[material, texture, scene, camel, spatial, light, shader, geometry, bitmap, bounding, bone, volume, cinematic, square, shape, vertices, transmission, mass, emitter, velocity, capsule, motor, collide, axes, torque, impulse, radius, vecf, collision, collect, hinge, triangle, quaternion, speed, joints, rotate, delta, rotation, heightfield, friction, piston, sphere, matrix, calculate, collidable, body, hallmarks, arena, ball, plane]}
com.jme3.material.MaterialDef#getMaterialParam: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.light.SpotLight#computeLastDistance: {[geometry, scene, bounding, camel, spatial, material, volume, texture, light, vertices, hallmarks, shader, sphere, plane, emitter, square, triangle, radius, collidable, vecf, shape, bone, collide, heightfield, collision, rotate, transmission, axes, collect, rotation, bitmap, calculate, delta, mass, arena, velocity, speed, quaternion, cinematic, friction, hinge, piston, motor, matrix, joints, body, ball, capsule, impulse, torque]}
com.jme3.util.PlaceholderAssets#getPlaceholderModel: {[scene, material, camel, spatial, geometry, texture, light, shader, bounding, bitmap, volume, bone, vertices, emitter, shape, collide, triangle, hallmarks, transmission, collect, mass, cinematic, velocity, collision, square, heightfield, calculate, motor, friction, torque, joints, vecf, hinge, plane, rotate, impulse, axes, radius, delta, rotation, sphere, arena, quaternion, body, speed, matrix, collidable, ball, piston, capsule]}
com.jme3.material.logic.DefaultTechniqueDefLogic#renderMeshFromGeometry: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.light.LightProbeBlendingProcessor#getPoi: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.collision.CollisionResult#getGeometry: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.shadow.AbstractShadowRenderer#initialize: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.shadow.PssmShadowFilter#getShadowMaterial: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.scene.instancing.InstancedNode#onMeshChange: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.shadow.AbstractShadowRenderer#updateShadowCams: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.animation.AudioTrack#findAudio: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.shadow.DirectionalLightShadowRenderer#getReceivers: {[scene, material, camel, spatial, texture, geometry, light, shader, bounding, bitmap, volume, bone, vertices, emitter, shape, collide, triangle, hallmarks, cinematic, transmission, mass, collect, velocity, collision, square, motor, calculate, torque, friction, heightfield, joints, plane, rotate, vecf, hinge, impulse, rotation, sphere, axes, arena, capsule, radius, delta, ball, quaternion, piston, body, speed, collidable, matrix]}
com.jme3.shadow.PssmShadowFilter#postFrame: {[scene, material, camel, spatial, geometry, texture, light, shader, bounding, bitmap, volume, vertices, bone, triangle, mass, velocity, emitter, transmission, motor, plane, torque, impulse, radius, square, collidable, speed, shape, hinge, hallmarks, delta, joints, collide, vecf, cinematic, quaternion, collect, axes, capsule, calculate, matrix, collision, heightfield, piston, sphere, friction, rotation, body, arena, ball, rotate]}
com.jme3.scene.Spatial#center: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.shadow.AbstractShadowRenderer#checkCulling: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.scene.SimpleBatchNode#attachChild: {[scene, geometry, camel, material, spatial, texture, light, shader, bounding, volume, vertices, bone, bitmap, emitter, triangle, hallmarks, collect, rotate, plane, collide, shape, calculate, transmission, rotation, mass, capsule, sphere, velocity, arena, friction, delta, joints, matrix, torque, motor, heightfield, collidable, piston, collision, hinge, impulse, axes, vecf, ball, speed, square, quaternion, body, cinematic, radius]}
com.jme3.animation.AnimControl#cloneForSpatial: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.scene.Spatial#checkDoBoundUpdate: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.shadow.AbstractShadowRenderer#setShadowZExtend: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.font.BitmapFont#setPages: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.shadow.PssmShadowFilter#getMaterial: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.scene.Geometry#deepClone: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.font.BitmapTextPage#BitmapTextPage(C): {[texture, material, light, camel, shader, scene, spatial, geometry, bitmap, bone, bounding, volume, cinematic, shape, square, collide, vecf, capsule, collision, transmission, axes, velocity, mass, heightfield, motor, radius, emitter, collidable, quaternion, rotate, collect, torque, hinge, vertices, plane, impulse, friction, rotation, speed, sphere, matrix, joints, piston, arena, hallmarks, delta, body, ball, calculate, triangle]}
com.jme3.renderer.queue.GuiComparator#compare: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
org.dyn4j.geometry.Vector2#getAngleBetween: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.scene.Batch#cloneFields: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.shader.Shader#clearUniformsSetByCurrentFlag: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.renderer.queue.GeometryList#next: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.cinematic.events.MotionEvent#cloneFields: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.shadow.AbstractShadowRenderer#getShadowCam: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.scene.instancing.InstancedNode#getGeometryStartIndex2: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.scene.shape.StripBox#duUpdateGeometryIndices: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.util.TangentBinormalGenerator#generateParallel: {[spatial, scene, camel, material, texture, geometry, light, shader, bitmap, bone, bounding, vertices, emitter, volume, transmission, mass, triangle, cinematic, radius, velocity, square, torque, collect, impulse, motor, plane, calculate, rotate, delta, quaternion, rotation, capsule, collidable, sphere, vecf, arena, shape, joints, piston, heightfield, collide, matrix, friction, collision, hallmarks, axes, ball, body, hinge, speed]}
com.jme3.environment.util.BoundingSphereDebug#setGeometryData: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, sphere, triangle, capsule, plane, square, bone, radius, cinematic, bitmap, emitter, delta, friction, collidable, quaternion, hinge, matrix, collect, transmission, rotate, shape, speed, collide, piston, joints, vecf, mass, calculate, motor, heightfield, velocity, rotation, impulse, arena, axes, ball, collision, body, torque]}
com.jme3.scene.BatchNode#onMeshChange: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.shadow.DirectionalLightShadowRenderer#getOccludersToRender: {[scene, material, camel, spatial, texture, geometry, light, shader, bounding, bitmap, volume, bone, vertices, emitter, shape, collide, triangle, hallmarks, cinematic, transmission, mass, collect, velocity, collision, square, motor, calculate, torque, friction, heightfield, joints, plane, rotate, vecf, hinge, impulse, rotation, sphere, axes, arena, capsule, radius, delta, ball, quaternion, piston, body, speed, collidable, matrix]}
com.jme3.scene.BatchNode#detachChildAt: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.shadow.SpotLightShadowRenderer#clearMaterialParameters: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.shader.Uniform#setVector4Length: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.app.SimpleApplication#initialize: {[camel, spatial, material, scene, geometry, texture, light, shader, bone, bitmap, bounding, volume, emitter, rotate, rotation, vertices, collide, quaternion, speed, piston, collect, shape, delta, axes, collision, hinge, friction, heightfield, cinematic, transmission, calculate, hallmarks, motor, impulse, vecf, triangle, collidable, body, radius, velocity, square, torque, joints, sphere, arena, capsule, plane, ball, mass, matrix]}
com.jme3.cinematic.Cinematic#getScene: {[scene, material, camel, spatial, geometry, texture, light, shader, bounding, bitmap, volume, vertices, bone, triangle, mass, velocity, emitter, transmission, motor, plane, torque, impulse, radius, square, collidable, speed, shape, hinge, hallmarks, delta, joints, collide, vecf, cinematic, quaternion, collect, axes, capsule, calculate, matrix, collision, heightfield, piston, sphere, friction, rotation, body, arena, ball, rotate]}
com.jme3.scene.instancing.InstancedGeometry#addInstance: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.scene.CameraNode#setEnabled: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.animation.SkeletonControl#controlRender: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.scene.Node#addUpdateChildren: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.environment.util.LightsDebugState#initialize: {[geometry, scene, material, camel, texture, spatial, light, shader, bounding, volume, hallmarks, vertices, sphere, radius, square, plane, bone, triangle, emitter, bitmap, transmission, quaternion, collidable, delta, friction, hinge, capsule, mass, cinematic, collect, calculate, piston, vecf, joints, speed, motor, collision, collide, rotate, matrix, heightfield, shape, torque, rotation, impulse, axes, velocity, ball, body, arena]}
com.jme3.material.Material#preload: {[texture, material, shader, light, camel, scene, spatial, geometry, bitmap, bone, bounding, cinematic, shape, square, volume, vecf, collide, collision, capsule, axes, transmission, heightfield, collidable, rotate, plane, velocity, mass, radius, motor, quaternion, rotation, sphere, matrix, triangle, friction, hinge, torque, hallmarks, collect, speed, arena, piston, impulse, emitter, joints, ball, body, delta, vertices, calculate]}
com.jme3.shadow.AbstractShadowFilter#initFilter: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.scene.control.Control#setSpatial: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, emitter, vertices, bounding, transmission, volume, mass, cinematic, triangle, radius, square, collect, velocity, torque, quaternion, rotate, capsule, impulse, calculate, rotation, motor, delta, sphere, arena, plane, piston, vecf, heightfield, matrix, collidable, joints, shape, axes, friction, collide, speed, collision, hinge, ball, hallmarks, body]}
com.jme3.shadow.PssmShadowRenderer#createFrustum: {[scene, material, camel, geometry, spatial, texture, light, shader, bounding, volume, bitmap, bone, vertices, emitter, triangle, shape, hallmarks, collide, collect, transmission, mass, calculate, velocity, rotate, plane, friction, heightfield, collision, motor, joints, capsule, rotation, torque, delta, sphere, hinge, cinematic, square, arena, impulse, radius, vecf, piston, matrix, quaternion, axes, ball, collidable, body, speed]}
com.jme3.renderer.queue.OpaqueComparator#distanceToCam: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, bone, hallmarks, bitmap, capsule, collide, emitter, sphere, triangle, shape, delta, friction, heightfield, cinematic, square, plane, radius, collision, rotate, collect, calculate, hinge, quaternion, rotation, joints, vecf, impulse, arena, ball, velocity, mass, torque, matrix, collidable, transmission, speed, motor, body, axes, piston]}
com.jme3.scene.Spatial#setMaterial: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.scene.Geometry#clone: {[geometry, scene, material, camel, texture, spatial, light, shader, bounding, volume, vertices, bitmap, bone, hallmarks, shape, collide, capsule, heightfield, friction, emitter, delta, collision, triangle, sphere, quaternion, collect, hinge, vecf, cinematic, plane, calculate, radius, joints, axes, velocity, rotate, square, motor, transmission, speed, piston, collidable, impulse, rotation, body, mass, matrix, arena, ball, torque]}
com.jme3.shader.Glsl100ShaderGenerator#isWorldOrMaterialParam: {[texture, material, shader, light, camel, scene, spatial, geometry, bitmap, bone, bounding, cinematic, shape, square, volume, vecf, collide, collision, capsule, axes, transmission, heightfield, collidable, rotate, plane, velocity, mass, radius, motor, quaternion, rotation, sphere, matrix, triangle, friction, hinge, torque, hallmarks, collect, speed, arena, piston, impulse, emitter, joints, ball, body, delta, vertices, calculate]}
com.jme3.scene.shape.Sphere#setTextureMode: {[geometry, scene, material, camel, texture, spatial, light, shader, bounding, volume, bitmap, bone, vertices, hallmarks, shape, collide, emitter, sphere, friction, heightfield, triangle, collision, delta, collect, quaternion, capsule, hinge, radius, vecf, plane, calculate, joints, axes, rotate, velocity, motor, square, piston, collidable, arena, matrix, rotation, mass, speed, transmission, body, impulse, ball, torque, cinematic]}
com.jme3.scene.instancing.InstancedNode#instance: {[scene, geometry, camel, material, spatial, texture, light, shader, bounding, volume, vertices, bone, bitmap, emitter, triangle, hallmarks, collect, rotate, plane, collide, shape, calculate, transmission, rotation, mass, capsule, sphere, velocity, arena, friction, delta, joints, matrix, torque, motor, heightfield, collidable, piston, collision, hinge, impulse, axes, vecf, ball, speed, square, quaternion, body, cinematic, radius]}
com.jme3.scene.GeometryGroupNode#onMeshChange: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
net.smert.jreactphysics3d.body.RigidBody#getMaterial: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.light.LightProbeBlendingProcessor#LightProbeBlendingProcessor(C): {[texture, spatial, material, camel, light, scene, shader, geometry, bitmap, bone, cinematic, bounding, volume, emitter, capsule, square, transmission, mass, shape, vertices, velocity, radius, collect, torque, collide, motor, impulse, vecf, collision, triangle, sphere, delta, calculate, joints, axes, quaternion, rotation, collidable, arena, rotate, piston, hinge, heightfield, ball, plane, body, hallmarks, speed, matrix, friction]}
com.jme3.renderer.queue.GeometryList#get: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.scene.instancing.InstancedNode#ungroupSceneGraph: {[scene, geometry, camel, material, spatial, texture, light, shader, bounding, volume, vertices, bone, bitmap, emitter, triangle, hallmarks, plane, collect, collide, transmission, rotate, mass, shape, calculate, velocity, capsule, rotation, sphere, motor, torque, joints, arena, friction, collidable, impulse, delta, matrix, hinge, heightfield, vecf, piston, collision, ball, radius, axes, cinematic, body, quaternion, speed, square]}
com.jme3.material.MaterialDef#MaterialDef(C): {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.cinematic.Cinematic#Cinematic(C): {[scene, material, spatial, camel, texture, geometry, light, shader, bitmap, bounding, volume, bone, vertices, emitter, mass, triangle, transmission, velocity, motor, square, cinematic, torque, impulse, radius, plane, collidable, delta, shape, speed, joints, hinge, capsule, collide, axes, hallmarks, collect, vecf, heightfield, quaternion, matrix, calculate, sphere, collision, rotation, piston, body, arena, ball, rotate, friction]}
com.jme3.renderer.opengl.GLRenderer#convertShaderType: {[material, geometry, scene, camel, texture, spatial, light, shader, bounding, volume, bitmap, bone, vertices, shape, hallmarks, collide, collision, heightfield, emitter, friction, sphere, vecf, delta, quaternion, collect, hinge, axes, radius, triangle, joints, collidable, calculate, capsule, cinematic, motor, velocity, plane, piston, rotate, body, impulse, speed, transmission, matrix, rotation, mass, ball, arena, square, torque]}
com.jme3.shadow.DirectionalLightShadowRenderer#getShadowCam: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.material.TechniqueDef#setShaderFile: {[material, geometry, scene, camel, texture, spatial, light, shader, bounding, volume, bitmap, bone, vertices, shape, hallmarks, collide, collision, heightfield, emitter, friction, sphere, vecf, delta, quaternion, collect, hinge, axes, radius, triangle, joints, collidable, calculate, capsule, cinematic, motor, velocity, plane, piston, rotate, body, impulse, speed, transmission, matrix, rotation, mass, ball, arena, square, torque]}
com.jme3.app.ChaseCameraAppState#update: {[spatial, scene, camel, material, texture, light, geometry, shader, bitmap, bone, bounding, emitter, vertices, volume, transmission, mass, cinematic, triangle, square, radius, collect, velocity, torque, rotate, quaternion, calculate, rotation, capsule, impulse, motor, shape, sphere, collide, arena, delta, piston, plane, joints, collidable, axes, vecf, matrix, ball, heightfield, friction, speed, hinge, hallmarks, collision, body]}
org.dyn4j.geometry.Geometry#createLinks: {[geometry, scene, spatial, camel, material, texture, vertices, light, bounding, shader, volume, triangle, plane, hallmarks, emitter, vecf, collidable, square, collision, sphere, shape, capsule, heightfield, cinematic, bone, collide, rotate, axes, radius, rotation, arena, mass, velocity, motor, impulse, torque, matrix, joints, piston, hinge, collect, bitmap, speed, transmission, quaternion, ball, delta, calculate, body, friction]}
com.jme3.animation.SkeletonControl#getAttachmentsNode: {[spatial, scene, camel, texture, material, light, shader, geometry, bone, bitmap, emitter, vertices, cinematic, transmission, volume, bounding, mass, triangle, capsule, quaternion, rotate, collect, square, radius, rotation, torque, calculate, piston, velocity, impulse, arena, sphere, plane, delta, heightfield, axes, motor, speed, matrix, vecf, hinge, collidable, friction, collision, joints, shape, collide, ball, hallmarks, body]}
net.smert.jreactphysics3d.body.RigidBody#setMaterial: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.scene.instancing.InstancedNode#clone: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.renderer.queue.TransparentComparator#distanceToCam2: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, bone, hallmarks, bitmap, capsule, collide, emitter, sphere, triangle, shape, delta, friction, heightfield, cinematic, square, plane, radius, collision, rotate, collect, calculate, hinge, quaternion, rotation, joints, vecf, impulse, arena, ball, velocity, mass, torque, matrix, collidable, transmission, speed, motor, body, axes, piston]}
com.jme3.environment.util.LightsDebugState#setScene: {[spatial, scene, camel, material, texture, geometry, light, shader, bitmap, bone, bounding, vertices, emitter, volume, transmission, mass, triangle, cinematic, radius, velocity, square, torque, collect, impulse, motor, plane, calculate, rotate, delta, quaternion, rotation, capsule, collidable, sphere, vecf, arena, shape, joints, piston, heightfield, collide, matrix, friction, collision, hallmarks, axes, ball, body, hinge, speed]}
com.jme3.util.MaterialDebugAppState#reloadMaterial: {[scene, geometry, material, camel, spatial, texture, light, shader, bounding, volume, vertices, bitmap, bone, hallmarks, shape, collide, triangle, emitter, capsule, heightfield, friction, collision, sphere, delta, quaternion, hinge, collect, plane, velocity, joints, calculate, vecf, motor, transmission, axes, mass, cinematic, rotate, speed, radius, torque, piston, matrix, body, square, rotation, impulse, arena, collidable, ball]}
com.jme3.scene.Batch#updateGeomList: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.environment.EnvironmentCamera#render: {[material, texture, scene, camel, spatial, light, shader, geometry, bitmap, bounding, bone, volume, cinematic, square, shape, vertices, transmission, mass, emitter, velocity, capsule, motor, collide, axes, torque, impulse, radius, vecf, collision, collect, hinge, triangle, quaternion, speed, joints, rotate, delta, rotation, heightfield, friction, piston, sphere, matrix, calculate, collidable, body, hallmarks, arena, ball, plane]}
com.jme3.scene.BatchNode#isBatch: {[scene, geometry, camel, material, spatial, texture, light, shader, bounding, volume, vertices, bone, bitmap, emitter, triangle, hallmarks, collect, rotate, plane, collide, shape, calculate, transmission, rotation, mass, capsule, sphere, velocity, arena, friction, delta, joints, matrix, torque, motor, heightfield, collidable, piston, collision, hinge, impulse, axes, vecf, ball, speed, square, quaternion, body, cinematic, radius]}
com.jme3.post.Filter#postFrame: {[scene, material, camel, spatial, geometry, texture, light, shader, bounding, bitmap, volume, vertices, bone, triangle, mass, velocity, emitter, transmission, motor, plane, torque, impulse, radius, square, collidable, speed, shape, hinge, hallmarks, delta, joints, collide, vecf, cinematic, quaternion, collect, axes, capsule, calculate, matrix, collision, heightfield, piston, sphere, friction, rotation, body, arena, ball, rotate]}
com.jme3.shadow.AbstractShadowRenderer#clearMaterialParameters: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.ui.Picture#setTexture: {[material, texture, camel, light, scene, shader, spatial, geometry, bitmap, bounding, bone, volume, shape, cinematic, square, collide, vecf, collision, axes, transmission, capsule, velocity, heightfield, mass, motor, radius, quaternion, collidable, emitter, rotate, vertices, collect, torque, hinge, friction, plane, rotation, speed, impulse, sphere, matrix, joints, piston, arena, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.renderer.ViewPort#clearScenes: {[scene, material, camel, spatial, geometry, texture, light, shader, bounding, bitmap, volume, vertices, bone, triangle, mass, velocity, emitter, transmission, motor, plane, torque, impulse, radius, square, collidable, speed, shape, hinge, hallmarks, delta, joints, collide, vecf, cinematic, quaternion, collect, axes, capsule, calculate, matrix, collision, heightfield, piston, sphere, friction, rotation, body, arena, ball, rotate]}
org.dyn4j.geometry.Geometry#createSegmentAtOrigin: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.light.LightProbe#computeLastDistance: {[geometry, scene, bounding, camel, spatial, material, volume, texture, light, vertices, hallmarks, shader, sphere, plane, emitter, square, triangle, radius, collidable, vecf, shape, bone, collide, heightfield, collision, rotate, transmission, axes, collect, rotation, bitmap, calculate, delta, mass, arena, velocity, speed, quaternion, cinematic, friction, hinge, piston, motor, matrix, joints, body, ball, capsule, impulse, torque]}
com.jme3.scene.control.LodControl#controlRender: {[scene, geometry, camel, spatial, material, texture, light, shader, bounding, volume, vertices, plane, emitter, triangle, hallmarks, collidable, bitmap, bone, sphere, heightfield, collide, collision, vecf, shape, collect, calculate, radius, square, cinematic, motor, capsule, matrix, impulse, velocity, torque, axes, transmission, mass, ball, speed, arena, rotate, hinge, body, quaternion, friction, delta, piston, rotation, joints]}
com.jme3.shadow.AbstractShadowFilter#getShadowMaterial: {[material, camel, scene, texture, light, spatial, shader, geometry, bitmap, bounding, bone, volume, shape, collide, square, collision, vecf, transmission, heightfield, cinematic, axes, velocity, radius, vertices, mass, quaternion, motor, friction, collidable, matrix, hinge, speed, sphere, rotate, torque, collect, plane, rotation, arena, joints, emitter, impulse, piston, capsule, calculate, body, hallmarks, ball, delta, triangle]}
com.jme3.animation.SkeletonControl#cloneForSpatial: {[spatial, scene, camel, texture, material, light, shader, geometry, bone, bitmap, emitter, vertices, cinematic, transmission, volume, bounding, mass, triangle, capsule, quaternion, rotate, collect, square, radius, rotation, torque, calculate, piston, velocity, impulse, arena, sphere, plane, delta, heightfield, axes, motor, speed, matrix, vecf, hinge, collidable, friction, collision, joints, shape, collide, ball, hallmarks, body]}
com.jme3.scene.shape.Box#duUpdateGeometryVertices: {[geometry, scene, spatial, camel, material, texture, vertices, light, bounding, shader, volume, triangle, plane, hallmarks, emitter, vecf, collidable, square, collision, sphere, shape, capsule, heightfield, cinematic, bone, collide, rotate, axes, radius, rotation, arena, mass, velocity, motor, impulse, torque, matrix, joints, piston, hinge, collect, bitmap, speed, transmission, quaternion, ball, delta, calculate, body, friction]}
com.jme3.scene.Geometry#associateWithGroupNode: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.scene.Node#updateGeometricState: {[texture, spatial, material, camel, light, scene, shader, geometry, bitmap, bone, cinematic, bounding, volume, emitter, capsule, square, transmission, mass, shape, vertices, velocity, radius, collect, torque, collide, motor, impulse, vecf, collision, triangle, sphere, delta, calculate, joints, axes, quaternion, rotation, collidable, arena, rotate, piston, hinge, heightfield, ball, plane, body, hallmarks, speed, matrix, friction]}
com.jme3.shadow.SpotLightShadowRenderer#getReceivers: {[scene, material, camel, spatial, texture, geometry, light, shader, bounding, bitmap, volume, bone, vertices, emitter, shape, collide, triangle, hallmarks, cinematic, transmission, mass, collect, velocity, collision, square, motor, calculate, torque, friction, heightfield, joints, plane, rotate, vecf, hinge, impulse, rotation, sphere, axes, arena, capsule, radius, delta, ball, quaternion, piston, body, speed, collidable, matrix]}
org.dyn4j.geometry.Geometry#createPolygonalHalfEllipseAtOrigin: {[geometry, scene, camel, material, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, sphere, square, radius, bone, capsule, emitter, triangle, plane, delta, cinematic, transmission, friction, rotate, bitmap, mass, collidable, rotation, hinge, impulse, quaternion, torque, velocity, axes, collide, arena, heightfield, vecf, joints, speed, matrix, motor, calculate, collect, ball, shape, collision, body, piston]}
com.jme3.app.FlyCamAppState#FlyCamAppState(C): {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.scene.instancing.InstancedNode#onMaterialChange: {[geometry, scene, material, camel, texture, spatial, light, shader, bounding, volume, vertices, bitmap, bone, hallmarks, shape, collide, capsule, heightfield, friction, emitter, delta, collision, triangle, sphere, quaternion, collect, hinge, vecf, cinematic, plane, calculate, radius, joints, axes, velocity, rotate, square, motor, transmission, speed, piston, collidable, impulse, rotation, body, mass, matrix, arena, ball, torque]}
com.jme3.scene.BatchNode#cloneFields: {[geometry, scene, material, camel, spatial, texture, light, shader, bounding, volume, vertices, hallmarks, bone, capsule, sphere, bitmap, triangle, delta, square, cinematic, emitter, collide, friction, radius, shape, heightfield, plane, rotate, collect, quaternion, collision, hinge, calculate, transmission, rotation, joints, impulse, mass, arena, torque, matrix, collidable, vecf, ball, speed, motor, body, axes, velocity, piston]}
com.jme3.shadow.DirectionalLightShadowRenderer#doDisplayFrustumDebug: {[material, camel, scene, texture, spatial, geometry, light, shader, bitmap, bounding, bone, volume, shape, collide, vertices, transmission, square, emitter, collision, cinematic, vecf, mass, heightfield, radius, velocity, matrix, torque, rotation, calculate, triangle, collect, sphere, motor, joints, rotate, friction, collidable, axes, hallmarks, impulse, hinge, capsule, ball, quaternion, delta, plane, speed, piston, arena, body]}
com.jme3.light.DirectionalLight#intersectsSphere: {[sphere, hallmarks, radius, bounding, volume, square, transmission, plane, collide, shape, vertices, collect, collidable, heightfield, calculate, mass, collision, geometry, triangle, vecf, emitter, quaternion, delta, velocity, hinge, scene, piston, cinematic, bitmap, torque, light, camel, friction, texture, material, axes, rotation, matrix, impulse, speed, spatial, body, ball, capsule, shader, arena, rotate, motor, joints, bone]},
org.dyn4j.geometry.Circle#project: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]},
org.dyn4j.geometry.Circle#createMass: {[radius, transmission, sphere, square, hallmarks, mass, velocity, bounding, delta, volume, torque, impulse, motor, friction, speed, spatial, triangle, calculate, vecf, bitmap, collect, cinematic, scene, collision, heightfield, quaternion, shader, material, joints, rotate, camel, collidable, geometry, texture, shape, collide, axes, rotation, arena, plane, light, piston, ball, body, hinge, vertices, matrix, emitter, capsule, bone]},
org.dyn4j.geometry.decompose.DoubleEdgeList#getReferenceFace: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]},
org.ode4j.math.DMatrixN#maxDifference: {[bounding, volume, sphere, hallmarks, radius, square, plane, vertices, collide, geometry, collidable, collect, shape, transmission, heightfield, triangle, scene, collision, vecf, calculate, camel, emitter, material, texture, light, spatial, shader, matrix, mass, quaternion, hinge, piston, speed, motor, axes, delta, cinematic, bone, friction, velocity, arena, rotation, body, capsule, impulse, joints, rotate, ball, bitmap, torque]},
com.jme3.animation.Skeleton#getBone: {[bounding, volume, sphere, hallmarks, radius, square, plane, geometry, vertices, collect, transmission, collide, collidable, scene, shape, triangle, camel, material, heightfield, calculate, collision, texture, light, vecf, spatial, emitter, shader, mass, quaternion, matrix, hinge, piston, cinematic, delta, speed, friction, motor, velocity, bitmap, rotation, axes, arena, capsule, body, torque, joints, ball, bone, rotate, impulse]},
org.dyn4j.geometry.Geometry#createCircle: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]},
net.smert.jreactphysics3d.collision.shapes.ConeShape#getLocalSupportPointWithoutMargin: {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, torque, collide, impulse, shape, collect, plane, calculate, motor, friction, spatial, vertices, emitter, bitmap, quaternion, speed, geometry, shader, cinematic, piston, hinge, material, scene, rotate, camel, collidable, heightfield, texture, axes, capsule, body, collision, joints, rotation, light, triangle, arena, ball, bone, matrix, vecf]},
org.ode4j.ode.internal.joints.DxJointTransmission#getMode: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]},
org.ode4j.ode.ragdoll.DRagdollBoneConfig#getRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]},
org.ode4j.ode.internal.joints.DxJointTransmission#dJointGetTransmissionAngle2: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]},
org.ode4j.ode.internal.joints.DxJointTransmission#dJointGetTransmissionAngle1: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]},
com.jme3.math.Quaternion#oppositeLocal: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]},
com.jme3.math.Matrix4f#setInverseRotationDegrees: {[square, hallmarks, radius, rotate, velocity, rotation, sphere, mass, speed, delta, axes, motor, transmission, quaternion, volume, impulse, bounding, emitter, bone, torque, piston, hinge, vertices, shape, shader, arena, bitmap, plane, friction, collide, ball, material, geometry, texture, joints, scene, cinematic, collect, light, spatial, body, capsule, collidable, collision, camel, calculate, heightfield, matrix, triangle, vecf]},
org.ode4j.ode.internal.joints.DxJointTransmission#dJointGetTransmissionRatio: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]},
org.ode4j.ode.internal.joints.DxJointTransmission#getParam: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]},
org.ode4j.ode.internal.DxHeightfield#computeAABB: {[hallmarks, square, sphere, radius, volume, bounding, plane, vertices, shape, collide, emitter, collidable, vecf, heightfield, transmission, triangle, collision, collect, axes, rotate, mass, calculate, geometry, velocity, bitmap, rotation, shader, delta, cinematic, bone, arena, speed, torque, scene, quaternion, body, impulse, light, material, motor, texture, ball, hinge, spatial, capsule, camel, joints, friction, piston, matrix]},
org.dyn4j.geometry.Geometry#createPolygonalSliceAtOrigin: {[bounding, radius, hallmarks, sphere, volume, geometry, square, transmission, scene, camel, material, mass, texture, light, delta, spatial, shader, velocity, vertices, torque, impulse, friction, plane, motor, quaternion, emitter, cinematic, collect, calculate, hinge, collide, bone, shape, speed, rotate, piston, capsule, collidable, vecf, collision, axes, rotation, body, heightfield, matrix, triangle, bitmap, arena, ball, joints]},
com.jme3.bounding.BoundingSphere#getVolume: {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, collide, torque, collect, shape, impulse, plane, calculate, friction, motor, quaternion, vertices, emitter, spatial, geometry, bitmap, piston, hinge, speed, collidable, heightfield, capsule, shader, cinematic, material, scene, rotate, camel, axes, collision, body, texture, joints, bone, triangle, ball, rotation, matrix, arena, light, vecf]},
com.jme3.light.SpotLight#intersectsSphere: {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, collide, plane, shape, collect, vertices, torque, calculate, impulse, bitmap, emitter, collidable, friction, geometry, motor, cinematic, quaternion, heightfield, collision, spatial, shader, hinge, vecf, piston, axes, speed, rotate, triangle, material, texture, camel, scene, body, joints, light, rotation, arena, bone, matrix, capsule, ball]},
org.ode4j.ode.internal.DxCylinder#getRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]},
com.jme3.math.FastMath#asin: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]},
org.ode4j.ode.internal.joints.DxJointTransmission#dJointGetTransmissionMode: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]},
org.ode4j.ode.internal.DxSphere#DxSphere(C): {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, collide, shape, torque, plane, collect, calculate, impulse, friction, vertices, quaternion, motor, spatial, emitter, bitmap, geometry, hinge, piston, collidable, shader, heightfield, speed, cinematic, material, scene, camel, collision, capsule, texture, rotate, axes, body, light, joints, vecf, matrix, rotation, arena, ball, bone, triangle]},
com.jme3.bounding.Intersection#intersect: {[sphere, radius, hallmarks, square, bounding, volume, transmission, plane, collide, shape, mass, vertices, collect, collidable, velocity, calculate, delta, heightfield, emitter, collision, vecf, triangle, bitmap, torque, geometry, cinematic, impulse, quaternion, shader, friction, axes, spatial, hinge, motor, rotate, piston, material, texture, speed, camel, light, body, joints, matrix, rotation, scene, arena, ball, bone, capsule]},
com.jme3.math.Quaternion#toAngles: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]},
com.jme3.light.LightList#setOwner: {[hallmarks, square, sphere, radius, volume, bounding, plane, vertices, shape, collide, emitter, collidable, vecf, heightfield, transmission, triangle, collision, collect, axes, rotate, mass, calculate, geometry, velocity, bitmap, rotation, shader, delta, cinematic, bone, arena, speed, torque, scene, quaternion, body, impulse, light, material, motor, texture, ball, hinge, spatial, capsule, camel, joints, friction, piston, matrix]},
org.ode4j.ode.internal.DxGimpactCollision#GetPointFromBarycentric: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]},
com.jme3.effect.shapes.EmitterSphereShape#getRandomPoint: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]},
com.jme3.effect.shapes.EmitterPointShape#deepClone: {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, collide, plane, shape, collect, calculate, torque, vertices, impulse, quaternion, friction, emitter, geometry, collidable, motor, bitmap, heightfield, hinge, piston, spatial, collision, cinematic, speed, shader, vecf, capsule, axes, triangle, rotate, body, material, camel, scene, joints, light, rotation, texture, matrix, bone, ball, arena]},
com.jme3.light.AmbientLight#intersectsBox: {[bounding, volume, sphere, hallmarks, radius, square, plane, geometry, vertices, collect, transmission, collide, collidable, scene, shape, triangle, camel, material, heightfield, calculate, collision, texture, light, vecf, spatial, emitter, shader, mass, quaternion, matrix, hinge, piston, cinematic, delta, speed, friction, motor, velocity, bitmap, rotation, axes, arena, capsule, body, torque, joints, ball, bone, rotate, impulse]},
com.jme3.bounding.BoundingSphere#getType: {[sphere, radius, hallmarks, square, bounding, volume, transmission, collide, plane, shape, vertices, mass, collidable, collect, heightfield, calculate, collision, emitter, vecf, velocity, triangle, delta, quaternion, geometry, torque, bitmap, hinge, piston, shader, friction, cinematic, spatial, impulse, axes, material, rotation, capsule, camel, texture, body, motor, light, rotate, ball, scene, matrix, arena, joints, speed, bone]},
com.jme3.scene.Geometry#getModelBound: {[bounding, volume, sphere, hallmarks, radius, square, plane, vertices, collide, geometry, collidable, collect, shape, transmission, heightfield, triangle, scene, collision, vecf, calculate, camel, emitter, material, texture, light, spatial, shader, matrix, mass, quaternion, hinge, piston, speed, motor, axes, delta, cinematic, bone, friction, velocity, arena, rotation, body, capsule, impulse, joints, rotate, ball, bitmap, torque]},
com.jme3.bounding.BoundingSphere#distanceToEdge: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]},
org.ode4j.ode.internal.CollisionLibccdCylinderStacking#collideCylCyl: {[sphere, radius, hallmarks, square, bounding, transmission, volume, collide, shape, plane, mass, vertices, velocity, collect, emitter, collidable, heightfield, delta, collision, calculate, vecf, triangle, shader, torque, bitmap, axes, impulse, spatial, material, rotate, texture, motor, camel, friction, cinematic, light, speed, scene, rotation, geometry, quaternion, joints, capsule, bone, hinge, piston, arena, body, ball, matrix]},
org.dyn4j.geometry.decompose.EarClipping#triangulate: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]},
org.ode4j.ode.internal.DxMass#dMassSetCylinder: {[radius, transmission, sphere, square, hallmarks, mass, velocity, bounding, delta, volume, torque, impulse, motor, friction, speed, spatial, triangle, calculate, vecf, bitmap, collect, cinematic, scene, collision, heightfield, quaternion, shader, material, joints, rotate, camel, collidable, geometry, texture, shape, collide, axes, rotation, arena, plane, light, piston, ball, body, hinge, vertices, matrix, emitter, capsule, bone]},
com.jme3.math.Ring#random: {[radius, sphere, square, hallmarks, transmission, bounding, volume, mass, velocity, delta, torque, impulse, collide, shape, plane, collect, motor, bitmap, calculate, friction, vertices, spatial, cinematic, shader, emitter, speed, quaternion, material, geometry, rotate, scene, texture, camel, axes, collidable, hinge, piston, light, heightfield, collision, rotation, joints, body, vecf, matrix, arena, ball, bone, capsule, triangle]},
com.jme3.scene.Node#hasChild: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]},
org.ode4j.ode.DTransmissionJoint#setMode: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]},
com.jme3.audio.LowPassFilter#getVolume: {[volume, bounding, sphere, hallmarks, plane, collide, radius, square, vertices, collidable, shape, heightfield, collect, triangle, collision, emitter, vecf, geometry, calculate, transmission, scene, camel, light, texture, spatial, material, shader, matrix, bone, capsule, axes, motor, hinge, piston, mass, bitmap, speed, quaternion, impulse, rotate, cinematic, torque, body, velocity, arena, ball, delta, joints, rotation, friction]},
org.dyn4j.dynamics.Settings#getRestitutionVelocitySquared: {[square, mass, radius, velocity, transmission, delta, hallmarks, motor, sphere, impulse, torque, speed, rotate, rotation, axes, bitmap, bounding, friction, cinematic, volume, shader, piston, hinge, joints, quaternion, texture, spatial, light, capsule, material, scene, heightfield, shape, camel, emitter, body, triangle, vertices, collidable, collision, bone, vecf, matrix, geometry, calculate, ball, plane, arena, collide, collect]},
org.ode4j.ode.internal.ragdoll.DxRagdoll#DxRagdoll(C): {[transmission, mass, delta, torque, velocity, radius, friction, impulse, square, sphere, motor, joints, hallmarks, ball, body, calculate, speed, arena, bounding, hinge, piston, volume, axes, shape, triangle, spatial, rotate, vecf, bone, heightfield, scene, bitmap, collect, camel, geometry, collide, quaternion, rotation, cinematic, material, shader, texture, plane, capsule, vertices, collidable, emitter, light, matrix, collision]},
org.dyn4j.collision.continuous.ConservativeAdvancement#getTimeOfImpact: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]},
com.jme3.scene.Spatial#getWorldBound: {[bounding, volume, sphere, hallmarks, radius, square, plane, vertices, collide, geometry, collidable, collect, shape, transmission, heightfield, triangle, scene, collision, vecf, calculate, camel, emitter, material, texture, light, spatial, shader, matrix, mass, quaternion, hinge, piston, speed, motor, axes, delta, cinematic, bone, friction, velocity, arena, rotation, body, capsule, impulse, joints, rotate, ball, bitmap, torque]},
com.jme3.scene.Mesh#getBound: {[bounding, volume, sphere, hallmarks, radius, square, plane, vertices, collide, geometry, collidable, collect, shape, transmission, heightfield, triangle, scene, collision, vecf, calculate, camel, emitter, material, texture, light, spatial, shader, matrix, mass, quaternion, hinge, piston, speed, motor, axes, delta, cinematic, bone, friction, velocity, arena, rotation, body, capsule, impulse, joints, rotate, ball, bitmap, torque]},
org.ode4j.ode.internal.DxMass#setSphere: {[radius, sphere, transmission, square, hallmarks, mass, bounding, volume, velocity, delta, torque, impulse, motor, friction, calculate, collect, spatial, speed, bitmap, collide, shape, quaternion, cinematic, triangle, plane, shader, scene, vecf, geometry, material, camel, rotate, joints, texture, axes, emitter, vertices, collision, piston, arena, rotation, hinge, heightfield, light, ball, capsule, collidable, body, matrix, bone]},
com.jme3.scene.shape.Torus#updateGeometry: {[bounding, radius, hallmarks, sphere, volume, geometry, square, transmission, scene, camel, material, mass, texture, light, delta, spatial, shader, velocity, vertices, torque, impulse, friction, plane, motor, quaternion, emitter, cinematic, collect, calculate, hinge, collide, bone, shape, speed, rotate, piston, capsule, collidable, vecf, collision, axes, rotation, body, heightfield, matrix, triangle, bitmap, arena, ball, joints]},
com.jme3.audio.AudioSource#getVolume: {[volume, bounding, sphere, hallmarks, plane, collide, radius, square, vertices, collidable, shape, heightfield, collect, triangle, collision, emitter, vecf, geometry, calculate, transmission, scene, camel, light, texture, spatial, material, shader, matrix, bone, capsule, axes, motor, hinge, piston, mass, bitmap, speed, quaternion, impulse, rotate, cinematic, torque, body, velocity, arena, ball, delta, joints, rotation, friction]},
net.smert.jreactphysics3d.collision.shapes.ConeShape#getRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]},
com.jme3.scene.debug.WireSphere#updatePositions: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.ode4j.ode.OdeHelper#createCylinder: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.ode4j.ode.internal.gimpact.GimGeometry#INV_TRANSP_MAT_DOT_VEC_2X2: {[bounding, volume, sphere, hallmarks, radius, square, plane, geometry, vertices, collect, transmission, collide, collidable, scene, shape, triangle, camel, material, heightfield, calculate, collision, texture, light, vecf, spatial, emitter, shader, mass, quaternion, matrix, hinge, piston, cinematic, delta, speed, friction, motor, velocity, bitmap, rotation, axes, arena, capsule, body, torque, joints, ball, bone, rotate, impulse]}
com.jme3.audio.LowPassFilter#setVolume: {[volume, bounding, sphere, hallmarks, plane, collide, radius, square, vertices, collidable, shape, heightfield, collect, triangle, collision, emitter, vecf, geometry, calculate, transmission, scene, camel, light, texture, spatial, material, shader, matrix, bone, capsule, axes, motor, hinge, piston, mass, bitmap, speed, quaternion, impulse, rotate, cinematic, torque, body, velocity, arena, ball, delta, joints, rotation, friction]}
com.jme3.bounding.BoundingBox#intersectsSphere: {[sphere, hallmarks, radius, bounding, volume, square, transmission, plane, collide, shape, vertices, collect, collidable, heightfield, calculate, mass, collision, geometry, triangle, vecf, emitter, quaternion, delta, velocity, hinge, scene, piston, cinematic, bitmap, torque, light, camel, friction, texture, material, axes, rotation, matrix, impulse, speed, spatial, body, ball, capsule, shader, arena, rotate, motor, joints, bone]}
org.ode4j.ode.internal.joints.DxJointPR#dJointGetPRPosition: {[radius, sphere, square, hallmarks, transmission, bounding, volume, mass, velocity, delta, torque, impulse, collide, shape, plane, collect, motor, bitmap, calculate, friction, vertices, spatial, cinematic, shader, emitter, speed, quaternion, material, geometry, rotate, scene, texture, camel, axes, collidable, hinge, piston, light, heightfield, collision, rotation, joints, body, vecf, matrix, arena, ball, bone, capsule, triangle]}
org.dyn4j.dynamics.Body#setRotationDiscRadius: {[velocity, mass, delta, transmission, square, motor, impulse, speed, torque, radius, hallmarks, axes, rotate, sphere, friction, piston, hinge, joints, rotation, body, bounding, volume, bone, quaternion, ball, calculate, emitter, shape, arena, bitmap, shader, vertices, plane, collide, texture, material, scene, spatial, cinematic, geometry, light, camel, collect, collision, triangle, vecf, heightfield, matrix, collidable, capsule]}
org.dyn4j.geometry.Slice#getSliceRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.dyn4j.dynamics.BodyFixture#createMass: {[mass, transmission, square, radius, velocity, delta, hallmarks, sphere, impulse, torque, motor, friction, speed, bounding, bitmap, volume, joints, axes, rotate, spatial, shader, calculate, cinematic, hinge, rotation, texture, scene, piston, body, material, arena, ball, light, camel, triangle, shape, collect, vecf, heightfield, capsule, quaternion, collision, matrix, collidable, collide, plane, bone, emitter, vertices, geometry]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointGetTransmissionRadius1: {[radius, sphere, hallmarks, transmission, square, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, motor, friction, shape, spatial, plane, quaternion, bitmap, speed, emitter, vertices, shader, scene, geometry, piston, material, hinge, camel, cinematic, triangle, texture, capsule, rotate, vecf, collidable, axes, joints, heightfield, body, light, matrix, ball, collision, rotation, arena, bone]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointGetTransmissionRadius2: {[radius, sphere, hallmarks, transmission, square, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, motor, friction, shape, spatial, plane, quaternion, bitmap, speed, emitter, vertices, shader, scene, geometry, piston, material, hinge, camel, cinematic, triangle, texture, capsule, rotate, vecf, collidable, axes, joints, heightfield, body, light, matrix, ball, collision, rotation, arena, bone]}
com.jme3.scene.shape.Dome#getRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
com.jme3.math.FastMath#sphericalToCartesian: {[sphere, radius, hallmarks, square, bounding, volume, transmission, collide, plane, shape, vertices, mass, collidable, collect, heightfield, calculate, collision, emitter, vecf, velocity, triangle, delta, quaternion, geometry, torque, bitmap, hinge, piston, shader, friction, cinematic, spatial, impulse, axes, material, rotation, capsule, camel, texture, body, motor, light, rotate, ball, scene, matrix, arena, joints, speed, bone]}
org.ode4j.ode.DTransmissionJoint#getRadius1: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
com.jme3.math.FastMath#sphericalToCartesianZ: {[sphere, radius, hallmarks, square, bounding, volume, transmission, collide, plane, shape, vertices, mass, collidable, collect, heightfield, calculate, collision, emitter, vecf, velocity, triangle, delta, quaternion, geometry, torque, bitmap, hinge, piston, shader, friction, cinematic, spatial, impulse, axes, material, rotation, capsule, camel, texture, body, motor, light, rotate, ball, scene, matrix, arena, joints, speed, bone]}
org.ode4j.ode.DTransmissionJoint#getRadius2: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.dyn4j.geometry.decompose.DoubleEdgeListHalfEdge#getPrevious: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
com.jme3.shadow.SpotLightShadowRenderer#updateShadowCams: {[hallmarks, radius, square, rotate, velocity, rotation, sphere, bounding, volume, mass, speed, bone, delta, geometry, motor, emitter, quaternion, axes, transmission, impulse, camel, light, spatial, torque, texture, scene, material, vertices, piston, shader, hinge, friction, arena, capsule, ball, shape, plane, collision, joints, vecf, collidable, bitmap, collide, cinematic, collect, body, matrix, triangle, calculate, heightfield]}
net.smert.jreactphysics3d.collision.shapes.CylinderShape#getRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.ode4j.ode.internal.DxSphere#dGeomSphereGetRadius: {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, collide, shape, torque, plane, collect, calculate, impulse, friction, vertices, quaternion, motor, spatial, emitter, bitmap, geometry, hinge, piston, collidable, shader, heightfield, speed, cinematic, material, scene, camel, collision, capsule, texture, rotate, axes, body, light, joints, vecf, matrix, rotation, arena, ball, bone, triangle]}
org.ode4j.ode.internal.joints.DxJointTransmission#setRadius2: {[radius, sphere, hallmarks, transmission, square, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, motor, friction, shape, spatial, plane, quaternion, bitmap, speed, emitter, vertices, shader, scene, geometry, piston, material, hinge, camel, cinematic, triangle, texture, capsule, rotate, vecf, collidable, axes, joints, heightfield, body, light, matrix, ball, collision, rotation, arena, bone]}
org.ode4j.ode.internal.joints.DxJointTransmission#setRadius1: {[radius, sphere, hallmarks, transmission, square, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, motor, friction, shape, spatial, plane, quaternion, bitmap, speed, emitter, vertices, shader, scene, geometry, piston, material, hinge, camel, cinematic, triangle, texture, capsule, rotate, vecf, collidable, axes, joints, heightfield, body, light, matrix, ball, collision, rotation, arena, bone]}
org.ode4j.ode.internal.CollideRayCylinder#dCollideRayCylinder: {[sphere, radius, hallmarks, square, bounding, volume, transmission, collide, shape, plane, mass, collect, vertices, velocity, heightfield, emitter, calculate, collidable, collision, delta, vecf, triangle, torque, spatial, shader, impulse, material, quaternion, bitmap, capsule, camel, axes, friction, hinge, piston, texture, scene, motor, geometry, rotate, light, speed, cinematic, bone, body, joints, arena, matrix, rotation, ball]}
org.ode4j.ode.internal.joints.DxJointTransmission#getAnchor2: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]}
org.ode4j.ode.internal.joints.DxJointTransmission#getAnchor1: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]}
org.ode4j.ode.internal.DxSphere#dGeomSpherePointDepth: {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, collide, shape, torque, plane, collect, calculate, impulse, friction, vertices, quaternion, motor, spatial, emitter, bitmap, geometry, hinge, piston, collidable, shader, heightfield, speed, cinematic, material, scene, camel, collision, capsule, texture, rotate, axes, body, light, joints, vecf, matrix, rotation, arena, ball, bone, triangle]}
org.dyn4j.geometry.Ellipse#getHalfHeight: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
org.ode4j.ode.DSphere#getRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.ode4j.ode.internal.CollideCylinderPlane#dCollideCylinderPlane: {[sphere, hallmarks, radius, square, volume, bounding, collide, transmission, plane, shape, vertices, collidable, heightfield, collision, collect, emitter, vecf, triangle, calculate, mass, velocity, shader, delta, axes, spatial, material, quaternion, bitmap, camel, capsule, hinge, texture, torque, piston, light, geometry, scene, rotate, friction, cinematic, impulse, bone, matrix, body, ball, joints, rotation, arena, speed, motor]}
org.ode4j.ode.internal.DxMass#dMassSetSphere: {[radius, sphere, transmission, square, hallmarks, mass, bounding, volume, velocity, delta, torque, impulse, motor, friction, calculate, collect, spatial, speed, bitmap, collide, shape, quaternion, cinematic, triangle, plane, shader, scene, vecf, geometry, material, camel, rotate, joints, texture, axes, emitter, vertices, collision, piston, arena, rotation, hinge, heightfield, light, ball, capsule, collidable, body, matrix, bone]}
org.dyn4j.geometry.Segment#contains: {[square, sphere, hallmarks, radius, bounding, volume, transmission, plane, shape, vertices, collide, mass, velocity, emitter, collidable, delta, collision, vecf, heightfield, collect, triangle, bitmap, cinematic, calculate, torque, axes, shader, rotate, geometry, impulse, motor, friction, speed, rotation, spatial, texture, material, light, arena, quaternion, hinge, capsule, matrix, camel, piston, body, joints, bone, scene, ball]}
com.jme3.light.SpotLight#intersectsBox: {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, collide, plane, shape, torque, collect, impulse, vertices, calculate, bitmap, motor, friction, geometry, cinematic, emitter, collidable, quaternion, spatial, shader, speed, heightfield, rotate, axes, collision, hinge, piston, vecf, material, texture, triangle, camel, scene, rotation, body, joints, light, arena, ball, bone, capsule, matrix]}
com.jme3.bounding.BoundingVolume#intersectsSphere: {[sphere, hallmarks, radius, bounding, volume, square, transmission, plane, collide, shape, vertices, collect, collidable, heightfield, calculate, mass, collision, geometry, triangle, vecf, emitter, quaternion, delta, velocity, hinge, scene, piston, cinematic, bitmap, torque, light, camel, friction, texture, material, axes, rotation, matrix, impulse, speed, spatial, body, ball, capsule, shader, arena, rotate, motor, joints, bone]}
org.ode4j.ode.internal.DxTrimeshHeightfield#computeAABB: {[hallmarks, square, sphere, radius, volume, bounding, plane, vertices, shape, collide, emitter, collidable, vecf, heightfield, transmission, triangle, collision, collect, axes, rotate, mass, calculate, geometry, velocity, bitmap, rotation, shader, delta, cinematic, bone, arena, speed, torque, scene, quaternion, body, impulse, light, material, motor, texture, ball, hinge, spatial, capsule, camel, joints, friction, piston, matrix]}
com.jme3.light.PointLight#intersectsBox: {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, collide, collect, torque, plane, shape, calculate, impulse, friction, quaternion, vertices, geometry, motor, emitter, bitmap, piston, hinge, spatial, collidable, cinematic, speed, heightfield, shader, collision, capsule, rotate, axes, body, material, scene, light, camel, joints, matrix, texture, ball, vecf, bone, rotation, triangle, arena]}
org.dyn4j.collision.AbstractCollidable#getRotationDiscRadius: {[square, hallmarks, radius, rotate, velocity, rotation, sphere, mass, speed, delta, axes, motor, transmission, quaternion, volume, impulse, bounding, emitter, bone, torque, piston, hinge, vertices, shape, shader, arena, bitmap, plane, friction, collide, ball, material, geometry, texture, joints, scene, cinematic, collect, light, spatial, body, capsule, collidable, collision, camel, calculate, heightfield, matrix, triangle, vecf]}
org.dyn4j.geometry.HalfEllipse#getRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.ode4j.ode.internal.joints.DxJointTransmission#setAxis: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]}
org.ode4j.ode.internal.joints.DxJointTransmission#setAnchor2: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]}
org.ode4j.ode.internal.joints.DxJointTransmission#setAnchor1: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]}
com.jme3.bounding.BoundingSphere#transform: {[hallmarks, square, radius, sphere, bounding, volume, transmission, velocity, mass, rotate, rotation, delta, axes, emitter, speed, motor, impulse, vertices, shape, quaternion, plane, bone, torque, collide, collect, geometry, piston, bitmap, hinge, heightfield, friction, shader, arena, collidable, vecf, triangle, collision, cinematic, joints, ball, calculate, material, texture, capsule, body, matrix, camel, light, scene, spatial]}
org.ode4j.ode.internal.gimpact.GimContact#gim_merge_contacts: {[radius, sphere, hallmarks, transmission, square, bounding, volume, mass, velocity, delta, torque, calculate, collect, collide, impulse, shape, plane, friction, quaternion, spatial, motor, bitmap, vertices, emitter, piston, scene, hinge, material, shader, speed, collidable, camel, geometry, capsule, heightfield, cinematic, texture, joints, arena, collision, triangle, matrix, axes, ball, rotation, light, rotate, vecf, bone, body]}
com.jme3.light.PoiLightProbeLightFilter#filterLights: {[bounding, radius, sphere, volume, hallmarks, geometry, square, scene, light, camel, texture, material, transmission, spatial, shader, mass, vertices, delta, plane, velocity, emitter, collect, calculate, collide, friction, quaternion, torque, bone, impulse, shape, hinge, collidable, piston, bitmap, triangle, motor, heightfield, rotate, capsule, speed, cinematic, collision, body, matrix, axes, vecf, joints, rotation, ball, arena]}
org.dyn4j.geometry.decompose.SweepLine#merge: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
org.dyn4j.dynamics.Settings#getSleepAngularVelocitySquared: {[square, mass, radius, velocity, transmission, delta, hallmarks, motor, sphere, impulse, torque, speed, rotate, rotation, axes, bitmap, bounding, friction, cinematic, volume, shader, piston, hinge, joints, quaternion, texture, spatial, light, capsule, material, scene, heightfield, shape, camel, emitter, body, triangle, vertices, collidable, collision, bone, vecf, matrix, geometry, calculate, ball, plane, arena, collide, collect]}
org.ode4j.ode.internal.sCylinderBoxData#_cldTestAxis: {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, collect, collide, plane, shape, calculate, torque, impulse, friction, spatial, vertices, motor, quaternion, bitmap, emitter, collidable, piston, shader, geometry, heightfield, hinge, cinematic, material, speed, scene, camel, collision, texture, axes, rotate, capsule, matrix, body, light, joints, vecf, rotation, ball, arena, triangle, bone]}
com.jme3.scene.VertexBuffer#convertToHalf: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
org.ode4j.ode.internal.sCylinderBoxData#_cldInitCylinderBox: {[square, hallmarks, radius, sphere, rotate, volume, bounding, rotation, emitter, axes, vertices, velocity, transmission, mass, shape, quaternion, speed, plane, delta, collide, motor, bone, impulse, vecf, triangle, heightfield, collidable, collision, torque, bitmap, piston, shader, collect, hinge, geometry, arena, cinematic, ball, texture, joints, material, light, friction, calculate, body, matrix, spatial, capsule, camel, scene]}
com.jme3.scene.shape.Sphere#setGeometryData: {[bounding, geometry, radius, hallmarks, sphere, volume, scene, camel, material, texture, light, square, transmission, spatial, shader, mass, delta, velocity, vertices, friction, torque, plane, emitter, impulse, bone, quaternion, motor, calculate, collect, hinge, collide, speed, shape, rotate, piston, bitmap, cinematic, collidable, vecf, triangle, collision, rotation, body, arena, axes, matrix, ball, heightfield, joints, capsule]}
com.jme3.bounding.BoundingBox#whichSide: {[radius, sphere, hallmarks, square, bounding, transmission, volume, mass, collide, plane, shape, collect, velocity, vertices, delta, calculate, collidable, emitter, heightfield, collision, torque, vecf, triangle, bitmap, impulse, quaternion, spatial, shader, friction, geometry, cinematic, motor, hinge, axes, material, piston, camel, texture, rotate, scene, speed, capsule, light, body, joints, bone, arena, matrix, ball, rotation]}
com.jme3.audio.LowPassFilter#getHighFreqVolume: {[volume, bounding, sphere, hallmarks, plane, collide, radius, square, vertices, collidable, shape, heightfield, collect, triangle, collision, emitter, vecf, geometry, calculate, transmission, scene, camel, light, texture, spatial, material, shader, matrix, bone, capsule, axes, motor, hinge, piston, mass, bitmap, speed, quaternion, impulse, rotate, cinematic, torque, body, velocity, arena, ball, delta, joints, rotation, friction]}
com.jme3.audio.AudioNode#toString: {[volume, bounding, sphere, hallmarks, plane, collide, radius, square, vertices, collidable, shape, heightfield, collect, triangle, collision, emitter, vecf, geometry, calculate, transmission, scene, camel, light, texture, spatial, material, shader, matrix, bone, capsule, axes, motor, hinge, piston, mass, bitmap, speed, quaternion, impulse, rotate, cinematic, torque, body, velocity, arena, ball, delta, joints, rotation, friction]}
org.ode4j.ode.DMass#setCylinder: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
net.smert.jreactphysics3d.collision.shapes.CylinderShape#getHeight: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
com.jme3.renderer.Camera#onViewPortChange: {[bounding, volume, sphere, hallmarks, radius, square, plane, geometry, vertices, collect, transmission, collide, collidable, scene, shape, triangle, camel, material, heightfield, calculate, collision, texture, light, vecf, spatial, emitter, shader, mass, quaternion, matrix, hinge, piston, cinematic, delta, speed, friction, motor, velocity, bitmap, rotation, axes, arena, capsule, body, torque, joints, ball, bone, rotate, impulse]}
com.jme3.scene.shape.Torus#Torus(C): {[bounding, radius, hallmarks, sphere, volume, geometry, square, transmission, scene, camel, material, mass, texture, light, delta, spatial, shader, velocity, vertices, torque, impulse, friction, plane, motor, quaternion, emitter, cinematic, collect, calculate, hinge, collide, bone, shape, speed, rotate, piston, capsule, collidable, vecf, collision, axes, rotation, body, heightfield, matrix, triangle, bitmap, arena, ball, joints]}
org.dyn4j.dynamics.Settings#getSleepLinearVelocitySquared: {[square, mass, radius, velocity, transmission, delta, hallmarks, motor, sphere, impulse, torque, speed, rotate, rotation, axes, bitmap, bounding, friction, cinematic, volume, shader, piston, hinge, joints, quaternion, texture, spatial, light, capsule, material, scene, heightfield, shape, camel, emitter, body, triangle, vertices, collidable, collision, bone, vecf, matrix, geometry, calculate, ball, plane, arena, collide, collect]}
com.jme3.bounding.BoundingVolume#transform: {[bounding, volume, sphere, hallmarks, radius, square, plane, vertices, collide, geometry, collidable, collect, shape, transmission, heightfield, triangle, scene, collision, vecf, calculate, camel, emitter, material, texture, light, spatial, shader, matrix, mass, quaternion, hinge, piston, speed, motor, axes, delta, cinematic, bone, friction, velocity, arena, rotation, body, capsule, impulse, joints, rotate, ball, bitmap, torque]}
org.dyn4j.geometry.Geometry#createSlice: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
com.jme3.scene.Spatial#setModelBound: {[bounding, volume, sphere, hallmarks, radius, square, plane, vertices, collide, geometry, collidable, collect, shape, transmission, heightfield, triangle, scene, collision, vecf, calculate, camel, emitter, material, texture, light, spatial, shader, matrix, mass, quaternion, hinge, piston, speed, motor, axes, delta, cinematic, bone, friction, velocity, arena, rotation, body, capsule, impulse, joints, rotate, ball, bitmap, torque]}
com.jme3.audio.Listener#setVolume: {[volume, bounding, sphere, hallmarks, plane, collide, radius, square, vertices, collidable, shape, heightfield, collect, triangle, collision, emitter, vecf, geometry, calculate, transmission, scene, camel, light, texture, spatial, material, shader, matrix, bone, capsule, axes, motor, hinge, piston, mass, bitmap, speed, quaternion, impulse, rotate, cinematic, torque, body, velocity, arena, ball, delta, joints, rotation, friction]}
org.dyn4j.dynamics.World#convexCast: {[transmission, radius, square, sphere, mass, torque, hallmarks, friction, delta, velocity, calculate, ball, joints, bounding, impulse, body, volume, arena, motor, shape, speed, collide, piston, hinge, plane, axes, collision, collidable, collect, vertices, emitter, spatial, heightfield, rotate, quaternion, bone, bitmap, vecf, shader, camel, geometry, material, triangle, scene, cinematic, texture, capsule, light, matrix, rotation]}
com.jme3.bounding.BoundingSphere#setSphere: {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, collide, shape, plane, torque, collect, impulse, calculate, vertices, bitmap, motor, friction, emitter, spatial, cinematic, shader, collidable, quaternion, geometry, heightfield, speed, material, collision, rotate, camel, axes, texture, hinge, scene, piston, vecf, light, triangle, joints, body, rotation, matrix, arena, capsule, bone, ball]}
org.ode4j.ode.internal.joints.DxJointTransmission#getRadius1: {[radius, sphere, hallmarks, transmission, square, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, motor, friction, shape, spatial, plane, quaternion, bitmap, speed, emitter, vertices, shader, scene, geometry, piston, material, hinge, camel, cinematic, triangle, texture, capsule, rotate, vecf, collidable, axes, joints, heightfield, body, light, matrix, ball, collision, rotation, arena, bone]}
org.ode4j.ode.internal.joints.DxJointTransmission#getRadius2: {[radius, sphere, hallmarks, transmission, square, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, motor, friction, shape, spatial, plane, quaternion, bitmap, speed, emitter, vertices, shader, scene, geometry, piston, material, hinge, camel, cinematic, triangle, texture, capsule, rotate, vecf, collidable, axes, joints, heightfield, body, light, matrix, ball, collision, rotation, arena, bone]}
org.dyn4j.geometry.Polygon#getRadius: {[hallmarks, square, bounding, volume, radius, sphere, geometry, rotate, vertices, rotation, emitter, axes, camel, velocity, spatial, scene, delta, speed, mass, transmission, bone, quaternion, material, plane, motor, texture, light, shape, impulse, triangle, torque, collide, piston, vecf, arena, cinematic, shader, collidable, hinge, heightfield, collision, bitmap, friction, ball, capsule, collect, joints, body, matrix, calculate]}
com.jme3.bounding.BoundingVolume#intersects: {[bounding, volume, sphere, hallmarks, radius, square, plane, vertices, collide, geometry, collidable, collect, shape, transmission, heightfield, triangle, scene, collision, vecf, calculate, camel, emitter, material, texture, light, spatial, shader, matrix, mass, quaternion, hinge, piston, speed, motor, axes, delta, cinematic, bone, friction, velocity, arena, rotation, body, capsule, impulse, joints, rotate, ball, bitmap, torque]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointSetTransmissionParam: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]}
com.jme3.bounding.BoundingBox#getVolume: {[volume, bounding, sphere, hallmarks, plane, collide, radius, square, vertices, collidable, shape, heightfield, collect, triangle, collision, emitter, vecf, geometry, calculate, transmission, scene, camel, light, texture, spatial, material, shader, matrix, bone, capsule, axes, motor, hinge, piston, mass, bitmap, speed, quaternion, impulse, rotate, cinematic, torque, body, velocity, arena, ball, delta, joints, rotation, friction]}
org.ode4j.ode.DMass#setSphereTotal: {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, collide, shape, torque, plane, collect, calculate, impulse, friction, vertices, quaternion, motor, spatial, emitter, bitmap, geometry, hinge, piston, collidable, shader, heightfield, speed, cinematic, material, scene, camel, collision, capsule, texture, rotate, axes, body, light, joints, vecf, matrix, rotation, arena, ball, bone, triangle]}
net.smert.jreactphysics3d.collision.shapes.SphereShape#computeLocalInertiaTensor: {[radius, transmission, sphere, square, hallmarks, mass, velocity, bounding, delta, volume, torque, impulse, motor, friction, speed, spatial, triangle, calculate, vecf, bitmap, collect, cinematic, scene, collision, heightfield, quaternion, shader, material, joints, rotate, camel, collidable, geometry, texture, shape, collide, axes, rotation, arena, plane, light, piston, ball, body, hinge, vertices, matrix, emitter, capsule, bone]}
com.jme3.bounding.BoundingSphere#intersectsBoundingBox: {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, collide, collect, torque, plane, shape, calculate, impulse, friction, quaternion, vertices, geometry, motor, emitter, bitmap, piston, hinge, spatial, collidable, cinematic, speed, heightfield, shader, collision, capsule, rotate, axes, body, material, scene, light, camel, joints, matrix, texture, ball, vecf, bone, rotation, triangle, arena]}
org.ode4j.ode.internal.ragdoll.DxRagdollBoneConfig#DxRagdollBoneConfig(C): {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, torque, impulse, collide, motor, shape, collect, calculate, friction, plane, spatial, emitter, speed, quaternion, vertices, geometry, capsule, bitmap, scene, piston, hinge, material, shader, rotate, camel, triangle, axes, cinematic, bone, texture, heightfield, vecf, collidable, body, joints, rotation, matrix, arena, ball, collision, light]}
net.smert.jreactphysics3d.collision.narrowphase.SphereVsSphereAlgorithm#testCollision: {[sphere, square, hallmarks, shape, transmission, radius, collide, plane, volume, bounding, collision, collidable, calculate, vertices, heightfield, vecf, triangle, emitter, ball, mass, joints, torque, body, friction, collect, axes, velocity, delta, arena, impulse, piston, shader, hinge, motor, bitmap, speed, material, rotate, light, camel, texture, spatial, quaternion, cinematic, bone, geometry, scene, capsule, matrix, rotation]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointGetTransmissionParam: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]}
org.dyn4j.geometry.Geometry#createUnitCirclePolygon: {[bounding, radius, hallmarks, sphere, volume, geometry, square, transmission, scene, camel, material, mass, texture, light, delta, spatial, shader, velocity, vertices, torque, impulse, friction, plane, motor, quaternion, emitter, cinematic, collect, calculate, hinge, collide, bone, shape, speed, rotate, piston, capsule, collidable, vecf, collision, axes, rotation, body, heightfield, matrix, triangle, bitmap, arena, ball, joints]}
org.ode4j.ode.internal.CollideRayCylinder_ODE_0_12#dCollideRayCylinder: {[sphere, radius, hallmarks, square, bounding, volume, transmission, collide, plane, shape, collect, mass, calculate, collidable, heightfield, vertices, collision, emitter, velocity, vecf, delta, triangle, spatial, quaternion, torque, shader, material, friction, capsule, impulse, camel, piston, bitmap, matrix, hinge, axes, texture, scene, geometry, light, arena, motor, joints, cinematic, ball, rotation, rotate, bone, body, speed]}
com.jme3.light.PointLight#getInvRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
com.jme3.bounding.BoundingSphere#mergeLocal: {[radius, sphere, hallmarks, square, bounding, transmission, volume, mass, collide, velocity, plane, delta, shape, collect, calculate, vertices, torque, emitter, impulse, geometry, collidable, quaternion, friction, heightfield, collision, motor, hinge, piston, bitmap, cinematic, spatial, vecf, triangle, capsule, speed, axes, shader, rotate, body, light, matrix, material, joints, bone, rotation, camel, texture, ball, scene, arena]}
org.ode4j.ode.internal.ragdoll.DxRagdollBody#getRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.dyn4j.geometry.Circle#contains: {[radius, sphere, square, hallmarks, transmission, bounding, volume, mass, velocity, delta, torque, impulse, collide, shape, plane, collect, motor, bitmap, calculate, friction, vertices, spatial, cinematic, shader, emitter, speed, quaternion, material, geometry, rotate, scene, texture, camel, axes, collidable, hinge, piston, light, heightfield, collision, rotation, joints, body, vecf, matrix, arena, ball, bone, capsule, triangle]}
org.dyn4j.geometry.decompose.DoubleEdgeList#removeHalfEdges: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
com.jme3.input.ChaseCamera#setDefaultHorizontalRotation: {[square, hallmarks, radius, rotate, velocity, rotation, sphere, mass, speed, delta, axes, motor, transmission, quaternion, volume, impulse, bounding, emitter, bone, torque, piston, hinge, vertices, shape, shader, arena, bitmap, plane, friction, collide, ball, material, geometry, texture, joints, scene, cinematic, collect, light, spatial, body, capsule, collidable, collision, camel, calculate, heightfield, matrix, triangle, vecf]}
org.ode4j.ode.internal.sCylinderBoxData#_cldClipCylinderToBox: {[sphere, radius, hallmarks, square, bounding, volume, transmission, collide, plane, shape, mass, collect, vertices, calculate, collidable, velocity, heightfield, collision, emitter, delta, vecf, triangle, torque, bitmap, shader, spatial, impulse, quaternion, friction, geometry, cinematic, axes, piston, hinge, material, motor, texture, camel, rotate, matrix, scene, light, capsule, body, speed, joints, rotation, arena, ball, bone]}
org.ode4j.ode.internal.DxSphere#dGeomSphereSetRadius: {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, collide, shape, torque, plane, collect, calculate, impulse, friction, vertices, quaternion, motor, spatial, emitter, bitmap, geometry, hinge, piston, collidable, shader, heightfield, speed, cinematic, material, scene, camel, collision, capsule, texture, rotate, axes, body, light, joints, vecf, matrix, rotation, arena, ball, bone, triangle]}
org.ode4j.ode.internal.CollideSphereConvex#dCollideSphereConvex: {[sphere, hallmarks, radius, square, bounding, volume, transmission, collide, plane, shape, vertices, collidable, heightfield, collision, collect, vecf, emitter, mass, triangle, calculate, velocity, delta, shader, bitmap, axes, spatial, torque, material, quaternion, cinematic, texture, camel, light, rotate, geometry, hinge, piston, impulse, friction, scene, capsule, motor, joints, body, speed, bone, ball, arena, matrix, rotation]}
net.smert.jreactphysics3d.collision.shapes.BoxShape#computeLocalInertiaTensor: {[mass, transmission, radius, square, delta, velocity, hallmarks, impulse, sphere, torque, motor, friction, bitmap, bounding, speed, cinematic, volume, rotate, heightfield, spatial, triangle, axes, shader, rotation, capsule, vecf, joints, collision, texture, collidable, scene, hinge, light, piston, material, calculate, body, camel, arena, ball, collect, emitter, collide, geometry, bone, plane, vertices, quaternion, matrix, shape]}
com.jme3.bounding.BoundingSphere#intersectsSphere: {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, collide, plane, shape, collect, calculate, torque, vertices, impulse, quaternion, friction, emitter, geometry, collidable, motor, bitmap, heightfield, hinge, piston, spatial, collision, cinematic, speed, shader, vecf, capsule, axes, triangle, rotate, body, material, camel, scene, joints, light, rotation, texture, matrix, bone, ball, arena]}
org.ode4j.ode.internal.CollideCylinderSphere#dCollideCylinderSphere: {[sphere, radius, hallmarks, square, bounding, transmission, volume, collide, shape, plane, mass, collect, vertices, calculate, collidable, heightfield, velocity, emitter, collision, delta, vecf, triangle, torque, spatial, quaternion, shader, material, impulse, capsule, hinge, friction, bitmap, camel, piston, texture, axes, scene, geometry, motor, light, cinematic, rotate, speed, body, bone, rotation, joints, ball, matrix, arena]}
com.jme3.bounding.BoundingSphere#toString: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
com.jme3.collision.SweepSphere#collideWithVertex: {[square, hallmarks, sphere, radius, shape, volume, plane, collide, transmission, bounding, vertices, emitter, collision, collidable, vecf, heightfield, axes, triangle, mass, rotate, velocity, shader, collect, calculate, delta, rotation, material, bitmap, speed, texture, light, torque, motor, impulse, camel, spatial, joints, piston, scene, quaternion, hinge, bone, cinematic, friction, ball, body, geometry, arena, capsule, matrix]}
org.ode4j.ode.internal.gimpact.GimAABBSet#gim_aabbset_sort: {[sphere, radius, hallmarks, square, bounding, transmission, volume, collide, shape, plane, mass, vertices, collect, collidable, calculate, heightfield, collision, emitter, velocity, vecf, delta, triangle, torque, shader, bitmap, spatial, quaternion, material, impulse, friction, axes, camel, texture, cinematic, hinge, light, geometry, piston, scene, motor, rotate, capsule, joints, ball, speed, matrix, arena, rotation, body, bone]}
com.jme3.light.LightProbeBlendingProcessor#computeBlendFactors: {[bounding, volume, sphere, radius, hallmarks, geometry, light, texture, scene, camel, material, square, transmission, shader, spatial, mass, vertices, emitter, plane, delta, bone, velocity, collide, bitmap, calculate, collect, shape, capsule, friction, quaternion, torque, collidable, hinge, impulse, heightfield, piston, triangle, cinematic, motor, collision, speed, rotate, body, vecf, arena, joints, matrix, axes, ball, rotation]}
net.smert.jreactphysics3d.collision.shapes.CapsuleShape#getHeight: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
org.ode4j.ode.internal.CollideRaySphere#dCollideRaySphere: {[sphere, radius, hallmarks, square, bounding, transmission, volume, collide, shape, plane, mass, collect, vertices, calculate, collidable, heightfield, velocity, emitter, collision, delta, vecf, triangle, torque, spatial, quaternion, shader, material, impulse, capsule, hinge, friction, bitmap, camel, piston, texture, axes, scene, geometry, motor, light, cinematic, rotate, speed, body, bone, rotation, joints, ball, matrix, arena]}
org.dyn4j.geometry.Geometry#createPolygonalSlice: {[sphere, radius, hallmarks, square, bounding, volume, transmission, plane, shape, collide, vertices, mass, emitter, collidable, velocity, heightfield, delta, collision, collect, vecf, triangle, calculate, bitmap, geometry, torque, axes, cinematic, rotate, impulse, shader, motor, friction, quaternion, speed, hinge, spatial, arena, rotation, piston, material, matrix, texture, body, bone, light, camel, ball, joints, scene, capsule]}
com.jme3.math.FastMath#convertFloatToHalf: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
net.smert.jreactphysics3d.collision.shapes.CapsuleShape#getLocalBounds: {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, torque, collide, impulse, shape, collect, plane, calculate, motor, friction, spatial, vertices, emitter, bitmap, quaternion, speed, geometry, shader, cinematic, piston, hinge, material, scene, rotate, camel, collidable, heightfield, texture, axes, capsule, body, collision, joints, rotation, light, triangle, arena, ball, bone, matrix, vecf]}
net.smert.jreactphysics3d.collision.shapes.ConvexMeshShape#computeLocalInertiaTensor: {[mass, transmission, radius, square, delta, velocity, hallmarks, impulse, sphere, torque, motor, friction, bitmap, bounding, speed, cinematic, volume, rotate, heightfield, spatial, triangle, axes, shader, rotation, capsule, vecf, joints, collision, texture, collidable, scene, hinge, light, piston, material, calculate, body, camel, arena, ball, collect, emitter, collide, geometry, bone, plane, vertices, quaternion, matrix, shape]}
com.jme3.light.LightProbe#getBounds: {[bounding, volume, sphere, hallmarks, radius, square, plane, vertices, collide, geometry, collidable, collect, shape, transmission, heightfield, triangle, scene, collision, vecf, calculate, camel, emitter, material, texture, light, spatial, shader, matrix, mass, quaternion, hinge, piston, speed, motor, axes, delta, cinematic, bone, friction, velocity, arena, rotation, body, capsule, impulse, joints, rotate, ball, bitmap, torque]}
org.dyn4j.geometry.Circle#Circle(C): {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
com.jme3.audio.LowPassFilter#LowPassFilter(C): {[volume, bounding, sphere, hallmarks, plane, collide, radius, square, vertices, collidable, shape, heightfield, collect, triangle, collision, emitter, vecf, geometry, calculate, transmission, scene, camel, light, texture, spatial, material, shader, matrix, bone, capsule, axes, motor, hinge, piston, mass, bitmap, speed, quaternion, impulse, rotate, cinematic, torque, body, velocity, arena, ball, delta, joints, rotation, friction]}
org.ode4j.ode.internal.DxCylinder#dCreateCylinder: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
com.jme3.bounding.BoundingVolume#merge: {[bounding, volume, sphere, hallmarks, radius, square, plane, vertices, collide, geometry, collidable, collect, shape, transmission, heightfield, triangle, scene, collision, vecf, calculate, camel, emitter, material, texture, light, spatial, shader, matrix, mass, quaternion, hinge, piston, speed, motor, axes, delta, cinematic, bone, friction, velocity, arena, rotation, body, capsule, impulse, joints, rotate, ball, bitmap, torque]}
com.jme3.effect.shapes.EmitterSphereShape#EmitterSphereShape(C): {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, collide, shape, plane, velocity, delta, collect, vertices, calculate, emitter, torque, collidable, heightfield, collision, impulse, spatial, friction, vecf, shader, bitmap, quaternion, motor, triangle, material, geometry, camel, axes, hinge, piston, speed, scene, texture, cinematic, capsule, rotate, light, joints, bone, body, matrix, arena, ball, rotation]}
com.jme3.scene.VertexBuffer#setElementComponent: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
com.jme3.scene.shape.Torus#setGeometryData: {[bounding, radius, hallmarks, sphere, volume, geometry, square, transmission, scene, camel, material, mass, texture, light, delta, spatial, shader, velocity, vertices, torque, impulse, friction, plane, motor, quaternion, emitter, cinematic, collect, calculate, hinge, collide, bone, shape, speed, rotate, piston, capsule, collidable, vecf, collision, axes, rotation, body, heightfield, matrix, triangle, bitmap, arena, ball, joints]}
com.jme3.math.FastMath#convertHalfToFloat: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
org.ode4j.ode.internal.joints.OdeJointsFactoryImpl#dJointCreateTransmission: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]}
org.ode4j.ode.DCylinder#getRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.ode4j.ode.internal.libccd.CCD#simplexToPolytope2: {[sphere, radius, hallmarks, square, bounding, volume, transmission, collide, plane, shape, vertices, mass, collidable, collect, heightfield, calculate, collision, emitter, vecf, velocity, triangle, delta, quaternion, geometry, torque, bitmap, hinge, piston, shader, friction, cinematic, spatial, impulse, axes, material, rotation, capsule, camel, texture, body, motor, light, rotate, ball, scene, matrix, arena, joints, speed, bone]}
org.dyn4j.geometry.Ellipse#createMass: {[mass, transmission, radius, delta, velocity, square, impulse, torque, motor, hallmarks, sphere, friction, speed, bounding, triangle, vecf, heightfield, collision, bitmap, collidable, volume, cinematic, rotate, joints, rotation, spatial, axes, hinge, arena, calculate, vertices, collide, scene, piston, plane, body, capsule, shader, emitter, texture, ball, geometry, material, camel, shape, collect, light, matrix, quaternion, bone]}
com.jme3.app.ChaseCameraAppState#setDefaultHorizontalRotation: {[square, hallmarks, radius, rotate, velocity, rotation, sphere, mass, speed, delta, axes, motor, transmission, quaternion, volume, impulse, bounding, emitter, bone, torque, piston, hinge, vertices, shape, shader, arena, bitmap, plane, friction, collide, ball, material, geometry, texture, joints, scene, cinematic, collect, light, spatial, body, capsule, collidable, collision, camel, calculate, heightfield, matrix, triangle, vecf]}
org.ode4j.ode.OdeHelper#createSphere: {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, collide, shape, torque, plane, collect, calculate, impulse, friction, vertices, quaternion, motor, spatial, emitter, bitmap, geometry, hinge, piston, collidable, shader, heightfield, speed, cinematic, material, scene, camel, collision, capsule, texture, rotate, axes, body, light, joints, vecf, matrix, rotation, arena, ball, bone, triangle]}
com.jme3.scene.debug.WireSphere#WireSphere(C): {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, collide, shape, torque, plane, collect, calculate, impulse, friction, vertices, quaternion, motor, spatial, emitter, bitmap, geometry, hinge, piston, collidable, shader, heightfield, speed, cinematic, material, scene, camel, collision, capsule, texture, rotate, axes, body, light, joints, vecf, matrix, rotation, arena, ball, bone, triangle]}
com.jme3.light.LightProbe#intersectsSphere: {[sphere, hallmarks, radius, bounding, volume, square, transmission, plane, collide, shape, vertices, collect, collidable, heightfield, calculate, mass, collision, geometry, triangle, vecf, emitter, quaternion, delta, velocity, hinge, scene, piston, cinematic, bitmap, torque, light, camel, friction, texture, material, axes, rotation, matrix, impulse, speed, spatial, body, ball, capsule, shader, arena, rotate, motor, joints, bone]}
com.jme3.input.ChaseCamera#setDefaultVerticalRotation: {[square, hallmarks, radius, rotate, velocity, rotation, sphere, mass, speed, delta, axes, motor, transmission, quaternion, volume, impulse, bounding, emitter, bone, torque, piston, hinge, vertices, shape, shader, arena, bitmap, plane, friction, collide, ball, material, geometry, texture, joints, scene, cinematic, collect, light, spatial, body, capsule, collidable, collision, camel, calculate, heightfield, matrix, triangle, vecf]}
com.jme3.renderer.Camera#containsGui: {[bounding, volume, sphere, hallmarks, radius, square, plane, vertices, collide, geometry, collidable, collect, shape, transmission, heightfield, triangle, scene, collision, vecf, calculate, camel, emitter, material, texture, light, spatial, shader, matrix, mass, quaternion, hinge, piston, speed, motor, axes, delta, cinematic, bone, friction, velocity, arena, rotation, body, capsule, impulse, joints, rotate, ball, bitmap, torque]}
org.dyn4j.geometry.Capsule#createMass: {[radius, transmission, sphere, square, hallmarks, mass, velocity, bounding, delta, volume, torque, impulse, motor, friction, speed, spatial, triangle, calculate, vecf, bitmap, collect, cinematic, scene, collision, heightfield, quaternion, shader, material, joints, rotate, camel, collidable, geometry, texture, shape, collide, axes, rotation, arena, plane, light, piston, ball, body, hinge, vertices, matrix, emitter, capsule, bone]}
com.jme3.scene.shape.Sphere#getRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.dyn4j.dynamics.Settings#setSleepLinearVelocity: {[square, mass, radius, velocity, transmission, delta, hallmarks, motor, sphere, impulse, torque, speed, rotate, rotation, axes, bitmap, bounding, friction, cinematic, volume, shader, piston, hinge, joints, quaternion, texture, spatial, light, capsule, material, scene, heightfield, shape, camel, emitter, body, triangle, vertices, collidable, collision, bone, vecf, matrix, geometry, calculate, ball, plane, arena, collide, collect]}
net.smert.jreactphysics3d.collision.shapes.CylinderShape#getLocalSupportPointWithoutMargin: {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, torque, collide, impulse, shape, collect, plane, calculate, motor, friction, spatial, vertices, emitter, bitmap, quaternion, speed, geometry, shader, cinematic, piston, hinge, material, scene, rotate, camel, collidable, heightfield, texture, axes, capsule, body, collision, joints, rotation, light, triangle, arena, ball, bone, matrix, vecf]}
com.jme3.bounding.BoundingVolume#BoundingVolume(C): {[bounding, volume, sphere, hallmarks, radius, square, plane, vertices, collide, geometry, collidable, collect, shape, transmission, heightfield, triangle, scene, collision, vecf, calculate, camel, emitter, material, texture, light, spatial, shader, matrix, mass, quaternion, hinge, piston, speed, motor, axes, delta, cinematic, bone, friction, velocity, arena, rotation, body, capsule, impulse, joints, rotate, ball, bitmap, torque]}
com.jme3.scene.shape.Sphere#Sphere(C): {[radius, bounding, sphere, hallmarks, volume, square, transmission, geometry, mass, scene, camel, material, light, texture, delta, velocity, vertices, spatial, shader, plane, torque, impulse, friction, emitter, collide, collect, quaternion, shape, calculate, motor, cinematic, hinge, collidable, piston, bone, speed, rotate, triangle, bitmap, axes, heightfield, capsule, body, collision, matrix, arena, vecf, rotation, ball, joints]}
org.dyn4j.geometry.Slice#getRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.dyn4j.dynamics.Settings#setSleepAngularVelocity: {[square, mass, radius, velocity, transmission, delta, hallmarks, motor, sphere, impulse, torque, speed, rotate, rotation, axes, bitmap, bounding, friction, cinematic, volume, shader, piston, hinge, joints, quaternion, texture, spatial, light, capsule, material, scene, heightfield, shape, camel, emitter, body, triangle, vertices, collidable, collision, bone, vecf, matrix, geometry, calculate, ball, plane, arena, collide, collect]}
org.ode4j.ode.internal.CollisionLibccd#ccdGeomToSphere: {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, collide, shape, torque, plane, collect, calculate, impulse, friction, vertices, quaternion, motor, spatial, emitter, bitmap, geometry, hinge, piston, collidable, shader, heightfield, speed, cinematic, material, scene, camel, collision, capsule, texture, rotate, axes, body, light, joints, vecf, matrix, rotation, arena, ball, bone, triangle]}
com.jme3.math.Matrix4f#angleRotation: {[square, hallmarks, radius, rotate, velocity, rotation, sphere, mass, speed, delta, axes, motor, transmission, quaternion, volume, impulse, bounding, emitter, bone, torque, piston, hinge, vertices, shape, shader, arena, bitmap, plane, friction, collide, ball, material, geometry, texture, joints, scene, cinematic, collect, light, spatial, body, capsule, collidable, collision, camel, calculate, heightfield, matrix, triangle, vecf]}
com.jme3.app.ChaseCameraAppState#setDefaultVerticalRotation: {[square, hallmarks, radius, rotate, velocity, rotation, sphere, mass, speed, delta, axes, motor, transmission, quaternion, volume, impulse, bounding, emitter, bone, torque, piston, hinge, vertices, shape, shader, arena, bitmap, plane, friction, collide, ball, material, geometry, texture, joints, scene, cinematic, collect, light, spatial, body, capsule, collidable, collision, camel, calculate, heightfield, matrix, triangle, vecf]}
org.dyn4j.geometry.decompose.SweepLine#regular: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
net.smert.jreactphysics3d.collision.shapes.ConeShape#getLocalBounds: {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, torque, collide, impulse, shape, collect, plane, calculate, motor, friction, spatial, vertices, emitter, bitmap, quaternion, speed, geometry, shader, cinematic, piston, hinge, material, scene, rotate, camel, collidable, heightfield, texture, axes, capsule, body, collision, joints, rotation, light, triangle, arena, ball, bone, matrix, vecf]}
net.smert.jreactphysics3d.collision.shapes.CylinderShape#computeLocalInertiaTensor: {[radius, sphere, transmission, square, hallmarks, mass, bounding, velocity, delta, volume, torque, impulse, motor, friction, speed, calculate, spatial, bitmap, collect, triangle, vecf, cinematic, shape, rotate, scene, shader, collide, quaternion, geometry, material, joints, collision, camel, axes, plane, texture, heightfield, rotation, collidable, arena, emitter, light, vertices, piston, ball, hinge, body, matrix, capsule, bone]}
org.dyn4j.geometry.Slice#contains: {[square, sphere, hallmarks, radius, bounding, volume, transmission, plane, shape, vertices, collide, mass, velocity, emitter, collidable, delta, collision, vecf, heightfield, collect, triangle, bitmap, cinematic, calculate, torque, axes, shader, rotate, geometry, impulse, motor, friction, speed, rotation, spatial, texture, material, light, arena, quaternion, hinge, capsule, matrix, camel, piston, body, joints, bone, scene, ball]}
com.jme3.scene.shape.PQTorus#PQTorus(C): {[bounding, radius, hallmarks, sphere, volume, geometry, square, transmission, scene, camel, material, mass, texture, light, delta, spatial, shader, velocity, vertices, torque, impulse, friction, plane, motor, quaternion, emitter, cinematic, collect, calculate, hinge, collide, bone, shape, speed, rotate, piston, capsule, collidable, vecf, collision, axes, rotation, body, heightfield, matrix, triangle, bitmap, arena, ball, joints]}
com.jme3.scene.Geometry#setModelBound: {[bounding, volume, sphere, hallmarks, radius, square, plane, vertices, collide, geometry, collidable, collect, shape, transmission, heightfield, triangle, scene, collision, vecf, calculate, camel, emitter, material, texture, light, spatial, shader, matrix, mass, quaternion, hinge, piston, speed, motor, axes, delta, cinematic, bone, friction, velocity, arena, rotation, body, capsule, impulse, joints, rotate, ball, bitmap, torque]}
net.smert.jreactphysics3d.collision.shapes.SphereShape#getLocalBounds: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
com.jme3.scene.debug.WireSphere#fromBoundingSphere: {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, collide, plane, shape, collect, calculate, torque, vertices, impulse, quaternion, friction, emitter, geometry, collidable, motor, bitmap, heightfield, hinge, piston, spatial, collision, cinematic, speed, shader, vecf, capsule, axes, triangle, rotate, body, material, camel, scene, joints, light, rotation, texture, matrix, bone, ball, arena]}
org.ode4j.ode.DSphere#setRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.dyn4j.collision.narrowphase.CircleDetector#distance: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.ode4j.ode.DCapsule#setParams: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
com.jme3.bounding.BoundingBox#intersects: {[bounding, volume, sphere, hallmarks, radius, square, plane, vertices, collide, geometry, collidable, collect, shape, transmission, heightfield, triangle, scene, collision, vecf, calculate, camel, emitter, material, texture, light, spatial, shader, matrix, mass, quaternion, hinge, piston, speed, motor, axes, delta, cinematic, bone, friction, velocity, arena, rotation, body, capsule, impulse, joints, rotate, ball, bitmap, torque]}
org.dyn4j.geometry.decompose.DoubleEdgeList#getPreviousEdge: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
org.ode4j.ode.DMass#setSphere: {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, collide, shape, torque, plane, collect, calculate, impulse, friction, vertices, quaternion, motor, spatial, emitter, bitmap, geometry, hinge, piston, collidable, shader, heightfield, speed, cinematic, material, scene, camel, collision, capsule, texture, rotate, axes, body, light, joints, vecf, matrix, rotation, arena, ball, bone, triangle]}
org.dyn4j.geometry.Geometry#minkowskiSum: {[bounding, hallmarks, sphere, volume, radius, square, geometry, transmission, scene, vertices, camel, material, texture, spatial, plane, light, mass, emitter, shape, delta, collide, shader, triangle, collidable, velocity, vecf, cinematic, collision, collect, heightfield, torque, rotate, calculate, friction, impulse, bone, axes, quaternion, capsule, hinge, motor, bitmap, speed, rotation, arena, matrix, piston, body, ball, joints]}
com.jme3.bounding.BoundingSphere#merge: {[radius, sphere, hallmarks, square, bounding, transmission, volume, mass, velocity, collide, plane, delta, shape, collect, vertices, calculate, torque, emitter, impulse, collidable, geometry, bitmap, heightfield, friction, collision, quaternion, motor, cinematic, vecf, triangle, hinge, spatial, piston, shader, axes, rotate, speed, material, body, texture, joints, camel, rotation, matrix, scene, capsule, arena, bone, light, ball]}
org.ode4j.ode.internal.DxCollisionUtil#dClipPolyToCircle: {[radius, sphere, hallmarks, square, bounding, transmission, volume, mass, collide, shape, plane, vertices, velocity, collect, delta, collidable, calculate, emitter, heightfield, collision, bitmap, torque, vecf, triangle, shader, impulse, cinematic, spatial, axes, friction, motor, geometry, rotate, material, quaternion, texture, camel, light, speed, hinge, scene, piston, rotation, joints, body, arena, capsule, bone, ball, matrix]}
com.jme3.math.Ring#getInnerRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.dyn4j.geometry.Slice#createMass: {[radius, transmission, sphere, square, hallmarks, mass, velocity, bounding, delta, volume, torque, impulse, motor, friction, speed, spatial, triangle, calculate, vecf, bitmap, collect, cinematic, scene, collision, heightfield, quaternion, shader, material, joints, rotate, camel, collidable, geometry, texture, shape, collide, axes, rotation, arena, plane, light, piston, ball, body, hinge, vertices, matrix, emitter, capsule, bone]}
com.jme3.bounding.BoundingSphere#setRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.ode4j.ode.internal.CollisionLibccdCylinderStacking#testAndAddDiscContact: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
com.jme3.util.TangentBinormalGenerator#bulkPut: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
net.smert.jreactphysics3d.collision.shapes.CapsuleShape#getLocalSupportPointWithoutMargin: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
com.jme3.scene.shape.Torus#getOuterRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
com.jme3.effect.ParticleEmitter#emitParticles: {[bounding, volume, sphere, hallmarks, radius, square, plane, geometry, vertices, collect, transmission, collide, collidable, scene, shape, triangle, camel, material, heightfield, calculate, collision, texture, light, vecf, spatial, emitter, shader, mass, quaternion, matrix, hinge, piston, cinematic, delta, speed, friction, motor, velocity, bitmap, rotation, axes, arena, capsule, body, torque, joints, ball, bone, rotate, impulse]}
com.jme3.util.SkyFactory#createSky: {[geometry, scene, bounding, material, camel, texture, light, spatial, volume, shader, hallmarks, sphere, radius, square, transmission, vertices, mass, bone, emitter, delta, plane, bitmap, velocity, friction, quaternion, calculate, torque, triangle, hinge, collect, collide, impulse, collidable, piston, shape, rotate, motor, speed, capsule, heightfield, joints, arena, body, rotation, collision, ball, axes, vecf, cinematic, matrix]}
org.dyn4j.collision.AbstractCollidable#AbstractCollidable(C): {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, collide, shape, plane, collect, torque, calculate, impulse, vertices, friction, spatial, motor, emitter, quaternion, bitmap, collidable, shader, heightfield, piston, hinge, geometry, material, speed, camel, cinematic, scene, collision, texture, capsule, axes, rotate, vecf, light, body, joints, triangle, bone, arena, rotation, ball, matrix]}
org.ode4j.ode.internal.DxMass#dMassSetSphereTotal: {[radius, sphere, transmission, square, hallmarks, mass, bounding, volume, velocity, delta, torque, impulse, motor, friction, calculate, collect, spatial, speed, bitmap, collide, shape, quaternion, cinematic, triangle, plane, shader, scene, vecf, geometry, material, camel, rotate, joints, texture, axes, emitter, vertices, collision, piston, arena, rotation, hinge, heightfield, light, ball, capsule, collidable, body, matrix, bone]}
com.jme3.scene.shape.Dome#Dome(C): {[bounding, radius, hallmarks, sphere, volume, geometry, square, transmission, scene, camel, material, mass, texture, light, delta, spatial, shader, velocity, vertices, torque, impulse, friction, plane, motor, quaternion, emitter, cinematic, collect, calculate, hinge, collide, bone, shape, speed, rotate, piston, capsule, collidable, vecf, collision, axes, rotation, body, heightfield, matrix, triangle, bitmap, arena, ball, joints]}
org.ode4j.ode.internal.DxCylinder#setParams: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.dyn4j.geometry.Link#updateLength: {[sphere, radius, hallmarks, square, bounding, volume, transmission, plane, shape, collide, vertices, mass, emitter, collidable, velocity, heightfield, delta, collision, collect, vecf, triangle, calculate, bitmap, geometry, torque, axes, cinematic, rotate, impulse, shader, motor, friction, quaternion, speed, hinge, spatial, arena, rotation, piston, material, matrix, texture, body, bone, light, camel, ball, joints, scene, capsule]}
org.dyn4j.geometry.Shape#getRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.ode4j.ode.internal.ragdoll.DxRagdollBody#DxRagdollBody(C): {[velocity, transmission, mass, delta, torque, speed, impulse, motor, square, radius, friction, hallmarks, joints, axes, piston, hinge, sphere, rotate, body, ball, bone, rotation, calculate, volume, shape, bounding, emitter, arena, quaternion, collide, plane, vertices, collision, capsule, shader, material, scene, collidable, texture, spatial, heightfield, camel, geometry, collect, light, cinematic, bitmap, vecf, matrix, triangle]}
com.jme3.bounding.BoundingSphere#averagePoints: {[radius, sphere, square, hallmarks, transmission, bounding, volume, mass, velocity, delta, torque, impulse, collide, shape, plane, collect, motor, bitmap, calculate, friction, vertices, spatial, cinematic, shader, emitter, speed, quaternion, material, geometry, rotate, scene, texture, camel, axes, collidable, hinge, piston, light, heightfield, collision, rotation, joints, body, vecf, matrix, arena, ball, bone, capsule, triangle]}
net.smert.jreactphysics3d.collision.shapes.SphereShape#isEqualTo: {[sphere, hallmarks, square, radius, volume, collide, shape, plane, bounding, collidable, vertices, heightfield, collision, transmission, vecf, triangle, emitter, collect, calculate, shader, mass, axes, material, bitmap, camel, texture, velocity, light, spatial, quaternion, delta, rotate, capsule, cinematic, ball, hinge, torque, scene, geometry, motor, piston, joints, bone, friction, speed, rotation, body, impulse, matrix, arena]}
com.jme3.scene.shape.PQTorus#getRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
com.jme3.scene.Mesh#setInterleaved: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
net.smert.jreactphysics3d.collision.shapes.CylinderShape#getLocalBounds: {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, torque, collide, impulse, shape, collect, plane, calculate, motor, friction, spatial, vertices, emitter, bitmap, quaternion, speed, geometry, shader, cinematic, piston, hinge, material, scene, rotate, camel, collidable, heightfield, texture, axes, capsule, body, collision, joints, rotation, light, triangle, arena, ball, bone, matrix, vecf]}
org.dyn4j.geometry.decompose.DoubleEdgeListVertex#getEdgeTo: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
org.ode4j.ode.internal.joints.DxJointTransmission#DxJointTransmission(C): {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, motor, shape, collect, calculate, plane, friction, spatial, speed, bitmap, emitter, vertices, shader, rotate, material, scene, axes, cinematic, geometry, quaternion, camel, texture, rotation, collidable, joints, heightfield, capsule, piston, hinge, light, bone, triangle, collision, body, vecf, matrix, arena, ball]}
org.ode4j.ode.internal.joints.DxJointTransmission#setAxis2: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]}
org.ode4j.ode.internal.joints.DxJointTransmission#setAxis1: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]}
com.jme3.light.PointLight#intersectsFrustum: {[radius, sphere, hallmarks, square, bounding, transmission, volume, mass, collide, plane, shape, collect, velocity, vertices, delta, calculate, collidable, emitter, heightfield, collision, torque, vecf, triangle, bitmap, impulse, quaternion, spatial, shader, friction, geometry, cinematic, motor, hinge, axes, material, piston, camel, texture, rotate, scene, speed, capsule, light, body, joints, bone, arena, matrix, ball, rotation]}
org.ode4j.ode.internal.DxMass#setCylinder: {[radius, transmission, sphere, square, hallmarks, mass, velocity, bounding, delta, volume, torque, impulse, motor, friction, speed, spatial, triangle, calculate, vecf, bitmap, collect, cinematic, scene, collision, heightfield, quaternion, shader, material, joints, rotate, camel, collidable, geometry, texture, shape, collide, axes, rotation, arena, plane, light, piston, ball, body, hinge, vertices, matrix, emitter, capsule, bone]}
com.jme3.bounding.BoundingSphere#getRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.dyn4j.geometry.Mass#create: {[mass, transmission, radius, square, delta, velocity, hallmarks, impulse, sphere, torque, motor, friction, bitmap, bounding, speed, cinematic, volume, rotate, heightfield, spatial, triangle, axes, shader, rotation, capsule, vecf, joints, collision, texture, collidable, scene, hinge, light, piston, material, calculate, body, camel, arena, ball, collect, emitter, collide, geometry, bone, plane, vertices, quaternion, matrix, shape]}
org.dyn4j.geometry.decompose.SweepLine#end: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
org.ode4j.ode.OdeHelper#createTransmissionJoint: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]}
org.dyn4j.geometry.AbstractShape#AbstractShape(C): {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, collide, shape, delta, plane, collect, calculate, torque, vertices, emitter, impulse, spatial, collidable, heightfield, friction, motor, shader, bitmap, collision, quaternion, material, camel, scene, speed, texture, vecf, axes, cinematic, geometry, hinge, rotate, piston, capsule, triangle, light, joints, bone, body, matrix, rotation, arena, ball]}
org.ode4j.ode.internal.DxHeightfieldData#SetData: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
com.jme3.scene.shape.Torus#getInnerRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.dyn4j.geometry.Circle#getRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
com.jme3.scene.VertexBuffer#compact: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
org.dyn4j.dynamics.Settings#setRestitutionVelocity: {[square, mass, radius, velocity, transmission, delta, hallmarks, motor, sphere, impulse, torque, speed, rotate, rotation, axes, bitmap, bounding, friction, cinematic, volume, shader, piston, hinge, joints, quaternion, texture, spatial, light, capsule, material, scene, heightfield, shape, camel, emitter, body, triangle, vertices, collidable, collision, bone, vecf, matrix, geometry, calculate, ball, plane, arena, collide, collect]}
com.jme3.bounding.BoundingSphere#whichSide: {[radius, sphere, hallmarks, square, bounding, transmission, volume, mass, collide, plane, shape, collect, velocity, vertices, delta, calculate, collidable, emitter, heightfield, collision, torque, vecf, triangle, bitmap, impulse, quaternion, spatial, shader, friction, geometry, cinematic, motor, hinge, axes, material, piston, camel, texture, rotate, scene, speed, capsule, light, body, joints, bone, arena, matrix, ball, rotation]}
org.dyn4j.geometry.Geometry#createSliceAtOrigin: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
net.smert.jreactphysics3d.collision.shapes.ConeShape#getHeight: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
com.jme3.texture.image.MipMapImageRaster#setPixel: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointGetTransmissionContactPoint1: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointGetTransmissionContactPoint2: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]}
com.jme3.scene.shape.Cylinder#updateGeometry: {[bounding, geometry, radius, hallmarks, sphere, volume, scene, camel, material, texture, light, square, transmission, spatial, shader, mass, delta, velocity, vertices, friction, torque, plane, emitter, impulse, bone, quaternion, motor, calculate, collect, hinge, collide, speed, shape, rotate, piston, bitmap, cinematic, collidable, vecf, triangle, collision, rotation, body, arena, axes, matrix, ball, heightfield, joints, capsule]}
com.jme3.scene.VertexBuffer#getNumElements: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
com.jme3.scene.VertexBuffer#copyElements: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
com.jme3.bounding.BoundingVolume#getVolume: {[volume, bounding, sphere, hallmarks, plane, collide, radius, square, vertices, collidable, shape, heightfield, collect, triangle, collision, emitter, vecf, geometry, calculate, transmission, scene, camel, light, texture, spatial, material, shader, matrix, bone, capsule, axes, motor, hinge, piston, mass, bitmap, speed, quaternion, impulse, rotate, cinematic, torque, body, velocity, arena, ball, delta, joints, rotation, friction]}
org.ode4j.ode.internal.CollideSphereBox#dCollideSphereBox: {[sphere, radius, hallmarks, square, bounding, volume, transmission, collide, shape, plane, mass, collect, calculate, collidable, vertices, heightfield, collision, velocity, emitter, delta, vecf, triangle, quaternion, torque, spatial, shader, friction, capsule, material, impulse, camel, piston, hinge, bitmap, scene, texture, axes, geometry, motor, light, rotation, matrix, ball, joints, cinematic, arena, rotate, bone, speed, body]}
org.dyn4j.geometry.Ellipse#getHalfWidth: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
org.dyn4j.geometry.AABB#AABB(C): {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
com.jme3.bounding.BoundingBox#mergeLocal: {[radius, sphere, hallmarks, square, bounding, transmission, volume, mass, collide, velocity, plane, delta, shape, collect, calculate, vertices, torque, emitter, impulse, geometry, collidable, quaternion, friction, heightfield, collision, motor, hinge, piston, bitmap, cinematic, spatial, vecf, triangle, capsule, speed, axes, shader, rotate, body, light, matrix, material, joints, bone, rotation, camel, texture, ball, scene, arena]}
com.jme3.scene.shape.Dome#updateGeometry: {[bounding, hallmarks, sphere, radius, volume, square, geometry, transmission, scene, camel, material, vertices, texture, light, plane, mass, spatial, delta, shader, collide, emitter, shape, velocity, collect, collidable, triangle, calculate, torque, friction, cinematic, quaternion, impulse, heightfield, collision, vecf, hinge, bone, rotate, motor, axes, piston, capsule, speed, bitmap, body, rotation, arena, matrix, ball, joints]}
org.dyn4j.dynamics.Body#setMass: {[velocity, mass, delta, motor, impulse, transmission, torque, speed, square, radius, hallmarks, friction, rotate, axes, sphere, hinge, piston, joints, rotation, body, bounding, bone, quaternion, volume, ball, calculate, arena, emitter, shape, bitmap, shader, triangle, vecf, heightfield, scene, geometry, spatial, cinematic, texture, material, collidable, vertices, light, camel, plane, collision, collide, collect, matrix, capsule]}
org.ode4j.ode.internal.joints.DxJointTransmission#setRatio: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]}
com.jme3.light.PointLight#setRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.dyn4j.geometry.HalfEllipse#getHalfWidth: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
com.jme3.input.FlyByCamera#zoomCamera: {[radius, sphere, hallmarks, square, transmission, mass, bounding, volume, velocity, delta, torque, impulse, motor, friction, collide, speed, shape, calculate, collect, spatial, plane, emitter, bitmap, rotate, scene, shader, geometry, material, vertices, quaternion, axes, triangle, camel, cinematic, capsule, rotation, texture, vecf, joints, bone, piston, hinge, matrix, light, collision, body, arena, heightfield, collidable, ball]}
org.ode4j.ode.internal.ragdoll.DxRagdollBoneConfig#getRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
com.jme3.light.SpotLight#setSpotInnerAngle: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
com.jme3.audio.AudioNode#getVolume: {[volume, bounding, sphere, hallmarks, plane, collide, radius, square, vertices, collidable, shape, heightfield, collect, triangle, collision, emitter, vecf, geometry, calculate, transmission, scene, camel, light, texture, spatial, material, shader, matrix, bone, capsule, axes, motor, hinge, piston, mass, bitmap, speed, quaternion, impulse, rotate, cinematic, torque, body, velocity, arena, ball, delta, joints, rotation, friction]}
com.jme3.bounding.BoundingSphere#clone: {[sphere, radius, hallmarks, square, bounding, volume, transmission, collide, plane, shape, mass, vertices, collect, collidable, calculate, heightfield, emitter, collision, velocity, delta, vecf, triangle, geometry, torque, quaternion, bitmap, hinge, impulse, friction, piston, cinematic, axes, shader, spatial, motor, rotate, capsule, matrix, body, material, speed, bone, scene, rotation, joints, light, camel, ball, texture, arena]}
org.dyn4j.collision.narrowphase.CircleDetector#raycast: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.ode4j.ode.DTransmissionJoint#setRadius2: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.ode4j.ode.DTransmissionJoint#setRadius1: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.ode4j.ode.internal.joints.DxJointTransmission#setMode: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]}
com.jme3.light.DefaultLightFilter#filterLights: {[bounding, radius, sphere, volume, hallmarks, geometry, square, scene, light, camel, texture, material, transmission, spatial, shader, mass, vertices, delta, plane, velocity, emitter, collect, calculate, collide, friction, quaternion, torque, bone, impulse, shape, hinge, collidable, piston, bitmap, triangle, motor, heightfield, rotate, capsule, speed, cinematic, collision, body, matrix, axes, vecf, joints, rotation, ball, arena]}
org.ode4j.ode.internal.sCylinderTrimeshColliderData#_cldTestAxis: {[sphere, hallmarks, square, radius, bounding, volume, plane, transmission, collide, shape, vertices, collidable, heightfield, collision, vecf, emitter, triangle, collect, mass, calculate, velocity, bitmap, axes, shader, delta, geometry, cinematic, rotate, torque, quaternion, hinge, material, texture, light, spatial, piston, camel, arena, friction, impulse, bone, body, rotation, speed, matrix, capsule, motor, joints, scene, ball]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointSetTransmissionRadius1: {[radius, sphere, hallmarks, transmission, square, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, motor, friction, shape, spatial, plane, quaternion, bitmap, speed, emitter, vertices, shader, scene, geometry, piston, material, hinge, camel, cinematic, triangle, texture, capsule, rotate, vecf, collidable, axes, joints, heightfield, body, light, matrix, ball, collision, rotation, arena, bone]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointSetTransmissionRadius2: {[radius, sphere, hallmarks, transmission, square, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, motor, friction, shape, spatial, plane, quaternion, bitmap, speed, emitter, vertices, shader, scene, geometry, piston, material, hinge, camel, cinematic, triangle, texture, capsule, rotate, vecf, collidable, axes, joints, heightfield, body, light, matrix, ball, collision, rotation, arena, bone]}
com.jme3.scene.VertexBuffer#getElementComponent: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
com.jme3.math.Ring#setInnerRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
com.jme3.light.Light#intersectsSphere: {[sphere, hallmarks, radius, bounding, volume, square, transmission, plane, collide, shape, vertices, collect, collidable, heightfield, calculate, mass, collision, geometry, triangle, vecf, emitter, quaternion, delta, velocity, hinge, scene, piston, cinematic, bitmap, torque, light, camel, friction, texture, material, axes, rotation, matrix, impulse, speed, spatial, body, ball, capsule, shader, arena, rotate, motor, joints, bone]}
com.jme3.bounding.BoundingVolume#mergeLocal: {[bounding, volume, sphere, hallmarks, radius, square, plane, vertices, collide, geometry, collidable, collect, shape, transmission, heightfield, triangle, scene, collision, vecf, calculate, camel, emitter, material, texture, light, spatial, shader, matrix, mass, quaternion, hinge, piston, speed, motor, axes, delta, cinematic, bone, friction, velocity, arena, rotation, body, capsule, impulse, joints, rotate, ball, bitmap, torque]}
com.jme3.bounding.BoundingVolume#clone: {[bounding, volume, sphere, hallmarks, radius, square, plane, vertices, collide, geometry, collidable, collect, shape, transmission, heightfield, triangle, scene, collision, vecf, calculate, camel, emitter, material, texture, light, spatial, shader, matrix, mass, quaternion, hinge, piston, speed, motor, axes, delta, cinematic, bone, friction, velocity, arena, rotation, body, capsule, impulse, joints, rotate, ball, bitmap, torque]}
com.jme3.bounding.BoundingBox#merge: {[bounding, volume, sphere, hallmarks, radius, square, plane, vertices, collide, geometry, collidable, collect, shape, transmission, heightfield, triangle, scene, collision, vecf, calculate, camel, emitter, material, texture, light, spatial, shader, matrix, mass, quaternion, hinge, piston, speed, motor, axes, delta, cinematic, bone, friction, velocity, arena, rotation, body, capsule, impulse, joints, rotate, ball, bitmap, torque]}
org.ode4j.ode.internal.DxSphere#getRadius: {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, collide, shape, torque, plane, collect, calculate, impulse, friction, vertices, quaternion, motor, spatial, emitter, bitmap, geometry, hinge, piston, collidable, shader, heightfield, speed, cinematic, material, scene, camel, collision, capsule, texture, rotate, axes, body, light, joints, vecf, matrix, rotation, arena, ball, bone, triangle]}
org.ode4j.ode.DTransmissionJoint#getMode: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]}
org.dyn4j.dynamics.Body#toString: {[radius, transmission, mass, square, sphere, hallmarks, velocity, delta, impulse, torque, bounding, motor, volume, friction, speed, triangle, vecf, spatial, heightfield, collision, bitmap, collidable, calculate, rotate, joints, scene, cinematic, rotation, shader, axes, material, camel, texture, collect, geometry, arena, body, vertices, hinge, ball, quaternion, light, piston, bone, shape, plane, emitter, matrix, capsule, collide]}
com.jme3.collision.SweepSphere#collideWithSegment: {[square, hallmarks, sphere, radius, shape, volume, plane, collide, transmission, bounding, vertices, emitter, collision, collidable, vecf, heightfield, axes, triangle, mass, rotate, velocity, shader, collect, calculate, delta, rotation, material, bitmap, speed, texture, light, torque, motor, impulse, camel, spatial, joints, piston, scene, quaternion, hinge, bone, cinematic, friction, ball, body, geometry, arena, capsule, matrix]}
com.jme3.renderer.Camera#setFrustumPerspective: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.dyn4j.geometry.Slice#Slice(C): {[sphere, radius, hallmarks, square, bounding, volume, transmission, plane, shape, collide, vertices, mass, emitter, collidable, velocity, heightfield, delta, collision, collect, vecf, triangle, calculate, bitmap, geometry, torque, axes, cinematic, rotate, impulse, shader, motor, friction, quaternion, speed, hinge, spatial, arena, rotation, piston, material, matrix, texture, body, bone, light, camel, ball, joints, scene, capsule]}
com.jme3.light.SpotLight#setSpotOuterAngle: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
com.jme3.shadow.ShadowUtil#getGeometriesInLightRadius: {[bounding, geometry, volume, hallmarks, sphere, radius, scene, camel, material, texture, light, square, spatial, shader, transmission, vertices, mass, plane, emitter, delta, velocity, collide, bone, collect, calculate, shape, friction, collidable, triangle, quaternion, torque, impulse, hinge, bitmap, heightfield, piston, collision, rotate, vecf, motor, speed, cinematic, capsule, axes, body, matrix, joints, arena, rotation, ball]}
net.smert.jreactphysics3d.collision.shapes.ConeShape#computeLocalInertiaTensor: {[radius, square, sphere, transmission, hallmarks, mass, bounding, velocity, delta, volume, torque, impulse, motor, friction, bitmap, speed, spatial, calculate, cinematic, collect, shape, shader, rotate, collide, plane, axes, scene, material, geometry, texture, triangle, rotation, joints, camel, vertices, quaternion, vecf, emitter, light, heightfield, collision, capsule, arena, ball, body, piston, hinge, bone, collidable, matrix]}
org.dyn4j.geometry.Geometry#createHalfEllipseAtOrigin: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
org.dyn4j.collision.Collidable#getRotationDiscRadius: {[square, hallmarks, radius, rotate, velocity, rotation, sphere, mass, speed, delta, axes, motor, transmission, quaternion, volume, impulse, bounding, emitter, bone, torque, piston, hinge, vertices, shape, shader, arena, bitmap, plane, friction, collide, ball, material, geometry, texture, joints, scene, cinematic, collect, light, spatial, body, capsule, collidable, collision, camel, calculate, heightfield, matrix, triangle, vecf]}
com.jme3.bounding.BoundingSphere#recurseMini: {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, collide, shape, plane, torque, collect, impulse, calculate, vertices, bitmap, motor, friction, emitter, spatial, cinematic, shader, collidable, quaternion, geometry, heightfield, speed, material, collision, rotate, camel, axes, texture, hinge, scene, piston, vecf, light, triangle, joints, body, rotation, matrix, arena, capsule, bone, ball]}
com.jme3.environment.util.BoundingSphereDebug#getRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointGetTransmissionBacklash: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]}
com.jme3.shadow.PointLightShadowRenderer#updateShadowCams: {[radius, sphere, bounding, hallmarks, volume, transmission, square, geometry, mass, light, texture, velocity, delta, camel, material, shader, scene, spatial, torque, impulse, bone, friction, emitter, calculate, motor, collect, capsule, plane, collide, vertices, speed, bitmap, vecf, quaternion, shape, rotate, hinge, piston, cinematic, triangle, rotation, collision, axes, matrix, joints, body, collidable, heightfield, ball, arena]}
org.ode4j.ode.internal.joints.DxJointTransmission#getAxis2: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]}
org.ode4j.ode.internal.joints.DxJointTransmission#getAxis1: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]}
org.ode4j.ode.internal.joints.DxJointTransmission#getAxis: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]}
org.ode4j.ode.internal.DxSphere#computeAABB: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
net.smert.jreactphysics3d.collision.narrowphase.SphereVsSphereAlgorithm#SphereVsSphereAlgorithm(C): {[sphere, radius, hallmarks, square, bounding, volume, transmission, collide, plane, shape, vertices, mass, collidable, collect, heightfield, calculate, collision, emitter, vecf, velocity, triangle, delta, quaternion, geometry, torque, bitmap, hinge, piston, shader, friction, cinematic, spatial, impulse, axes, material, rotation, capsule, camel, texture, body, motor, light, rotate, ball, scene, matrix, arena, joints, speed, bone]}
org.dyn4j.geometry.Geometry#createHalfEllipse: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
com.jme3.math.Ring#Ring(C): {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
com.jme3.audio.openal.ALAudioRenderer#setSourceParams: {[mass, velocity, delta, radius, transmission, square, impulse, motor, hallmarks, speed, torque, sphere, rotate, friction, rotation, bounding, axes, volume, hinge, piston, bone, joints, vecf, triangle, quaternion, heightfield, collidable, collision, body, geometry, emitter, calculate, ball, bitmap, arena, plane, collide, cinematic, spatial, scene, capsule, light, vertices, shader, camel, shape, material, collect, matrix, texture]}
com.jme3.math.Ring#getOuterRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.ode4j.ode.internal.DxSphere#getPointDepth: {[sphere, radius, hallmarks, square, bounding, volume, transmission, collide, plane, shape, vertices, mass, collidable, collect, heightfield, calculate, collision, emitter, vecf, velocity, triangle, delta, quaternion, geometry, torque, bitmap, hinge, piston, shader, friction, cinematic, spatial, impulse, axes, material, rotation, capsule, camel, texture, body, motor, light, rotate, ball, scene, matrix, arena, joints, speed, bone]}
org.dyn4j.geometry.Ellipse#getRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
com.jme3.util.TangentBinormalGenerator#putValue: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
com.jme3.effect.influencers.DefaultParticleInfluencer#influenceParticle: {[square, hallmarks, velocity, radius, rotate, axes, speed, transmission, sphere, mass, delta, motor, rotation, emitter, shape, impulse, torque, piston, hinge, quaternion, volume, bone, joints, vertices, bounding, shader, collide, plane, friction, material, texture, collision, body, light, vecf, scene, heightfield, camel, collidable, triangle, bitmap, calculate, ball, spatial, matrix, capsule, cinematic, geometry, arena, collect]}
org.dyn4j.geometry.AbstractShape#toString: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.dyn4j.geometry.Circle#getFarthestPoint: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
net.smert.jreactphysics3d.collision.shapes.CapsuleShape#computeLocalInertiaTensor: {[radius, square, sphere, transmission, hallmarks, mass, bounding, velocity, delta, volume, torque, impulse, motor, friction, bitmap, speed, spatial, calculate, cinematic, collect, shape, shader, rotate, collide, plane, axes, scene, material, geometry, texture, triangle, rotation, joints, camel, vertices, quaternion, vecf, emitter, light, heightfield, collision, capsule, arena, ball, body, piston, hinge, bone, collidable, matrix]}
org.ode4j.ode.internal.CollideSpherePlane#dCollideSpherePlane: {[sphere, radius, hallmarks, square, bounding, volume, transmission, collide, plane, shape, vertices, collidable, heightfield, collision, collect, emitter, vecf, calculate, triangle, mass, velocity, delta, shader, quaternion, spatial, axes, bitmap, material, torque, hinge, piston, camel, capsule, texture, geometry, light, friction, cinematic, scene, rotate, impulse, bone, body, matrix, ball, rotation, joints, arena, motor, speed]}
com.jme3.math.Ring#setOuterRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
com.jme3.texture.image.DefaultImageRaster#getPixel: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
com.jme3.audio.LowPassFilter#setHighFreqVolume: {[volume, bounding, sphere, hallmarks, plane, collide, radius, square, vertices, collidable, shape, heightfield, collect, triangle, collision, emitter, vecf, geometry, calculate, transmission, scene, camel, light, texture, spatial, material, shader, matrix, bone, capsule, axes, motor, hinge, piston, mass, bitmap, speed, quaternion, impulse, rotate, cinematic, torque, body, velocity, arena, ball, delta, joints, rotation, friction]}
org.ode4j.ode.internal.joints.DxJointTransmission#getRatio: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]}
com.jme3.scene.VertexBuffer#createBuffer: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
org.dyn4j.geometry.Capsule#toString: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
com.jme3.bounding.BoundingSphere#intersects: {[radius, sphere, hallmarks, square, bounding, transmission, volume, mass, velocity, collide, plane, delta, shape, collect, vertices, calculate, torque, emitter, impulse, collidable, geometry, bitmap, heightfield, friction, collision, quaternion, motor, cinematic, vecf, triangle, hinge, spatial, piston, shader, axes, rotate, speed, material, body, texture, joints, camel, rotation, matrix, scene, capsule, arena, bone, light, ball]}
org.ode4j.ode.internal.gimpact.GimRadixSort#GIM_RADIX_SORT_RTOKENS: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.ode4j.ode.internal.DxRay#ray_sphere_helper: {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, collect, collide, velocity, calculate, delta, plane, shape, torque, quaternion, impulse, vertices, friction, collidable, spatial, heightfield, emitter, collision, bitmap, motor, piston, hinge, shader, geometry, material, camel, cinematic, scene, matrix, capsule, vecf, texture, arena, triangle, joints, rotation, speed, axes, ball, light, bone, body, rotate]}
net.smert.jreactphysics3d.collision.shapes.SphereShape#updateAABB: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
com.jme3.bounding.BoundingBox#BoundingBox(C): {[bounding, volume, sphere, hallmarks, radius, square, plane, geometry, vertices, collect, transmission, collide, collidable, scene, shape, triangle, camel, material, heightfield, calculate, collision, texture, light, vecf, spatial, emitter, shader, mass, quaternion, matrix, hinge, piston, cinematic, delta, speed, friction, motor, velocity, bitmap, rotation, axes, arena, capsule, body, torque, joints, ball, bone, rotate, impulse]}
com.jme3.bounding.BoundingVolume#intersectsBoundingBox: {[bounding, volume, sphere, hallmarks, radius, square, plane, geometry, vertices, collect, transmission, collide, collidable, scene, shape, triangle, camel, material, heightfield, calculate, collision, texture, light, vecf, spatial, emitter, shader, mass, quaternion, matrix, hinge, piston, cinematic, delta, speed, friction, motor, velocity, bitmap, rotation, axes, arena, capsule, body, torque, joints, ball, bone, rotate, impulse]}
org.ode4j.ode.internal.joints.DxJointTransmission#getAngle1: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]}
org.ode4j.ode.internal.joints.DxJointTransmission#getAngle2: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]}
com.jme3.scene.shape.Sphere#updateGeometry: {[bounding, radius, hallmarks, sphere, volume, geometry, square, transmission, scene, camel, material, mass, texture, light, delta, spatial, shader, velocity, vertices, torque, impulse, friction, plane, motor, quaternion, emitter, cinematic, collect, calculate, hinge, collide, bone, shape, speed, rotate, piston, capsule, collidable, vecf, collision, axes, rotation, body, heightfield, matrix, triangle, bitmap, arena, ball, joints]}
org.dyn4j.geometry.decompose.DoubleEdgeListFace#getEdgeCount: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
org.ode4j.ode.internal.joints.DxJointTransmission#getInfo2: {[transmission, mass, radius, torque, delta, friction, velocity, square, sphere, impulse, hallmarks, calculate, joints, ball, body, motor, arena, bounding, volume, speed, hinge, piston, shape, axes, collide, plane, collect, spatial, collision, rotate, bone, quaternion, collidable, bitmap, geometry, scene, camel, emitter, cinematic, vertices, material, shader, triangle, texture, capsule, vecf, matrix, light, rotation, heightfield]}
com.jme3.audio.Listener#getVolume: {[volume, bounding, sphere, hallmarks, plane, collide, radius, square, vertices, collidable, shape, heightfield, collect, triangle, collision, emitter, vecf, geometry, calculate, transmission, scene, camel, light, texture, spatial, material, shader, matrix, bone, capsule, axes, motor, hinge, piston, mass, bitmap, speed, quaternion, impulse, rotate, cinematic, torque, body, velocity, arena, ball, delta, joints, rotation, friction]}
org.ode4j.ode.internal.DxConvex#ClosestPointBetweenSegments: {[square, sphere, hallmarks, radius, bounding, transmission, volume, plane, shape, collide, collect, collidable, vertices, mass, calculate, collision, bitmap, vecf, cinematic, triangle, heightfield, delta, shader, velocity, axes, torque, friction, impulse, emitter, spatial, texture, light, joints, capsule, arena, motor, ball, material, matrix, rotate, camel, body, bone, scene, quaternion, speed, geometry, rotation, hinge, piston]}
com.jme3.collision.bih.BIHTree#getMinMax: {[bounding, volume, sphere, hallmarks, radius, square, plane, geometry, vertices, collect, transmission, collide, collidable, scene, shape, triangle, camel, material, heightfield, calculate, collision, texture, light, vecf, spatial, emitter, shader, mass, quaternion, matrix, hinge, piston, cinematic, delta, speed, friction, motor, velocity, bitmap, rotation, axes, arena, capsule, body, torque, joints, ball, bone, rotate, impulse]}
com.jme3.util.TangentBinormalGenerator#setToleranceAngle: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
com.jme3.material.logic.SinglePassAndImageBasedLightingLogic#updateLightListUniforms: {[geometry, bounding, light, texture, material, camel, scene, volume, shader, spatial, radius, sphere, hallmarks, transmission, square, mass, delta, bitmap, bone, vertices, velocity, emitter, friction, quaternion, plane, calculate, torque, collect, hinge, impulse, capsule, piston, collide, vecf, cinematic, motor, collidable, axes, shape, collision, rotation, triangle, speed, matrix, joints, body, arena, heightfield, rotate, ball]}
org.dyn4j.geometry.Polygon#Polygon(C): {[hallmarks, square, bounding, volume, radius, sphere, geometry, rotate, vertices, rotation, emitter, axes, camel, velocity, spatial, scene, delta, speed, mass, transmission, bone, quaternion, material, plane, motor, texture, light, shape, impulse, triangle, torque, collide, piston, vecf, arena, cinematic, shader, collidable, hinge, heightfield, collision, bitmap, friction, ball, capsule, collect, joints, body, matrix, calculate]}
com.jme3.opencl.Device#hasHalfFloat: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
com.jme3.light.PointLight#PointLight(C): {[radius, sphere, hallmarks, bounding, transmission, volume, square, mass, velocity, geometry, delta, light, texture, torque, shader, impulse, material, camel, friction, calculate, scene, collect, capsule, quaternion, motor, collide, bone, emitter, plane, vecf, spatial, piston, hinge, speed, triangle, bitmap, shape, vertices, collision, cinematic, body, axes, matrix, rotate, rotation, joints, arena, collidable, ball, heightfield]}
org.dyn4j.geometry.Slice#toString: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.dyn4j.geometry.Segment#getRadius: {[hallmarks, square, bounding, volume, radius, sphere, geometry, rotate, vertices, rotation, emitter, axes, camel, velocity, spatial, scene, delta, speed, mass, transmission, bone, quaternion, material, plane, motor, texture, light, shape, impulse, triangle, torque, collide, piston, vecf, arena, cinematic, shader, collidable, hinge, heightfield, collision, bitmap, friction, ball, capsule, collect, joints, body, matrix, calculate]}
org.dyn4j.geometry.Geometry#createPolygonalCircle: {[bounding, hallmarks, sphere, volume, radius, square, geometry, transmission, scene, vertices, camel, material, texture, spatial, plane, light, mass, emitter, shape, delta, collide, shader, triangle, collidable, velocity, vecf, cinematic, collision, collect, heightfield, torque, rotate, calculate, friction, impulse, bone, axes, quaternion, capsule, hinge, motor, bitmap, speed, rotation, arena, matrix, piston, body, ball, joints]}
org.ode4j.ode.internal.joints.DxJointTransmission#setBacklash: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]}
com.jme3.light.LightProbe#setBounds: {[sphere, bounding, hallmarks, radius, volume, square, transmission, plane, collide, shape, vertices, collidable, collect, heightfield, collision, calculate, triangle, geometry, emitter, vecf, mass, quaternion, scene, delta, velocity, hinge, light, piston, camel, texture, material, cinematic, spatial, matrix, friction, torque, axes, bitmap, speed, rotation, shader, capsule, body, impulse, bone, motor, rotate, ball, arena, joints]}
org.dyn4j.geometry.Geometry#getRotationRadius: {[hallmarks, square, bounding, radius, sphere, volume, rotate, geometry, vertices, rotation, emitter, axes, velocity, transmission, mass, delta, speed, camel, scene, plane, spatial, quaternion, bone, shape, motor, material, impulse, triangle, texture, light, collide, torque, vecf, cinematic, piston, collidable, arena, bitmap, collision, hinge, heightfield, capsule, friction, shader, ball, collect, joints, body, matrix, calculate]}
com.jme3.scene.shape.PQTorus#updateGeometry: {[bounding, radius, hallmarks, sphere, volume, geometry, square, transmission, scene, camel, material, mass, texture, light, delta, spatial, shader, velocity, vertices, torque, impulse, friction, plane, motor, quaternion, emitter, cinematic, collect, calculate, hinge, collide, bone, shape, speed, rotate, piston, capsule, collidable, vecf, collision, axes, rotation, body, heightfield, matrix, triangle, bitmap, arena, ball, joints]}
com.jme3.collision.bih.BIHTree#setMinMax: {[bounding, volume, sphere, hallmarks, radius, square, plane, geometry, vertices, collect, transmission, collide, collidable, scene, shape, triangle, camel, material, heightfield, calculate, collision, texture, light, vecf, spatial, emitter, shader, mass, quaternion, matrix, hinge, piston, cinematic, delta, speed, friction, motor, velocity, bitmap, rotation, axes, arena, capsule, body, torque, joints, ball, bone, rotate, impulse]}
org.dyn4j.dynamics.Body#createSweptAABB: {[radius, transmission, sphere, square, hallmarks, mass, velocity, bounding, delta, volume, torque, impulse, motor, friction, speed, spatial, triangle, calculate, vecf, bitmap, collect, cinematic, scene, collision, heightfield, quaternion, shader, material, joints, rotate, camel, collidable, geometry, texture, shape, collide, axes, rotation, arena, plane, light, piston, ball, body, hinge, vertices, matrix, emitter, capsule, bone]}
com.jme3.effect.shapes.EmitterSphereShape#getRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.dyn4j.dynamics.Body#Body(C): {[transmission, mass, delta, velocity, torque, radius, impulse, friction, square, motor, sphere, hallmarks, joints, speed, body, ball, calculate, arena, bounding, hinge, piston, volume, axes, triangle, spatial, rotate, vecf, shape, bitmap, heightfield, scene, bone, cinematic, camel, rotation, shader, material, collect, texture, geometry, quaternion, collidable, collide, vertices, light, collision, plane, capsule, emitter, matrix]}
org.dyn4j.geometry.HalfEllipse#createMass: {[mass, transmission, radius, delta, velocity, square, impulse, torque, motor, hallmarks, sphere, friction, speed, bounding, triangle, vecf, heightfield, collision, bitmap, collidable, volume, cinematic, rotate, joints, rotation, spatial, axes, hinge, arena, calculate, vertices, collide, scene, piston, plane, body, capsule, shader, emitter, texture, ball, geometry, material, camel, shape, collect, light, matrix, quaternion, bone]}
com.jme3.light.SpotLight#intersectsFrustum: {[radius, sphere, hallmarks, square, bounding, transmission, volume, mass, collide, plane, shape, collect, velocity, vertices, delta, calculate, collidable, emitter, heightfield, collision, torque, vecf, triangle, bitmap, impulse, quaternion, spatial, shader, friction, geometry, cinematic, motor, hinge, axes, material, piston, camel, texture, rotate, scene, speed, capsule, light, body, joints, bone, arena, matrix, ball, rotation]}
org.dyn4j.geometry.Slice#validate: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.ode4j.ode.internal.DxSphere#setRadius: {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, collide, shape, torque, plane, collect, calculate, impulse, friction, vertices, quaternion, motor, spatial, emitter, bitmap, geometry, hinge, piston, collidable, shader, heightfield, speed, cinematic, material, scene, camel, collision, capsule, texture, rotate, axes, body, light, joints, vecf, matrix, rotation, arena, ball, bone, triangle]}
org.ode4j.ode.internal.CollisionLibccd#ccdGeomToCyl: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
com.jme3.texture.image.DefaultImageRaster#setPixel: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
org.ode4j.ode.internal.joints.DxJointTransmission#setParam: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]}
org.dyn4j.geometry.Circle#validate: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.dyn4j.geometry.Capsule#getFarthestPoint: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
com.jme3.effect.shapes.EmitterSphereShape#setRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
net.smert.jreactphysics3d.collision.shapes.CapsuleShape#getLocalSupportPointWithMargin: {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, collide, shape, plane, torque, collect, vertices, impulse, calculate, bitmap, emitter, motor, friction, collidable, spatial, cinematic, shader, heightfield, geometry, quaternion, collision, speed, rotate, axes, material, vecf, texture, hinge, camel, piston, scene, triangle, light, rotation, body, joints, arena, matrix, ball, capsule, bone]}
com.jme3.audio.AudioNode#setVolume: {[volume, bounding, sphere, hallmarks, plane, collide, radius, square, vertices, collidable, shape, heightfield, collect, triangle, collision, emitter, vecf, geometry, calculate, transmission, scene, camel, light, texture, spatial, material, shader, matrix, bone, capsule, axes, motor, hinge, piston, mass, bitmap, speed, quaternion, impulse, rotate, cinematic, torque, body, velocity, arena, ball, delta, joints, rotation, friction]}
net.smert.jreactphysics3d.collision.shapes.SphereShape#getRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.dyn4j.geometry.Capsule#getRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
com.jme3.scene.shape.Cylinder#getRadius2: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.dyn4j.collision.narrowphase.CircleDetector#detect: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
com.jme3.scene.control.AreaUtils#calcScreenArea: {[radius, sphere, hallmarks, square, bounding, transmission, volume, mass, collide, plane, shape, velocity, collect, delta, calculate, vertices, torque, collidable, emitter, impulse, heightfield, friction, collision, geometry, quaternion, bitmap, motor, cinematic, vecf, triangle, spatial, hinge, piston, axes, shader, speed, rotate, matrix, joints, material, camel, texture, arena, ball, capsule, scene, body, rotation, bone, light]}
com.jme3.scene.shape.Cylinder#Cylinder(C): {[bounding, radius, hallmarks, sphere, volume, geometry, square, transmission, scene, camel, material, mass, texture, light, delta, spatial, shader, velocity, vertices, torque, impulse, friction, plane, motor, quaternion, emitter, cinematic, collect, calculate, hinge, collide, bone, shape, speed, rotate, piston, capsule, collidable, vecf, collision, axes, rotation, body, heightfield, matrix, triangle, bitmap, arena, ball, joints]}
net.smert.jreactphysics3d.collision.shapes.SphereShape#SphereShape(C): {[sphere, hallmarks, square, radius, volume, collide, shape, plane, bounding, collidable, vertices, heightfield, collision, transmission, vecf, triangle, emitter, collect, calculate, shader, mass, axes, material, bitmap, camel, texture, velocity, light, spatial, quaternion, delta, rotate, capsule, cinematic, ball, hinge, torque, scene, geometry, motor, piston, joints, bone, friction, speed, rotation, body, impulse, matrix, arena]}
com.jme3.texture.image.MipMapImageRaster#getPixel: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
com.jme3.light.AmbientLight#intersectsSphere: {[sphere, hallmarks, radius, bounding, volume, square, transmission, plane, collide, shape, vertices, collect, collidable, heightfield, calculate, mass, collision, geometry, triangle, vecf, emitter, quaternion, delta, velocity, hinge, scene, piston, cinematic, bitmap, torque, light, camel, friction, texture, material, axes, rotation, matrix, impulse, speed, spatial, body, ball, capsule, shader, arena, rotate, motor, joints, bone]}
com.jme3.scene.shape.Cylinder#getRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
com.jme3.effect.ParticleEmitter#updateParticleState: {[bounding, volume, sphere, hallmarks, radius, square, plane, geometry, vertices, collect, transmission, collide, collidable, scene, shape, triangle, camel, material, heightfield, calculate, collision, texture, light, vecf, spatial, emitter, shader, mass, quaternion, matrix, hinge, piston, cinematic, delta, speed, friction, motor, velocity, bitmap, rotation, axes, arena, capsule, body, torque, joints, ball, bone, rotate, impulse]}
com.jme3.light.Light#intersectsBox: {[bounding, volume, sphere, hallmarks, radius, square, plane, geometry, vertices, collect, transmission, collide, collidable, scene, shape, triangle, camel, material, heightfield, calculate, collision, texture, light, vecf, spatial, emitter, shader, mass, quaternion, matrix, hinge, piston, cinematic, delta, speed, friction, motor, velocity, bitmap, rotation, axes, arena, capsule, body, torque, joints, ball, bone, rotate, impulse]}
com.jme3.audio.openal.ALAudioRenderer#setListenerParams: {[mass, velocity, delta, radius, transmission, square, impulse, motor, hallmarks, speed, torque, sphere, rotate, friction, rotation, bounding, axes, volume, hinge, piston, bone, joints, vecf, triangle, quaternion, heightfield, collidable, collision, body, geometry, emitter, calculate, ball, bitmap, arena, plane, collide, cinematic, spatial, scene, capsule, light, vertices, shader, camel, shape, material, collect, matrix, texture]}
org.ode4j.ode.internal.DxMass#dMassSetCylinderTotal: {[radius, transmission, sphere, square, hallmarks, mass, velocity, bounding, delta, volume, torque, impulse, motor, friction, speed, spatial, triangle, calculate, vecf, bitmap, collect, cinematic, scene, collision, heightfield, quaternion, shader, material, joints, rotate, camel, collidable, geometry, texture, shape, collide, axes, rotation, arena, plane, light, piston, ball, body, hinge, vertices, matrix, emitter, capsule, bone]}
org.ode4j.ode.DCapsule#getRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.ode4j.ode.internal.DxCapsule#getRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
com.jme3.input.ChaseCamera#vRotateCamera: {[square, rotate, hallmarks, rotation, velocity, radius, speed, mass, axes, quaternion, motor, sphere, delta, impulse, transmission, emitter, bone, volume, bounding, torque, piston, hinge, vertices, shape, shader, arena, bitmap, friction, joints, ball, plane, material, geometry, texture, collide, scene, light, cinematic, calculate, collidable, capsule, collision, spatial, collect, body, camel, matrix, heightfield, vecf, triangle]}
org.dyn4j.geometry.Slice#getFarthestPoint: {[sphere, radius, hallmarks, square, bounding, volume, transmission, plane, shape, collide, vertices, mass, emitter, collidable, velocity, heightfield, delta, collision, collect, vecf, triangle, calculate, bitmap, geometry, torque, axes, cinematic, rotate, impulse, shader, motor, friction, quaternion, speed, hinge, spatial, arena, rotation, piston, material, matrix, texture, body, bone, light, camel, ball, joints, scene, capsule]}
org.dyn4j.geometry.Capsule#getCapRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.dyn4j.geometry.decompose.SweepLine#split: {[hallmarks, square, sphere, radius, bounding, volume, transmission, vertices, plane, shape, collide, emitter, mass, collidable, vecf, triangle, heightfield, collision, velocity, rotate, collect, axes, delta, geometry, bitmap, cinematic, rotation, calculate, torque, speed, impulse, shader, motor, arena, bone, friction, scene, body, quaternion, ball, capsule, camel, hinge, light, texture, matrix, joints, material, spatial, piston]}
com.jme3.bounding.BoundingSphere#contains: {[radius, sphere, square, hallmarks, transmission, bounding, volume, mass, velocity, delta, torque, impulse, collide, shape, plane, collect, motor, bitmap, calculate, friction, vertices, spatial, cinematic, shader, emitter, speed, quaternion, material, geometry, rotate, scene, texture, camel, axes, collidable, hinge, piston, light, heightfield, collision, rotation, joints, body, vecf, matrix, arena, ball, bone, capsule, triangle]}
com.jme3.shadow.ShadowUtil#computeBoundForPoints: {[bounding, volume, sphere, hallmarks, radius, square, plane, geometry, vertices, collect, transmission, collide, collidable, scene, shape, triangle, camel, material, heightfield, calculate, collision, texture, light, vecf, spatial, emitter, shader, mass, quaternion, matrix, hinge, piston, cinematic, delta, speed, friction, motor, velocity, bitmap, rotation, axes, arena, capsule, body, torque, joints, ball, bone, rotate, impulse]}
com.jme3.bounding.BoundingBox#intersectsBoundingBox: {[bounding, volume, sphere, hallmarks, radius, square, plane, geometry, vertices, collect, transmission, collide, collidable, scene, shape, triangle, camel, material, heightfield, calculate, collision, texture, light, vecf, spatial, emitter, shader, mass, quaternion, matrix, hinge, piston, cinematic, delta, speed, friction, motor, velocity, bitmap, rotation, axes, arena, capsule, body, torque, joints, ball, bone, rotate, impulse]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointSetTransmissionBacklash: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]}
com.jme3.light.PointLight#getRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.ode4j.ode.internal.DxSphere#dCreateSphere: {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, collide, shape, torque, plane, collect, calculate, impulse, friction, vertices, quaternion, motor, spatial, emitter, bitmap, geometry, hinge, piston, collidable, shader, heightfield, speed, cinematic, material, scene, camel, collision, capsule, texture, rotate, axes, body, light, joints, vecf, matrix, rotation, arena, ball, bone, triangle]}
org.ode4j.ode.internal.joints.DxJointTransmission#getBacklash: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]}
org.ode4j.ode.internal.DxMass#setCylinderTotal: {[radius, transmission, sphere, square, hallmarks, mass, velocity, bounding, delta, volume, torque, impulse, motor, friction, speed, spatial, triangle, calculate, vecf, bitmap, collect, cinematic, scene, collision, heightfield, quaternion, shader, material, joints, rotate, camel, collidable, geometry, texture, shape, collide, axes, rotation, arena, plane, light, piston, ball, body, hinge, vertices, matrix, emitter, capsule, bone]}
com.jme3.bounding.BoundingSphere#BoundingSphere(C): {[radius, sphere, hallmarks, square, transmission, bounding, volume, mass, velocity, delta, collide, plane, shape, collect, calculate, torque, vertices, impulse, quaternion, friction, emitter, geometry, collidable, motor, bitmap, heightfield, hinge, piston, spatial, collision, cinematic, speed, shader, vecf, capsule, axes, triangle, rotate, body, material, camel, scene, joints, light, rotation, texture, matrix, bone, ball, arena]}
org.ode4j.ode.DCylinder#setParams: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.ode4j.ode.DMass#setCylinderTotal: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.dyn4j.geometry.Circle#createAABB: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
org.ode4j.ode.internal.DxCylinder#dGeomCylinderSetParams: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
com.jme3.audio.openal.ALAudioRenderer#updateSourceParam: {[mass, velocity, delta, radius, transmission, square, impulse, motor, hallmarks, speed, torque, sphere, rotate, friction, rotation, bounding, axes, volume, hinge, piston, bone, joints, vecf, triangle, quaternion, heightfield, collidable, collision, body, geometry, emitter, calculate, ball, bitmap, arena, plane, collide, cinematic, spatial, scene, capsule, light, vertices, shader, camel, shape, material, collect, matrix, texture]}
org.ode4j.ode.internal.joints.DxJointTransmission#getContactPoint1: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]}
org.ode4j.ode.internal.joints.DxJointTransmission#getContactPoint2: {[transmission, radius, mass, sphere, square, hallmarks, delta, velocity, torque, bounding, friction, impulse, volume, motor, calculate, quaternion, spatial, bitmap, joints, ball, arena, cinematic, body, triangle, speed, scene, camel, vecf, shader, material, texture, heightfield, bone, shape, collect, rotation, light, emitter, collide, capsule, collision, matrix, plane, collidable, geometry, vertices, rotate, hinge, piston, axes]}
org.ode4j.ode.internal.DxMass#setSphereTotal: {[radius, sphere, transmission, square, hallmarks, mass, bounding, volume, velocity, delta, torque, impulse, motor, friction, calculate, collect, spatial, speed, bitmap, collide, shape, quaternion, cinematic, triangle, plane, shader, scene, vecf, geometry, material, camel, rotate, joints, texture, axes, emitter, vertices, collision, piston, arena, rotation, hinge, heightfield, light, ball, capsule, collidable, body, matrix, bone]}
net.smert.jreactphysics3d.collision.shapes.CapsuleShape#getRadius: {[radius, sphere, hallmarks, square, transmission, bounding, mass, volume, velocity, delta, torque, impulse, collide, collect, calculate, shape, motor, friction, plane, spatial, quaternion, bitmap, speed, emitter, vertices, piston, geometry, shader, hinge, scene, material, camel, cinematic, capsule, texture, triangle, rotate, vecf, collidable, body, axes, heightfield, joints, light, ball, matrix, arena, rotation, bone, collision]}
com.jme3.audio.openal.ALAudioRenderer#updateFilter: {[volume, bounding, sphere, hallmarks, plane, collide, radius, square, vertices, collidable, shape, heightfield, collect, triangle, collision, emitter, vecf, geometry, calculate, transmission, scene, camel, light, texture, spatial, material, shader, matrix, bone, capsule, axes, motor, hinge, piston, mass, bitmap, speed, quaternion, impulse, rotate, cinematic, torque, body, velocity, arena, ball, delta, joints, rotation, friction]}
com.jme3.light.DirectionalLight#intersectsBox: {[bounding, volume, sphere, hallmarks, radius, square, plane, geometry, vertices, collect, transmission, collide, collidable, scene, shape, triangle, camel, material, heightfield, calculate, collision, texture, light, vecf, spatial, emitter, shader, mass, quaternion, matrix, hinge, piston, cinematic, delta, speed, friction, motor, velocity, bitmap, rotation, axes, arena, capsule, body, torque, joints, ball, bone, rotate, impulse]}
org.dyn4j.dynamics.joint.FrictionJoint#solveVelocityConstraints: {[delta, mass, torque, impulse, velocity, friction, motor, transmission, joints, speed, body, hinge, ball, piston, arena, square, radius, axes, heightfield, calculate, triangle, vecf, rotate, hallmarks, sphere, rotation, collidable, bitmap, collide, cinematic, vertices, plane, collision, spatial, capsule, emitter, bounding, bone, scene, texture, shader, collect, quaternion, camel, light, material, volume, geometry, shape, matrix]},
org.dyn4j.dynamics.joint.MotorJoint#solveVelocityConstraints: {[delta, mass, torque, impulse, velocity, friction, motor, transmission, joints, speed, body, hinge, ball, piston, arena, square, radius, axes, heightfield, calculate, triangle, vecf, rotate, hallmarks, sphere, rotation, collidable, bitmap, collide, cinematic, vertices, plane, collision, spatial, capsule, emitter, bounding, bone, scene, texture, shader, collect, quaternion, camel, light, material, volume, geometry, shape, matrix]},
org.dyn4j.dynamics.joint.PinJoint#solveVelocityConstraints: {[delta, mass, torque, impulse, velocity, friction, motor, transmission, joints, speed, body, hinge, ball, piston, arena, square, radius, axes, calculate, heightfield, triangle, vecf, rotate, hallmarks, sphere, rotation, bitmap, collidable, collide, cinematic, vertices, plane, collision, spatial, capsule, bounding, bone, emitter, scene, texture, shader, quaternion, collect, camel, light, material, volume, geometry, shape, matrix]},
com.jme3.scene.Geometry#read: {[delta, torque, friction, impulse, mass, velocity, motor, transmission, joints, body, speed, geometry, ball, piston, arena, hinge, material, camel, heightfield, texture, light, scene, square, vecf, shader, radius, spatial, axes, collide, calculate, bounding, triangle, rotate, hallmarks, collidable, collision, bone, sphere, rotation, plane, cinematic, volume, capsule, collect, shape, emitter, vertices, bitmap, quaternion, matrix]},
org.ode4j.ode.internal.Matrix#dRemoveRowCol: {[friction, torque, body, joints, ball, delta, impulse, mass, arena, motor, velocity, transmission, hinge, piston, speed, calculate, axes, heightfield, triangle, vecf, square, vertices, radius, emitter, plane, collide, rotate, bone, collidable, spatial, sphere, bitmap, cinematic, collect, scene, hallmarks, collision, capsule, rotation, camel, texture, shape, quaternion, bounding, geometry, volume, light, matrix, material, shader]},
net.smert.jreactphysics3d.engine.Impulse#Impulse(C): {[body, friction, ball, joints, torque, arena, impulse, hinge, piston, delta, motor, velocity, mass, speed, transmission, calculate, axes, heightfield, bone, vecf, triangle, vertices, rotate, collide, plane, collect, emitter, square, volume, bounding, shape, rotation, hallmarks, collidable, shader, spatial, capsule, sphere, collision, cinematic, quaternion, material, scene, geometry, radius, bitmap, camel, light, matrix, texture]},
org.dyn4j.dynamics.contact.SolvedContactPoint#toString: {[body, friction, ball, joints, torque, arena, impulse, hinge, piston, delta, motor, velocity, mass, speed, transmission, calculate, axes, heightfield, bone, vecf, triangle, vertices, rotate, collide, plane, collect, emitter, square, volume, bounding, shape, rotation, hallmarks, collidable, shader, spatial, capsule, sphere, collision, cinematic, quaternion, material, scene, geometry, radius, bitmap, camel, light, matrix, texture]},
org.dyn4j.dynamics.joint.WeldJoint#solveVelocityConstraints: {[torque, delta, impulse, friction, mass, velocity, motor, joints, transmission, body, speed, ball, hinge, arena, piston, calculate, heightfield, triangle, vecf, axes, square, radius, vertices, rotate, collidable, plane, collide, collision, rotation, emitter, bone, sphere, hallmarks, spatial, bitmap, collect, scene, cinematic, quaternion, capsule, shape, texture, camel, material, light, shader, bounding, volume, geometry, matrix]},
org.ode4j.ode.DBody#getNumJoints: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]},
org.ode4j.ode.internal.processmem.DxSingleIslandCallContext#GetSelectedIslandJointsA: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]},
org.dyn4j.dynamics.contact.SolvedContactPoint#SolvedContactPoint(C): {[body, friction, ball, joints, torque, arena, impulse, hinge, piston, delta, motor, velocity, mass, speed, transmission, calculate, axes, heightfield, bone, vecf, triangle, vertices, rotate, collide, plane, collect, emitter, square, volume, bounding, shape, rotation, hallmarks, collidable, shader, spatial, capsule, sphere, collision, cinematic, quaternion, material, scene, geometry, radius, bitmap, camel, light, matrix, texture]},
org.dyn4j.dynamics.World#isEmpty: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]},
org.ode4j.math.DVector3C#lengthSquared: {[body, friction, ball, joints, torque, arena, impulse, hinge, piston, delta, motor, velocity, mass, speed, transmission, calculate, axes, heightfield, bone, vecf, triangle, vertices, rotate, collide, plane, emitter, collect, square, volume, shape, bounding, hallmarks, rotation, collidable, shader, spatial, capsule, collision, sphere, material, cinematic, scene, geometry, quaternion, radius, bitmap, camel, matrix, texture, light]},
org.ode4j.ode.internal.processmem.DxSingleIslandCallContext#GetSelectedIslandJointsP: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]},
org.ode4j.ode.internal.joints.DxJointAMotor#dJointSetAMotorAxis: {[body, ball, joints, friction, torque, arena, piston, hinge, impulse, delta, motor, calculate, velocity, speed, mass, transmission, axes, bone, rotate, shape, heightfield, collect, vertices, volume, vecf, collision, bounding, triangle, hallmarks, collide, plane, sphere, square, emitter, rotation, shader, radius, quaternion, material, spatial, matrix, capsule, camel, scene, collidable, bitmap, geometry, texture, cinematic, light]},
org.dyn4j.dynamics.World#containsJoint: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]},
net.smert.jreactphysics3d.constraint.SliderJoint#setMaxMotorForce: {[body, ball, joints, friction, torque, arena, piston, hinge, impulse, delta, motor, calculate, velocity, speed, mass, transmission, axes, bone, rotate, shape, heightfield, collect, vertices, volume, vecf, collision, bounding, triangle, hallmarks, collide, plane, sphere, square, emitter, rotation, shader, radius, quaternion, material, spatial, matrix, capsule, camel, scene, collidable, bitmap, geometry, texture, cinematic, light]},
com.jme3.scene.Node#updateWorldBound: {[body, friction, ball, joints, torque, arena, impulse, hinge, piston, delta, motor, velocity, mass, speed, transmission, calculate, axes, heightfield, bone, vecf, triangle, vertices, rotate, collide, plane, collect, emitter, square, volume, bounding, shape, rotation, hallmarks, collidable, shader, spatial, capsule, sphere, collision, cinematic, quaternion, material, scene, geometry, radius, bitmap, camel, light, matrix, texture]},
org.dyn4j.dynamics.joint.RevoluteJoint#setMotorSpeed: {[body, joints, ball, friction, torque, piston, hinge, arena, impulse, delta, motor, speed, velocity, mass, transmission, calculate, axes, bone, rotate, collect, heightfield, rotation, vecf, triangle, vertices, quaternion, volume, shape, bounding, collide, plane, square, collision, sphere, hallmarks, matrix, shader, collidable, emitter, scene, radius, cinematic, camel, material, bitmap, spatial, geometry, capsule, light, texture]},
com.jme3.scene.shape.Quad#Quad(C): {[torque, delta, impulse, mass, friction, velocity, motor, transmission, joints, body, speed, ball, hinge, piston, arena, heightfield, triangle, vecf, calculate, axes, square, radius, collidable, vertices, rotate, collide, plane, collision, rotation, emitter, sphere, hallmarks, bone, spatial, bitmap, cinematic, collect, scene, capsule, quaternion, shape, texture, camel, bounding, geometry, shader, material, light, volume, matrix]},
org.dyn4j.dynamics.joint.DistanceJoint#initializeConstraints: {[delta, torque, friction, impulse, mass, velocity, motor, transmission, joints, body, speed, geometry, ball, piston, arena, hinge, material, camel, heightfield, texture, light, scene, square, vecf, shader, radius, spatial, axes, collide, calculate, bounding, triangle, rotate, hallmarks, collidable, collision, bone, sphere, rotation, plane, cinematic, volume, capsule, collect, shape, emitter, vertices, bitmap, quaternion, matrix]},
org.ode4j.ode.internal.joints.DxJoint#destroy: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]},
org.dyn4j.dynamics.contact.WarmStartingContactManager#updateAndNotify: {[ball, body, joints, friction, torque, arena, piston, hinge, calculate, transmission, impulse, delta, motor, mass, velocity, speed, axes, shape, collision, square, collidable, rotate, bone, plane, sphere, radius, collide, hallmarks, bitmap, cinematic, vertices, bounding, vecf, triangle, capsule, volume, light, geometry, spatial, camel, shader, heightfield, texture, emitter, quaternion, matrix, rotation, scene, material, collect]},
org.dyn4j.dynamics.Island#clear: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]},
org.dyn4j.dynamics.joint.RopeJoint#solveVelocityConstraints: {[torque, delta, impulse, friction, mass, velocity, motor, joints, transmission, body, speed, ball, hinge, arena, piston, calculate, heightfield, triangle, vecf, axes, square, radius, vertices, rotate, collidable, plane, collide, collision, rotation, emitter, bone, sphere, hallmarks, spatial, bitmap, collect, scene, cinematic, quaternion, capsule, shape, texture, camel, material, light, shader, bounding, volume, geometry, matrix]},
org.ode4j.ode.internal.processmem.DxStepperProcessingCallContext#m_islandJointsCount: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]},
org.ode4j.ode.internal.DxBody#dBodyGetMass: {[friction, torque, body, joints, ball, impulse, delta, arena, mass, motor, transmission, velocity, hinge, piston, calculate, speed, axes, triangle, heightfield, vecf, square, vertices, radius, emitter, rotate, bone, plane, collide, spatial, sphere, collidable, scene, bitmap, cinematic, collect, hallmarks, shape, capsule, camel, rotation, quaternion, collision, texture, bounding, matrix, geometry, volume, light, shader, material]},
org.ode4j.ode.internal.processmem.DxWorldProcessIslandsInfo#GetJointsArrayP: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]},
org.ode4j.ode.ragdoll.DRagdollConfig#getJoints: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]},
org.ode4j.ode.internal.processmem.DxSingleIslandCallContext#GetSelectedIslandJointsEndP: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]},
org.dyn4j.dynamics.joint.WheelJoint#getAngularSpeed: {[body, friction, torque, joints, ball, impulse, piston, hinge, delta, motor, arena, velocity, speed, mass, transmission, calculate, axes, bone, rotate, heightfield, triangle, vecf, collect, rotation, square, vertices, quaternion, plane, collide, shape, radius, volume, bounding, collidable, matrix, scene, spatial, camel, cinematic, capsule, collision, shader, emitter, bitmap, geometry, texture, sphere, hallmarks, light, material]},
org.ode4j.ode.internal.joints.DxJointPU#dJointSetPUAnchorDelta: {[body, ball, joints, friction, arena, torque, piston, hinge, impulse, delta, calculate, motor, transmission, velocity, mass, speed, axes, bone, shape, collision, heightfield, rotate, vertices, collect, vecf, triangle, emitter, volume, hallmarks, square, bounding, shader, collide, material, plane, collidable, sphere, geometry, texture, quaternion, radius, light, bitmap, capsule, matrix, spatial, rotation, scene, cinematic, camel]},
org.dyn4j.dynamics.Body#updateMass: {[friction, torque, body, joints, ball, impulse, delta, arena, mass, motor, transmission, velocity, hinge, piston, calculate, speed, axes, triangle, heightfield, vecf, square, vertices, radius, emitter, rotate, bone, plane, collide, spatial, sphere, collidable, scene, bitmap, cinematic, collect, hallmarks, shape, capsule, camel, rotation, quaternion, collision, texture, bounding, matrix, geometry, volume, light, shader, material]},
org.ode4j.ode.internal.ragdoll.DxRagdoll#adjustMass: {[friction, torque, body, joints, ball, impulse, delta, arena, mass, motor, velocity, transmission, hinge, piston, speed, calculate, axes, triangle, vecf, heightfield, square, vertices, radius, bone, rotate, plane, collide, emitter, sphere, collidable, spatial, collect, rotation, hallmarks, shape, scene, shader, geometry, camel, bitmap, cinematic, collision, bounding, matrix, light, capsule, volume, material, texture, quaternion]},
net.smert.jreactphysics3d.constraint.HingeJoint#resetLimits: {[body, friction, ball, joints, torque, arena, impulse, hinge, piston, delta, motor, velocity, mass, speed, transmission, calculate, axes, heightfield, bone, vecf, triangle, vertices, rotate, collide, plane, collect, emitter, square, volume, bounding, shape, rotation, hallmarks, collidable, shader, spatial, capsule, sphere, collision, cinematic, quaternion, material, scene, geometry, radius, bitmap, camel, light, matrix, texture]},
net.smert.jreactphysics3d.constraint.HingeJoint#setMaxMotorTorque: {[body, ball, friction, joints, torque, arena, piston, hinge, impulse, delta, motor, velocity, mass, speed, transmission, calculate, axes, bone, rotate, heightfield, vecf, triangle, collect, vertices, collide, volume, plane, shape, square, bounding, emitter, rotation, hallmarks, collision, sphere, spatial, quaternion, capsule, shader, scene, collidable, matrix, camel, cinematic, material, geometry, bitmap, light, radius, texture]},
org.ode4j.ode.internal.joints.DxJointConstrainedBall#DxJointConstrainedBall(C): {[body, ball, joints, friction, arena, torque, piston, hinge, impulse, delta, motor, calculate, velocity, speed, mass, transmission, axes, bone, rotate, shape, heightfield, collect, vertices, collision, volume, vecf, bounding, triangle, hallmarks, collide, plane, emitter, square, sphere, shader, rotation, radius, material, quaternion, collidable, spatial, camel, matrix, scene, capsule, bitmap, geometry, texture, cinematic, light]},
net.smert.jreactphysics3d.engine.ConstraintSolver#solvePositionConstraints: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]},
org.ode4j.ode.internal.joints.DxJointAMotor#computeGlobalAxes: {[body, ball, joints, friction, arena, torque, hinge, piston, impulse, calculate, delta, motor, velocity, speed, mass, transmission, axes, bone, shape, rotate, collision, square, collidable, rotation, quaternion, matrix, vertices, bounding, spatial, heightfield, camel, plane, volume, collect, scene, collide, light, vecf, hallmarks, triangle, texture, shader, radius, material, sphere, cinematic, emitter, capsule, bitmap, geometry]},
org.dyn4j.dynamics.joint.FrictionJoint#initializeConstraints: {[torque, delta, impulse, mass, friction, velocity, motor, transmission, joints, body, speed, ball, hinge, piston, arena, heightfield, triangle, vecf, calculate, axes, square, radius, collidable, vertices, rotate, collide, plane, collision, rotation, emitter, sphere, hallmarks, bone, spatial, bitmap, cinematic, collect, scene, capsule, quaternion, shape, texture, camel, bounding, geometry, shader, material, light, volume, matrix]},
net.smert.jreactphysics3d.constraint.SliderJoint#setMotorSpeed: {[body, joints, ball, friction, torque, piston, hinge, arena, impulse, delta, motor, speed, velocity, mass, transmission, calculate, axes, bone, rotate, collect, heightfield, rotation, vecf, triangle, vertices, quaternion, volume, shape, bounding, collide, plane, square, collision, sphere, hallmarks, matrix, shader, collidable, emitter, scene, radius, cinematic, camel, material, bitmap, spatial, geometry, capsule, light, texture]},
org.dyn4j.dynamics.World#getJoints: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]},
org.ode4j.ode.internal.joints.DxJointLMotor#dJointSetLMotorAxis: {[body, ball, joints, friction, torque, arena, piston, hinge, impulse, delta, motor, calculate, velocity, speed, mass, transmission, axes, bone, rotate, shape, heightfield, collect, vertices, volume, vecf, collision, bounding, triangle, hallmarks, collide, plane, sphere, square, emitter, rotation, shader, radius, quaternion, material, spatial, matrix, capsule, camel, scene, collidable, bitmap, geometry, texture, cinematic, light]},
org.ode4j.ode.internal.dxStepperStage0JointsCallContext#dxStepperStage0JointsCallContext(C): {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]},
org.ode4j.ode.internal.joints.DxJointAMotor#dJointGetAMotorAngleRate: {[body, ball, joints, friction, torque, arena, piston, hinge, impulse, delta, motor, calculate, velocity, speed, mass, transmission, axes, bone, rotate, shape, heightfield, collect, vertices, volume, vecf, collision, bounding, triangle, hallmarks, collide, plane, sphere, square, emitter, rotation, shader, radius, quaternion, material, spatial, matrix, capsule, camel, scene, collidable, bitmap, geometry, texture, cinematic, light]},
org.ode4j.ode.internal.DxQuickStep#dxQuickStepIsland_Stage3: {[torque, friction, delta, impulse, mass, velocity, joints, motor, body, transmission, ball, arena, hinge, speed, piston, calculate, axes, triangle, vecf, heightfield, square, radius, vertices, rotate, plane, collide, collidable, bone, sphere, emitter, spatial, rotation, hallmarks, collision, scene, collect, bitmap, cinematic, camel, texture, capsule, bounding, quaternion, material, light, geometry, shader, volume, matrix, shape]},
org.ode4j.ode.internal.DxQuickStep#dxQuickStepIsland_Stage1: {[joints, body, friction, arena, ball, torque, impulse, hinge, piston, calculate, delta, motor, mass, velocity, transmission, speed, axes, matrix, rotate, bone, square, shape, spatial, vertices, rotation, scene, collect, triangle, collision, vecf, texture, camel, quaternion, emitter, heightfield, geometry, light, material, collidable, radius, bitmap, shader, cinematic, bounding, plane, volume, capsule, collide, sphere, hallmarks]},
org.ode4j.ode.internal.joints.DxJointGroup#exportJoints: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]},
org.ode4j.ode.internal.processmem.DxStepperProcessingCallContext#GetSelectedIslandJointsEnd: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]},
net.smert.jreactphysics3d.engine.ContactSolver#applySplitImpulse: {[torque, delta, impulse, friction, mass, velocity, motor, joints, transmission, body, speed, ball, hinge, arena, piston, calculate, heightfield, triangle, vecf, axes, square, radius, vertices, rotate, collidable, plane, collide, collision, rotation, emitter, bone, sphere, hallmarks, spatial, bitmap, collect, scene, cinematic, quaternion, capsule, shape, texture, camel, material, light, shader, bounding, volume, geometry, matrix]},
org.dyn4j.dynamics.contact.TimeOfImpactSolver#solve: {[torque, friction, delta, impulse, motor, mass, velocity, joints, body, ball, speed, hinge, transmission, piston, arena, axes, calculate, heightfield, rotate, square, triangle, vecf, radius, rotation, collide, vertices, plane, bone, collidable, collision, bitmap, quaternion, hallmarks, emitter, cinematic, sphere, collect, spatial, capsule, scene, texture, camel, geometry, light, shader, volume, material, bounding, matrix, shape]},
net.smert.jreactphysics3d.engine.ContactManifold#addContactPoint: {[ball, body, joints, friction, torque, arena, piston, hinge, calculate, transmission, impulse, delta, motor, mass, velocity, speed, axes, shape, collision, square, collidable, rotate, bone, plane, sphere, radius, collide, hallmarks, bitmap, cinematic, vertices, bounding, vecf, triangle, capsule, volume, light, geometry, spatial, camel, shader, heightfield, texture, emitter, quaternion, matrix, rotation, scene, material, collect]},
net.smert.jreactphysics3d.engine.ContactSolver#applyImpulse: {[torque, delta, impulse, friction, mass, velocity, motor, joints, transmission, body, speed, ball, hinge, arena, piston, calculate, heightfield, triangle, vecf, axes, square, radius, vertices, rotate, collidable, plane, collide, collision, rotation, emitter, bone, sphere, hallmarks, spatial, bitmap, collect, scene, cinematic, quaternion, capsule, shape, texture, camel, material, light, shader, bounding, volume, geometry, matrix]},
org.dyn4j.dynamics.joint.PulleyJoint#solveVelocityConstraints: {[torque, delta, impulse, friction, mass, velocity, motor, joints, transmission, body, speed, ball, hinge, arena, piston, calculate, heightfield, triangle, vecf, axes, square, radius, vertices, rotate, collidable, plane, collide, collision, rotation, emitter, bone, sphere, hallmarks, spatial, bitmap, collect, scene, cinematic, quaternion, capsule, shape, texture, camel, material, light, shader, bounding, volume, geometry, matrix]}
org.dyn4j.dynamics.Body#applyForce: {[friction, torque, body, joints, ball, delta, impulse, mass, arena, motor, velocity, transmission, hinge, piston, speed, calculate, axes, heightfield, triangle, vecf, square, vertices, radius, emitter, plane, collide, rotate, bone, collidable, spatial, sphere, bitmap, cinematic, collect, scene, hallmarks, collision, capsule, rotation, camel, texture, shape, quaternion, bounding, geometry, volume, light, matrix, material, shader]}
org.ode4j.ode.internal.joints.DxJointPlane2D#getInfo2: {[body, ball, joints, friction, torque, arena, piston, hinge, impulse, delta, motor, calculate, velocity, speed, mass, transmission, axes, bone, rotate, shape, heightfield, collect, vertices, volume, vecf, collision, bounding, triangle, hallmarks, collide, plane, sphere, square, emitter, rotation, shader, radius, quaternion, material, spatial, matrix, capsule, camel, scene, collidable, bitmap, geometry, texture, cinematic, light]}
net.smert.jreactphysics3d.engine.ContactSolver#ContactSolver(C): {[torque, friction, joints, impulse, body, delta, ball, motor, velocity, mass, hinge, arena, piston, speed, transmission, calculate, axes, heightfield, triangle, vecf, rotate, vertices, bone, square, collide, plane, collidable, rotation, collect, radius, emitter, quaternion, collision, spatial, volume, scene, bitmap, cinematic, capsule, bounding, sphere, hallmarks, camel, geometry, texture, matrix, light, shader, shape, material]}
org.ode4j.ode.internal.DxQuickStep#dxQuickStepIsland_Stage0_Joints: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]}
net.smert.jreactphysics3d.engine.Impulse#getLinearImpulseBody2: {[body, friction, ball, joints, torque, arena, impulse, hinge, piston, delta, motor, velocity, mass, speed, transmission, calculate, axes, heightfield, bone, vecf, triangle, vertices, rotate, collide, plane, collect, emitter, square, volume, bounding, shape, rotation, hallmarks, collidable, shader, spatial, capsule, sphere, collision, cinematic, quaternion, material, scene, geometry, radius, bitmap, camel, light, matrix, texture]}
net.smert.jreactphysics3d.engine.Impulse#getLinearImpulseBody1: {[body, friction, ball, joints, torque, arena, impulse, hinge, piston, delta, motor, velocity, mass, speed, transmission, calculate, axes, heightfield, bone, vecf, triangle, vertices, rotate, collide, plane, collect, emitter, square, volume, bounding, shape, rotation, hallmarks, collidable, shader, spatial, capsule, sphere, collision, cinematic, quaternion, material, scene, geometry, radius, bitmap, camel, light, matrix, texture]}
org.ode4j.ode.internal.DxBody#dBodySetKinematic: {[friction, torque, body, joints, ball, impulse, delta, arena, mass, motor, transmission, velocity, hinge, piston, calculate, speed, axes, triangle, heightfield, vecf, square, vertices, radius, emitter, rotate, bone, plane, collide, spatial, sphere, collidable, scene, bitmap, cinematic, collect, hallmarks, shape, capsule, camel, rotation, quaternion, collision, texture, bounding, matrix, geometry, volume, light, shader, material]}
org.ode4j.ode.internal.DxBody#dBodyIsKinematic: {[friction, torque, body, joints, ball, impulse, delta, arena, mass, motor, transmission, velocity, hinge, piston, calculate, speed, axes, triangle, heightfield, vecf, square, vertices, radius, emitter, rotate, bone, plane, collide, spatial, sphere, collidable, scene, bitmap, cinematic, collect, hallmarks, shape, capsule, camel, rotation, quaternion, collision, texture, bounding, matrix, geometry, volume, light, shader, material]}
org.ode4j.ode.internal.DxBody#getMass: {[friction, torque, body, joints, ball, impulse, delta, arena, mass, motor, transmission, velocity, hinge, piston, calculate, speed, axes, triangle, heightfield, vecf, square, vertices, radius, emitter, rotate, bone, plane, collide, spatial, sphere, collidable, scene, bitmap, cinematic, collect, hallmarks, shape, capsule, camel, rotation, quaternion, collision, texture, bounding, matrix, geometry, volume, light, shader, material]}
net.smert.jreactphysics3d.engine.DynamicsWorld#DynamicsWorld(C): {[body, friction, joints, ball, torque, arena, impulse, hinge, piston, delta, motor, velocity, mass, speed, transmission, calculate, axes, bone, rotate, heightfield, triangle, vecf, square, vertices, collect, shape, rotation, plane, collide, volume, radius, collision, quaternion, bounding, spatial, scene, emitter, camel, collidable, shader, matrix, cinematic, capsule, texture, sphere, hallmarks, bitmap, light, geometry, material]}
org.ode4j.ode.internal.joints.DxJointAMotor#dJointGetAMotorAxis: {[body, ball, joints, friction, arena, torque, hinge, piston, impulse, calculate, delta, motor, velocity, speed, mass, transmission, axes, bone, shape, rotate, collision, square, collidable, rotation, quaternion, matrix, vertices, bounding, spatial, heightfield, camel, plane, volume, collect, scene, collide, light, vecf, hallmarks, triangle, texture, shader, radius, material, sphere, cinematic, emitter, capsule, bitmap, geometry]}
org.dyn4j.dynamics.joint.RopeJoint#initializeConstraints: {[torque, delta, impulse, mass, friction, velocity, motor, transmission, joints, body, speed, ball, hinge, piston, arena, heightfield, triangle, vecf, calculate, axes, square, radius, collidable, vertices, rotate, collide, plane, collision, rotation, emitter, sphere, hallmarks, bone, spatial, bitmap, cinematic, collect, scene, capsule, quaternion, shape, texture, camel, bounding, geometry, shader, material, light, volume, matrix]}
org.dyn4j.dynamics.joint.WheelJoint#WheelJoint(C): {[torque, delta, impulse, friction, mass, velocity, motor, joints, body, speed, transmission, hinge, ball, piston, arena, heightfield, axes, triangle, vecf, calculate, rotate, square, collide, collidable, plane, vertices, radius, rotation, collision, bone, emitter, collect, bitmap, spatial, quaternion, hallmarks, cinematic, scene, sphere, capsule, shape, texture, volume, camel, light, shader, material, geometry, matrix, bounding]}
net.smert.jreactphysics3d.engine.Island#addJoint: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]}
org.dyn4j.dynamics.Body#getJoints: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]}
org.ode4j.ode.internal.DxQuickStep#dxQuickStepIsland: {[joints, body, friction, arena, ball, torque, impulse, hinge, piston, calculate, delta, motor, mass, velocity, transmission, speed, axes, matrix, rotate, bone, square, shape, spatial, vertices, rotation, scene, collect, triangle, collision, vecf, texture, camel, quaternion, emitter, heightfield, geometry, light, material, collidable, radius, bitmap, shader, cinematic, bounding, plane, volume, capsule, collide, sphere, hallmarks]}
org.dyn4j.dynamics.joint.PrismaticJoint#getJointSpeed: {[body, friction, torque, joints, ball, impulse, piston, hinge, delta, motor, arena, velocity, speed, mass, transmission, calculate, axes, bone, rotate, heightfield, triangle, vecf, collect, rotation, square, vertices, quaternion, plane, collide, shape, radius, volume, bounding, collidable, matrix, scene, spatial, camel, cinematic, capsule, collision, shader, emitter, bitmap, geometry, texture, sphere, hallmarks, light, material]}
net.smert.jreactphysics3d.body.RigidBody#removeJointFromJointsList: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]}
org.ode4j.ode.internal.DxBody#dBodySetDynamic: {[friction, torque, body, joints, ball, impulse, delta, arena, mass, motor, transmission, velocity, hinge, piston, calculate, speed, axes, triangle, heightfield, vecf, square, vertices, radius, emitter, rotate, bone, plane, collide, spatial, sphere, collidable, scene, bitmap, cinematic, collect, hallmarks, shape, capsule, camel, rotation, quaternion, collision, texture, bounding, matrix, geometry, volume, light, shader, material]}
org.ode4j.ode.internal.joints.DxJointAMotor#dJointAddAMotorTorques: {[body, joints, ball, friction, torque, piston, hinge, arena, impulse, delta, motor, velocity, speed, mass, transmission, calculate, axes, rotate, bone, shape, rotation, square, heightfield, collect, quaternion, vecf, collision, triangle, volume, vertices, bounding, collide, plane, capsule, bitmap, scene, sphere, cinematic, light, spatial, camel, hallmarks, matrix, texture, emitter, geometry, radius, collidable, shader, material]}
org.dyn4j.dynamics.joint.DistanceJoint#solvePositionConstraints: {[torque, friction, delta, impulse, motor, mass, velocity, joints, body, ball, speed, hinge, transmission, piston, arena, axes, calculate, heightfield, rotate, square, triangle, vecf, radius, rotation, collide, vertices, plane, bone, collidable, collision, bitmap, quaternion, hallmarks, emitter, cinematic, sphere, collect, spatial, capsule, scene, texture, camel, geometry, light, shader, volume, material, bounding, matrix, shape]}
net.smert.jreactphysics3d.constraint.BallAndSocketJoint#warmstart: {[torque, friction, delta, impulse, mass, joints, motor, velocity, body, ball, transmission, arena, hinge, piston, speed, calculate, heightfield, axes, triangle, vecf, square, vertices, radius, collide, plane, rotate, collidable, emitter, collision, bone, spatial, rotation, sphere, bitmap, cinematic, hallmarks, collect, scene, capsule, camel, texture, volume, matrix, geometry, shape, quaternion, light, bounding, material, shader]}
org.dyn4j.dynamics.World#getJoint: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]}
org.dyn4j.dynamics.joint.PrismaticJoint#setLowerLimit: {[body, friction, ball, joints, torque, arena, impulse, hinge, piston, delta, motor, velocity, mass, speed, transmission, calculate, axes, heightfield, bone, vecf, triangle, vertices, rotate, collide, plane, collect, emitter, square, volume, bounding, shape, rotation, hallmarks, collidable, shader, spatial, capsule, sphere, collision, cinematic, quaternion, material, scene, geometry, radius, bitmap, camel, light, matrix, texture]}
net.smert.jreactphysics3d.engine.Island#getNumJoints: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]}
org.dyn4j.dynamics.joint.PulleyJoint#PulleyJoint(C): {[body, friction, ball, joints, torque, arena, impulse, hinge, piston, delta, motor, velocity, mass, speed, transmission, calculate, axes, heightfield, bone, vecf, triangle, vertices, rotate, collide, plane, collect, emitter, square, volume, bounding, shape, rotation, hallmarks, collidable, shader, spatial, capsule, sphere, collision, cinematic, quaternion, material, scene, geometry, radius, bitmap, camel, light, matrix, texture]}
org.ode4j.ode.internal.processmem.DxStepperProcessingCallContext#m_islandJointsStartA: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]}
org.dyn4j.dynamics.Body#setMassType: {[friction, torque, body, joints, ball, impulse, delta, arena, mass, motor, transmission, velocity, hinge, piston, calculate, speed, axes, triangle, heightfield, vecf, square, vertices, radius, emitter, rotate, bone, plane, collide, spatial, sphere, collidable, scene, bitmap, cinematic, collect, hallmarks, shape, capsule, camel, rotation, quaternion, collision, texture, bounding, matrix, geometry, volume, light, shader, material]}
net.smert.jreactphysics3d.constraint.SliderJoint#resetLimits: {[body, friction, ball, joints, torque, arena, impulse, hinge, piston, delta, motor, velocity, mass, speed, transmission, calculate, axes, heightfield, bone, vecf, triangle, vertices, rotate, collide, plane, collect, emitter, square, volume, bounding, shape, rotation, hallmarks, collidable, shader, spatial, capsule, sphere, collision, cinematic, quaternion, material, scene, geometry, radius, bitmap, camel, light, matrix, texture]}
org.dyn4j.dynamics.joint.AngleJoint#solveVelocityConstraints: {[torque, delta, impulse, friction, mass, velocity, motor, joints, transmission, body, speed, ball, hinge, arena, piston, calculate, heightfield, triangle, vecf, axes, square, radius, vertices, rotate, collidable, plane, collide, collision, rotation, emitter, bone, sphere, hallmarks, spatial, bitmap, collect, scene, cinematic, quaternion, capsule, shape, texture, camel, material, light, shader, bounding, volume, geometry, matrix]}
net.smert.jreactphysics3d.engine.ContactSolver#solve: {[torque, friction, delta, impulse, mass, velocity, motor, joints, body, transmission, ball, arena, speed, hinge, piston, calculate, heightfield, triangle, vecf, axes, square, vertices, radius, collide, plane, collidable, rotate, emitter, collision, rotation, bitmap, cinematic, sphere, spatial, bone, hallmarks, capsule, collect, scene, shape, geometry, texture, camel, bounding, volume, quaternion, matrix, light, shader, material]}
net.smert.jreactphysics3d.body.RigidBody#getJointsList: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]}
net.smert.jreactphysics3d.engine.ContactManifold#getIndexToRemove: {[ball, body, joints, friction, torque, arena, piston, hinge, calculate, transmission, impulse, delta, motor, mass, velocity, speed, axes, shape, collision, square, collidable, rotate, bone, plane, sphere, radius, collide, hallmarks, bitmap, cinematic, vertices, bounding, vecf, triangle, capsule, volume, light, geometry, spatial, camel, shader, heightfield, texture, emitter, quaternion, matrix, rotation, scene, material, collect]}
org.ode4j.ode.internal.DxBody#setMass: {[friction, torque, body, joints, ball, impulse, delta, arena, mass, motor, transmission, velocity, hinge, piston, calculate, speed, axes, triangle, heightfield, vecf, square, vertices, radius, emitter, rotate, bone, plane, collide, spatial, sphere, collidable, scene, bitmap, cinematic, collect, hallmarks, shape, capsule, camel, rotation, quaternion, collision, texture, bounding, matrix, geometry, volume, light, shader, material]}
org.dyn4j.dynamics.joint.PrismaticJoint#setMotorSpeed: {[body, joints, ball, friction, torque, piston, hinge, arena, impulse, delta, motor, speed, velocity, mass, transmission, calculate, axes, bone, rotate, collect, heightfield, rotation, vecf, triangle, vertices, quaternion, volume, shape, bounding, collide, plane, square, collision, sphere, hallmarks, matrix, shader, collidable, emitter, scene, radius, cinematic, camel, material, bitmap, spatial, geometry, capsule, light, texture]}
org.dyn4j.dynamics.World#removeAllBodies: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]}
org.ode4j.ode.internal.DxQuickStep#compute_invM_JT: {[friction, torque, body, joints, ball, impulse, delta, arena, mass, motor, transmission, velocity, hinge, piston, calculate, speed, axes, triangle, heightfield, vecf, square, vertices, radius, emitter, rotate, bone, plane, collide, spatial, sphere, collidable, scene, bitmap, cinematic, collect, hallmarks, shape, capsule, camel, rotation, quaternion, collision, texture, bounding, matrix, geometry, volume, light, shader, material]}
org.dyn4j.dynamics.contact.SequentialImpulses#solveVelocityContraints: {[torque, friction, delta, impulse, mass, velocity, motor, joints, body, transmission, ball, speed, hinge, piston, arena, calculate, axes, triangle, heightfield, vecf, square, radius, rotate, vertices, plane, collidable, collide, bone, rotation, collision, sphere, hallmarks, collect, spatial, emitter, scene, quaternion, bitmap, cinematic, camel, texture, capsule, material, light, bounding, geometry, shader, volume, matrix, shape]}
net.smert.jreactphysics3d.constraint.HingeJoint#enableMotor: {[friction, torque, body, joints, ball, impulse, delta, motor, arena, hinge, piston, velocity, mass, speed, transmission, calculate, axes, heightfield, vecf, rotate, triangle, bone, vertices, collide, plane, collect, square, rotation, collidable, emitter, volume, quaternion, bounding, capsule, spatial, radius, cinematic, bitmap, collision, scene, hallmarks, sphere, camel, shape, geometry, texture, shader, light, material, matrix]}
net.smert.jreactphysics3d.engine.ConstraintSolver#initializeForIsland: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]}
org.dyn4j.dynamics.joint.PrismaticJoint#setMotorEnabled: {[body, ball, joints, friction, torque, arena, piston, hinge, impulse, delta, motor, calculate, velocity, speed, mass, transmission, axes, bone, rotate, shape, heightfield, collect, vertices, volume, vecf, collision, bounding, triangle, hallmarks, collide, plane, sphere, square, emitter, rotation, shader, radius, quaternion, material, spatial, matrix, capsule, camel, scene, collidable, bitmap, geometry, texture, cinematic, light]}
org.ode4j.ode.internal.DxQuickStep#dxQuickStepIsland_Stage2b: {[friction, torque, body, joints, ball, impulse, delta, arena, mass, motor, transmission, velocity, hinge, piston, calculate, speed, axes, triangle, heightfield, vecf, square, vertices, radius, emitter, rotate, bone, plane, collide, spatial, sphere, collidable, scene, bitmap, cinematic, collect, hallmarks, shape, capsule, camel, rotation, quaternion, collision, texture, bounding, matrix, geometry, volume, light, shader, material]}
org.ode4j.ode.internal.Step#run: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]}
net.smert.jreactphysics3d.engine.DynamicsWorld#integrateRigidBodiesVelocities: {[torque, friction, delta, impulse, mass, velocity, motor, joints, body, transmission, ball, arena, speed, hinge, piston, calculate, axes, triangle, heightfield, vecf, square, radius, vertices, rotate, plane, collidable, collide, bone, sphere, emitter, collision, rotation, spatial, hallmarks, collect, scene, bitmap, cinematic, camel, texture, capsule, quaternion, bounding, material, light, shader, geometry, volume, shape, matrix]}
net.smert.jreactphysics3d.constraint.HingeJoint#setMotorSpeed: {[body, joints, ball, friction, torque, piston, hinge, arena, impulse, delta, motor, speed, velocity, mass, transmission, calculate, axes, bone, rotate, collect, heightfield, rotation, vecf, triangle, vertices, quaternion, volume, shape, bounding, collide, plane, square, collision, sphere, hallmarks, matrix, shader, collidable, emitter, scene, radius, cinematic, camel, material, bitmap, spatial, geometry, capsule, light, texture]}
org.dyn4j.dynamics.contact.SequentialImpulses#warmStart: {[torque, friction, delta, impulse, mass, velocity, motor, joints, transmission, body, ball, speed, arena, hinge, piston, calculate, axes, triangle, heightfield, vecf, square, radius, vertices, rotate, collidable, plane, collide, sphere, bone, collision, rotation, emitter, hallmarks, spatial, bitmap, collect, scene, cinematic, capsule, camel, quaternion, texture, bounding, geometry, material, light, shape, shader, volume, matrix]}
org.ode4j.ode.internal.Step#dxStepIsland_Stage3: {[friction, torque, body, joints, ball, arena, impulse, delta, mass, transmission, motor, velocity, hinge, piston, calculate, speed, axes, triangle, heightfield, vecf, square, vertices, radius, emitter, plane, rotate, bone, collide, spatial, sphere, collidable, scene, cinematic, bitmap, hallmarks, collect, shape, capsule, camel, quaternion, rotation, matrix, collision, bounding, texture, geometry, volume, shader, light, material]}
net.smert.jreactphysics3d.engine.DynamicsWorld#initVelocityArrays: {[body, friction, ball, joints, torque, arena, impulse, piston, hinge, delta, motor, velocity, mass, speed, transmission, calculate, axes, bone, rotate, heightfield, triangle, vecf, vertices, square, collect, shape, plane, collide, rotation, volume, radius, bounding, collision, emitter, quaternion, spatial, scene, matrix, shader, camel, collidable, cinematic, capsule, hallmarks, bitmap, sphere, geometry, material, texture, light]}
org.dyn4j.dynamics.joint.PrismaticJoint#setLimits: {[body, friction, ball, joints, torque, arena, impulse, hinge, piston, delta, motor, velocity, mass, speed, transmission, calculate, axes, heightfield, bone, vecf, triangle, vertices, rotate, collide, plane, collect, emitter, square, volume, bounding, shape, rotation, hallmarks, collidable, shader, spatial, capsule, sphere, collision, cinematic, quaternion, material, scene, geometry, radius, bitmap, camel, light, matrix, texture]}
org.dyn4j.dynamics.joint.DistanceJoint#solveVelocityConstraints: {[torque, delta, impulse, friction, mass, velocity, motor, joints, transmission, body, speed, ball, hinge, arena, piston, calculate, heightfield, triangle, vecf, axes, square, radius, vertices, rotate, collidable, plane, collide, collision, rotation, emitter, bone, sphere, hallmarks, spatial, bitmap, collect, scene, cinematic, quaternion, capsule, shape, texture, camel, material, light, shader, bounding, volume, geometry, matrix]}
org.dyn4j.dynamics.joint.PulleyJoint#initializeConstraints: {[torque, delta, impulse, mass, friction, velocity, motor, transmission, joints, body, speed, ball, hinge, piston, arena, heightfield, triangle, vecf, calculate, axes, square, radius, collidable, vertices, rotate, collide, plane, collision, rotation, emitter, sphere, hallmarks, bone, spatial, bitmap, cinematic, collect, scene, capsule, quaternion, shape, texture, camel, bounding, geometry, shader, material, light, volume, matrix]}
org.ode4j.ode.internal.ragdoll.DxRagdoll#getJoints: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]}
org.dyn4j.dynamics.joint.WheelJoint#solvePositionConstraints: {[torque, friction, delta, impulse, motor, mass, velocity, joints, body, ball, speed, hinge, transmission, piston, arena, axes, calculate, heightfield, rotate, square, triangle, vecf, radius, rotation, collide, vertices, plane, bone, collidable, collision, bitmap, quaternion, hallmarks, emitter, cinematic, sphere, collect, spatial, capsule, scene, texture, camel, geometry, light, shader, volume, material, bounding, matrix, shape]}
org.dyn4j.dynamics.joint.PulleyJoint#solvePositionConstraints: {[torque, friction, delta, impulse, motor, mass, velocity, joints, body, ball, speed, hinge, transmission, piston, arena, axes, calculate, heightfield, rotate, square, triangle, vecf, radius, rotation, collide, vertices, plane, bone, collidable, collision, bitmap, quaternion, hallmarks, emitter, cinematic, sphere, collect, spatial, capsule, scene, texture, camel, geometry, light, shader, volume, material, bounding, matrix, shape]}
net.smert.jreactphysics3d.body.RigidBody#setJointsList: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]}
org.dyn4j.dynamics.contact.SequentialImpulses#solvePositionContraints: {[torque, friction, joints, body, impulse, delta, ball, motor, mass, velocity, arena, hinge, piston, transmission, speed, calculate, axes, square, rotate, heightfield, triangle, bone, vecf, radius, rotation, vertices, collide, plane, sphere, hallmarks, collect, quaternion, bitmap, collidable, spatial, shape, cinematic, emitter, scene, capsule, camel, texture, geometry, light, bounding, collision, shader, material, volume, matrix]}
org.dyn4j.dynamics.joint.RevoluteJoint#setMotorEnabled: {[body, ball, joints, friction, torque, arena, piston, hinge, impulse, delta, motor, calculate, velocity, speed, mass, transmission, axes, bone, rotate, shape, heightfield, collect, vertices, volume, vecf, collision, bounding, triangle, hallmarks, collide, plane, sphere, square, emitter, rotation, shader, radius, quaternion, material, spatial, matrix, capsule, camel, scene, collidable, bitmap, geometry, texture, cinematic, light]}
org.ode4j.ode.internal.joints.DxJoint#isEnabledAndDynamic: {[friction, torque, body, joints, ball, impulse, delta, arena, mass, motor, transmission, velocity, hinge, piston, calculate, speed, axes, triangle, heightfield, vecf, square, vertices, radius, emitter, rotate, bone, plane, collide, spatial, sphere, collidable, scene, bitmap, cinematic, collect, hallmarks, shape, capsule, camel, rotation, quaternion, collision, texture, bounding, matrix, geometry, volume, light, shader, material]}
org.dyn4j.dynamics.joint.WheelJoint#setMotorEnabled: {[body, ball, joints, friction, torque, arena, piston, hinge, impulse, delta, motor, calculate, velocity, speed, mass, transmission, axes, bone, rotate, shape, heightfield, collect, vertices, volume, vecf, collision, bounding, triangle, hallmarks, collide, plane, sphere, square, emitter, rotation, shader, radius, quaternion, material, spatial, matrix, capsule, camel, scene, collidable, bitmap, geometry, texture, cinematic, light]}
net.smert.jreactphysics3d.constraint.SliderJointInfo#SliderJointInfo(C): {[body, joints, ball, friction, torque, piston, hinge, arena, impulse, delta, motor, speed, velocity, mass, transmission, calculate, axes, bone, rotate, collect, heightfield, rotation, vecf, triangle, vertices, quaternion, volume, shape, bounding, collide, plane, square, collision, sphere, hallmarks, matrix, shader, collidable, emitter, scene, radius, cinematic, camel, material, bitmap, spatial, geometry, capsule, light, texture]}
net.smert.jreactphysics3d.engine.ContactSolver#warmStart: {[friction, body, ball, joints, torque, arena, impulse, delta, hinge, piston, motor, velocity, mass, speed, transmission, calculate, axes, heightfield, vecf, triangle, bone, vertices, rotate, collide, plane, emitter, collect, square, volume, bounding, shape, rotation, collidable, hallmarks, capsule, shader, spatial, cinematic, material, radius, sphere, geometry, scene, bitmap, quaternion, collision, camel, light, matrix, texture]}
net.smert.jreactphysics3d.engine.Impulse#getAngularImpulseBody2: {[body, friction, ball, joints, torque, arena, impulse, hinge, piston, delta, motor, velocity, mass, speed, transmission, calculate, axes, heightfield, bone, vecf, triangle, vertices, rotate, collide, plane, collect, emitter, square, volume, bounding, shape, rotation, hallmarks, collidable, shader, spatial, capsule, sphere, collision, cinematic, quaternion, material, scene, geometry, radius, bitmap, camel, light, matrix, texture]}
net.smert.jreactphysics3d.engine.Impulse#getAngularImpulseBody1: {[body, friction, ball, joints, torque, arena, impulse, hinge, piston, delta, motor, velocity, mass, speed, transmission, calculate, axes, heightfield, bone, vecf, triangle, vertices, rotate, collide, plane, collect, emitter, square, volume, bounding, shape, rotation, hallmarks, collidable, shader, spatial, capsule, sphere, collision, cinematic, quaternion, material, scene, geometry, radius, bitmap, camel, light, matrix, texture]}
net.smert.jreactphysics3d.engine.ContactManifold#update: {[ball, body, joints, friction, torque, arena, piston, hinge, calculate, transmission, impulse, delta, motor, mass, velocity, speed, axes, shape, collision, square, collidable, rotate, bone, plane, sphere, radius, collide, hallmarks, bitmap, cinematic, vertices, bounding, vecf, triangle, capsule, volume, light, geometry, spatial, camel, shader, heightfield, texture, emitter, quaternion, matrix, rotation, scene, material, collect]}
org.dyn4j.dynamics.Body#applyImpulse: {[torque, delta, impulse, friction, mass, velocity, motor, joints, transmission, body, speed, ball, hinge, arena, piston, calculate, heightfield, triangle, vecf, axes, square, radius, vertices, rotate, collidable, plane, collide, collision, rotation, emitter, bone, sphere, hallmarks, spatial, bitmap, collect, scene, cinematic, quaternion, capsule, shape, texture, camel, material, light, shader, bounding, volume, geometry, matrix]}
org.dyn4j.dynamics.joint.RevoluteJoint#getJointSpeed: {[body, friction, torque, joints, ball, impulse, piston, hinge, delta, motor, arena, velocity, speed, mass, transmission, calculate, axes, bone, rotate, heightfield, triangle, vecf, collect, rotation, square, vertices, quaternion, plane, collide, shape, radius, volume, bounding, collidable, matrix, scene, spatial, camel, cinematic, capsule, collision, shader, emitter, bitmap, geometry, texture, sphere, hallmarks, light, material]}
org.dyn4j.dynamics.joint.RopeJoint#solvePositionConstraints: {[torque, friction, delta, impulse, motor, mass, velocity, joints, body, ball, speed, hinge, transmission, piston, arena, axes, calculate, heightfield, rotate, square, triangle, vecf, radius, rotation, collide, vertices, plane, bone, collidable, collision, bitmap, quaternion, hallmarks, emitter, cinematic, sphere, collect, spatial, capsule, scene, texture, camel, geometry, light, shader, volume, material, bounding, matrix, shape]}
org.dyn4j.dynamics.joint.WheelJoint#setMaximumMotorTorque: {[body, ball, friction, joints, torque, arena, piston, hinge, impulse, delta, motor, velocity, mass, speed, transmission, calculate, axes, bone, rotate, heightfield, vecf, triangle, collect, vertices, collide, volume, plane, shape, square, bounding, emitter, rotation, hallmarks, collision, sphere, spatial, quaternion, capsule, shader, scene, collidable, matrix, camel, cinematic, material, geometry, bitmap, light, radius, texture]}
org.dyn4j.dynamics.World#getJointCount: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]}
net.smert.jreactphysics3d.constraint.SliderJoint#enableMotor: {[friction, torque, body, joints, ball, impulse, delta, motor, arena, hinge, piston, velocity, mass, speed, transmission, calculate, axes, heightfield, vecf, rotate, triangle, bone, vertices, collide, plane, collect, square, rotation, collidable, emitter, volume, quaternion, bounding, capsule, spatial, radius, cinematic, bitmap, collision, scene, hallmarks, sphere, camel, shape, geometry, texture, shader, light, material, matrix]}
org.dyn4j.dynamics.joint.WheelJoint#getLinearSpeed: {[body, friction, torque, joints, ball, impulse, piston, hinge, delta, motor, arena, velocity, speed, mass, transmission, calculate, axes, bone, rotate, heightfield, triangle, vecf, collect, rotation, square, vertices, quaternion, plane, collide, shape, radius, volume, bounding, collidable, matrix, scene, spatial, camel, cinematic, capsule, collision, shader, emitter, bitmap, geometry, texture, sphere, hallmarks, light, material]}
net.smert.jreactphysics3d.engine.Island#getJoints: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]}
org.ode4j.ode.internal.Step#dxStepIsland_Stage0_Joints: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]}
org.dyn4j.dynamics.Body#setAsleep: {[body, friction, ball, joints, torque, arena, impulse, piston, hinge, delta, motor, velocity, mass, speed, transmission, calculate, axes, bone, rotate, heightfield, triangle, vecf, vertices, square, collect, shape, plane, collide, rotation, volume, radius, bounding, collision, emitter, quaternion, spatial, scene, matrix, shader, camel, collidable, cinematic, capsule, hallmarks, bitmap, sphere, geometry, material, texture, light]}
org.ode4j.ode.internal.processmem.DxWorldProcessIslandsInfo#GetJointsArray: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]}
org.ode4j.ode.internal.Step#dxStepIsland_Stage2b: {[friction, torque, body, joints, ball, impulse, delta, arena, mass, motor, transmission, velocity, hinge, piston, calculate, speed, axes, triangle, heightfield, vecf, square, vertices, radius, emitter, rotate, bone, plane, collide, spatial, sphere, collidable, scene, bitmap, cinematic, collect, hallmarks, shape, capsule, camel, rotation, quaternion, collision, texture, bounding, matrix, geometry, volume, light, shader, material]}
org.dyn4j.dynamics.joint.PrismaticJoint#setUpperLimit: {[body, friction, ball, joints, torque, arena, impulse, hinge, piston, delta, motor, velocity, mass, speed, transmission, calculate, axes, heightfield, bone, vecf, triangle, vertices, rotate, collide, plane, collect, emitter, square, volume, bounding, shape, rotation, hallmarks, collidable, shader, spatial, capsule, sphere, collision, cinematic, quaternion, material, scene, geometry, radius, bitmap, camel, light, matrix, texture]}
org.ode4j.ode.internal.DxQuickStep#run: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]}
org.dyn4j.dynamics.joint.WheelJoint#setMotorSpeed: {[body, joints, ball, friction, torque, piston, hinge, arena, impulse, delta, motor, speed, velocity, mass, transmission, calculate, axes, bone, rotate, collect, heightfield, rotation, vecf, triangle, vertices, quaternion, volume, shape, bounding, collide, plane, square, collision, sphere, hallmarks, matrix, shader, collidable, emitter, scene, radius, cinematic, camel, material, bitmap, spatial, geometry, capsule, light, texture]}
net.smert.jreactphysics3d.engine.DynamicsWorld#setJointsPositionCorrectionTechnique: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]}
org.ode4j.ode.internal.processmem.DxStepperProcessingCallContext#m_islandJointsStartOfs: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]}
net.smert.jreactphysics3d.engine.ContactSolver#initializeForIsland: {[torque, delta, impulse, friction, mass, velocity, motor, joints, transmission, body, speed, ball, hinge, arena, piston, calculate, heightfield, triangle, vecf, axes, square, radius, vertices, collidable, rotate, plane, collide, collision, rotation, emitter, bone, sphere, hallmarks, spatial, bitmap, collect, scene, cinematic, capsule, quaternion, shape, texture, camel, material, bounding, light, shader, geometry, volume, matrix]}
net.smert.jreactphysics3d.engine.DynamicsWorld#updateSleepingBodies: {[torque, friction, joints, body, ball, delta, impulse, transmission, mass, velocity, piston, motor, arena, hinge, speed, calculate, axes, square, rotate, radius, shape, bone, sphere, hallmarks, rotation, collision, bitmap, cinematic, bounding, heightfield, spatial, volume, capsule, shader, light, texture, camel, scene, collect, triangle, quaternion, vecf, collidable, material, matrix, geometry, plane, emitter, collide, vertices]}
net.smert.jreactphysics3d.engine.DynamicsWorld#getNumJoints: {[joints, body, friction, torque, ball, hinge, piston, impulse, arena, motor, delta, velocity, speed, mass, calculate, axes, transmission, rotate, bone, rotation, quaternion, square, shape, scene, spatial, matrix, texture, collision, camel, light, material, shader, geometry, triangle, vertices, heightfield, vecf, radius, bitmap, bounding, collidable, hallmarks, volume, cinematic, emitter, collect, plane, sphere, collide, capsule]}
org.ode4j.ode.DGeom#getRotation: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]},
org.ode4j.ode.internal.DxGeom#setOffsetRotation: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]},
org.ode4j.ode.internal.Rotation#dRfromQ: {[matrix, collect, quaternion, rotation, axes, rotate, calculate, hinge, transmission, arena, bone, motor, volume, speed, heightfield, impulse, collidable, sphere, piston, joints, plane, radius, collide, camel, emitter, mass, torque, bounding, velocity, capsule, cinematic, geometry, ball, triangle, light, collision, bitmap, delta, shape, shader, material, vertices, body, vecf, texture, friction, square, hallmarks, spatial, scene]},
org.ode4j.ode.internal.DxCollisionUtil#dVector3Cross: {[calculate, collect, arena, collidable, collide, matrix, collision, plane, volume, ball, heightfield, bounding, shape, transmission, sphere, quaternion, rotation, body, rotate, joints, friction, radius, vecf, triangle, hallmarks, speed, square, capsule, spatial, mass, vertices, torque, cinematic, motor, bone, bitmap, camel, geometry, piston, shader, scene, velocity, material, impulse, light, delta, hinge, texture, axes, emitter]},
com.jme3.shader.UniformBindingManager#setCamera: {[matrix, collect, calculate, arena, bounding, volume, camel, light, shader, material, emitter, speed, scene, texture, collidable, piston, vertices, torque, plane, geometry, bone, velocity, transmission, rotate, collide, heightfield, vecf, shape, square, friction, mass, spatial, joints, bitmap, motor, rotation, hinge, impulse, axes, ball, radius, delta, sphere, triangle, hallmarks, cinematic, capsule, collision, quaternion, body]},
com.jme3.collision.CollisionResult#CollisionResult(C): {[calculate, collect, arena, collidable, collide, matrix, collision, plane, volume, ball, heightfield, bounding, shape, transmission, sphere, quaternion, rotation, body, rotate, joints, friction, radius, vecf, triangle, hallmarks, speed, square, capsule, spatial, mass, vertices, torque, cinematic, motor, bone, bitmap, camel, geometry, piston, shader, scene, velocity, material, impulse, light, delta, hinge, texture, axes, emitter]},
org.ode4j.ode.internal.DxGeom#getOffsetRotation: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]},
org.dyn4j.dynamics.Body#applyTorque: {[collect, matrix, calculate, collidable, collide, plane, volume, heightfield, bounding, collision, shape, sphere, speed, triangle, vecf, arena, hallmarks, piston, square, radius, motor, bone, vertices, velocity, quaternion, rotate, torque, spatial, hinge, delta, rotation, impulse, transmission, bitmap, texture, cinematic, shader, geometry, material, camel, ball, light, scene, body, friction, axes, emitter, joints, capsule, mass]},
org.dyn4j.geometry.Geometry#flipAlongTheYAxis: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]},
org.ode4j.ode.internal.joints.DxJointUniversal#getLimot2: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]},
com.jme3.renderer.RenderManager#setViewPort: {[matrix, collect, calculate, arena, bounding, volume, camel, light, shader, material, emitter, speed, scene, texture, collidable, piston, vertices, torque, plane, geometry, bone, velocity, transmission, rotate, collide, heightfield, vecf, shape, square, friction, mass, spatial, joints, bitmap, motor, rotation, hinge, impulse, axes, ball, radius, delta, sphere, triangle, hallmarks, cinematic, capsule, collision, quaternion, body]},
org.ode4j.math.DMatrixN#plusEq: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]},
com.jme3.shadow.ShadowUtil#updateFrustumPoints: {[matrix, collect, calculate, arena, volume, bounding, collidable, emitter, speed, collide, bone, piston, plane, heightfield, vertices, rotate, shader, light, joints, spatial, mass, torque, velocity, friction, camel, material, ball, collision, motor, quaternion, impulse, vecf, axes, geometry, hinge, texture, body, transmission, square, scene, sphere, delta, cinematic, radius, bitmap, rotation, capsule, shape, hallmarks, triangle]},
org.ode4j.ode.internal.processmem.BlockPointer#BlockPointer(C): {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]},
com.jme3.scene.Geometry#getWorldMatrix: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]},
com.jme3.scene.Mesh#setBound: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]},
com.jme3.math.Quaternion#toRotationMatrix: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]},
org.ode4j.ode.internal.Matrix#dFactorCholesky: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]},
com.jme3.shader.UniformBindingManager#setWorldMatrix: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]},
org.ode4j.math.DMatrix3C#dotColCol: {[matrix, collect, calculate, arena, volume, bounding, collidable, speed, emitter, piston, bone, collide, plane, heightfield, torque, vertices, rotate, velocity, spatial, light, shader, camel, mass, material, collision, joints, motor, friction, transmission, hinge, delta, ball, cinematic, axes, geometry, quaternion, impulse, scene, vecf, sphere, square, texture, rotation, capsule, bitmap, radius, triangle, hallmarks, body, shape]},
org.ode4j.math.DVector3#dotCol: {[matrix, collect, calculate, arena, volume, bounding, collidable, speed, emitter, piston, bone, collide, plane, heightfield, torque, vertices, rotate, velocity, spatial, light, shader, camel, mass, material, collision, joints, motor, friction, transmission, hinge, delta, ball, cinematic, axes, geometry, quaternion, impulse, scene, vecf, sphere, square, texture, rotation, capsule, bitmap, radius, triangle, hallmarks, body, shape]},
org.ode4j.ode.DMassC#getI: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]},
org.ode4j.ode.DMatrix#dLDLTAddTL: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]},
org.ode4j.ode.DRotation#dRFromAxisAndAngle: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]},
org.ode4j.ode.internal.DxGeom#dGeomGetRotation: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]},
com.jme3.bounding.BoundingBox#transform: {[matrix, collect, rotation, quaternion, axes, rotate, volume, bounding, hallmarks, motor, square, speed, impulse, hinge, calculate, mass, bone, velocity, plane, emitter, delta, camel, collidable, piston, heightfield, collide, arena, joints, vertices, radius, shape, triangle, geometry, material, light, scene, sphere, ball, spatial, collision, vecf, bitmap, cinematic, friction, transmission, texture, shader, body, torque, capsule]},
com.jme3.cinematic.events.CinematicEventListener#onPlay: {[matrix, axes, hinge, joints, rotation, arena, impulse, piston, motor, quaternion, rotate, speed, calculate, collect, body, friction, delta, velocity, mass, torque, ball, bone, collidable, square, shape, volume, transmission, camel, emitter, collision, sphere, plane, bounding, radius, material, heightfield, collide, hallmarks, light, spatial, shader, scene, triangle, bitmap, vertices, vecf, geometry, capsule, cinematic, texture]},
org.ode4j.ode.internal.gimpact.GimGeometry#ACCUM_SCALE_MATRIX_3X3: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]},
org.ode4j.ode.internal.Rotation#dRFromZAxis: {[collect, matrix, calculate, collidable, volume, plane, arena, collide, bounding, heightfield, collision, speed, triangle, shape, vecf, torque, piston, velocity, bone, motor, sphere, hallmarks, delta, axes, vertices, rotate, square, camel, spatial, cinematic, joints, material, hinge, light, impulse, emitter, radius, ball, scene, bitmap, shader, transmission, quaternion, capsule, rotation, geometry, body, texture, mass, friction]},
org.ode4j.ode.DGeom#copyRotation: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]},
org.dyn4j.geometry.Matrix33#equals: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]},
org.ode4j.ode.internal.processmem.DxStepperProcessingCallContext#m_stepperArena: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]},
org.dyn4j.geometry.Matrix22#equals: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]},
org.ode4j.ode.internal.sCylinderBoxData#_cldClipBoxToCylinder: {[collect, bounding, volume, sphere, radius, matrix, hallmarks, square, calculate, transmission, collide, plane, mass, collidable, shape, heightfield, arena, collision, piston, delta, vertices, velocity, spatial, triangle, impulse, vecf, bitmap, friction, axes, quaternion, cinematic, hinge, bone, speed, geometry, torque, emitter, joints, shader, texture, motor, body, capsule, rotation, ball, light, scene, material, rotate, camel]},
net.smert.jreactphysics3d.collision.narrowphase.GJK.GJKAlgorithm#addContactInfo: {[axes, collidable, shape, collision, collect, plane, calculate, matrix, triangle, heightfield, collide, vecf, hinge, rotate, joints, piston, vertices, rotation, quaternion, arena, emitter, body, square, volume, ball, speed, hallmarks, bounding, motor, impulse, bone, friction, velocity, delta, torque, mass, sphere, shader, transmission, bitmap, texture, light, cinematic, radius, material, capsule, spatial, scene, geometry, camel]},
org.ode4j.ode.internal.processmem.BlockPointer#asDxWorldProcessMemArena: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]},
org.ode4j.ode.internal.processmem.DxWorldProcessMemArena#allocateTemporary: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]},
com.jme3.scene.AssetLinkNode#read: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]},
org.ode4j.ode.internal.processmem.DxWorldProcessContext#ReallocateStepperMemArenas: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]},
org.ode4j.ode.internal.Rotation#dRFromAxisAndAngle: {[matrix, collect, quaternion, rotation, axes, rotate, calculate, hinge, transmission, arena, bone, motor, volume, speed, heightfield, impulse, collidable, sphere, piston, joints, plane, radius, collide, camel, emitter, mass, torque, bounding, velocity, capsule, cinematic, geometry, ball, triangle, light, collision, bitmap, delta, shape, shader, material, vertices, body, vecf, texture, friction, square, hallmarks, spatial, scene]},
org.dyn4j.geometry.Matrix33#difference: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]},
com.jme3.scene.Mesh#collideWith: {[collect, collidable, plane, collide, heightfield, collision, triangle, vecf, shape, matrix, calculate, volume, vertices, bounding, hallmarks, sphere, emitter, motor, speed, velocity, square, delta, torque, arena, impulse, axes, mass, radius, ball, piston, friction, scene, capsule, joints, shader, hinge, bone, camel, body, rotate, bitmap, rotation, texture, quaternion, geometry, transmission, cinematic, light, spatial, material]},
com.jme3.renderer.Camera#clone: {[matrix, collect, rotation, axes, quaternion, rotate, volume, plane, bounding, collidable, hallmarks, square, heightfield, emitter, calculate, collide, triangle, vertices, shape, hinge, bone, vecf, collision, speed, motor, impulse, mass, piston, camel, velocity, arena, sphere, joints, delta, radius, geometry, bitmap, scene, spatial, cinematic, ball, material, transmission, light, capsule, torque, body, shader, texture, friction]},
org.ode4j.ode.internal.gimpact.GimGeometry#MATRIX_PRODUCT_4X4: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]},
com.jme3.collision.bih.BIHNode#intersectBrute: {[collidable, collect, plane, heightfield, triangle, collision, collide, vecf, shape, matrix, vertices, calculate, volume, bounding, velocity, emitter, motor, delta, torque, speed, impulse, mass, axes, hallmarks, arena, scene, sphere, square, friction, camel, transmission, spatial, material, geometry, ball, piston, cinematic, texture, light, joints, bitmap, body, quaternion, bone, hinge, radius, capsule, rotation, shader, rotate]},
net.smert.jreactphysics3d.constraint.FixedJoint#solvePositionConstraint: {[rotation, axes, motor, speed, rotate, hinge, quaternion, impulse, velocity, piston, delta, mass, joints, torque, matrix, friction, bone, body, arena, calculate, ball, square, collect, transmission, emitter, hallmarks, vecf, triangle, heightfield, collide, bitmap, radius, collision, texture, vertices, collidable, volume, plane, scene, shader, camel, shape, sphere, cinematic, bounding, material, light, capsule, spatial, geometry]},
org.ode4j.ode.DBody#getRotation: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]},
org.ode4j.ode.internal.DxCollisionUtil#dBoxTouchesBox: {[matrix, collect, calculate, arena, volume, bounding, collidable, emitter, speed, collide, bone, piston, plane, heightfield, vertices, rotate, shader, light, joints, spatial, mass, torque, velocity, friction, camel, material, ball, collision, motor, quaternion, impulse, vecf, axes, geometry, hinge, texture, body, transmission, square, scene, sphere, delta, cinematic, radius, bitmap, rotation, capsule, shape, hallmarks, triangle]},
org.ode4j.ode.internal.gimpact.GimGeometry#COPY_MATRIX_4X4: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]},
org.ode4j.ode.internal.Matrix#_dEstimateInvertPDMatrixTmpbufSize: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]},
org.ode4j.math.DMatrix3#add: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.renderer.Camera#getScreenCoordinates: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.dyn4j.geometry.decompose.Triangulator#triangulate: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.math.Quaternion#fromAxes: {[rotation, quaternion, rotate, axes, matrix, speed, hinge, bone, motor, piston, collect, emitter, velocity, impulse, transmission, delta, mass, joints, square, ball, hallmarks, sphere, vertices, volume, heightfield, camel, triangle, plane, shape, spatial, shader, radius, vecf, collidable, texture, collide, torque, capsule, cinematic, bitmap, collision, calculate, geometry, bounding, material, friction, body, light, scene, arena]}
org.ode4j.ode.internal.joints.DxJoint#setBall: {[arena, calculate, matrix, collect, ball, joints, body, friction, impulse, hinge, torque, mass, delta, piston, motor, collidable, axes, emitter, transmission, velocity, vertices, collision, shader, volume, bounding, collide, plane, material, light, speed, hallmarks, shape, camel, heightfield, radius, spatial, sphere, vecf, rotate, texture, quaternion, square, scene, bitmap, triangle, bone, geometry, rotation, cinematic, capsule]}
org.dyn4j.dynamics.World#solveTOI: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.DMatrix#dSolveCholesky: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DxGimpact#computeAABB: {[collect, matrix, collidable, plane, bounding, volume, scene, triangle, camel, material, heightfield, calculate, geometry, vertices, collision, collide, spatial, vecf, texture, light, shape, shader, arena, hallmarks, velocity, speed, sphere, motor, emitter, torque, square, axes, delta, impulse, mass, cinematic, ball, piston, capsule, transmission, joints, radius, bitmap, hinge, body, quaternion, rotation, bone, friction, rotate]}
com.jme3.material.Technique#makeCurrent: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.scene.Geometry#computeWorldMatrix: {[rotation, quaternion, rotate, axes, matrix, speed, hinge, bone, motor, collect, piston, emitter, impulse, velocity, transmission, delta, mass, joints, ball, square, sphere, hallmarks, volume, camel, heightfield, vertices, spatial, triangle, plane, radius, shape, shader, texture, collidable, vecf, cinematic, capsule, collide, torque, body, calculate, friction, geometry, bounding, bitmap, arena, material, collision, scene, light]}
org.ode4j.ode.internal.DxGimpactCollision#Decompose: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.CollideCylinderBox#dColliderFn: {[matrix, collect, calculate, arena, volume, bounding, collidable, emitter, speed, collide, bone, piston, plane, heightfield, vertices, rotate, shader, light, joints, spatial, mass, torque, velocity, friction, camel, material, ball, collision, motor, quaternion, impulse, vecf, axes, geometry, hinge, texture, body, transmission, square, scene, sphere, delta, cinematic, radius, bitmap, rotation, capsule, shape, hallmarks, triangle]}
org.ode4j.math.DMatrixN#wrap: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
net.smert.jreactphysics3d.constraint.FixedJoint#solveVelocityConstraint: {[impulse, motor, mass, delta, velocity, speed, torque, hinge, friction, axes, joints, rotation, rotate, piston, matrix, arena, quaternion, body, transmission, calculate, ball, square, vecf, collect, triangle, bone, heightfield, radius, hallmarks, vertices, collision, collide, collidable, bitmap, plane, cinematic, bounding, volume, spatial, capsule, sphere, scene, texture, shape, camel, shader, emitter, geometry, material, light]}
org.ode4j.ode.internal.dxQuickStepperStage1CallContext#Initialize: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
org.ode4j.ode.OdeMath#dCROSSMAT: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.scene.BatchNode#getTransformMatrix: {[matrix, camel, material, collect, scene, geometry, light, texture, shader, bounding, spatial, volume, calculate, arena, collidable, plane, speed, piston, hallmarks, capsule, friction, emitter, cinematic, shape, mass, bitmap, sphere, velocity, torque, vertices, hinge, vecf, triangle, impulse, delta, radius, rotation, quaternion, square, rotate, axes, transmission, joints, motor, collide, heightfield, ball, bone, collision, body]}
org.ode4j.ode.internal.CollideBoxPlane#BAR2: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.material.logic.StaticPassLightingLogic#transformDirection: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.material.logic.StaticPassLightingLogic#render: {[material, camel, light, texture, shader, scene, geometry, spatial, matrix, bounding, collect, volume, bitmap, calculate, arena, shape, vecf, bone, speed, piston, friction, cinematic, collision, square, velocity, rotate, torque, hinge, hallmarks, transmission, quaternion, motor, plane, collidable, axes, emitter, collide, capsule, sphere, mass, delta, heightfield, ball, impulse, radius, vertices, triangle, joints, body, rotation]}
org.dyn4j.dynamics.joint.WheelJoint#getReactionForce: {[axes, shape, collidable, collision, plane, collect, rotate, calculate, hinge, triangle, matrix, heightfield, vecf, collide, rotation, quaternion, piston, vertices, joints, emitter, arena, square, body, volume, speed, ball, hallmarks, motor, bone, impulse, bounding, friction, velocity, delta, torque, mass, sphere, shader, transmission, bitmap, texture, light, cinematic, radius, material, capsule, spatial, scene, camel, geometry]}
com.jme3.renderer.opengl.GLRenderer#updateUniform: {[matrix, collect, quaternion, rotation, axes, rotate, camel, bone, light, calculate, shader, transmission, material, arena, bitmap, hinge, texture, spatial, volume, scene, cinematic, capsule, sphere, speed, radius, impulse, motor, bounding, heightfield, joints, geometry, emitter, piston, collidable, square, torque, plane, vertices, collide, mass, vecf, ball, velocity, shape, delta, hallmarks, triangle, body, collision, friction]}
com.jme3.renderer.RenderManager#setViewProjection: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.OdeMath#dMultiply1_333: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.OdeMath#dMultiply1_331: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.CollideHeightfield#dCollideHeightfield: {[collect, matrix, calculate, collidable, collide, volume, plane, heightfield, bounding, arena, collision, shape, triangle, vecf, speed, sphere, hallmarks, torque, piston, square, vertices, motor, velocity, radius, axes, delta, bone, spatial, joints, impulse, capsule, rotate, ball, hinge, light, camel, emitter, geometry, rotation, scene, mass, shader, material, texture, transmission, body, friction, bitmap, quaternion, cinematic]}
org.ode4j.math.DVector3#set: {[collect, matrix, calculate, collidable, collide, plane, volume, heightfield, bounding, collision, shape, sphere, speed, triangle, vecf, arena, hallmarks, piston, square, radius, motor, bone, vertices, velocity, quaternion, rotate, torque, spatial, hinge, delta, rotation, impulse, transmission, bitmap, texture, cinematic, shader, geometry, material, camel, ball, light, scene, body, friction, axes, emitter, joints, capsule, mass]}
org.ode4j.ode.internal.DxMass#set: {[matrix, collect, calculate, arena, mass, emitter, impulse, bounding, vertices, vecf, volume, delta, friction, triangle, radius, motor, transmission, velocity, spatial, joints, bone, collision, square, torque, sphere, shape, cinematic, hallmarks, rotation, bitmap, piston, axes, heightfield, ball, light, capsule, body, shader, camel, material, hinge, scene, speed, rotate, texture, geometry, collidable, plane, quaternion, collide]}
org.ode4j.ode.internal.Misc#dMaxDifference: {[matrix, collect, quaternion, rotation, axes, rotate, calculate, hinge, transmission, arena, bone, motor, volume, speed, heightfield, impulse, collidable, sphere, piston, joints, plane, radius, collide, camel, emitter, mass, torque, bounding, velocity, capsule, cinematic, geometry, ball, triangle, light, collision, bitmap, delta, shape, shader, material, vertices, body, vecf, texture, friction, square, hallmarks, spatial, scene]}
org.dyn4j.geometry.Matrix33#multiply: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DxCollisionUtil#dVector3CrossMat3Col: {[matrix, collect, calculate, arena, volume, bounding, collidable, speed, emitter, piston, bone, collide, plane, heightfield, torque, vertices, rotate, velocity, spatial, light, shader, camel, mass, material, collision, joints, motor, friction, transmission, hinge, delta, ball, cinematic, axes, geometry, quaternion, impulse, scene, vecf, sphere, square, texture, rotation, capsule, bitmap, radius, triangle, hallmarks, body, shape]}
org.ode4j.math.DMatrix3#isEq: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.math.DVector3ColView#DVector3ColView(C): {[collect, matrix, calculate, collidable, collide, plane, volume, heightfield, bounding, collision, shape, sphere, speed, triangle, vecf, arena, hallmarks, piston, square, radius, motor, bone, vertices, velocity, quaternion, rotate, torque, spatial, hinge, delta, rotation, impulse, transmission, bitmap, texture, cinematic, shader, geometry, material, camel, ball, light, scene, body, friction, axes, emitter, joints, capsule, mass]}
org.ode4j.math.DMatrix3#dotRowRow: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.OdeMath#dCROSS: {[calculate, collect, arena, collidable, collide, matrix, collision, plane, volume, ball, heightfield, bounding, shape, transmission, sphere, quaternion, rotation, body, rotate, joints, friction, radius, vecf, triangle, hallmarks, speed, square, capsule, spatial, mass, vertices, torque, cinematic, motor, bone, bitmap, camel, geometry, piston, shader, scene, velocity, material, impulse, light, delta, hinge, texture, axes, emitter]}
com.jme3.shadow.PssmShadowRenderer#setPostShadowParams: {[matrix, collect, shader, light, material, camel, texture, scene, geometry, spatial, calculate, bitmap, bounding, arena, volume, cinematic, square, speed, vecf, shape, piston, capsule, rotate, vertices, torque, emitter, transmission, velocity, motor, bone, collidable, friction, collision, hinge, triangle, axes, quaternion, plane, radius, ball, delta, heightfield, hallmarks, joints, sphere, mass, collide, rotation, impulse, body]}
org.ode4j.ode.internal.gimpact.GimGeometry#SCALE_MATRIX_4X4: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DxBody#dBodyGetRotation: {[matrix, axes, hinge, joints, rotation, arena, impulse, piston, motor, quaternion, rotate, speed, calculate, collect, body, friction, delta, velocity, mass, torque, ball, bone, collidable, square, shape, volume, transmission, camel, emitter, collision, sphere, plane, bounding, radius, material, heightfield, collide, hallmarks, light, spatial, shader, scene, triangle, bitmap, vertices, vecf, geometry, capsule, cinematic, texture]}
org.ode4j.ode.internal.gimpact.GimGeometry#ACCUM_SCALE_MATRIX_4X4: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.scene.BatchNode#updateSubBatch: {[matrix, camel, material, collect, scene, geometry, light, texture, shader, bounding, spatial, volume, calculate, arena, collidable, plane, speed, piston, hallmarks, capsule, friction, emitter, cinematic, shape, mass, bitmap, sphere, velocity, torque, vertices, hinge, vecf, triangle, impulse, delta, radius, rotation, quaternion, square, rotate, axes, transmission, joints, motor, collide, heightfield, ball, bone, collision, body]}
com.jme3.scene.SimpleBatchNode#getTransformMatrix: {[rotation, quaternion, rotate, axes, matrix, camel, spatial, bone, speed, geometry, scene, material, hinge, light, motor, emitter, texture, piston, collect, impulse, shader, volume, velocity, bounding, delta, vertices, hallmarks, square, transmission, mass, ball, triangle, joints, plane, collidable, bitmap, sphere, heightfield, capsule, torque, vecf, friction, cinematic, body, collision, radius, shape, collide, arena, calculate]}
org.dyn4j.geometry.Matrix33#Matrix33(C): {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.Rotation#dQtoR: {[matrix, collect, quaternion, rotation, axes, rotate, calculate, hinge, transmission, arena, bone, motor, volume, speed, heightfield, impulse, collidable, sphere, piston, joints, plane, radius, collide, camel, emitter, mass, torque, bounding, velocity, capsule, cinematic, geometry, ball, triangle, light, collision, bitmap, delta, shape, shader, material, vertices, body, vecf, texture, friction, square, hallmarks, spatial, scene]}
com.jme3.math.Transform#fromTransformMatrix: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]}
com.jme3.material.logic.StaticPassLightingLogic#updateLightListUniforms: {[collect, bounding, matrix, volume, radius, sphere, calculate, light, hallmarks, shader, mass, transmission, texture, material, camel, geometry, square, scene, arena, delta, piston, friction, bitmap, velocity, vecf, capsule, impulse, spatial, collide, quaternion, plane, hinge, triangle, cinematic, torque, rotate, collidable, collision, motor, bone, speed, vertices, joints, heightfield, emitter, axes, ball, body, rotation, shape]}
org.ode4j.ode.internal.DxGeom#dGeomSetRotation: {[matrix, axes, hinge, joints, rotation, arena, impulse, piston, motor, quaternion, rotate, speed, calculate, collect, body, friction, delta, velocity, mass, torque, ball, bone, collidable, square, shape, volume, transmission, camel, emitter, collision, sphere, plane, bounding, radius, material, heightfield, collide, hallmarks, light, spatial, shader, scene, triangle, bitmap, vertices, vecf, geometry, capsule, cinematic, texture]}
org.ode4j.ode.internal.processmem.DxWorldProcessMemArena#RestoreState: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
org.ode4j.ode.DMatrix#dFactorCholesky: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DxGeom#dGeomGetOffsetRotation: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]}
com.jme3.util.mikktspace.MikktspaceTangentGenerator#calcTexArea: {[calculate, collect, arena, collidable, collide, matrix, collision, plane, volume, ball, heightfield, bounding, shape, transmission, sphere, quaternion, rotation, body, rotate, joints, friction, radius, vecf, triangle, hallmarks, speed, square, capsule, spatial, mass, vertices, torque, cinematic, motor, bone, bitmap, camel, geometry, piston, shader, scene, velocity, material, impulse, light, delta, hinge, texture, axes, emitter]}
org.ode4j.ode.DGeom#setRotation: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]}
org.dyn4j.geometry.Matrix33#getTranspose: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.Matrix#Matrix(C): {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.scene.Spatial#setLocalRotation: {[rotation, quaternion, rotate, axes, matrix, speed, hinge, bone, motor, collect, piston, emitter, impulse, velocity, transmission, delta, mass, joints, ball, square, sphere, hallmarks, volume, camel, heightfield, vertices, spatial, triangle, plane, radius, shape, shader, texture, collidable, vecf, cinematic, capsule, collide, torque, body, calculate, friction, geometry, bounding, bitmap, arena, material, collision, scene, light]}
org.ode4j.ode.internal.Misc#dClearUpperTriangle: {[collect, matrix, collidable, plane, calculate, heightfield, collide, collision, triangle, vecf, volume, bounding, shape, arena, vertices, velocity, speed, torque, delta, motor, axes, impulse, transmission, mass, hallmarks, scene, piston, bone, camel, emitter, sphere, square, cinematic, material, friction, bitmap, capsule, rotation, ball, quaternion, joints, light, radius, geometry, hinge, spatial, shader, texture, rotate, body]}
org.ode4j.ode.DMatrix#dFactorLDLT: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.shadow.PssmShadowUtil#computeZFar: {[matrix, camel, material, collect, scene, geometry, light, bounding, texture, shader, volume, spatial, calculate, arena, hallmarks, plane, collidable, sphere, speed, piston, radius, vertices, friction, capsule, cinematic, square, mass, triangle, collide, hinge, bitmap, quaternion, delta, heightfield, emitter, torque, velocity, impulse, axes, motor, rotation, shape, rotate, collision, transmission, joints, ball, bone, vecf, body]}
org.ode4j.ode.internal.processmem.DxWorldProcessContext#ReturnStepperMemArena: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
com.jme3.animation.SkeletonControl#controlRenderHardware: {[matrix, collect, calculate, material, camel, light, shader, arena, texture, scene, bounding, volume, geometry, spatial, speed, emitter, piston, collidable, bitmap, velocity, shape, torque, rotate, transmission, vecf, square, vertices, plane, friction, bone, motor, hinge, heightfield, joints, radius, collide, mass, quaternion, ball, sphere, impulse, hallmarks, delta, triangle, collision, rotation, cinematic, axes, capsule, body]}
org.dyn4j.geometry.Matrix33#invert: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.dyn4j.dynamics.joint.WeldJoint#WeldJoint(C): {[matrix, hinge, axes, impulse, motor, joints, rotation, speed, piston, arena, delta, rotate, velocity, quaternion, mass, friction, torque, body, calculate, collect, ball, bone, transmission, square, vecf, camel, volume, vertices, triangle, hallmarks, sphere, shape, bitmap, bounding, heightfield, emitter, cinematic, material, capsule, collidable, collide, light, texture, geometry, shader, collision, plane, radius, scene, spatial]}
org.ode4j.math.DMatrix3#reTranspose: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.renderer.opengl.GLDebugES#glUniformMatrix4: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.renderer.opengl.GLDebugES#glUniformMatrix3: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.OdeMath#dSetCrossMatrixMinus: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.math.DMatrix3#set: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DxCollisionUtil#dGetEulerAngleFromRot: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.gimpact.GimAABBSet#gim_aabbset_update: {[calculate, collect, arena, collidable, collide, matrix, collision, plane, volume, ball, heightfield, bounding, shape, transmission, sphere, quaternion, rotation, body, rotate, joints, friction, radius, vecf, triangle, hallmarks, speed, square, capsule, spatial, mass, vertices, torque, cinematic, motor, bone, bitmap, camel, geometry, piston, shader, scene, velocity, material, impulse, light, delta, hinge, texture, axes, emitter]}
org.dyn4j.dynamics.joint.FrictionJoint#FrictionJoint(C): {[arena, calculate, matrix, friction, joints, ball, collect, body, impulse, mass, torque, delta, hinge, motor, velocity, piston, transmission, axes, emitter, vertices, speed, vecf, triangle, bounding, shader, volume, collidable, spatial, material, light, camel, rotation, heightfield, hallmarks, cinematic, capsule, square, collision, texture, sphere, rotate, bitmap, shape, scene, radius, bone, quaternion, geometry, plane, collide]}
org.dyn4j.dynamics.joint.PinJoint#PinJoint(C): {[arena, matrix, calculate, friction, joints, ball, collect, body, impulse, mass, torque, hinge, delta, motor, velocity, piston, transmission, axes, emitter, vertices, speed, vecf, triangle, bounding, shader, collidable, volume, spatial, material, light, rotation, camel, hallmarks, heightfield, cinematic, collision, capsule, sphere, texture, square, rotate, shape, bitmap, plane, quaternion, geometry, scene, collide, bone, radius]}
org.ode4j.math.DMatrix3C#dotRowCol: {[matrix, collect, calculate, arena, volume, bounding, collidable, speed, emitter, piston, bone, collide, plane, heightfield, torque, vertices, rotate, velocity, spatial, light, shader, camel, mass, material, collision, joints, motor, friction, transmission, hinge, delta, ball, cinematic, axes, geometry, quaternion, impulse, scene, vecf, sphere, square, texture, rotation, capsule, bitmap, radius, triangle, hallmarks, body, shape]}
com.jme3.renderer.opengl.GL#glUniformMatrix3: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.renderer.opengl.GL#glUniformMatrix4: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.renderer.RenderManager#setWorldMatrix: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DxWorld#dxFreeTemporaryWorldProcessMemArena: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
com.jme3.shadow.BasicShadowRenderer#postFrame: {[matrix, material, light, shader, camel, texture, scene, collect, geometry, spatial, bounding, calculate, volume, bitmap, arena, shape, square, vecf, speed, piston, cinematic, transmission, velocity, torque, rotate, emitter, bone, capsule, collision, friction, motor, vertices, collidable, hinge, radius, axes, quaternion, triangle, sphere, plane, ball, collide, hallmarks, delta, joints, impulse, mass, body, rotation, heightfield]}
com.jme3.math.Matrix4f#copy: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
net.smert.jreactphysics3d.mathematics.Matrix2x2#Matrix2x2(C): {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.dyn4j.geometry.Matrix22#multiply: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.math.Matrix4f#get: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.processmem.DxWorldProcessContext#TryInsertingStepperArenasHead: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
org.dyn4j.geometry.Matrix22#getInverse: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.dyn4j.geometry.Matrix22#getTranspose: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DxCollisionUtil#dClosestLineBoxPoints: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.renderer.Camera#getWorldCoordinates: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.material.logic.MultiPassLightingLogic#render: {[camel, geometry, bounding, light, material, texture, volume, scene, shader, spatial, matrix, hallmarks, collect, radius, sphere, mass, square, bone, delta, rotation, calculate, velocity, bitmap, transmission, impulse, rotate, emitter, axes, motor, friction, plane, quaternion, speed, vertices, arena, capsule, vecf, torque, cinematic, collide, collision, collidable, joints, ball, hinge, heightfield, body, piston, shape, triangle]}
net.smert.jreactphysics3d.mathematics.Matrix3x3#computeSkewSymmetricMatrixForCrossProduct: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.processmem.DxWorldProcessMemArena#FreeMemArena: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
org.ode4j.math.DVector3#eqProd: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.math.Matrix4f#fillFloatBuffer: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.shadow.PssmShadowRenderer#setMatParams: {[material, camel, light, scene, texture, shader, geometry, spatial, matrix, bounding, volume, collect, bitmap, calculate, arena, shape, bone, vecf, speed, piston, friction, square, collision, velocity, cinematic, transmission, torque, hinge, collide, hallmarks, quaternion, motor, rotate, vertices, axes, plane, collidable, heightfield, sphere, capsule, delta, emitter, ball, triangle, impulse, body, mass, joints, radius, rotation]}
org.ode4j.ode.internal.DxBox#dBoxBox: {[collect, matrix, collidable, calculate, plane, heightfield, collide, collision, triangle, vecf, shape, volume, bounding, arena, vertices, speed, velocity, motor, delta, torque, sphere, hallmarks, impulse, axes, emitter, ball, square, mass, piston, bone, joints, rotate, spatial, geometry, body, texture, shader, friction, transmission, rotation, bitmap, quaternion, radius, capsule, scene, light, hinge, cinematic, material, camel]}
org.ode4j.ode.internal.DxBody#dBodySetMass: {[arena, calculate, matrix, friction, joints, collect, ball, mass, impulse, body, torque, delta, motor, transmission, hinge, velocity, piston, emitter, axes, vertices, speed, vecf, triangle, bounding, volume, spatial, radius, square, shader, heightfield, collidable, light, cinematic, material, sphere, rotation, bitmap, capsule, camel, bone, quaternion, hallmarks, scene, rotate, texture, geometry, shape, collide, collision, plane]}
org.ode4j.math.DMatrix3#DMatrix3(C): {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
net.smert.jreactphysics3d.mathematics.Transform#fromOpenGL: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.processmem.DxUtil#dEFFICIENT_PTR: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
com.jme3.math.Matrix4f#set: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.Rotation#dQfromR: {[matrix, collect, quaternion, rotation, axes, rotate, calculate, hinge, transmission, arena, bone, motor, volume, speed, heightfield, impulse, collidable, sphere, piston, joints, plane, radius, collide, camel, emitter, mass, torque, bounding, velocity, capsule, cinematic, geometry, ball, triangle, light, collision, bitmap, delta, shape, shader, material, vertices, body, vecf, texture, friction, square, hallmarks, spatial, scene]}
org.ode4j.ode.DMatrix#dMultiply1: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.DMatrix#dMultiply0: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.processmem.DxWorldProcessMemArena#MakeBufferSize: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
org.ode4j.ode.internal.DxBody#dBodySetRotation: {[matrix, axes, hinge, joints, rotation, arena, impulse, piston, motor, quaternion, rotate, speed, calculate, collect, body, friction, delta, velocity, mass, torque, ball, bone, collidable, square, shape, volume, transmission, camel, emitter, collision, sphere, plane, bounding, radius, material, heightfield, collide, hallmarks, light, spatial, shader, scene, triangle, bitmap, vertices, vecf, geometry, capsule, cinematic, texture]}
org.ode4j.ode.DMatrix#dMultiply2: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.OdeMath#dMULTIPLY1_333: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.OdeMath#dMULTIPLY1_331: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.processmem.DxWorldProcessContext#GetIslandsMemArena: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
org.ode4j.math.DMatrixN#DMatrixN(C): {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
net.smert.jreactphysics3d.constraint.HingeJoint#solveVelocityConstraint: {[impulse, motor, velocity, delta, mass, speed, torque, hinge, friction, rotation, axes, joints, rotate, piston, quaternion, arena, matrix, body, transmission, square, ball, calculate, vecf, triangle, heightfield, bone, radius, collision, hallmarks, vertices, collect, collide, collidable, plane, bitmap, cinematic, spatial, bounding, capsule, scene, sphere, volume, texture, shape, shader, emitter, geometry, camel, material, light]}
org.ode4j.ode.internal.processmem.DxWorldProcessMemArena#SaveState: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
org.ode4j.ode.OdeMath#dMULTIPLY0_133: {[collect, matrix, calculate, collidable, emitter, collide, volume, plane, heightfield, arena, vertices, bounding, vecf, shape, collision, triangle, speed, bone, torque, velocity, piston, mass, shader, hallmarks, square, sphere, impulse, motor, light, material, camel, delta, friction, rotate, axes, spatial, capsule, transmission, radius, cinematic, texture, joints, geometry, ball, hinge, scene, rotation, bitmap, quaternion, body]}
org.ode4j.ode.DRotation#dRfromQ: {[rotation, quaternion, rotate, axes, matrix, speed, hinge, bone, motor, collect, piston, emitter, impulse, velocity, transmission, delta, mass, joints, ball, square, sphere, hallmarks, volume, camel, heightfield, vertices, spatial, triangle, plane, radius, shape, shader, texture, collidable, vecf, cinematic, capsule, collide, torque, body, calculate, friction, geometry, bounding, bitmap, arena, material, collision, scene, light]}
com.jme3.shadow.ShadowUtil#updateShadowCamera: {[camel, material, scene, geometry, texture, light, spatial, shader, bounding, volume, matrix, collect, bitmap, vertices, calculate, hallmarks, plane, bone, collidable, triangle, sphere, arena, emitter, speed, radius, torque, velocity, piston, heightfield, friction, motor, hinge, collide, square, rotation, collision, shape, transmission, axes, quaternion, delta, cinematic, vecf, rotate, joints, capsule, impulse, ball, body, mass]}
com.jme3.effect.ParticleEmitter#renderFromControl: {[matrix, rotation, quaternion, collect, rotate, axes, camel, material, bone, light, scene, spatial, motor, hinge, speed, geometry, impulse, volume, texture, shader, bounding, velocity, piston, delta, mass, transmission, calculate, arena, emitter, joints, hallmarks, ball, square, sphere, plane, collidable, bitmap, friction, collision, vecf, shape, vertices, radius, heightfield, triangle, body, capsule, collide, torque, cinematic]}
org.ode4j.ode.OdeMath#dMULTIPLYOP2_333: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.renderer.RenderManager#renderGeometry: {[material, camel, scene, light, texture, shader, geometry, spatial, matrix, bounding, collect, volume, bitmap, calculate, arena, shape, bone, vecf, speed, piston, friction, velocity, collision, hallmarks, torque, hinge, transmission, plane, square, collidable, quaternion, rotate, motor, collide, vertices, emitter, cinematic, sphere, delta, axes, heightfield, mass, impulse, ball, triangle, radius, rotation, capsule, body, joints]}
org.ode4j.ode.internal.DxMass#getI: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.dyn4j.geometry.Matrix22#add: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.DRotation#dRFromZAxis: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]}
com.jme3.renderer.Camera#getViewProjectionMatrix: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DxGeom#matrixInvert: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.Misc#dMakeRandomMatrix: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
net.smert.jreactphysics3d.mathematics.Matrix3x3#add: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.material.Material#setMatrix4: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.animation.Bone#getOffsetTransform: {[rotation, quaternion, rotate, axes, matrix, speed, hinge, bone, motor, piston, emitter, collect, velocity, impulse, transmission, delta, mass, square, joints, ball, hallmarks, sphere, vertices, volume, camel, heightfield, triangle, spatial, plane, shape, shader, radius, texture, vecf, collidable, torque, collide, capsule, cinematic, bitmap, body, friction, material, bounding, geometry, collision, light, arena, scene, calculate]}
org.ode4j.ode.internal.processmem.BlockPointer#setTo: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
org.ode4j.ode.internal.gimpact.GimGeometry#MATRIX_PRODUCT_2X2: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DxHeightfield#dGeomRaySetNoNormalize: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.Rotation#dRFrom2Axes: {[matrix, collect, calculate, arena, volume, bounding, collidable, emitter, plane, collide, speed, heightfield, bone, piston, axes, vertices, rotation, mass, joints, camel, torque, light, shader, spatial, material, impulse, transmission, friction, collision, quaternion, velocity, cinematic, ball, geometry, scene, rotate, vecf, capsule, bitmap, texture, hinge, triangle, radius, square, body, hallmarks, sphere, motor, delta, shape]}
org.ode4j.math.DMatrix3C#viewCol: {[collect, matrix, calculate, collidable, collide, plane, volume, heightfield, bounding, collision, shape, sphere, speed, triangle, vecf, arena, hallmarks, piston, square, radius, motor, bone, vertices, velocity, quaternion, rotate, torque, spatial, hinge, delta, rotation, impulse, transmission, bitmap, texture, cinematic, shader, geometry, material, camel, ball, light, scene, body, friction, axes, emitter, joints, capsule, mass]}
org.ode4j.math.DMatrix3#viewCol: {[collect, matrix, calculate, collidable, collide, plane, volume, heightfield, bounding, collision, shape, sphere, speed, triangle, vecf, arena, hallmarks, piston, square, radius, motor, bone, vertices, velocity, quaternion, rotate, torque, spatial, hinge, delta, rotation, impulse, transmission, bitmap, texture, cinematic, shader, geometry, material, camel, ball, light, scene, body, friction, axes, emitter, joints, capsule, mass]}
org.ode4j.ode.internal.processmem.DxWorldProcessMemArena#freeTemporary: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
org.ode4j.ode.DMass#rotate: {[matrix, collect, calculate, arena, volume, bounding, collidable, emitter, rotation, axes, plane, collide, heightfield, mass, speed, vertices, camel, quaternion, bone, piston, joints, light, impulse, torque, shader, material, transmission, spatial, friction, cinematic, vecf, collision, scene, velocity, hinge, capsule, bitmap, motor, texture, ball, geometry, hallmarks, rotate, shape, delta, sphere, radius, body, triangle, square]}
org.ode4j.ode.internal.dxStepperStage3CallContext#Initialize: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
net.smert.jreactphysics3d.mathematics.Transform#multiply: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.math.DMatrix3#wrap: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.math.Eigen3f#calculateEigen: {[matrix, collect, calculate, arena, volume, bounding, collidable, emitter, speed, collide, bone, piston, plane, heightfield, vertices, rotate, shader, light, joints, spatial, mass, torque, velocity, friction, camel, material, ball, collision, motor, quaternion, impulse, vecf, axes, geometry, hinge, texture, body, transmission, square, scene, sphere, delta, cinematic, radius, bitmap, rotation, capsule, shape, hallmarks, triangle]}
com.jme3.renderer.Camera#copyFrom: {[matrix, collect, rotation, axes, quaternion, rotate, volume, plane, bounding, collidable, hallmarks, square, heightfield, emitter, calculate, collide, triangle, vertices, shape, hinge, bone, vecf, collision, speed, motor, impulse, mass, piston, camel, velocity, arena, sphere, joints, delta, radius, geometry, bitmap, scene, spatial, cinematic, ball, material, transmission, light, capsule, torque, body, shader, texture, friction]}
org.ode4j.ode.internal.DxCylinder#computeAABB: {[collect, radius, bounding, sphere, hallmarks, matrix, volume, square, transmission, mass, calculate, delta, collide, velocity, plane, impulse, arena, spatial, friction, collidable, shape, bitmap, piston, torque, cinematic, motor, heightfield, bone, quaternion, axes, hinge, joints, geometry, collision, scene, texture, rotation, shader, vertices, material, emitter, body, vecf, rotate, camel, triangle, speed, ball, light, capsule]}
org.ode4j.ode.DMisc#dMaxDifference: {[matrix, collect, quaternion, rotation, axes, rotate, calculate, hinge, transmission, arena, bone, motor, volume, speed, heightfield, impulse, collidable, sphere, piston, joints, plane, radius, collide, camel, emitter, mass, torque, bounding, velocity, capsule, cinematic, geometry, ball, triangle, light, collision, bitmap, delta, shape, shader, material, vertices, body, vecf, texture, friction, square, hallmarks, spatial, scene]}
org.ode4j.ode.internal.processmem.DxWorldProcessMemArena#AdjustArenaSizeForReserveRequirements: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
org.ode4j.ode.internal.joints.DxJointUniversal#getAngle1Internal: {[matrix, hinge, arena, axes, joints, calculate, piston, body, collect, quaternion, impulse, rotation, motor, ball, friction, speed, rotate, delta, torque, velocity, mass, bone, collidable, collision, shape, sphere, radius, heightfield, plane, collide, emitter, volume, cinematic, camel, triangle, capsule, transmission, bitmap, geometry, hallmarks, shader, light, vecf, material, square, vertices, spatial, texture, bounding, scene]}
org.dyn4j.geometry.Matrix33#sum: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.gimpact.GimGeometry#TRANSPOSE_MATRIX_4X4: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.math.DMatrix3C#dotCol: {[collect, matrix, calculate, collidable, collide, plane, volume, heightfield, bounding, collision, shape, sphere, speed, triangle, vecf, arena, hallmarks, piston, square, radius, motor, bone, vertices, velocity, quaternion, rotate, torque, spatial, hinge, delta, rotation, impulse, transmission, bitmap, texture, cinematic, shader, geometry, material, camel, ball, light, scene, body, friction, axes, emitter, joints, capsule, mass]}
com.jme3.renderer.Camera#onFrustumChange: {[matrix, collect, calculate, arena, bounding, volume, collidable, plane, collide, mass, bone, emitter, hallmarks, square, heightfield, sphere, speed, radius, piston, cinematic, spatial, bitmap, axes, impulse, friction, collision, joints, capsule, rotation, camel, transmission, shape, delta, torque, material, light, triangle, vertices, ball, rotate, hinge, texture, shader, motor, scene, vecf, body, velocity, quaternion, geometry]}
org.ode4j.ode.internal.Matrix#dLDLTRemove: {[collect, matrix, calculate, collidable, collide, plane, volume, bounding, heightfield, collision, arena, shape, speed, sphere, triangle, vecf, hallmarks, bone, quaternion, radius, piston, rotate, square, motor, spatial, rotation, vertices, velocity, transmission, ball, hinge, torque, delta, bitmap, impulse, texture, cinematic, joints, geometry, shader, camel, material, friction, emitter, mass, scene, light, body, axes, capsule]}
org.ode4j.math.DMatrix3#equals: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.processmem.DxWorldProcessContext#ObtainStepperMemArena: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
net.smert.jreactphysics3d.mathematics.Quaternion#getMatrix: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.processmem.DxWorldProcessMemArena#GetNextMemArena: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
org.ode4j.ode.internal.DxConvex#SupportIndex: {[calculate, collect, arena, collidable, collide, matrix, collision, plane, volume, ball, heightfield, bounding, shape, transmission, sphere, quaternion, rotation, body, rotate, joints, friction, radius, vecf, triangle, hallmarks, speed, square, capsule, spatial, mass, vertices, torque, cinematic, motor, bone, bitmap, camel, geometry, piston, shader, scene, velocity, material, impulse, light, delta, hinge, texture, axes, emitter]}
org.ode4j.ode.internal.DxCollisionUtil#dMatrix3Det: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.shadow.AbstractShadowFilter#preFrame: {[matrix, collect, calculate, material, camel, light, shader, arena, texture, scene, bounding, volume, geometry, spatial, speed, emitter, piston, collidable, bitmap, velocity, shape, torque, rotate, transmission, vecf, square, vertices, plane, friction, bone, motor, hinge, heightfield, joints, radius, collide, mass, quaternion, ball, sphere, impulse, hallmarks, delta, triangle, collision, rotation, cinematic, axes, capsule, body]}
org.ode4j.math.DMatrix3#setIdentity: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.dyn4j.geometry.Matrix33#identity: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DxWorld#dxAllocateTemporaryWorldProcessMemArena: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
com.jme3.renderer.Camera#updateViewProjection: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.DGeom#getOffsetRotation: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]}
org.ode4j.ode.internal.DxRay#dGeomRaySet: {[matrix, collect, calculate, arena, volume, bounding, collidable, speed, emitter, piston, bone, collide, plane, heightfield, torque, vertices, rotate, velocity, spatial, light, shader, camel, mass, material, collision, joints, motor, friction, transmission, hinge, delta, ball, cinematic, axes, geometry, quaternion, impulse, scene, vecf, sphere, square, texture, rotation, capsule, bitmap, radius, triangle, hallmarks, body, shape]}
org.ode4j.ode.OdeMath#dCalcVectorDot3: {[calculate, collect, arena, collidable, collide, matrix, collision, plane, volume, ball, heightfield, bounding, shape, transmission, sphere, quaternion, rotation, body, rotate, joints, friction, radius, vecf, triangle, hallmarks, speed, square, capsule, spatial, mass, vertices, torque, cinematic, motor, bone, bitmap, camel, geometry, piston, shader, scene, velocity, material, impulse, light, delta, hinge, texture, axes, emitter]}
org.ode4j.ode.internal.gimpact.GimGeometry#ACCUM_SCALE_MATRIX_2X2: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.dyn4j.geometry.Matrix33#transpose: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
net.smert.jreactphysics3d.mathematics.Matrix3x3#Matrix3x3(C): {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
net.smert.jreactphysics3d.constraint.FixedJoint#initBeforeSolve: {[motor, rotation, speed, impulse, axes, rotate, velocity, hinge, quaternion, delta, mass, piston, joints, torque, friction, matrix, bone, body, arena, square, ball, calculate, transmission, collect, vecf, hallmarks, triangle, heightfield, emitter, radius, collide, collidable, collision, vertices, plane, bitmap, texture, scene, shader, volume, camel, cinematic, material, spatial, bounding, light, capsule, shape, sphere, geometry]}
org.ode4j.ode.internal.processmem.DxWorldProcessContext#SetStepperArenasList: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
net.smert.jreactphysics3d.constraint.HingeJoint#solvePositionConstraint: {[rotation, motor, speed, axes, rotate, impulse, hinge, quaternion, velocity, piston, delta, mass, joints, torque, friction, matrix, bone, body, arena, ball, square, calculate, transmission, collect, vecf, hallmarks, triangle, emitter, heightfield, collide, collidable, collision, bitmap, plane, vertices, radius, texture, scene, shader, volume, camel, sphere, cinematic, material, light, capsule, shape, spatial, bounding, geometry]}
org.ode4j.ode.internal.joints.DxJointDBall#getInfo2: {[arena, matrix, calculate, collect, ball, joints, body, friction, impulse, hinge, torque, mass, delta, piston, motor, axes, collidable, emitter, transmission, velocity, vertices, collision, shader, volume, bounding, collide, plane, material, light, speed, hallmarks, shape, camel, heightfield, radius, spatial, vecf, sphere, texture, rotate, square, scene, quaternion, bitmap, triangle, bone, geometry, rotation, cinematic, capsule]}
org.ode4j.ode.internal.Matrix#dIsPositiveDefinite: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, rotate, shader, light, heightfield, torque, camel, material, velocity, mass, spatial, joints, friction, vecf, transmission, square, impulse, ball, shape, motor, axes, texture, cinematic, hinge, scene, geometry, collision, triangle, rotation, hallmarks, delta, radius, quaternion, capsule, sphere, body, bitmap]}
org.ode4j.ode.internal.DxCollisionUtil#answer: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.OdeMath#dMultiply0_333: {[matrix, collect, camel, material, geometry, spatial, scene, light, texture, shader, bounding, volume, calculate, arena, vertices, emitter, bone, collide, hallmarks, speed, collidable, plane, heightfield, piston, rotate, capsule, square, friction, sphere, cinematic, delta, triangle, torque, shape, bitmap, mass, transmission, radius, joints, velocity, hinge, collision, vecf, impulse, rotation, quaternion, motor, ball, axes, body]}
org.ode4j.ode.OdeMath#dMultiply0_331: {[matrix, collect, calculate, arena, speed, collidable, emitter, volume, piston, bounding, velocity, torque, vertices, bone, collide, mass, heightfield, rotate, plane, motor, impulse, delta, vecf, friction, transmission, shader, joints, light, rotation, hinge, camel, spatial, material, collision, triangle, axes, square, shape, quaternion, cinematic, scene, radius, ball, texture, hallmarks, capsule, body, bitmap, geometry, sphere]}
net.smert.jreactphysics3d.constraint.SliderJoint#initBeforeSolve: {[motor, speed, rotation, impulse, velocity, rotate, axes, hinge, delta, quaternion, mass, piston, torque, joints, friction, matrix, bone, body, arena, square, ball, transmission, calculate, vecf, triangle, heightfield, hallmarks, collect, collide, collidable, collision, radius, emitter, plane, vertices, bitmap, texture, scene, shader, volume, cinematic, material, spatial, camel, light, capsule, bounding, sphere, shape, geometry]}
org.ode4j.ode.internal.DLCP#dSolveLCP: {[matrix, collect, calculate, arena, emitter, bounding, volume, mass, vertices, bone, friction, impulse, vecf, joints, speed, collidable, piston, light, shader, spatial, triangle, camel, material, delta, shape, ball, cinematic, rotate, axes, plane, collide, rotation, motor, capsule, body, radius, bitmap, collision, texture, scene, heightfield, transmission, sphere, velocity, hinge, hallmarks, geometry, quaternion, square, torque]}
net.smert.jreactphysics3d.collision.shapes.CollisionShape#updateAABB: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DLCP#dTestSolveLCP: {[collect, matrix, collidable, calculate, plane, heightfield, collide, collision, triangle, vecf, volume, bounding, shape, arena, vertices, velocity, speed, torque, delta, motor, axes, impulse, transmission, mass, hallmarks, scene, bone, piston, camel, sphere, cinematic, square, emitter, material, friction, bitmap, ball, capsule, joints, rotation, light, radius, quaternion, geometry, hinge, rotate, shader, texture, spatial, body]}
org.ode4j.ode.internal.DxBody#getRotation: {[matrix, axes, hinge, joints, rotation, arena, impulse, piston, motor, quaternion, rotate, speed, calculate, collect, body, friction, delta, velocity, mass, torque, ball, bone, collidable, square, shape, volume, transmission, camel, emitter, collision, sphere, plane, bounding, radius, material, heightfield, collide, hallmarks, light, spatial, shader, scene, triangle, bitmap, vertices, vecf, geometry, capsule, cinematic, texture]}
org.ode4j.ode.internal.joints.Info2Descr#setJ1aCrossMatrix: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.math.DMatrix3#dMultiply0: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.math.DMatrix3C#isEq: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.CollideBoxPlane#FOO2: {[matrix, collect, calculate, arena, volume, bounding, collidable, speed, emitter, piston, bone, collide, plane, heightfield, torque, vertices, rotate, velocity, spatial, light, shader, camel, mass, material, collision, joints, motor, friction, transmission, hinge, delta, ball, cinematic, axes, geometry, quaternion, impulse, scene, vecf, sphere, square, texture, rotation, capsule, bitmap, radius, triangle, hallmarks, body, shape]}
org.dyn4j.geometry.Matrix22#invert: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DxGeom#copyRotation: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]}
org.ode4j.math.DMatrix3#newArray: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.math.Eigen3f#scaleMatrix: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DxPosR#R: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.math.DMatrix3C#dotRowRow: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.math.DMatrixN#setCol: {[collect, matrix, calculate, collidable, collide, plane, volume, heightfield, bounding, collision, shape, sphere, speed, triangle, vecf, arena, hallmarks, piston, square, radius, motor, bone, vertices, velocity, quaternion, rotate, torque, spatial, hinge, delta, rotation, impulse, transmission, bitmap, texture, cinematic, shader, geometry, material, camel, ball, light, scene, body, friction, axes, emitter, joints, capsule, mass]}
net.smert.jreactphysics3d.constraint.SliderJoint#solvePositionConstraint: {[rotation, axes, motor, speed, rotate, hinge, quaternion, impulse, velocity, piston, delta, mass, joints, torque, matrix, friction, bone, body, arena, calculate, ball, square, collect, transmission, emitter, hallmarks, vecf, triangle, heightfield, collide, bitmap, radius, collision, texture, vertices, collidable, volume, plane, scene, shader, camel, shape, sphere, cinematic, bounding, material, light, capsule, spatial, geometry]}
org.ode4j.ode.internal.joints.DxJointUniversal#dJointSetUniversalAxis2Offset: {[matrix, arena, hinge, joints, axes, calculate, piston, collect, body, impulse, quaternion, ball, rotation, motor, friction, speed, rotate, delta, torque, velocity, mass, bone, collidable, collision, shape, sphere, radius, heightfield, plane, collide, emitter, volume, camel, cinematic, triangle, transmission, capsule, bitmap, shader, geometry, light, hallmarks, material, vecf, square, vertices, bounding, spatial, scene, texture]}
com.jme3.renderer.Camera#getProjectionMatrix: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DxGeom#copyOffsetRotation: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]}
org.ode4j.ode.internal.DLCP#checkFactorization: {[collect, matrix, collidable, plane, calculate, heightfield, collide, collision, triangle, vecf, volume, bounding, shape, arena, vertices, velocity, speed, torque, delta, motor, axes, impulse, transmission, mass, hallmarks, scene, piston, bone, camel, emitter, sphere, square, cinematic, material, friction, bitmap, capsule, rotation, ball, quaternion, joints, light, radius, geometry, hinge, spatial, shader, texture, rotate, body]}
org.ode4j.ode.internal.gimpact.GimGeometry#MATRIX_PRODUCT_3X3: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DxConvex#ComputeInterval: {[calculate, collect, arena, collidable, collide, matrix, collision, plane, volume, ball, heightfield, bounding, shape, transmission, sphere, quaternion, rotation, body, rotate, joints, friction, radius, vecf, triangle, hallmarks, speed, square, capsule, spatial, mass, vertices, torque, cinematic, motor, bone, bitmap, camel, geometry, piston, shader, scene, velocity, material, impulse, light, delta, hinge, texture, axes, emitter]}
org.ode4j.ode.internal.DWorldStepMemoryFunctionsInfo#run: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
com.jme3.scene.instancing.InstancedGeometry#updateInstance: {[rotation, quaternion, rotate, axes, matrix, speed, hinge, bone, motor, collect, piston, emitter, impulse, velocity, transmission, delta, mass, joints, ball, square, sphere, hallmarks, volume, camel, heightfield, vertices, spatial, triangle, plane, radius, shape, shader, texture, collidable, vecf, cinematic, capsule, collide, torque, body, calculate, friction, geometry, bounding, bitmap, arena, material, collision, scene, light]}
org.ode4j.ode.DGeom#setOffsetWorldRotation: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]}
net.smert.jreactphysics3d.constraint.BallAndSocketJoint#initBeforeSolve: {[impulse, motor, mass, delta, velocity, joints, friction, hinge, torque, arena, speed, matrix, axes, piston, body, calculate, rotation, rotate, ball, quaternion, transmission, collect, vecf, bone, triangle, square, vertices, heightfield, radius, collision, collide, hallmarks, plane, spatial, collidable, scene, volume, bounding, bitmap, emitter, texture, cinematic, sphere, geometry, shape, camel, material, capsule, shader, light]}
org.ode4j.ode.internal.gimpact.GimAABBSet#gim_aabbset_calc_global_bound: {[calculate, collect, arena, collidable, collide, matrix, collision, plane, volume, ball, heightfield, bounding, shape, transmission, sphere, quaternion, rotation, body, rotate, joints, friction, radius, vecf, triangle, hallmarks, speed, square, capsule, spatial, mass, vertices, torque, cinematic, motor, bone, bitmap, camel, geometry, piston, shader, scene, velocity, material, impulse, light, delta, hinge, texture, axes, emitter]}
org.ode4j.ode.internal.Matrix#dSolveCholesky: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DxRay#computeAABB: {[collect, matrix, calculate, collidable, collide, plane, volume, heightfield, bounding, collision, shape, sphere, speed, triangle, vecf, arena, hallmarks, piston, square, radius, motor, bone, vertices, velocity, quaternion, rotate, torque, spatial, hinge, delta, rotation, impulse, transmission, bitmap, texture, cinematic, shader, geometry, material, camel, ball, light, scene, body, friction, axes, emitter, joints, capsule, mass]}
org.ode4j.ode.internal.gimpact.GimGeometry#TRANSPOSE_MATRIX_3X3: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.OdeMath#dCalcVectorCross3: {[calculate, collect, arena, collidable, collide, matrix, collision, plane, volume, ball, heightfield, bounding, shape, transmission, sphere, quaternion, rotation, body, rotate, joints, friction, radius, vecf, triangle, hallmarks, speed, square, capsule, spatial, mass, vertices, torque, cinematic, motor, bone, bitmap, camel, geometry, piston, shader, scene, velocity, material, impulse, light, delta, hinge, texture, axes, emitter]}
org.ode4j.ode.internal.processmem.DxWorldProcessContext#DxWorldProcessContext(C): {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
org.ode4j.ode.internal.processmem.DxWorldProcessMemArena#PeekBufferRemainder: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
org.ode4j.ode.OdeMath#dOrthogonalizeR: {[matrix, collect, calculate, arena, volume, bounding, collidable, emitter, speed, collide, bone, piston, plane, heightfield, vertices, rotate, shader, light, joints, spatial, mass, torque, velocity, friction, camel, material, ball, collision, motor, quaternion, impulse, vecf, axes, geometry, hinge, texture, body, transmission, square, scene, sphere, delta, cinematic, radius, bitmap, rotation, capsule, shape, hallmarks, triangle]}
org.ode4j.ode.internal.processmem.DxWorldProcessContext#TryExtractingStepperArenasHead: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
net.smert.jreactphysics3d.mathematics.Matrix3x3#subtract: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.math.DMatrix3#isEqual: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.renderer.Camera#setProjectionMatrix: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DxRay#dGeomRayGet: {[collect, matrix, calculate, collidable, collide, plane, volume, heightfield, bounding, collision, shape, sphere, speed, triangle, vecf, arena, hallmarks, piston, square, radius, motor, bone, vertices, velocity, quaternion, rotate, torque, spatial, hinge, delta, rotation, impulse, transmission, bitmap, texture, cinematic, shader, geometry, material, camel, ball, light, scene, body, friction, axes, emitter, joints, capsule, mass]}
org.ode4j.ode.internal.DxBody#dBodyCreate: {[matrix, impulse, arena, hinge, joints, motor, axes, friction, mass, delta, calculate, velocity, piston, speed, body, torque, rotation, ball, collect, rotate, quaternion, bone, transmission, vecf, vertices, square, triangle, volume, bounding, spatial, hallmarks, heightfield, shape, scene, camel, radius, sphere, geometry, texture, collidable, light, capsule, shader, collide, cinematic, plane, material, emitter, bitmap, collision]}
org.ode4j.ode.internal.DxBody#setRotation: {[matrix, axes, hinge, joints, rotation, arena, impulse, piston, motor, quaternion, rotate, speed, calculate, collect, body, friction, delta, velocity, mass, torque, ball, bone, collidable, square, shape, volume, transmission, camel, emitter, collision, sphere, plane, bounding, radius, material, heightfield, collide, hallmarks, light, spatial, shader, scene, triangle, bitmap, vertices, vecf, geometry, capsule, cinematic, texture]}
net.smert.jreactphysics3d.mathematics.Matrix2x2#set: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.processmem.DxWorldProcessMemArena#ResetState: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
org.ode4j.math.DMatrixN#mulNew: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.collision.bih.BIHTree#collideWithRay: {[collect, collidable, plane, collide, heightfield, collision, matrix, triangle, vecf, shape, calculate, volume, vertices, bounding, hallmarks, sphere, emitter, motor, speed, square, velocity, arena, delta, torque, impulse, axes, mass, radius, ball, piston, friction, scene, capsule, joints, hinge, shader, camel, bone, rotate, body, quaternion, rotation, bitmap, transmission, texture, geometry, material, cinematic, spatial, light]}
org.ode4j.ode.internal.Rotation#dRFromEulerAngles: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.joints.DxJointUniversal#computeInitialRelativeRotations: {[matrix, arena, hinge, joints, axes, calculate, piston, collect, body, impulse, quaternion, ball, rotation, motor, friction, speed, rotate, delta, torque, velocity, mass, bone, collidable, collision, shape, sphere, radius, heightfield, plane, collide, emitter, volume, camel, cinematic, triangle, transmission, capsule, bitmap, shader, geometry, light, hallmarks, material, vecf, square, vertices, bounding, spatial, scene, texture]}
org.dyn4j.geometry.Matrix22#product: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.dyn4j.geometry.Matrix22#Matrix22(C): {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
net.smert.jreactphysics3d.mathematics.Transform#inverse: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.shadow.OccludersExtractor#process: {[camel, material, scene, geometry, texture, light, spatial, shader, bounding, matrix, volume, collect, calculate, vertices, plane, bitmap, hallmarks, collidable, arena, triangle, sphere, bone, speed, heightfield, velocity, torque, piston, friction, motor, radius, collide, emitter, hinge, square, collision, rotation, capsule, axes, transmission, vecf, quaternion, cinematic, delta, shape, rotate, ball, mass, impulse, body, joints]}
com.jme3.math.Triangle#getNormal: {[calculate, collect, arena, collidable, collide, matrix, collision, plane, volume, ball, heightfield, bounding, shape, transmission, sphere, quaternion, rotation, body, rotate, joints, friction, radius, vecf, triangle, hallmarks, speed, square, capsule, spatial, mass, vertices, torque, cinematic, motor, bone, bitmap, camel, geometry, piston, shader, scene, velocity, material, impulse, light, delta, hinge, texture, axes, emitter]}
org.ode4j.ode.internal.DxCollisionUtil#dLineClosestApproach: {[calculate, collect, arena, collidable, collide, matrix, collision, plane, volume, ball, heightfield, bounding, shape, transmission, sphere, quaternion, rotation, body, rotate, joints, friction, radius, vecf, triangle, hallmarks, speed, square, capsule, spatial, mass, vertices, torque, cinematic, motor, bone, bitmap, camel, geometry, piston, shader, scene, velocity, material, impulse, light, delta, hinge, texture, axes, emitter]}
org.dyn4j.dynamics.joint.RevoluteJoint#RevoluteJoint(C): {[impulse, motor, hinge, axes, matrix, rotation, speed, joints, delta, velocity, piston, rotate, mass, quaternion, arena, friction, torque, body, calculate, ball, collect, bone, transmission, square, vecf, triangle, vertices, heightfield, hallmarks, camel, bitmap, collide, volume, cinematic, sphere, capsule, bounding, collision, emitter, plane, texture, material, shape, radius, light, geometry, scene, spatial, collidable, shader]}
org.ode4j.ode.internal.joints.DxJointPiston#getInfo2: {[calculate, arena, matrix, collect, ball, joints, body, friction, collidable, collision, hinge, plane, collide, shape, heightfield, volume, impulse, axes, torque, bounding, mass, transmission, piston, delta, triangle, vecf, motor, velocity, shader, material, emitter, square, light, sphere, quaternion, camel, scene, spatial, rotate, vertices, rotation, texture, hallmarks, speed, bone, bitmap, cinematic, capsule, geometry, radius]}
org.dyn4j.dynamics.joint.RevoluteJoint#solvePositionConstraints: {[impulse, motor, delta, velocity, mass, speed, axes, rotation, hinge, rotate, torque, joints, friction, piston, quaternion, matrix, arena, body, square, transmission, calculate, ball, collect, bone, hallmarks, radius, bitmap, vecf, cinematic, heightfield, triangle, bounding, volume, capsule, sphere, texture, shader, collision, collide, spatial, vertices, scene, collidable, shape, emitter, geometry, light, plane, camel, material]}
org.ode4j.ode.internal.DxGeom#dGeomCopyOffsetRotation: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]}
com.jme3.math.Eigen3f#positiveRank: {[matrix, collect, calculate, arena, volume, bounding, collidable, speed, emitter, piston, bone, collide, plane, heightfield, torque, vertices, rotate, velocity, spatial, light, shader, camel, mass, material, collision, joints, motor, friction, transmission, hinge, delta, ball, cinematic, axes, geometry, quaternion, impulse, scene, vecf, sphere, square, texture, rotation, capsule, bitmap, radius, triangle, hallmarks, body, shape]}
com.jme3.scene.Geometry#updateWorldTransforms: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.CollideCapsuleBox#dCollideCapsuleBox: {[collide, collect, volume, heightfield, capsule, calculate, sphere, plane, collidable, shape, bounding, collision, hallmarks, radius, cinematic, emitter, matrix, bitmap, vecf, triangle, square, bone, transmission, vertices, arena, motor, axes, impulse, piston, delta, light, torque, speed, shader, ball, geometry, material, spatial, joints, mass, scene, camel, hinge, friction, texture, rotate, rotation, body, velocity, quaternion]}
org.ode4j.ode.internal.Matrix#dLDLTAddTL: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
net.smert.jreactphysics3d.constraint.BallAndSocketJoint#solveVelocityConstraint: {[mass, arena, impulse, friction, delta, torque, motor, joints, velocity, calculate, matrix, transmission, body, ball, hinge, speed, collect, piston, vecf, triangle, vertices, axes, emitter, heightfield, radius, square, rotation, collision, spatial, bounding, rotate, collide, plane, cinematic, sphere, collidable, hallmarks, volume, bitmap, shape, capsule, scene, quaternion, light, shader, texture, bone, material, camel, geometry]}
net.smert.jreactphysics3d.mathematics.Transform#getOpenGLMatrix: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.DMatrix#dInvertPDMatrix: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.scene.Geometry#collideWith: {[collect, collidable, plane, triangle, heightfield, volume, collision, collide, bounding, vertices, vecf, matrix, shape, calculate, scene, camel, geometry, material, spatial, hallmarks, emitter, texture, light, sphere, velocity, motor, speed, shader, torque, arena, square, delta, impulse, axes, mass, ball, radius, piston, friction, cinematic, hinge, joints, bitmap, bone, body, transmission, quaternion, capsule, rotate, rotation]}
org.ode4j.ode.internal.DxBody#dBodyCopyRotation: {[matrix, axes, hinge, joints, rotation, arena, impulse, piston, motor, quaternion, rotate, speed, calculate, collect, body, friction, delta, velocity, mass, torque, ball, bone, collidable, square, shape, volume, transmission, camel, emitter, collision, sphere, plane, bounding, radius, material, heightfield, collide, hallmarks, light, spatial, shader, scene, triangle, bitmap, vertices, vecf, geometry, capsule, cinematic, texture]}
org.ode4j.ode.internal.Step#dxStepIsland_Stage0_Bodies: {[arena, calculate, matrix, friction, joints, collect, ball, mass, impulse, body, torque, delta, motor, transmission, hinge, velocity, piston, emitter, axes, vertices, speed, vecf, triangle, bounding, volume, spatial, radius, square, shader, heightfield, collidable, light, cinematic, material, sphere, rotation, bitmap, capsule, camel, bone, quaternion, hallmarks, scene, rotate, texture, geometry, shape, collide, collision, plane]}
org.ode4j.ode.internal.DxGeom#dGeomCopyRotation: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]}
org.ode4j.ode.internal.dxStepperStage1CallContext#dxStepperStage1CallContext(C): {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
com.jme3.math.Matrix3f#set: {[rotation, quaternion, rotate, axes, matrix, speed, hinge, bone, motor, collect, piston, emitter, impulse, velocity, transmission, delta, mass, joints, ball, square, sphere, hallmarks, volume, camel, heightfield, vertices, spatial, triangle, plane, radius, shape, shader, texture, collidable, vecf, cinematic, capsule, collide, torque, body, calculate, friction, geometry, bounding, bitmap, arena, material, collision, scene, light]}
net.smert.jreactphysics3d.mathematics.Matrix3x3#multiply: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DLCP#solve1: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.OdeMath#dMULTIPLY2_333: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.processmem.DxWorldProcessMemArena#MakeArenaSize: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
org.ode4j.ode.internal.DLCP#transfer_i_from_C_to_N: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.Rotation#DQFR_case_1: {[matrix, collect, quaternion, rotation, axes, rotate, calculate, hinge, transmission, arena, bone, motor, volume, speed, heightfield, impulse, collidable, sphere, piston, joints, plane, radius, collide, camel, emitter, mass, torque, bounding, velocity, capsule, cinematic, geometry, ball, triangle, light, collision, bitmap, delta, shape, shader, material, vertices, body, vecf, texture, friction, square, hallmarks, spatial, scene]}
org.ode4j.ode.internal.Rotation#DQFR_case_2: {[matrix, collect, quaternion, rotation, axes, rotate, calculate, hinge, transmission, arena, bone, motor, volume, speed, heightfield, impulse, collidable, sphere, piston, joints, plane, radius, collide, camel, emitter, mass, torque, bounding, velocity, capsule, cinematic, geometry, ball, triangle, light, collision, bitmap, delta, shape, shader, material, vertices, body, vecf, texture, friction, square, hallmarks, spatial, scene]}
org.ode4j.ode.DRotation#dRFromEulerAngles: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]}
org.ode4j.ode.internal.Rotation#DQFR_case_0: {[matrix, collect, quaternion, rotation, axes, rotate, calculate, hinge, transmission, arena, bone, motor, volume, speed, heightfield, impulse, collidable, sphere, piston, joints, plane, radius, collide, camel, emitter, mass, torque, bounding, velocity, capsule, cinematic, geometry, ball, triangle, light, collision, bitmap, delta, shape, shader, material, vertices, body, vecf, texture, friction, square, hallmarks, spatial, scene]}
com.jme3.math.Quaternion#apply: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]}
org.ode4j.ode.internal.CollideBoxPlane#dCollideBoxPlane: {[collect, matrix, calculate, collidable, collide, plane, heightfield, collision, volume, bounding, triangle, shape, vecf, arena, speed, vertices, sphere, hallmarks, velocity, motor, torque, delta, square, piston, axes, impulse, radius, emitter, ball, bone, rotate, joints, spatial, capsule, mass, hinge, geometry, quaternion, scene, friction, texture, body, camel, rotation, light, bitmap, material, transmission, shader, cinematic]}
org.ode4j.ode.internal.gimpact.GimGeometry#IDENTIFY_MATRIX_4X4: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.gimpact.GimTrimesh#gim_trimesh_set_tranform: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DxGimpactCollision#MakeMatrix: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]}
org.ode4j.ode.DMatrix#dSolveLDLT: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.util.mikktspace.MikktspaceTangentGenerator#initTriInfo: {[calculate, collect, arena, collidable, collide, matrix, collision, plane, volume, ball, heightfield, bounding, shape, transmission, sphere, quaternion, rotation, body, rotate, joints, friction, radius, vecf, triangle, hallmarks, speed, square, capsule, spatial, mass, vertices, torque, cinematic, motor, bone, bitmap, camel, geometry, piston, shader, scene, velocity, material, impulse, light, delta, hinge, texture, axes, emitter]}
com.jme3.shader.Uniform#setValue: {[matrix, collect, rotation, quaternion, camel, axes, light, material, rotate, shader, scene, spatial, texture, transmission, bone, calculate, volume, geometry, arena, hinge, bounding, bitmap, sphere, radius, impulse, motor, speed, collidable, cinematic, piston, heightfield, emitter, joints, torque, plane, capsule, square, ball, triangle, mass, shape, collide, delta, velocity, vecf, friction, body, vertices, hallmarks, collision]}
org.dyn4j.dynamics.joint.MotorJoint#MotorJoint(C): {[impulse, motor, hinge, axes, matrix, rotation, speed, joints, delta, velocity, piston, rotate, mass, quaternion, arena, friction, torque, body, calculate, ball, collect, bone, transmission, square, vecf, triangle, vertices, heightfield, hallmarks, camel, bitmap, collide, volume, cinematic, sphere, capsule, bounding, collision, emitter, plane, texture, material, shape, radius, light, geometry, scene, spatial, collidable, shader]}
org.ode4j.ode.internal.DxGeom#setRotation: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]}
com.jme3.material.logic.SinglePassLightingLogic#updateLightListUniforms: {[bounding, geometry, light, material, camel, volume, texture, shader, scene, collect, matrix, spatial, radius, sphere, hallmarks, calculate, mass, transmission, square, delta, bitmap, arena, friction, piston, impulse, vecf, velocity, plane, quaternion, bone, hinge, torque, collide, collision, capsule, vertices, collidable, motor, shape, speed, triangle, rotate, cinematic, axes, joints, emitter, body, ball, rotation, heightfield]}
org.ode4j.ode.DMisc#dPrintMatrix: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.math.DMatrix3#eqMul: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.processmem.DxWorldProcessContext#GetStepperArenasList: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
org.ode4j.ode.internal.DxGeom#getWorldOffsetPosr: {[arena, matrix, calculate, collect, ball, joints, body, friction, impulse, hinge, torque, mass, delta, piston, motor, axes, collidable, emitter, transmission, velocity, vertices, collision, shader, volume, bounding, collide, plane, material, light, speed, hallmarks, shape, camel, heightfield, radius, spatial, vecf, sphere, texture, rotate, square, scene, quaternion, bitmap, triangle, bone, geometry, rotation, cinematic, capsule]}
com.jme3.math.Transform#invert: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.gimpact.GimGeometry#ZERO_MATRIX_4X4: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.bounding.BoundingSphere#computeFromPoints: {[calculate, collect, arena, collidable, collide, matrix, collision, plane, volume, ball, heightfield, bounding, shape, transmission, sphere, quaternion, rotation, body, rotate, joints, friction, radius, vecf, triangle, hallmarks, speed, square, capsule, spatial, mass, vertices, torque, cinematic, motor, bone, bitmap, camel, geometry, piston, shader, scene, velocity, material, impulse, light, delta, hinge, texture, axes, emitter]}
com.jme3.scene.CollisionData#collideWith: {[collect, collidable, plane, collide, heightfield, collision, triangle, vecf, shape, matrix, calculate, volume, vertices, bounding, hallmarks, sphere, emitter, motor, speed, velocity, square, delta, torque, arena, impulse, axes, mass, radius, ball, piston, friction, scene, capsule, joints, shader, hinge, bone, camel, body, rotate, bitmap, rotation, texture, quaternion, geometry, transmission, cinematic, light, spatial, material]}
org.ode4j.ode.internal.DxCollisionUtil#dMat3GetCol: {[matrix, collect, calculate, arena, volume, bounding, collidable, speed, emitter, piston, bone, collide, plane, heightfield, torque, vertices, rotate, velocity, spatial, light, shader, camel, mass, material, collision, joints, motor, friction, transmission, hinge, delta, ball, cinematic, axes, geometry, quaternion, impulse, scene, vecf, sphere, square, texture, rotation, capsule, bitmap, radius, triangle, hallmarks, body, shape]}
org.ode4j.ode.internal.processmem.DxWorldProcessMemArena#BUFFER_TO_ARENA_EXTRA: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
org.ode4j.ode.internal.processmem.DxUtil#sizeof: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
org.dyn4j.geometry.Matrix33#add: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DLCP#DLCP(C): {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DLCP#estimate_transfer_i_from_C_to_N_mem_req: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.dyn4j.geometry.Matrix22#difference: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DxCollisionUtil#dMat3ColCrossVector3: {[matrix, collect, calculate, arena, volume, bounding, collidable, speed, emitter, piston, bone, collide, plane, heightfield, torque, vertices, rotate, velocity, spatial, light, shader, camel, mass, material, collision, joints, motor, friction, transmission, hinge, delta, ball, cinematic, axes, geometry, quaternion, impulse, scene, vecf, sphere, square, texture, rotation, capsule, bitmap, radius, triangle, hallmarks, body, shape]}
org.ode4j.ode.internal.DxCollisionUtil#dClosestLineSegmentPoints: {[calculate, collect, arena, collidable, collide, matrix, collision, plane, volume, ball, heightfield, bounding, shape, transmission, sphere, quaternion, rotation, body, rotate, joints, friction, radius, vecf, triangle, hallmarks, speed, square, capsule, spatial, mass, vertices, torque, cinematic, motor, bone, bitmap, camel, geometry, piston, shader, scene, velocity, material, impulse, light, delta, hinge, texture, axes, emitter]}
net.smert.jreactphysics3d.mathematics.Matrix2x2#add: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DxMass#dMassTranslate: {[matrix, collect, calculate, arena, mass, emitter, impulse, bounding, vertices, vecf, volume, delta, friction, triangle, radius, motor, transmission, velocity, spatial, joints, bone, collision, square, torque, sphere, shape, cinematic, hallmarks, rotation, bitmap, piston, axes, heightfield, ball, light, capsule, body, shader, camel, material, hinge, scene, speed, rotate, texture, geometry, collidable, plane, quaternion, collide]}
org.ode4j.ode.internal.joints.DxJointPR#getInfo2: {[arena, calculate, matrix, collect, ball, joints, body, friction, impulse, hinge, torque, mass, delta, collidable, piston, transmission, motor, axes, emitter, collision, velocity, volume, bounding, collide, vertices, plane, shader, shape, heightfield, light, material, spatial, speed, rotate, hallmarks, quaternion, camel, texture, bitmap, radius, rotation, vecf, scene, bone, sphere, geometry, square, capsule, cinematic, triangle]}
net.smert.jreactphysics3d.mathematics.Matrix2x2#multiply: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
net.smert.jreactphysics3d.constraint.SliderJoint#solveVelocityConstraint: {[impulse, motor, velocity, delta, mass, speed, torque, hinge, rotation, axes, friction, rotate, joints, piston, quaternion, arena, matrix, body, transmission, ball, square, calculate, vecf, triangle, bone, heightfield, radius, collect, collision, hallmarks, vertices, collide, collidable, plane, bitmap, cinematic, bounding, spatial, capsule, scene, volume, sphere, texture, shape, shader, camel, geometry, emitter, material, light]}
org.ode4j.ode.DMass#getI: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.shadow.PssmShadowRenderer#postQueue: {[camel, material, spatial, scene, light, texture, shader, geometry, matrix, bone, rotation, quaternion, bitmap, rotate, bounding, volume, collect, axes, transmission, emitter, speed, hinge, cinematic, vertices, piston, shape, motor, impulse, radius, delta, arena, hallmarks, capsule, sphere, calculate, collision, triangle, vecf, collide, ball, torque, plane, square, velocity, joints, friction, collidable, mass, heightfield, body]}
org.ode4j.ode.DRotation#dRSetIdentity: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.Step#dxStepIsland_Stage1: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
org.ode4j.ode.internal.processmem.DxSingleIslandCallContext#RestoreSavedMemArenaStateForStepper: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
com.jme3.math.Triangle#calculateNormal: {[calculate, collect, arena, collidable, collide, matrix, collision, plane, volume, ball, heightfield, bounding, shape, transmission, sphere, quaternion, rotation, body, rotate, joints, friction, radius, vecf, triangle, hallmarks, speed, square, capsule, spatial, mass, vertices, torque, cinematic, motor, bone, bitmap, camel, geometry, piston, shader, scene, velocity, material, impulse, light, delta, hinge, texture, axes, emitter]}
com.jme3.math.Triangle#getCenter: {[calculate, collect, arena, collidable, collide, matrix, collision, plane, volume, ball, heightfield, bounding, shape, transmission, sphere, quaternion, rotation, body, rotate, joints, friction, radius, vecf, triangle, hallmarks, speed, square, capsule, spatial, mass, vertices, torque, cinematic, motor, bone, bitmap, camel, geometry, piston, shader, scene, velocity, material, impulse, light, delta, hinge, texture, axes, emitter]}
org.ode4j.ode.internal.sCylinderTrimeshColliderData#_CalculateAxis: {[calculate, collect, arena, collidable, collide, matrix, collision, plane, volume, ball, heightfield, bounding, shape, transmission, sphere, quaternion, rotation, body, rotate, joints, friction, radius, vecf, triangle, hallmarks, speed, square, capsule, spatial, mass, vertices, torque, cinematic, motor, bone, bitmap, camel, geometry, piston, shader, scene, velocity, material, impulse, light, delta, hinge, texture, axes, emitter]}
org.ode4j.ode.OdeMath#dCalcMatrix3Det: {[matrix, collect, calculate, arena, volume, bounding, collidable, emitter, speed, collide, bone, piston, plane, heightfield, vertices, rotate, shader, light, joints, spatial, mass, torque, velocity, friction, camel, material, ball, collision, motor, quaternion, impulse, vecf, axes, geometry, hinge, texture, body, transmission, square, scene, sphere, delta, cinematic, radius, bitmap, rotation, capsule, shape, hallmarks, triangle]}
org.dyn4j.geometry.Matrix22#sum: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.OdeMath#dMULTIPLYOP0_331: {[matrix, collect, calculate, arena, volume, bounding, collidable, emitter, speed, collide, bone, piston, plane, heightfield, vertices, rotate, shader, light, joints, spatial, mass, torque, velocity, friction, camel, material, ball, collision, motor, quaternion, impulse, vecf, axes, geometry, hinge, texture, body, transmission, square, scene, sphere, delta, cinematic, radius, bitmap, rotation, capsule, shape, hallmarks, triangle]}
org.ode4j.ode.OdeMath#dMULTIPLYOP0_333: {[matrix, collect, calculate, arena, volume, bounding, collidable, speed, emitter, piston, bone, collide, plane, heightfield, torque, vertices, rotate, velocity, spatial, light, shader, camel, mass, material, collision, joints, motor, friction, transmission, hinge, delta, ball, cinematic, axes, geometry, quaternion, impulse, scene, vecf, sphere, square, texture, rotation, capsule, bitmap, radius, triangle, hallmarks, body, shape]}
com.jme3.shadow.AbstractShadowRenderer#renderShadowMap: {[matrix, collect, shader, light, material, camel, texture, scene, calculate, geometry, arena, spatial, bounding, volume, bitmap, speed, piston, vecf, shape, square, emitter, cinematic, vertices, torque, transmission, rotate, velocity, collidable, capsule, friction, motor, plane, collision, hinge, triangle, heightfield, joints, bone, mass, radius, ball, quaternion, collide, sphere, axes, delta, hallmarks, impulse, rotation, body]}
org.ode4j.ode.internal.DLCP#swapProblem: {[collect, matrix, calculate, collidable, collide, plane, volume, heightfield, bounding, collision, shape, sphere, speed, triangle, vecf, arena, hallmarks, piston, square, radius, motor, bone, vertices, velocity, quaternion, rotate, torque, spatial, hinge, delta, rotation, impulse, transmission, bitmap, texture, cinematic, shader, geometry, material, camel, ball, light, scene, body, friction, axes, emitter, joints, capsule, mass]}
org.ode4j.ode.internal.DxPosRC#R: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.joints.DxJointUniversal#getAngle2Internal: {[matrix, hinge, arena, axes, joints, calculate, piston, body, collect, quaternion, impulse, rotation, motor, ball, friction, speed, rotate, delta, torque, velocity, mass, bone, collidable, collision, shape, sphere, radius, heightfield, plane, collide, emitter, volume, cinematic, camel, triangle, capsule, transmission, bitmap, geometry, hallmarks, shader, light, vecf, material, square, vertices, spatial, texture, bounding, scene]}
com.jme3.math.Transform#set: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.DRotation#dQfromR: {[rotation, quaternion, rotate, axes, matrix, speed, hinge, bone, motor, collect, piston, emitter, impulse, velocity, transmission, delta, mass, joints, ball, square, sphere, hallmarks, volume, camel, heightfield, vertices, spatial, triangle, plane, radius, shape, shader, texture, collidable, vecf, cinematic, capsule, collide, torque, body, calculate, friction, geometry, bounding, bitmap, arena, material, collision, scene, light]}
net.smert.jreactphysics3d.mathematics.Quaternion#Quaternion(C): {[matrix, collect, quaternion, rotation, axes, rotate, calculate, hinge, transmission, arena, bone, motor, volume, speed, heightfield, impulse, collidable, sphere, piston, joints, plane, radius, collide, camel, emitter, mass, torque, bounding, velocity, capsule, cinematic, geometry, ball, triangle, light, collision, bitmap, delta, shape, shader, material, vertices, body, vecf, texture, friction, square, hallmarks, spatial, scene]}
org.dyn4j.geometry.Matrix33#subtract: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.joints.DxJointUniversal#getAngles: {[matrix, hinge, arena, axes, joints, calculate, piston, body, collect, quaternion, impulse, rotation, motor, ball, friction, speed, rotate, delta, torque, velocity, mass, bone, collidable, collision, shape, sphere, radius, heightfield, plane, collide, emitter, volume, cinematic, camel, triangle, capsule, transmission, bitmap, geometry, hallmarks, shader, light, vecf, material, square, vertices, spatial, texture, bounding, scene]}
net.smert.jreactphysics3d.mathematics.Matrix3x3#set: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DxBox#TST2: {[collect, matrix, calculate, collidable, collide, plane, volume, heightfield, bounding, collision, shape, sphere, speed, triangle, vecf, arena, hallmarks, piston, square, radius, motor, bone, vertices, velocity, quaternion, rotate, torque, spatial, hinge, delta, rotation, impulse, transmission, bitmap, texture, cinematic, shader, geometry, material, camel, ball, light, scene, body, friction, axes, emitter, joints, capsule, mass]}
org.ode4j.ode.internal.DxBox#TST1: {[matrix, collect, calculate, arena, volume, bounding, collidable, speed, emitter, piston, bone, collide, plane, heightfield, torque, vertices, rotate, velocity, spatial, light, shader, camel, mass, material, collision, joints, motor, friction, transmission, hinge, delta, ball, cinematic, axes, geometry, quaternion, impulse, scene, vecf, sphere, square, texture, rotation, capsule, bitmap, radius, triangle, hallmarks, body, shape]}
org.ode4j.ode.internal.gimpact.GimTrimesh#gim_trimesh_create_from_arrays: {[collect, matrix, collidable, plane, calculate, heightfield, collide, collision, triangle, vecf, volume, bounding, shape, arena, vertices, velocity, speed, torque, delta, motor, axes, impulse, transmission, mass, hallmarks, scene, piston, bone, camel, emitter, sphere, square, cinematic, material, friction, bitmap, capsule, rotation, ball, quaternion, joints, light, radius, geometry, hinge, spatial, shader, texture, rotate, body]}
com.jme3.math.Quaternion#fromRotationMatrix: {[rotation, quaternion, rotate, axes, matrix, speed, hinge, motor, collect, bone, piston, emitter, velocity, impulse, square, delta, mass, hallmarks, volume, joints, vertices, ball, plane, transmission, shape, heightfield, triangle, shader, bounding, collidable, bitmap, vecf, collide, texture, camel, torque, spatial, collision, calculate, light, material, cinematic, radius, body, sphere, scene, capsule, geometry, arena, friction]}
org.ode4j.ode.internal.CollideTrimeshBox#GETCOL: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DxGeom#getRotation: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]}
org.ode4j.math.DMatrix3#dotColCol: {[matrix, collect, calculate, arena, volume, bounding, collidable, speed, emitter, piston, bone, collide, plane, heightfield, torque, vertices, rotate, velocity, spatial, light, shader, camel, mass, material, collision, joints, motor, friction, transmission, hinge, delta, ball, cinematic, axes, geometry, quaternion, impulse, scene, vecf, sphere, square, texture, rotation, capsule, bitmap, radius, triangle, hallmarks, body, shape]}
com.jme3.collision.bih.BIHTree#collideWith: {[collect, collidable, plane, collide, heightfield, collision, triangle, vecf, shape, matrix, calculate, volume, vertices, bounding, hallmarks, sphere, emitter, motor, speed, velocity, square, delta, torque, arena, impulse, axes, mass, radius, ball, piston, friction, scene, capsule, joints, shader, hinge, bone, camel, body, rotate, bitmap, rotation, texture, quaternion, geometry, transmission, cinematic, light, spatial, material]}
org.ode4j.ode.internal.processmem.DxWorldProcessContext#GetStepperArenasHead: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
com.jme3.shader.UniformBindingManager#updateUniformBindings: {[matrix, rotation, quaternion, collect, rotate, axes, camel, bone, light, material, spatial, scene, shader, texture, speed, hinge, geometry, motor, volume, impulse, bounding, velocity, transmission, piston, calculate, mass, delta, emitter, arena, bitmap, joints, hallmarks, ball, vecf, sphere, cinematic, collision, shape, capsule, friction, plane, square, radius, collidable, heightfield, body, collide, vertices, torque, triangle]}
org.ode4j.ode.internal.joints.DxJointFixed#getInfo2: {[arena, matrix, calculate, collect, ball, joints, body, friction, impulse, hinge, torque, mass, delta, piston, motor, axes, collidable, emitter, transmission, velocity, vertices, collision, shader, volume, bounding, collide, plane, material, light, speed, hallmarks, shape, camel, heightfield, radius, spatial, vecf, sphere, texture, rotate, square, scene, quaternion, bitmap, triangle, bone, geometry, rotation, cinematic, capsule]}
com.jme3.math.Quaternion#toAxes: {[matrix, rotation, quaternion, rotate, axes, collect, hinge, speed, motor, impulse, bone, velocity, piston, mass, delta, volume, emitter, calculate, square, joints, hallmarks, arena, transmission, bounding, camel, plane, collidable, heightfield, ball, bitmap, collide, triangle, shape, vertices, sphere, cinematic, texture, friction, shader, torque, spatial, capsule, material, vecf, light, collision, scene, body, geometry, radius]}
org.ode4j.math.DVector3C#dotCol: {[matrix, collect, calculate, arena, volume, bounding, collidable, speed, emitter, piston, bone, collide, plane, heightfield, torque, vertices, rotate, velocity, spatial, light, shader, camel, mass, material, collision, joints, motor, friction, transmission, hinge, delta, ball, cinematic, axes, geometry, quaternion, impulse, scene, vecf, sphere, square, texture, rotation, capsule, bitmap, radius, triangle, hallmarks, body, shape]}
com.jme3.shadow.BasicShadowRenderer#postQueue: {[material, camel, light, texture, shader, scene, spatial, geometry, matrix, bitmap, bounding, collect, volume, calculate, bone, arena, square, transmission, shape, cinematic, velocity, torque, speed, motor, vecf, radius, capsule, piston, collidable, mass, plane, collision, friction, sphere, rotate, hinge, delta, vertices, triangle, collide, impulse, axes, rotation, heightfield, ball, emitter, hallmarks, quaternion, body, joints]}
org.ode4j.ode.internal.DxMass#dMassCheck: {[matrix, collect, calculate, arena, mass, emitter, impulse, bounding, vertices, vecf, volume, delta, friction, triangle, radius, motor, transmission, velocity, spatial, joints, bone, collision, square, torque, sphere, shape, cinematic, hallmarks, rotation, bitmap, piston, axes, heightfield, ball, light, capsule, body, shader, camel, material, hinge, scene, speed, rotate, texture, geometry, collidable, plane, quaternion, collide]}
org.ode4j.ode.internal.joints.DxJointConstrainedBall#getInfo1: {[arena, calculate, matrix, collect, ball, joints, body, friction, impulse, hinge, torque, mass, delta, collidable, piston, transmission, motor, axes, emitter, collision, velocity, volume, bounding, collide, vertices, plane, shader, shape, heightfield, light, material, spatial, speed, rotate, hallmarks, quaternion, camel, texture, bitmap, radius, rotation, vecf, scene, bone, sphere, geometry, square, capsule, cinematic, triangle]}
org.ode4j.ode.OdeMath#dMultiplyAdd0_331: {[calculate, collect, arena, collidable, collide, matrix, collision, plane, volume, ball, heightfield, bounding, shape, transmission, sphere, quaternion, rotation, body, rotate, joints, friction, radius, vecf, triangle, hallmarks, speed, square, capsule, spatial, mass, vertices, torque, cinematic, motor, bone, bitmap, camel, geometry, piston, shader, scene, velocity, material, impulse, light, delta, hinge, texture, axes, emitter]}
org.ode4j.ode.internal.DxMass#rotate: {[matrix, collect, calculate, arena, mass, impulse, delta, bounding, volume, motor, friction, emitter, velocity, vecf, vertices, radius, rotation, triangle, joints, square, transmission, axes, spatial, hallmarks, torque, sphere, cinematic, collision, bitmap, bone, hinge, shape, quaternion, rotate, heightfield, capsule, ball, body, speed, camel, light, scene, material, shader, texture, piston, collidable, plane, geometry, collide]}
org.ode4j.ode.DMatrix#dIsPositiveDefinite: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.math.DMatrixN#newSubMatrix: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.DGeom#copyOffsetRotation: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]}
com.jme3.renderer.Camera#setClipPlane: {[matrix, collect, calculate, collidable, arena, volume, plane, collide, bounding, heightfield, collision, speed, triangle, shape, vecf, torque, velocity, piston, bone, motor, axes, delta, hallmarks, sphere, camel, vertices, rotate, material, light, square, joints, emitter, scene, cinematic, spatial, transmission, shader, ball, impulse, hinge, bitmap, radius, rotation, capsule, texture, quaternion, friction, geometry, body, mass]}
org.ode4j.ode.internal.Matrix#dEstimateInvertPDMatrixTmpbufSize: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.bounding.BoundingSphere#calcWelzl: {[calculate, collect, arena, collidable, collide, matrix, collision, plane, volume, ball, heightfield, bounding, shape, transmission, sphere, quaternion, rotation, body, rotate, joints, friction, radius, vecf, triangle, hallmarks, speed, square, capsule, spatial, mass, vertices, torque, cinematic, motor, bone, bitmap, camel, geometry, piston, shader, scene, velocity, material, impulse, light, delta, hinge, texture, axes, emitter]}
org.ode4j.ode.internal.processmem.DxWorldProcessMemArena#IsStructureValid: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
org.dyn4j.dynamics.contact.SequentialImpulses#initialize: {[arena, calculate, friction, matrix, mass, impulse, joints, delta, torque, ball, body, motor, collect, velocity, transmission, hinge, piston, speed, axes, vertices, vecf, emitter, triangle, radius, square, bounding, spatial, heightfield, volume, rotation, sphere, rotate, hallmarks, cinematic, collision, bitmap, plane, shader, scene, collide, light, capsule, material, shape, quaternion, camel, texture, bone, collidable, geometry]}
org.ode4j.ode.internal.DxCollisionUtil#dMatrix3Inv: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
net.smert.jreactphysics3d.body.RigidBody#getInertiaTensorInverseWorld: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]}
org.ode4j.ode.internal.DxGeom#getBodyPosr: {[arena, matrix, calculate, collect, ball, joints, body, friction, impulse, hinge, torque, mass, delta, piston, motor, axes, collidable, emitter, transmission, velocity, vertices, collision, shader, volume, bounding, collide, plane, material, light, speed, hallmarks, shape, camel, heightfield, radius, spatial, vecf, sphere, texture, rotate, square, scene, quaternion, bitmap, triangle, bone, geometry, rotation, cinematic, capsule]}
org.ode4j.math.DMatrix3#eqTranspose: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.renderer.Camera#onFrameChange: {[matrix, collect, calculate, collidable, arena, volume, plane, collide, bounding, heightfield, collision, speed, triangle, shape, vecf, torque, velocity, piston, bone, motor, axes, delta, hallmarks, sphere, camel, vertices, rotate, material, light, square, joints, emitter, scene, cinematic, spatial, transmission, shader, ball, impulse, hinge, bitmap, radius, rotation, capsule, texture, quaternion, friction, geometry, body, mass]}
org.ode4j.math.DMatrix3#clone: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.math.Triangle#calculateCenter: {[calculate, collect, arena, collidable, collide, matrix, collision, plane, volume, ball, heightfield, bounding, shape, transmission, sphere, quaternion, rotation, body, rotate, joints, friction, radius, vecf, triangle, hallmarks, speed, square, capsule, spatial, mass, vertices, torque, cinematic, motor, bone, bitmap, camel, geometry, piston, shader, scene, velocity, material, impulse, light, delta, hinge, texture, axes, emitter]}
org.ode4j.ode.internal.processmem.DxWorldProcessMemArena#ReallocateMemArena: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
org.ode4j.ode.internal.gimpact.GimGeometry#SCALE_MATRIX_3X3: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.math.DMatrix3#dotCol: {[collect, matrix, calculate, collidable, collide, plane, volume, heightfield, bounding, collision, shape, sphere, speed, triangle, vecf, arena, hallmarks, piston, square, radius, motor, bone, vertices, velocity, quaternion, rotate, torque, spatial, hinge, delta, rotation, impulse, transmission, bitmap, texture, cinematic, shader, geometry, material, camel, ball, light, scene, body, friction, axes, emitter, joints, capsule, mass]}
com.jme3.shadow.OccludersExtractor#OccludersExtractor(C): {[matrix, camel, material, collect, scene, geometry, light, bounding, texture, shader, volume, spatial, calculate, arena, hallmarks, plane, collidable, sphere, speed, piston, radius, vertices, friction, capsule, cinematic, square, mass, triangle, collide, hinge, bitmap, quaternion, delta, heightfield, emitter, torque, velocity, impulse, axes, motor, rotation, shape, rotate, collision, transmission, joints, ball, bone, vecf, body]}
org.ode4j.ode.internal.DxCollisionUtil#dMultiplyMat3Vec3: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.math.Eigen3f#Eigen3f(C): {[calculate, collect, arena, collidable, collide, matrix, collision, plane, volume, ball, heightfield, bounding, shape, transmission, sphere, quaternion, rotation, body, rotate, joints, friction, radius, vecf, triangle, hallmarks, speed, square, capsule, spatial, mass, vertices, torque, cinematic, motor, bone, bitmap, camel, geometry, piston, shader, scene, velocity, material, impulse, light, delta, hinge, texture, axes, emitter]}
org.ode4j.ode.DMass#setI: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.Rotation#dRtoQ: {[matrix, collect, quaternion, rotation, axes, rotate, calculate, hinge, transmission, arena, bone, motor, volume, speed, heightfield, impulse, collidable, sphere, piston, joints, plane, radius, collide, camel, emitter, mass, torque, bounding, velocity, capsule, cinematic, geometry, ball, triangle, light, collision, bitmap, delta, shape, shader, material, vertices, body, vecf, texture, friction, square, hallmarks, spatial, scene]}
org.dyn4j.geometry.Matrix33#product: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DxGeom#setOffsetWorldRotation: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]}
org.ode4j.ode.internal.DxBox#computeAABB: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DxMass#DxMass(C): {[matrix, collect, calculate, arena, mass, emitter, impulse, bounding, vertices, vecf, volume, delta, friction, triangle, radius, motor, transmission, velocity, spatial, joints, bone, collision, square, torque, sphere, shape, cinematic, hallmarks, rotation, bitmap, piston, axes, heightfield, ball, light, capsule, body, shader, camel, material, hinge, scene, speed, rotate, texture, geometry, collidable, plane, quaternion, collide]}
org.dyn4j.geometry.Matrix33#getInverse: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.renderer.Camera#getViewMatrix: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.OdeMath#dSetCrossMatrixPlus: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.dxQuickStepperStage3CallContext#Initialize: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
org.ode4j.ode.internal.joints.DxJointSlider#getInfo2: {[calculate, arena, matrix, collect, ball, joints, body, friction, collidable, collision, hinge, plane, collide, shape, heightfield, volume, impulse, axes, torque, bounding, mass, transmission, piston, delta, triangle, vecf, motor, velocity, shader, material, emitter, square, light, sphere, quaternion, camel, scene, spatial, rotate, vertices, rotation, texture, hallmarks, speed, bone, bitmap, cinematic, capsule, geometry, radius]}
org.dyn4j.geometry.Matrix22#identity: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DxCollisionUtil#dMatrix3Copy: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.joints.Info2Descr#setJ2aCrossMatrix: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.OdeMath#dSubtractVectorCross3: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
net.smert.jreactphysics3d.mathematics.Matrix2x2#subtract: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.math.Transform#toTransformMatrix: {[rotation, quaternion, rotate, axes, matrix, speed, hinge, bone, motor, collect, piston, emitter, impulse, velocity, transmission, delta, mass, joints, ball, square, sphere, hallmarks, volume, camel, heightfield, vertices, spatial, triangle, plane, radius, shape, shader, texture, collidable, vecf, cinematic, capsule, collide, torque, body, calculate, friction, geometry, bounding, bitmap, arena, material, collision, scene, light]}
org.ode4j.ode.internal.processmem.DxWorldProcessMemArena#dxAllocateTemporaryWorldProcessMemArena: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
net.smert.jreactphysics3d.body.RigidBody#getInertiaTensorWorld: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]}
org.dyn4j.geometry.Matrix22#transpose: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.processmem.DxWorldProcessContext#dxReallocateWorldProcessContext: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
org.ode4j.ode.internal.gimpact.GimGeometry#COPY_MATRIX_2X2: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.gimpact.GimTrimesh#gim_trimesh_update_vertices: {[collect, matrix, calculate, collidable, plane, volume, bounding, heightfield, collide, collision, triangle, arena, vecf, shape, speed, vertices, torque, axes, velocity, hallmarks, camel, scene, motor, square, cinematic, piston, material, bone, sphere, delta, rotation, bitmap, capsule, light, transmission, geometry, impulse, joints, quaternion, shader, texture, ball, mass, radius, spatial, hinge, emitter, friction, body, rotate]}
com.jme3.shadow.AbstractShadowRenderer#setMatParams: {[material, camel, light, scene, texture, shader, geometry, spatial, matrix, bounding, volume, collect, bitmap, calculate, arena, shape, bone, vecf, speed, piston, friction, square, collision, velocity, cinematic, transmission, torque, hinge, collide, hallmarks, quaternion, motor, rotate, vertices, axes, plane, collidable, heightfield, sphere, capsule, delta, emitter, ball, triangle, impulse, body, mass, joints, radius, rotation]}
org.ode4j.ode.internal.DLCP#transfer_i_from_N_to_C: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.Matrix#dMultiply1: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.Matrix#dMultiply2: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.Matrix#dMultiply0: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.dyn4j.dynamics.joint.PrismaticJoint#PrismaticJoint(C): {[impulse, motor, hinge, axes, matrix, rotation, speed, joints, delta, velocity, piston, rotate, mass, quaternion, arena, friction, torque, body, calculate, ball, collect, bone, transmission, square, vecf, triangle, vertices, heightfield, hallmarks, camel, bitmap, collide, volume, cinematic, sphere, capsule, bounding, collision, emitter, plane, texture, material, shape, radius, light, geometry, scene, spatial, collidable, shader]}
com.jme3.system.NullRenderer#setWorldMatrix: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.dyn4j.geometry.Matrix22#subtract: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.collision.bih.BIHTree#collideWithBoundingVolume: {[collect, volume, bounding, sphere, collide, plane, hallmarks, collidable, square, radius, shape, heightfield, calculate, collision, vertices, triangle, vecf, matrix, transmission, emitter, mass, arena, axes, piston, speed, quaternion, motor, hinge, spatial, bitmap, shader, capsule, geometry, ball, cinematic, joints, texture, material, friction, velocity, delta, impulse, torque, camel, bone, rotation, light, scene, rotate, body]}
org.ode4j.ode.DMatrix#dRemoveRowCol: {[matrix, collect, calculate, arena, volume, bounding, collidable, speed, emitter, piston, bone, collide, plane, heightfield, torque, vertices, rotate, velocity, spatial, light, shader, camel, mass, material, collision, joints, motor, friction, transmission, hinge, delta, ball, cinematic, axes, geometry, quaternion, impulse, scene, vecf, sphere, square, texture, rotation, capsule, bitmap, radius, triangle, hallmarks, body, shape]}
net.smert.jreactphysics3d.mathematics.Quaternion#fromMatrix: {[matrix, collect, quaternion, rotation, axes, rotate, calculate, hinge, transmission, arena, bone, motor, volume, speed, heightfield, impulse, collidable, sphere, piston, joints, plane, radius, collide, camel, emitter, mass, torque, bounding, velocity, capsule, cinematic, geometry, ball, triangle, light, collision, bitmap, delta, shape, shader, material, vertices, body, vecf, texture, friction, square, hallmarks, spatial, scene]}
com.jme3.material.logic.StaticPassLightingLogic#transformPosition: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.sTrimeshBoxColliderData#_cldClipping: {[collect, matrix, calculate, collidable, volume, plane, bounding, collide, heightfield, arena, collision, triangle, shape, speed, vecf, hallmarks, sphere, square, piston, torque, vertices, bone, velocity, radius, axes, motor, delta, cinematic, camel, spatial, bitmap, joints, hinge, scene, material, rotate, light, ball, impulse, mass, rotation, shader, capsule, quaternion, transmission, geometry, body, emitter, friction, texture]}
com.jme3.scene.instancing.InstancedGeometry#updateInstances: {[matrix, camel, material, collect, scene, geometry, light, texture, shader, bounding, spatial, volume, calculate, arena, collidable, plane, speed, piston, hallmarks, capsule, friction, emitter, cinematic, shape, mass, bitmap, sphere, velocity, torque, vertices, hinge, vecf, triangle, impulse, delta, radius, rotation, quaternion, square, rotate, axes, transmission, joints, motor, collide, heightfield, ball, bone, collision, body]}
org.ode4j.math.DVector3#eqSum: {[collect, matrix, calculate, collidable, collide, plane, volume, heightfield, bounding, collision, shape, sphere, speed, triangle, vecf, arena, hallmarks, piston, square, radius, motor, bone, vertices, velocity, quaternion, rotate, torque, spatial, hinge, delta, rotation, impulse, transmission, bitmap, texture, cinematic, shader, geometry, material, camel, ball, light, scene, body, friction, axes, emitter, joints, capsule, mass]}
org.ode4j.ode.internal.Rotation#dRSetIdentity: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.processmem.DxWorldProcessMemArena#SetNextMemArena: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
com.jme3.math.Matrix3f#fillFloatBuffer: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DxMass#dMassRotate: {[matrix, collect, calculate, arena, mass, impulse, delta, bounding, volume, motor, friction, emitter, velocity, vecf, vertices, radius, rotation, triangle, joints, square, transmission, axes, spatial, hallmarks, torque, sphere, cinematic, collision, bitmap, bone, hinge, shape, quaternion, rotate, heightfield, capsule, ball, body, speed, camel, light, scene, material, shader, texture, piston, collidable, plane, geometry, collide]}
org.ode4j.ode.internal.DxPlane#getRotation: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]}
org.ode4j.math.DMatrix3C#clone: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DLCP#swapRowsAndCols: {[collect, matrix, calculate, collidable, collide, plane, volume, heightfield, bounding, collision, shape, sphere, speed, triangle, vecf, arena, hallmarks, piston, square, radius, motor, bone, vertices, velocity, quaternion, rotate, torque, spatial, hinge, delta, rotation, impulse, transmission, bitmap, texture, cinematic, shader, geometry, material, camel, ball, light, scene, body, friction, axes, emitter, joints, capsule, mass]}
org.ode4j.ode.OdeMath#dMULTIPLYOP0_133: {[matrix, collect, calculate, arena, volume, bounding, collidable, speed, emitter, piston, bone, collide, plane, heightfield, torque, vertices, rotate, velocity, spatial, light, shader, camel, mass, material, collision, joints, motor, friction, transmission, hinge, delta, ball, cinematic, axes, geometry, quaternion, impulse, scene, vecf, sphere, square, texture, rotation, capsule, bitmap, radius, triangle, hallmarks, body, shape]}
org.ode4j.ode.internal.processmem.DxWorldProcessContext#SetIslandsMemArena: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
org.ode4j.ode.OdeMath#dCalcVectorDot3_14: {[matrix, collect, calculate, arena, volume, bounding, collidable, speed, collide, emitter, plane, bone, heightfield, piston, rotate, collision, spatial, velocity, torque, vertices, joints, shader, light, mass, friction, ball, camel, motor, material, quaternion, sphere, hinge, geometry, shape, delta, radius, axes, triangle, hallmarks, impulse, cinematic, body, scene, rotation, texture, transmission, capsule, square, bitmap, vecf]}
org.ode4j.ode.DGeom#setOffsetRotation: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]}
org.ode4j.ode.DMatrix#dLDLTRemove: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.CollideTrimeshBoxOld#GETCOL: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.gimpact.GimGeometry#SCALE_MATRIX_2X2: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.processmem.DxWorldProcessContext#DESTRUCTOR: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
org.ode4j.ode.internal.processmem.DxWorldProcessMemArena#IsArenaPossible: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
org.ode4j.ode.DMisc#dClearUpperTriangle: {[collect, matrix, collidable, plane, calculate, heightfield, collide, collision, triangle, vecf, volume, bounding, shape, arena, vertices, velocity, speed, torque, delta, motor, axes, impulse, transmission, mass, hallmarks, scene, piston, bone, camel, emitter, sphere, square, cinematic, material, friction, bitmap, capsule, rotation, ball, quaternion, joints, light, radius, geometry, hinge, spatial, shader, texture, rotate, body]}
org.ode4j.ode.internal.processmem.DxWorldProcessContext#FreeArenasList: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
org.ode4j.ode.internal.Matrix#dInvertPDMatrix: {[matrix, collect, calculate, arena, volume, bounding, collidable, speed, emitter, piston, bone, collide, plane, heightfield, torque, vertices, rotate, velocity, spatial, light, shader, camel, mass, material, collision, joints, motor, friction, transmission, hinge, delta, ball, cinematic, axes, geometry, quaternion, impulse, scene, vecf, sphere, square, texture, rotation, capsule, bitmap, radius, triangle, hallmarks, body, shape]}
net.smert.jreactphysics3d.constraint.BallAndSocketJoint#solvePositionConstraint: {[impulse, motor, arena, joints, matrix, hinge, mass, delta, friction, velocity, torque, speed, axes, calculate, piston, body, ball, rotation, rotate, collect, quaternion, transmission, bone, vecf, vertices, triangle, square, heightfield, spatial, radius, volume, collide, hallmarks, plane, bounding, scene, emitter, collision, bitmap, texture, camel, collidable, cinematic, geometry, light, sphere, capsule, shader, shape, material]}
org.ode4j.ode.internal.DxGimpactCollision#TransformVector3: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.math.Matrix4f#toRotationMatrix: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]}
org.ode4j.ode.OdeMath#dCalcVectorDot3_41: {[matrix, collect, calculate, arena, volume, bounding, collidable, speed, collide, emitter, plane, bone, heightfield, piston, rotate, collision, spatial, velocity, torque, vertices, joints, shader, light, mass, friction, ball, camel, motor, material, quaternion, sphere, hinge, geometry, shape, delta, radius, axes, triangle, hallmarks, impulse, cinematic, body, scene, rotation, texture, transmission, capsule, square, bitmap, vecf]}
org.ode4j.ode.OdeMath#dMULTIPLYOP1_333: {[matrix, collect, calculate, arena, volume, bounding, collidable, emitter, speed, collide, bone, piston, plane, heightfield, vertices, rotate, shader, light, joints, spatial, mass, torque, velocity, friction, camel, material, ball, collision, motor, quaternion, impulse, vecf, axes, geometry, hinge, texture, body, transmission, square, scene, sphere, delta, cinematic, radius, bitmap, rotation, capsule, shape, hallmarks, triangle]}
org.ode4j.ode.OdeMath#dMULTIPLYOP1_331: {[matrix, collect, calculate, arena, volume, bounding, collidable, speed, emitter, piston, bone, collide, plane, heightfield, torque, vertices, rotate, velocity, spatial, light, shader, camel, mass, material, collision, joints, motor, friction, transmission, hinge, delta, ball, cinematic, axes, geometry, quaternion, impulse, scene, vecf, sphere, square, texture, rotation, capsule, bitmap, radius, triangle, hallmarks, body, shape]}
org.ode4j.ode.OdeMath#dCalcVectorDot3_44: {[matrix, collect, calculate, arena, volume, bounding, collidable, speed, collide, emitter, plane, bone, heightfield, piston, rotate, collision, spatial, velocity, torque, vertices, joints, shader, light, mass, friction, ball, camel, motor, material, quaternion, sphere, hinge, geometry, shape, delta, radius, axes, triangle, hallmarks, impulse, cinematic, body, scene, rotation, texture, transmission, capsule, square, bitmap, vecf]}
org.ode4j.math.DMatrix3#dotRowCol: {[matrix, collect, calculate, arena, volume, bounding, collidable, speed, emitter, piston, bone, collide, plane, heightfield, torque, vertices, rotate, velocity, spatial, light, shader, camel, mass, material, collision, joints, motor, friction, transmission, hinge, delta, ball, cinematic, axes, geometry, quaternion, impulse, scene, vecf, sphere, square, texture, rotation, capsule, bitmap, radius, triangle, hallmarks, body, shape]}
org.ode4j.ode.internal.processmem.DxWorldProcessContext#ReallocateIslandsMemArena: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
org.ode4j.ode.internal.DxGeom#dGeomSetOffsetWorldRotation: {[matrix, axes, hinge, joints, rotation, arena, impulse, piston, motor, quaternion, rotate, speed, calculate, collect, body, friction, delta, velocity, mass, torque, ball, bone, collidable, square, shape, volume, transmission, camel, emitter, collision, sphere, plane, bounding, radius, material, heightfield, collide, hallmarks, light, spatial, shader, scene, triangle, bitmap, vertices, vecf, geometry, capsule, cinematic, texture]}
org.ode4j.math.DMatrix3C#reTranspose: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.scene.Spatial#getLocalToWorldMatrix: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]}
com.jme3.math.Matrix4f#setRotationQuaternion: {[rotation, quaternion, rotate, axes, matrix, speed, hinge, bone, motor, collect, piston, emitter, impulse, velocity, transmission, delta, mass, joints, ball, square, sphere, hallmarks, volume, camel, heightfield, vertices, spatial, triangle, plane, radius, shape, shader, texture, collidable, vecf, cinematic, capsule, collide, torque, body, calculate, friction, geometry, bounding, bitmap, arena, material, collision, scene, light]}
com.jme3.shadow.AbstractShadowRenderer#setPostShadowParams: {[shader, light, material, camel, texture, matrix, scene, spatial, geometry, collect, bitmap, bounding, volume, calculate, arena, shape, square, cinematic, vecf, speed, piston, transmission, capsule, bone, rotate, velocity, torque, collision, motor, emitter, friction, vertices, axes, hinge, quaternion, radius, triangle, collidable, sphere, collide, ball, hallmarks, delta, plane, rotation, joints, mass, body, impulse, heightfield]}
org.ode4j.ode.internal.sCylinderTrimeshColliderData#_InitCylinderTrimeshData: {[rotation, rotate, quaternion, axes, matrix, square, hallmarks, collect, velocity, mass, speed, radius, volume, motor, impulse, bounding, delta, sphere, bone, emitter, hinge, piston, transmission, plane, shape, collide, calculate, torque, vertices, joints, heightfield, ball, shader, collidable, bitmap, friction, texture, capsule, material, scene, triangle, body, spatial, geometry, camel, collision, vecf, arena, cinematic, light]}
org.ode4j.math.DMatrix3#setCol: {[collect, matrix, calculate, collidable, collide, plane, volume, heightfield, bounding, collision, shape, sphere, speed, triangle, vecf, arena, hallmarks, piston, square, radius, motor, bone, vertices, velocity, quaternion, rotate, torque, spatial, hinge, delta, rotation, impulse, transmission, bitmap, texture, cinematic, shader, geometry, material, camel, ball, light, scene, body, friction, axes, emitter, joints, capsule, mass]}
com.jme3.system.NullRenderer#setViewProjectionMatrices: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DxCapsule#computeAABB: {[collect, matrix, radius, bounding, sphere, volume, hallmarks, calculate, square, transmission, mass, arena, delta, collide, velocity, impulse, plane, piston, spatial, friction, collidable, torque, quaternion, shape, motor, bone, heightfield, hinge, bitmap, cinematic, vecf, emitter, joints, triangle, light, geometry, axes, scene, speed, capsule, rotate, body, rotation, texture, vertices, collision, ball, material, camel, shader]}
org.ode4j.ode.internal.DxMass#setI: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.OdeMath#dMultiply2_333: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.gimpact.GimGeometry#IDENTIFY_MATRIX_3X3: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.gimpact.GimGeometry#COPY_MATRIX_3X3: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.processmem.DxWorldProcessMemArena#AllocateBlock: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
org.ode4j.math.DMatrixN#reTranspose: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.math.DMatrixN#makeRandom: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.DMisc#dMakeRandomMatrix: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.DxQuickStep#dxQuickStepIsland_Stage0_Bodies: {[arena, calculate, matrix, friction, joints, collect, ball, mass, impulse, body, torque, delta, motor, transmission, hinge, velocity, piston, emitter, axes, vertices, speed, vecf, triangle, bounding, volume, spatial, radius, square, shader, heightfield, collidable, light, cinematic, material, sphere, rotation, bitmap, capsule, camel, bone, quaternion, hallmarks, scene, rotate, texture, geometry, shape, collide, collision, plane]}
com.jme3.math.Matrix4f#toRotationQuat: {[rotation, quaternion, rotate, axes, matrix, speed, hinge, bone, motor, collect, piston, emitter, impulse, velocity, transmission, delta, mass, joints, ball, square, sphere, hallmarks, volume, camel, heightfield, vertices, spatial, triangle, plane, radius, shape, shader, texture, collidable, vecf, cinematic, capsule, collide, torque, body, calculate, friction, geometry, bounding, bitmap, arena, material, collision, scene, light]}
org.ode4j.ode.internal.DxGeom#computeOBB: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
org.ode4j.ode.internal.Misc#dPrintMatrix: {[matrix, collect, calculate, arena, emitter, volume, bounding, speed, collidable, bone, piston, vertices, collide, plane, torque, shader, light, heightfield, rotate, camel, velocity, material, spatial, mass, transmission, joints, vecf, friction, square, impulse, motor, shape, axes, hinge, ball, texture, scene, cinematic, rotation, geometry, collision, delta, triangle, hallmarks, radius, capsule, sphere, quaternion, body, bitmap]}
com.jme3.math.Line#orthogonalLineFit: {[calculate, collect, arena, collidable, collide, matrix, collision, plane, volume, ball, heightfield, bounding, shape, transmission, sphere, quaternion, rotation, body, rotate, joints, friction, radius, vecf, triangle, hallmarks, speed, square, capsule, spatial, mass, vertices, torque, cinematic, motor, bone, bitmap, camel, geometry, piston, shader, scene, velocity, material, impulse, light, delta, hinge, texture, axes, emitter]}
org.ode4j.ode.internal.processmem.DxWorldProcessMemArena#dxFreeTemporaryWorldProcessMemArena: {[arena, calculate, ball, friction, body, matrix, joints, collect, emitter, quaternion, torque, rotate, rotation, transmission, mass, impulse, vertices, delta, bone, vecf, hinge, triangle, hallmarks, spatial, motor, shader, velocity, piston, square, collidable, heightfield, bounding, axes, light, material, speed, geometry, texture, shape, cinematic, capsule, collision, volume, plane, sphere, bitmap, radius, scene, collide, camel]}
org.ode4j.ode.internal.joints.DxJointUniversal#dJointSetUniversalAxis1Offset: {[matrix, arena, hinge, joints, axes, calculate, piston, collect, body, impulse, quaternion, ball, rotation, motor, friction, speed, rotate, delta, torque, velocity, mass, bone, collidable, collision, shape, sphere, radius, heightfield, plane, collide, emitter, volume, camel, cinematic, triangle, transmission, capsule, bitmap, shader, geometry, light, hallmarks, material, vecf, square, vertices, bounding, spatial, scene, texture]}
com.jme3.shadow.PssmShadowFilter#preFrame: {[matrix, collect, calculate, material, camel, light, shader, arena, texture, scene, bounding, volume, geometry, spatial, speed, emitter, piston, collidable, bitmap, velocity, shape, torque, rotate, transmission, vecf, square, vertices, plane, friction, bone, motor, hinge, heightfield, joints, radius, collide, mass, quaternion, ball, sphere, impulse, hallmarks, delta, triangle, collision, rotation, cinematic, axes, capsule, body]}
org.ode4j.ode.DBody#setRotation: {[matrix, rotation, quaternion, collect, rotate, axes, motor, hinge, speed, impulse, bone, velocity, mass, piston, delta, volume, calculate, square, arena, joints, transmission, emitter, hallmarks, bounding, camel, ball, plane, collidable, heightfield, bitmap, sphere, collide, cinematic, light, friction, material, triangle, texture, spatial, shape, capsule, body, torque, vertices, scene, shader, vecf, collision, radius, geometry]}
net.smert.jreactphysics3d.collision.broadphase.BodyPair#setBody1: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]},
org.ode4j.ode.internal.joints.DxJointHinge2#setParamFudgeFactor: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]},
org.dyn4j.geometry.Segment#getVertices: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]},
com.jme3.cinematic.events.AbstractCinematicEvent#getDuration: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]},
com.jme3.math.Vector2f#rotateAroundOrigin: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]},
org.ode4j.ode.internal.joints.DxJointPiston#dJointSetPistonAnchorOffset: {[piston, hinge, speed, axes, rotate, motor, rotation, quaternion, joints, impulse, velocity, torque, delta, body, bone, friction, ball, mass, emitter, arena, square, transmission, shape, collect, calculate, vertices, bounding, spatial, sphere, collision, hallmarks, shader, radius, volume, triangle, camel, collide, geometry, light, vecf, texture, heightfield, bitmap, cinematic, matrix, material, collidable, scene, capsule, plane]},
com.jme3.animation.SpatialTrack#setTime: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, spatial, motor, calculate, velocity, camel, vertices, arena, transmission, geometry, scene, impulse, collect, material, delta, texture, ball, light, triangle, sphere, hallmarks, cinematic, square, bitmap, radius, shader, vecf, joints, capsule, shape, friction, torque, collide, mass, heightfield, collidable, bounding, volume, plane, body, matrix, collision]},
com.jme3.animation.AnimationFactory#buildAnimation: {[quaternion, rotation, rotate, bone, axes, speed, spatial, emitter, camel, piston, hinge, geometry, scene, motor, material, texture, light, calculate, vertices, velocity, arena, shader, impulse, transmission, delta, collect, hallmarks, ball, triangle, square, bitmap, volume, sphere, cinematic, vecf, collide, joints, radius, mass, torque, bounding, collidable, shape, capsule, friction, plane, collision, body, heightfield, matrix]},
com.jme3.renderer.Camera#setRotation: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]},
org.ode4j.ode.internal.joints.DxJointHinge#setAnchor: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]},
com.jme3.renderer.opengl.TextureUtil#uploadSubTexture: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]},
net.smert.jreactphysics3d.mathematics.Quaternion#subtract: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]},
org.dyn4j.geometry.AbstractShape#rotateAboutCenter: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]},
com.jme3.animation.BoneTrack#BoneTrack(C): {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, velocity, transmission, arena, cinematic, bounding, sphere, vertices, collect, capsule, impulse, spatial, radius, ball, triangle, bitmap, vecf, shape, friction, delta, heightfield, joints, shader, volume, material, square, hallmarks, camel, geometry, texture, collision, light, collidable, torque, scene, matrix, body, plane, mass, collide]},
com.jme3.math.Quaternion#Quaternion(C): {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]},
com.jme3.effect.ParticleEmitter#setInitialVelocity: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]},
org.dyn4j.geometry.decompose.DoubleEdgeList#getYMonotonePolygons: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]},
org.ode4j.ode.internal.joints.DxJointPiston#dJointSetPistonParam: {[piston, speed, rotate, hinge, quaternion, axes, rotation, motor, bone, velocity, joints, impulse, torque, body, delta, emitter, collect, friction, ball, mass, bounding, matrix, sphere, shape, vertices, radius, volume, spatial, square, shader, triangle, vecf, collision, arena, light, texture, collide, calculate, material, cinematic, transmission, collidable, scene, plane, bitmap, hallmarks, capsule, camel, heightfield, geometry]},
org.ode4j.ode.DBody#getFiniteRotationMode: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]},
org.dyn4j.geometry.HalfEllipse#getRotation: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]},
org.ode4j.ode.internal.joints.DxJointAMotor#dJointSetAMotorNumAxes: {[speed, rotate, motor, rotation, velocity, impulse, delta, axes, quaternion, mass, piston, hinge, torque, square, joints, friction, bone, transmission, bitmap, hallmarks, heightfield, body, shader, collidable, collide, radius, cinematic, texture, collect, collision, capsule, light, emitter, triangle, vecf, plane, scene, material, ball, calculate, spatial, sphere, camel, arena, volume, bounding, matrix, geometry, vertices, shape]},
org.ode4j.ode.DGeom#setOffsetWorldQuaternion: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]},
org.dyn4j.dynamics.Island#Island(C): {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, square, calculate, mass, hallmarks, arena, torque, vertices, collect, joints, ball, shader, spatial, collidable, shape, texture, material, transmission, light, bounding, capsule, triangle, collide, cinematic, radius, camel, collision, vecf, scene, sphere, bitmap, geometry, volume, plane, matrix, friction, body, heightfield]},
com.jme3.math.Matrix3f#fromAxes: {[rotate, axes, rotation, quaternion, emitter, speed, piston, hinge, vertices, shape, square, vecf, bone, triangle, motor, collision, plane, velocity, hallmarks, heightfield, collidable, shader, impulse, joints, collide, delta, bitmap, light, texture, torque, body, mass, volume, material, cinematic, capsule, sphere, bounding, friction, spatial, arena, ball, radius, scene, matrix, camel, collect, transmission, calculate, geometry]},
com.jme3.cinematic.events.CinematicEventListener#onPause: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]},
com.jme3.effect.ParticlePointMesh#updateParticleData: {[rotation, quaternion, rotate, axes, speed, bone, emitter, piston, motor, hinge, velocity, impulse, calculate, delta, square, arena, hallmarks, vertices, mass, ball, spatial, torque, collect, shader, joints, transmission, shape, triangle, collidable, vecf, bitmap, texture, camel, light, bounding, sphere, material, collide, geometry, collision, friction, body, matrix, volume, radius, plane, scene, heightfield, cinematic, capsule]},
org.ode4j.ode.internal.joints.DxJointHinge2#dJointGetHinge2Anchor: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]},
com.jme3.input.ChaseCamera#onAnalog: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]},
com.jme3.animation.Bone#setLocalRotation: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]},
org.ode4j.ode.internal.DxBody#dBodyGetQuaternion: {[piston, hinge, speed, joints, axes, body, motor, rotate, ball, quaternion, torque, impulse, bone, friction, velocity, rotation, delta, arena, mass, emitter, calculate, shape, bounding, sphere, radius, collision, collect, transmission, cinematic, volume, capsule, spatial, bitmap, triangle, vertices, vecf, collidable, hallmarks, square, heightfield, geometry, light, texture, material, shader, scene, plane, matrix, camel, collide]},
org.dyn4j.dynamics.AABBBroadphaseFilter#isAllowed: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]},
com.jme3.cinematic.events.MotionEvent#computeTargetDirection: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, spatial, motor, calculate, velocity, camel, vertices, arena, transmission, geometry, scene, impulse, collect, material, delta, texture, ball, light, triangle, sphere, hallmarks, cinematic, square, bitmap, radius, shader, vecf, joints, capsule, shape, friction, torque, collide, mass, heightfield, collidable, bounding, volume, plane, body, matrix, collision]},
org.ode4j.ode.internal.joints.DxJointHinge#dJointSetHingeAxis: {[rotation, quaternion, rotate, axes, speed, bone, piston, hinge, motor, emitter, velocity, impulse, delta, square, calculate, vertices, mass, arena, hallmarks, torque, shader, joints, collect, ball, spatial, shape, triangle, transmission, bitmap, vecf, texture, light, bounding, material, sphere, collidable, camel, collide, geometry, matrix, scene, plane, cinematic, capsule, body, heightfield, collision, volume, friction, radius]},
org.ode4j.ode.DSapSpace#AXES(C): {[rotate, axes, rotation, quaternion, emitter, speed, piston, hinge, vertices, shape, square, vecf, bone, triangle, motor, collision, plane, velocity, hallmarks, heightfield, collidable, shader, impulse, joints, collide, delta, bitmap, light, texture, torque, body, mass, volume, material, cinematic, capsule, sphere, bounding, friction, spatial, arena, ball, radius, scene, matrix, camel, collect, transmission, calculate, geometry]},
org.ode4j.math.DQuaternion#add: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]},
com.jme3.audio.openal.ALAudioRenderer#updateListenerParam: {[rotation, rotate, quaternion, speed, axes, motor, velocity, bone, piston, hinge, impulse, delta, emitter, square, mass, hallmarks, torque, calculate, arena, radius, joints, vertices, collidable, shader, ball, collect, spatial, collision, bitmap, friction, volume, sphere, geometry, collide, shape, transmission, heightfield, texture, camel, material, light, bounding, plane, cinematic, scene, matrix, body, vecf, triangle, capsule]},
org.ode4j.ode.internal.joints.DxJointHinge2#setAxis2: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]},
org.ode4j.ode.internal.joints.DxJointHinge2#setAxis1: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]},
org.ode4j.ode.internal.joints.DxJointPiston#getAxis: {[piston, speed, rotate, hinge, quaternion, axes, rotation, motor, bone, velocity, joints, impulse, torque, body, delta, emitter, collect, friction, ball, mass, bounding, matrix, sphere, shape, vertices, radius, volume, spatial, square, shader, triangle, vecf, collision, arena, light, texture, collide, calculate, material, cinematic, transmission, collidable, scene, plane, bitmap, hallmarks, capsule, camel, heightfield, geometry]},
org.dyn4j.geometry.HalfEllipse#getAxes: {[rotate, axes, rotation, quaternion, emitter, speed, piston, hinge, vertices, shape, square, vecf, bone, triangle, motor, collision, plane, velocity, hallmarks, heightfield, collidable, shader, impulse, joints, collide, delta, bitmap, light, texture, torque, body, mass, volume, material, cinematic, capsule, sphere, bounding, friction, spatial, arena, ball, radius, scene, matrix, camel, collect, transmission, calculate, geometry]},
org.dyn4j.geometry.Ellipse#contains: {[rotation, rotate, quaternion, axes, speed, bone, emitter, motor, piston, hinge, velocity, square, impulse, delta, hallmarks, vertices, calculate, arena, mass, ball, torque, shader, shape, spatial, triangle, joints, bitmap, collect, vecf, radius, volume, texture, light, geometry, plane, camel, material, cinematic, sphere, collidable, transmission, heightfield, capsule, body, bounding, friction, matrix, collision, scene, collide]},
com.jme3.math.Quaternion#slerp: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]},
org.ode4j.ode.DGeom#setQuaternion: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]},
com.jme3.environment.util.EnvMapUtils#getCubeMapCrossDebugViewWithMipMaps: {[spatial, camel, geometry, scene, rotation, rotate, material, quaternion, texture, bone, light, shader, axes, speed, emitter, piston, hinge, motor, vertices, calculate, velocity, delta, volume, bounding, bitmap, impulse, hallmarks, arena, collect, transmission, collide, ball, triangle, square, collision, mass, collidable, cinematic, torque, joints, sphere, heightfield, shape, radius, matrix, plane, friction, capsule, body, vecf]},
com.jme3.scene.Spatial#rotateUpTo: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, square, transmission, ball, collect, hallmarks, spatial, shader, mass, bounding, joints, sphere, triangle, torque, shape, vecf, texture, light, material, collidable, friction, radius, cinematic, camel, capsule, collide, heightfield, bitmap, volume, scene, body, plane, collision, geometry, matrix]},
org.ode4j.ode.internal.joints.DxJointHinge2#dJointGetHinge2Angle2: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]},
org.ode4j.ode.internal.joints.DxJointHinge2#dJointGetHinge2Angle1: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]},
com.jme3.environment.util.EnvMapUtils#getCubeMapCrossDebugView: {[spatial, camel, geometry, scene, rotation, rotate, material, quaternion, texture, bone, light, shader, axes, speed, emitter, piston, hinge, motor, vertices, calculate, velocity, delta, volume, bounding, bitmap, impulse, hallmarks, arena, collect, transmission, collide, ball, triangle, square, collision, mass, collidable, cinematic, torque, joints, sphere, heightfield, shape, radius, matrix, plane, friction, capsule, body, vecf]},
net.smert.jreactphysics3d.engine.DynamicsWorld#getSleepLinearVelocity: {[rotate, quaternion, rotation, axes, speed, piston, hinge, motor, bone, velocity, impulse, joints, emitter, delta, torque, body, mass, friction, ball, square, shape, vertices, collect, spatial, hallmarks, arena, bounding, triangle, collision, vecf, shader, sphere, transmission, cinematic, light, texture, capsule, radius, material, camel, heightfield, plane, volume, geometry, scene, calculate, collidable, matrix, collide, bitmap]},
com.jme3.input.FlyByCamera#setRotationSpeed: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, velocity, emitter, impulse, delta, calculate, square, mass, arena, hallmarks, torque, collect, vertices, ball, joints, shader, spatial, collidable, collide, transmission, bounding, texture, bitmap, collision, light, shape, sphere, camel, material, heightfield, geometry, triangle, plane, vecf, scene, radius, friction, volume, matrix, cinematic, capsule, body]},
net.smert.jreactphysics3d.constraint.ContactPoint#getPenetrationImpulse: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
org.ode4j.ode.OdeHelper#createPistonJoint: {[piston, speed, rotate, hinge, quaternion, axes, rotation, motor, bone, velocity, joints, impulse, torque, body, delta, emitter, collect, friction, ball, mass, bounding, matrix, sphere, shape, vertices, radius, volume, spatial, square, shader, triangle, vecf, collision, arena, light, texture, collide, calculate, material, cinematic, transmission, collidable, scene, plane, bitmap, hallmarks, capsule, camel, heightfield, geometry]}
com.jme3.collision.CollisionResults#iterator: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
org.ode4j.ode.DBody#setQuaternion: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.ode4j.ode.internal.joints.DxJointHinge2#getAngle2Rate: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
org.ode4j.ode.internal.joints.DxJointHinge2#getAxis2: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
org.ode4j.ode.internal.joints.DxJointHinge2#getAxis1: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
com.jme3.scene.Spatial#lookAt: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA#getDistanceSquare: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, velocity, emitter, impulse, delta, calculate, square, mass, arena, hallmarks, torque, collect, vertices, ball, joints, shader, spatial, collidable, collide, transmission, bounding, texture, bitmap, collision, light, shape, sphere, camel, material, heightfield, geometry, triangle, plane, vecf, scene, radius, friction, volume, matrix, cinematic, capsule, body]}
org.dyn4j.dynamics.Body#getChangeInOrientation: {[rotation, rotate, quaternion, speed, axes, motor, velocity, bone, piston, hinge, impulse, delta, emitter, mass, square, torque, hallmarks, calculate, collidable, arena, joints, collect, shader, collision, collide, ball, radius, heightfield, bitmap, vertices, texture, plane, friction, light, material, spatial, vecf, scene, triangle, bounding, geometry, transmission, camel, cinematic, body, shape, capsule, volume, sphere, matrix]}
com.jme3.light.Light#clone: {[rotation, quaternion, rotate, axes, speed, bone, piston, motor, hinge, emitter, velocity, impulse, delta, calculate, square, arena, hallmarks, vertices, mass, ball, torque, shader, collect, spatial, joints, transmission, shape, bitmap, triangle, collidable, texture, light, vecf, camel, bounding, collide, material, sphere, geometry, collision, cinematic, capsule, friction, body, radius, matrix, scene, volume, plane, heightfield]}
com.jme3.renderer.Camera#getUp: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
com.jme3.animation.CompactQuaternionArray#CompactQuaternionArray(C): {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.ode4j.ode.internal.joints.DxJointHinge#getParam: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
org.ode4j.ode.DGeom#setOffsetQuaternion: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.ode4j.ode.internal.DxGeom#getQuaternion: {[piston, hinge, speed, joints, axes, body, motor, rotate, ball, quaternion, torque, impulse, bone, friction, velocity, rotation, delta, arena, mass, emitter, calculate, shape, bounding, sphere, radius, collision, collect, transmission, cinematic, volume, capsule, spatial, bitmap, triangle, vertices, vecf, collidable, hallmarks, square, heightfield, geometry, light, texture, material, shader, scene, plane, matrix, camel, collide]}
org.ode4j.ode.internal.joints.DxJointHinge#dJointSetHingeAnchor: {[rotation, quaternion, rotate, axes, speed, bone, piston, motor, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, torque, collect, ball, joints, shader, spatial, transmission, collidable, shape, bounding, texture, bitmap, sphere, light, collide, triangle, camel, material, vecf, collision, geometry, matrix, scene, heightfield, plane, capsule, cinematic, volume, radius, body, friction]}
org.ode4j.ode.internal.joints.DxJointPiston#dJointGetPistonParam: {[piston, speed, rotate, hinge, quaternion, axes, rotation, motor, bone, velocity, joints, impulse, torque, body, delta, emitter, collect, friction, ball, mass, bounding, matrix, sphere, shape, vertices, radius, volume, spatial, square, shader, triangle, vecf, collision, arena, light, texture, collide, calculate, material, cinematic, transmission, collidable, scene, plane, bitmap, hallmarks, capsule, camel, heightfield, geometry]}
org.dyn4j.dynamics.Settings#toString: {[rotation, rotate, quaternion, speed, axes, motor, velocity, bone, piston, hinge, impulse, delta, emitter, mass, square, torque, hallmarks, calculate, collidable, arena, joints, collect, shader, collision, collide, ball, radius, heightfield, bitmap, vertices, texture, plane, friction, light, material, spatial, vecf, scene, triangle, bounding, geometry, transmission, camel, cinematic, body, shape, capsule, volume, sphere, matrix]}
org.ode4j.ode.internal.joints.DxJointSlider#dJointSetSliderAxisDelta: {[speed, piston, hinge, axes, rotate, motor, rotation, quaternion, impulse, velocity, joints, delta, torque, body, bone, friction, mass, ball, emitter, arena, square, transmission, shape, collect, calculate, hallmarks, vertices, spatial, bounding, shader, collision, bitmap, sphere, collide, heightfield, light, geometry, texture, camel, volume, triangle, capsule, cinematic, material, vecf, collidable, matrix, scene, plane, radius]}
com.jme3.input.AbstractJoystick#getAxis: {[rotate, axes, rotation, quaternion, emitter, speed, piston, hinge, vertices, shape, square, vecf, bone, triangle, motor, collision, plane, velocity, hallmarks, heightfield, collidable, shader, impulse, joints, collide, delta, bitmap, light, texture, torque, body, mass, volume, material, cinematic, capsule, sphere, bounding, friction, spatial, arena, ball, radius, scene, matrix, camel, collect, transmission, calculate, geometry]}
com.jme3.input.Joystick#getAxes: {[rotate, axes, rotation, quaternion, emitter, speed, piston, hinge, vertices, shape, square, vecf, bone, triangle, motor, collision, plane, velocity, hallmarks, heightfield, collidable, shader, impulse, joints, collide, delta, bitmap, light, texture, torque, body, mass, volume, material, cinematic, capsule, sphere, bounding, friction, spatial, arena, ball, radius, scene, matrix, camel, collect, transmission, calculate, geometry]}
com.jme3.input.ChaseCamera#setRotationSensitivity: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
com.jme3.animation.Bone#setAnimTransforms: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
org.ode4j.ode.internal.DxGeom#setQuaternion: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
net.smert.jreactphysics3d.constraint.HingeJoint#warmstart: {[motor, speed, velocity, impulse, delta, torque, hinge, piston, mass, rotate, axes, rotation, joints, friction, quaternion, body, transmission, bone, ball, square, arena, heightfield, vecf, collidable, triangle, collide, hallmarks, plane, radius, collision, collect, bitmap, calculate, emitter, cinematic, shader, vertices, texture, scene, capsule, light, material, geometry, sphere, volume, bounding, matrix, spatial, camel, shape]}
org.dyn4j.dynamics.joint.WeldJoint#getRelativeRotation: {[piston, speed, rotate, hinge, axes, spatial, geometry, motor, camel, rotation, bone, delta, scene, impulse, material, quaternion, velocity, joints, torque, friction, texture, body, light, mass, shader, ball, emitter, vertices, arena, square, hallmarks, bounding, transmission, volume, collect, triangle, calculate, collide, shape, capsule, heightfield, bitmap, cinematic, plane, collision, vecf, radius, collidable, sphere, matrix]}
org.ode4j.ode.internal.joints.DxJointPiston#getPosition: {[piston, speed, rotate, hinge, quaternion, axes, rotation, motor, bone, velocity, joints, impulse, torque, body, delta, emitter, collect, friction, ball, mass, bounding, matrix, sphere, shape, vertices, radius, volume, spatial, square, shader, triangle, vecf, collision, arena, light, texture, collide, calculate, material, cinematic, transmission, collidable, scene, plane, bitmap, hallmarks, capsule, camel, heightfield, geometry]}
org.ode4j.ode.internal.joints.DxJointHinge2#dJointSetHinge2Param: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
org.ode4j.ode.internal.joints.DxJointUniversal#dJointSetUniversalAxis1: {[rotate, axes, rotation, quaternion, emitter, speed, piston, hinge, vertices, shape, square, vecf, bone, triangle, motor, collision, plane, velocity, hallmarks, heightfield, collidable, shader, impulse, joints, collide, delta, bitmap, light, texture, torque, body, mass, volume, material, cinematic, capsule, sphere, bounding, friction, spatial, arena, ball, radius, scene, matrix, camel, collect, transmission, calculate, geometry]}
org.ode4j.ode.internal.joints.DxJointUniversal#dJointSetUniversalAxis2: {[rotate, axes, rotation, quaternion, emitter, speed, piston, hinge, vertices, shape, square, vecf, bone, triangle, motor, collision, plane, velocity, hallmarks, heightfield, collidable, shader, impulse, joints, collide, delta, bitmap, light, texture, torque, body, mass, volume, material, cinematic, capsule, sphere, bounding, friction, spatial, arena, ball, radius, scene, matrix, camel, collect, transmission, calculate, geometry]}
org.ode4j.ode.internal.DxBody#getFiniteRotationMode: {[piston, hinge, speed, axes, rotate, motor, rotation, quaternion, joints, impulse, velocity, torque, delta, body, bone, friction, ball, mass, emitter, arena, square, transmission, shape, calculate, collect, vertices, bounding, spatial, sphere, collision, hallmarks, shader, radius, volume, triangle, camel, collide, geometry, light, vecf, texture, heightfield, bitmap, cinematic, matrix, material, collidable, scene, capsule, plane]}
com.jme3.input.AbstractJoystick#getAxes: {[rotate, axes, rotation, quaternion, emitter, speed, piston, hinge, vertices, shape, square, vecf, bone, triangle, motor, collision, plane, velocity, hallmarks, heightfield, collidable, shader, impulse, joints, collide, delta, bitmap, light, texture, torque, body, mass, volume, material, cinematic, capsule, sphere, bounding, friction, spatial, arena, ball, radius, scene, matrix, camel, collect, transmission, calculate, geometry]}
com.jme3.renderer.Camera#lookAt: {[rotation, quaternion, rotate, axes, speed, bone, piston, motor, hinge, emitter, velocity, impulse, delta, square, calculate, arena, vertices, hallmarks, mass, shader, ball, torque, joints, spatial, collect, shape, triangle, transmission, bitmap, vecf, texture, light, material, collidable, bounding, camel, sphere, geometry, collide, matrix, cinematic, plane, capsule, volume, scene, heightfield, friction, radius, collision, body]}
net.smert.jreactphysics3d.constraint.FixedJoint#FixedJoint(C): {[rotate, speed, quaternion, rotation, axes, piston, hinge, motor, velocity, impulse, bone, delta, joints, torque, mass, body, emitter, friction, ball, square, collect, bounding, arena, sphere, shape, transmission, spatial, collide, shader, hallmarks, vertices, collidable, volume, heightfield, texture, plane, light, radius, material, cinematic, scene, camel, capsule, bitmap, matrix, geometry, vecf, calculate, triangle, collision]}
com.jme3.util.BufferUtils#setInBuffer: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.ode4j.ode.internal.joints.DxJointDHinge#DxJointDHinge(C): {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
org.dyn4j.geometry.Transform#rotate: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]}
org.ode4j.ode.internal.joints.DxJointHinge2#dJointSetHinge2Anchor: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
com.jme3.input.ChaseCamera#computePosition: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
com.jme3.material.MatParam#getValueAsString: {[quaternion, rotation, bone, rotate, emitter, spatial, axes, speed, camel, piston, hinge, scene, texture, light, bitmap, material, transmission, shader, geometry, cinematic, calculate, motor, capsule, arena, velocity, collect, sphere, vertices, radius, ball, impulse, triangle, delta, friction, collidable, collide, joints, bounding, heightfield, square, vecf, volume, mass, hallmarks, collision, plane, body, shape, torque, matrix]}
org.ode4j.ode.internal.joints.DxJointHinge#dJointSetHingeAnchorDelta: {[speed, piston, hinge, axes, motor, rotate, rotation, impulse, velocity, quaternion, joints, delta, torque, body, friction, bone, mass, ball, arena, emitter, transmission, square, collect, shape, calculate, bounding, hallmarks, spatial, collide, sphere, vertices, heightfield, shader, volume, bitmap, geometry, collision, camel, collidable, light, texture, plane, capsule, radius, material, vecf, scene, matrix, cinematic, triangle]}
org.dyn4j.geometry.Rectangle#getRotation: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
com.jme3.cinematic.events.MotionEvent#cloneForSpatial: {[rotation, quaternion, rotate, bone, axes, speed, emitter, spatial, piston, hinge, camel, motor, geometry, scene, velocity, material, calculate, texture, light, vertices, impulse, delta, arena, collect, shader, hallmarks, transmission, square, ball, triangle, bitmap, mass, torque, joints, collide, volume, sphere, cinematic, collidable, radius, vecf, collision, capsule, bounding, shape, matrix, friction, heightfield, plane, body]}
com.jme3.math.Matrix4f#mult: {[quaternion, rotate, rotation, emitter, axes, vertices, vecf, triangle, bone, shape, heightfield, piston, collision, speed, hinge, plane, collidable, collide, transmission, arena, friction, shader, square, mass, calculate, hallmarks, radius, light, spatial, motor, texture, material, ball, torque, cinematic, volume, capsule, sphere, velocity, delta, joints, bounding, geometry, collect, matrix, body, camel, scene, bitmap, impulse]}
com.jme3.animation.AnimationFactory#addTimeRotation: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
com.jme3.app.ChaseCameraAppState#getRotationSpeed: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, velocity, emitter, impulse, delta, calculate, square, mass, arena, hallmarks, torque, collect, vertices, ball, joints, shader, spatial, collidable, collide, transmission, bounding, texture, bitmap, collision, light, shape, sphere, camel, material, heightfield, geometry, triangle, plane, vecf, scene, radius, friction, volume, matrix, cinematic, capsule, body]}
com.jme3.environment.EnvironmentCamera#createOffCamera: {[rotate, axes, rotation, quaternion, emitter, speed, piston, hinge, vertices, shape, square, vecf, bone, triangle, motor, collision, plane, velocity, hallmarks, heightfield, collidable, shader, impulse, joints, collide, delta, bitmap, light, texture, torque, body, mass, volume, material, cinematic, capsule, sphere, bounding, friction, spatial, arena, ball, radius, scene, matrix, camel, collect, transmission, calculate, geometry]}
com.jme3.input.FlyByCamera#onAction: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]}
com.jme3.renderer.Camera#Camera(C): {[quaternion, rotation, rotate, axes, emitter, speed, bone, piston, hinge, motor, vertices, velocity, triangle, square, vecf, arena, shape, calculate, hallmarks, impulse, heightfield, transmission, shader, plane, delta, ball, spatial, collision, collide, joints, friction, collidable, light, texture, material, collect, mass, volume, torque, camel, capsule, sphere, cinematic, bitmap, bounding, radius, matrix, body, geometry, scene]}
com.jme3.app.ChaseCameraAppState#setMaxVerticalRotation: {[rotation, quaternion, rotate, axes, speed, bone, piston, motor, hinge, emitter, velocity, impulse, delta, calculate, square, arena, hallmarks, vertices, mass, ball, torque, shader, collect, spatial, joints, transmission, shape, bitmap, triangle, collidable, texture, light, vecf, camel, bounding, collide, material, sphere, geometry, collision, cinematic, capsule, friction, body, radius, matrix, scene, volume, plane, heightfield]}
com.jme3.scene.Spatial#getWorldRotation: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
org.dyn4j.geometry.Transform#lerp: {[rotate, rotation, quaternion, spatial, geometry, camel, scene, axes, bone, material, speed, texture, emitter, light, motor, piston, vertices, velocity, hinge, shader, hallmarks, delta, square, impulse, calculate, bounding, volume, arena, mass, collect, triangle, ball, torque, capsule, collide, cinematic, radius, joints, collision, plane, heightfield, transmission, collidable, vecf, friction, sphere, shape, body, bitmap, matrix]}
com.jme3.cinematic.events.MotionEvent#internalUpdate: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]}
org.ode4j.math.DQuaternion#DQuaternion(C): {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.cinematic.events.AbstractCinematicEvent#getSpeed: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]}
org.ode4j.ode.internal.joints.DxJointPiston#getAngleRate: {[piston, speed, rotate, hinge, quaternion, axes, rotation, motor, bone, velocity, joints, impulse, torque, body, delta, emitter, collect, friction, ball, mass, bounding, matrix, sphere, shape, vertices, radius, volume, spatial, square, shader, triangle, vecf, collision, arena, light, texture, collide, calculate, material, cinematic, transmission, collidable, scene, plane, bitmap, hallmarks, capsule, camel, heightfield, geometry]}
org.ode4j.ode.DGeom#getQuaternion: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.audio.Listener#getUp: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
com.jme3.effect.influencers.NewtonianParticleInfluencer#getSurfaceTangentRotation: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
org.ode4j.ode.internal.joints.DxJointHinge#dJointGetHingeAxis: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
org.dyn4j.geometry.Ellipse#getAxes: {[rotate, axes, rotation, quaternion, emitter, speed, piston, hinge, vertices, shape, square, vecf, bone, triangle, motor, collision, plane, velocity, hallmarks, heightfield, collidable, shader, impulse, joints, collide, delta, bitmap, light, texture, torque, body, mass, volume, material, cinematic, capsule, sphere, bounding, friction, spatial, arena, ball, radius, scene, matrix, camel, collect, transmission, calculate, geometry]}
org.ode4j.ode.internal.joints.DxJointPiston#setParamLoStop2: {[piston, speed, rotate, hinge, quaternion, axes, rotation, motor, bone, velocity, joints, impulse, torque, body, delta, emitter, collect, friction, ball, mass, bounding, matrix, sphere, shape, vertices, radius, volume, spatial, square, shader, triangle, vecf, collision, arena, light, texture, collide, calculate, material, cinematic, transmission, collidable, scene, plane, bitmap, hallmarks, capsule, camel, heightfield, geometry]}
com.jme3.math.Quaternion#subtract: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.input.FlyByCamera#mapJoystick: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
org.dyn4j.collision.AbstractCollidable#rotate: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]}
org.ode4j.ode.internal.joints.DxJointHinge#getAngle: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
com.jme3.input.FlyByCamera#registerWithInput: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]}
net.smert.jreactphysics3d.mathematics.Transform#setOrientation: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.input.ChaseCamera#getDownRotateOnCloseViewOnly: {[rotation, quaternion, rotate, axes, speed, bone, piston, motor, hinge, emitter, velocity, impulse, delta, calculate, square, arena, hallmarks, vertices, mass, ball, torque, shader, collect, spatial, joints, transmission, shape, bitmap, triangle, collidable, texture, light, vecf, camel, bounding, collide, material, sphere, geometry, collision, cinematic, capsule, friction, body, radius, matrix, scene, volume, plane, heightfield]}
org.ode4j.ode.DWorld#setMaxAngularSpeed: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]}
com.jme3.animation.Bone#Bone(C): {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, velocity, transmission, arena, cinematic, bounding, sphere, vertices, collect, capsule, impulse, spatial, radius, ball, triangle, bitmap, vecf, shape, friction, delta, heightfield, joints, shader, volume, material, square, hallmarks, camel, geometry, texture, collision, light, collidable, torque, scene, matrix, body, plane, mass, collide]}
com.jme3.app.ChaseCameraAppState#onAction: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]}
org.ode4j.ode.DWorld#getMaxAngularSpeed: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]}
org.ode4j.math.DQuaternion#isEq: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.dyn4j.geometry.AbstractShape#rotate: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]}
org.ode4j.ode.internal.DxWorld#dWorldGetMaxAngularSpeed: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]}
org.ode4j.ode.internal.joints.DxJointHinge2#getAngle1Rate: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
com.jme3.animation.BoneTrack#setKeyframes: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.input.ChaseCamera#onAction: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]}
org.ode4j.math.DQuaternion#equals: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.ode4j.ode.internal.joints.DxJointPiston#getAngle: {[piston, speed, rotate, hinge, quaternion, axes, rotation, motor, bone, velocity, joints, impulse, torque, body, delta, emitter, collect, friction, ball, mass, bounding, matrix, sphere, shape, vertices, radius, volume, spatial, square, shader, triangle, vecf, collision, arena, light, texture, collide, calculate, material, cinematic, transmission, collidable, scene, plane, bitmap, hallmarks, capsule, camel, heightfield, geometry]}
org.ode4j.ode.internal.joints.DxJointDHinge#dJointGetDHingeAnchor1: {[piston, hinge, speed, joints, axes, motor, body, rotate, impulse, torque, quaternion, velocity, ball, rotation, friction, bone, delta, arena, mass, emitter, bounding, calculate, collect, shape, sphere, transmission, radius, volume, collision, cinematic, light, texture, material, shader, geometry, scene, capsule, square, hallmarks, camel, bitmap, vertices, vecf, triangle, collide, spatial, plane, matrix, collidable, heightfield]}
org.ode4j.ode.internal.joints.DxJointDHinge#dJointGetDHingeAnchor2: {[piston, hinge, speed, joints, axes, motor, body, rotate, impulse, torque, quaternion, velocity, ball, rotation, friction, bone, delta, arena, mass, emitter, bounding, calculate, collect, shape, sphere, transmission, radius, volume, collision, cinematic, light, texture, material, shader, geometry, scene, capsule, square, hallmarks, camel, bitmap, vertices, vecf, triangle, collide, spatial, plane, matrix, collidable, heightfield]}
org.dyn4j.dynamics.contact.ContactConstraint#getTangentSpeed: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]}
org.ode4j.ode.DBody#setFiniteRotationAxis: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
com.jme3.effect.influencers.NewtonianParticleInfluencer#influenceParticle: {[rotate, rotation, quaternion, axes, speed, motor, bone, velocity, piston, emitter, hinge, square, impulse, delta, hallmarks, mass, vertices, torque, shader, calculate, arena, joints, shape, radius, texture, light, bitmap, collect, material, ball, triangle, vecf, volume, sphere, spatial, plane, scene, friction, transmission, heightfield, body, collidable, bounding, cinematic, geometry, collide, collision, matrix, capsule, camel]}
com.jme3.animation.AnimationFactory#addKeyFrameTransform: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
org.ode4j.ode.internal.DxBody#dBodyGetFiniteRotationAxis: {[piston, hinge, speed, axes, rotate, motor, rotation, quaternion, joints, impulse, velocity, torque, delta, body, bone, friction, ball, mass, emitter, arena, square, transmission, shape, calculate, collect, vertices, bounding, spatial, sphere, collision, hallmarks, shader, radius, volume, triangle, camel, collide, geometry, light, vecf, texture, heightfield, bitmap, cinematic, matrix, material, collidable, scene, capsule, plane]}
com.jme3.cinematic.events.CinematicEvent#getSpeed: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]}
com.jme3.math.Quaternion#lookAt: {[rotate, axes, rotation, quaternion, emitter, speed, piston, hinge, vertices, shape, square, vecf, bone, triangle, motor, collision, plane, velocity, hallmarks, heightfield, collidable, shader, impulse, joints, collide, delta, bitmap, light, texture, torque, body, mass, volume, material, cinematic, capsule, sphere, bounding, friction, spatial, arena, ball, radius, scene, matrix, camel, collect, transmission, calculate, geometry]}
org.ode4j.ode.internal.joints.DxJointUniversal#DxJointUniversal(C): {[quaternion, rotation, rotate, speed, axes, bone, piston, hinge, motor, emitter, velocity, impulse, calculate, delta, collect, bounding, arena, sphere, transmission, mass, joints, torque, collidable, shader, square, ball, cinematic, vertices, volume, material, spatial, collide, texture, radius, light, capsule, plane, scene, hallmarks, collision, geometry, shape, body, heightfield, bitmap, triangle, matrix, vecf, friction, camel]}
com.jme3.renderer.Camera#getRotation: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
com.jme3.input.FlyByCamera#setZoomSpeed: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]}
com.jme3.app.ChaseCameraAppState#rotateCamera: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, square, transmission, ball, collect, hallmarks, spatial, shader, mass, bounding, joints, sphere, triangle, torque, shape, vecf, texture, light, material, collidable, friction, radius, cinematic, camel, capsule, collide, heightfield, bitmap, volume, scene, body, plane, collision, geometry, matrix]}
org.ode4j.ode.OdeHelper#createHingeJoint: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
org.ode4j.ode.internal.joints.DxJointHinge2#setParam: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
org.dyn4j.geometry.Convex#getAxes: {[rotate, axes, rotation, quaternion, emitter, speed, piston, hinge, vertices, shape, square, vecf, bone, triangle, motor, collision, plane, velocity, hallmarks, heightfield, collidable, shader, impulse, joints, collide, delta, bitmap, light, texture, torque, body, mass, volume, material, cinematic, capsule, sphere, bounding, friction, spatial, arena, ball, radius, scene, matrix, camel, collect, transmission, calculate, geometry]}
org.ode4j.ode.internal.joints.DxJointPiston#setAnchor: {[piston, speed, rotate, hinge, quaternion, axes, rotation, motor, bone, velocity, joints, impulse, torque, body, delta, emitter, collect, friction, ball, mass, bounding, matrix, sphere, shape, vertices, radius, volume, spatial, square, shader, triangle, vecf, collision, arena, light, texture, collide, calculate, material, cinematic, transmission, collidable, scene, plane, bitmap, hallmarks, capsule, camel, heightfield, geometry]}
org.ode4j.ode.internal.joints.DxJointHinge#getAngleRate: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
org.ode4j.ode.internal.joints.DxJointHinge#setParam: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
org.ode4j.ode.internal.DxGeom#setOffsetWorldQuaternion: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
net.smert.jreactphysics3d.mathematics.Quaternion#add: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.ode4j.ode.internal.DxWorld#setMaxAngularSpeed: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]}
com.jme3.animation.Bone#blendAnimTransforms: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
org.ode4j.ode.internal.CollisionLibccd#ccdGeomToObj: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.dyn4j.collision.AbstractCollidable#rotateAboutCenter: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]}
org.ode4j.ode.internal.joints.DxJointHinge#setParamBounce: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
org.ode4j.ode.internal.joints.DxJointHinge#setAxis: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
org.ode4j.ode.internal.joints.DxJointPiston#dJointGetPistonAnchor2: {[piston, speed, rotate, hinge, quaternion, axes, rotation, motor, bone, velocity, joints, impulse, torque, body, delta, emitter, collect, friction, ball, mass, bounding, matrix, sphere, shape, vertices, radius, volume, spatial, square, shader, triangle, vecf, collision, arena, light, texture, collide, calculate, material, cinematic, transmission, collidable, scene, plane, bitmap, hallmarks, capsule, camel, heightfield, geometry]}
com.jme3.math.Quaternion#fromAngles: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.math.Quaternion#set: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.app.ChaseCameraAppState#onAnalog: {[rotation, rotate, quaternion, axes, speed, bone, motor, piston, hinge, velocity, emitter, impulse, delta, calculate, square, mass, arena, hallmarks, vertices, torque, collect, ball, shader, joints, spatial, collidable, bitmap, shape, texture, collide, transmission, light, bounding, triangle, material, camel, collision, sphere, vecf, geometry, heightfield, radius, scene, plane, cinematic, capsule, friction, matrix, body, volume]}
org.ode4j.ode.internal.joints.DxJointPiston#getParam: {[piston, speed, rotate, hinge, quaternion, axes, rotation, motor, bone, velocity, joints, impulse, torque, body, delta, emitter, collect, friction, ball, mass, bounding, matrix, sphere, shape, vertices, radius, volume, spatial, square, shader, triangle, vecf, collision, arena, light, texture, collide, calculate, material, cinematic, transmission, collidable, scene, plane, bitmap, hallmarks, capsule, camel, heightfield, geometry]}
org.ode4j.ode.internal.joints.DxJointPiston#addForce: {[piston, speed, rotate, hinge, quaternion, axes, rotation, motor, bone, velocity, joints, impulse, torque, body, delta, emitter, collect, friction, ball, mass, bounding, matrix, sphere, shape, vertices, radius, volume, spatial, square, shader, triangle, vecf, collision, arena, light, texture, collide, calculate, material, cinematic, transmission, collidable, scene, plane, bitmap, hallmarks, capsule, camel, heightfield, geometry]}
com.jme3.app.ChaseCameraAppState#setRotationSpeed: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, velocity, emitter, impulse, delta, calculate, square, mass, arena, hallmarks, torque, collect, vertices, ball, joints, shader, spatial, collidable, collide, transmission, bounding, texture, bitmap, collision, light, shape, sphere, camel, material, heightfield, geometry, triangle, plane, vecf, scene, radius, friction, volume, matrix, cinematic, capsule, body]}
com.jme3.animation.CompactQuaternionArray#serialize: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.ode4j.ode.internal.joints.DxJointPiston#DxJointPiston(C): {[piston, speed, rotate, hinge, quaternion, axes, rotation, motor, bone, velocity, joints, impulse, torque, body, delta, emitter, collect, friction, ball, mass, bounding, matrix, sphere, shape, vertices, radius, volume, spatial, square, shader, triangle, vecf, collision, arena, light, texture, collide, calculate, material, cinematic, transmission, collidable, scene, plane, bitmap, hallmarks, capsule, camel, heightfield, geometry]}
org.ode4j.ode.internal.joints.DxJointPR#DxJointPR(C): {[quaternion, rotation, rotate, speed, axes, bone, piston, hinge, motor, emitter, velocity, impulse, calculate, delta, collect, bounding, arena, sphere, transmission, mass, joints, torque, collidable, shader, square, ball, cinematic, vertices, volume, material, spatial, collide, texture, radius, light, capsule, plane, scene, hallmarks, collision, geometry, shape, body, heightfield, bitmap, triangle, matrix, vecf, friction, camel]}
com.jme3.input.ChaseCamera#setMaxVerticalRotation: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
org.ode4j.ode.internal.DxBody#dBodySetFiniteRotationMode: {[piston, hinge, speed, axes, rotate, motor, rotation, quaternion, joints, impulse, velocity, torque, delta, body, bone, friction, ball, mass, emitter, arena, square, transmission, shape, calculate, collect, vertices, bounding, spatial, sphere, collision, hallmarks, shader, radius, volume, triangle, camel, collide, geometry, light, vecf, texture, heightfield, bitmap, cinematic, matrix, material, collidable, scene, capsule, plane]}
org.ode4j.ode.internal.joints.DxJointPiston#getPositionRate: {[piston, speed, rotate, hinge, quaternion, axes, rotation, motor, bone, velocity, joints, impulse, torque, body, delta, emitter, collect, friction, ball, mass, bounding, matrix, sphere, shape, vertices, radius, volume, spatial, square, shader, triangle, vecf, collision, arena, light, texture, collide, calculate, material, cinematic, transmission, collidable, scene, plane, bitmap, hallmarks, capsule, camel, heightfield, geometry]}
com.jme3.app.ChaseCameraAppState#setMinVerticalRotation: {[rotation, quaternion, rotate, axes, speed, bone, piston, motor, hinge, emitter, velocity, impulse, delta, calculate, square, arena, hallmarks, vertices, mass, ball, torque, shader, collect, spatial, joints, transmission, shape, bitmap, triangle, collidable, texture, light, vecf, camel, bounding, collide, material, sphere, geometry, collision, cinematic, capsule, friction, body, radius, matrix, scene, volume, plane, heightfield]}
org.ode4j.ode.internal.joints.DxJointPiston#setAnchorOffset: {[piston, speed, rotate, hinge, quaternion, axes, rotation, motor, bone, velocity, joints, impulse, torque, body, delta, emitter, collect, friction, ball, mass, bounding, matrix, sphere, shape, vertices, radius, volume, spatial, square, shader, triangle, vecf, collision, arena, light, texture, collide, calculate, material, cinematic, transmission, collidable, scene, plane, bitmap, hallmarks, capsule, camel, heightfield, geometry]}
org.ode4j.ode.internal.DxBody#getQuaternion: {[piston, hinge, speed, joints, axes, body, motor, rotate, ball, quaternion, torque, impulse, bone, friction, velocity, rotation, delta, arena, mass, emitter, calculate, shape, bounding, sphere, radius, collision, collect, transmission, cinematic, volume, capsule, spatial, bitmap, triangle, vertices, vecf, collidable, hallmarks, square, heightfield, geometry, light, texture, material, shader, scene, plane, matrix, camel, collide]}
net.smert.jreactphysics3d.mathematics.Quaternion#multiply: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.animation.BoneTrack#clone: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, velocity, transmission, arena, cinematic, bounding, sphere, vertices, collect, capsule, impulse, spatial, radius, ball, triangle, bitmap, vecf, shape, friction, delta, heightfield, joints, shader, volume, material, square, hallmarks, camel, geometry, texture, collision, light, collidable, torque, scene, matrix, body, plane, mass, collide]}
org.ode4j.ode.internal.joints.OdeJointsFactoryImpl#dJointCreatePiston: {[piston, speed, rotate, hinge, quaternion, axes, rotation, motor, bone, velocity, joints, impulse, torque, body, delta, emitter, collect, friction, ball, mass, bounding, matrix, sphere, shape, vertices, radius, volume, spatial, square, shader, triangle, vecf, collision, arena, light, texture, collide, calculate, material, cinematic, transmission, collidable, scene, plane, bitmap, hallmarks, capsule, camel, heightfield, geometry]}
com.jme3.math.Quaternion#opposite: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.app.DebugKeyListener#onAction: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
org.dyn4j.collision.Collidable#rotateAboutCenter: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]}
com.jme3.animation.CompactQuaternionArray#deserialize: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.animation.Bone#getModelBindInverseTransform: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
com.jme3.input.ChaseCamera#rotateCamera: {[rotation, rotate, quaternion, axes, speed, bone, motor, piston, hinge, velocity, emitter, impulse, delta, calculate, square, mass, arena, hallmarks, vertices, torque, collect, ball, shader, joints, spatial, collidable, bitmap, shape, texture, collide, transmission, light, bounding, triangle, material, camel, collision, sphere, vecf, geometry, heightfield, radius, scene, plane, cinematic, capsule, friction, matrix, body, volume]}
org.ode4j.ode.internal.DxBody#dxStepBody: {[rotate, quaternion, speed, axes, rotation, piston, hinge, motor, bone, velocity, impulse, joints, delta, emitter, torque, body, mass, friction, ball, shape, square, collect, vertices, arena, bounding, sphere, spatial, hallmarks, collision, cinematic, triangle, shader, vecf, radius, capsule, transmission, texture, light, material, volume, calculate, camel, heightfield, matrix, scene, bitmap, plane, collide, collidable, geometry]}
org.ode4j.ode.internal.joints.DxJointPiston#dJointSetPistonAxisDelta: {[speed, piston, hinge, axes, rotate, motor, rotation, quaternion, impulse, velocity, joints, delta, torque, body, bone, friction, mass, ball, emitter, arena, square, transmission, shape, collect, calculate, hallmarks, vertices, spatial, bounding, shader, collision, sphere, bitmap, collide, heightfield, light, geometry, texture, camel, volume, triangle, capsule, material, vecf, cinematic, collidable, matrix, scene, plane, radius]}
com.jme3.animation.CompactQuaternionArray#getElementClass: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.animation.SpatialTrack#clone: {[quaternion, rotation, bone, rotate, spatial, emitter, axes, camel, scene, speed, texture, material, geometry, piston, light, hinge, shader, transmission, bitmap, vertices, calculate, cinematic, arena, radius, collect, triangle, sphere, motor, capsule, vecf, ball, velocity, mass, friction, heightfield, impulse, volume, shape, plane, torque, collision, square, joints, matrix, hallmarks, delta, collide, bounding, body, collidable]}
com.jme3.app.ChaseCameraAppState#initTogleRotateInput: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]}
com.jme3.scene.debug.SkeletonInterBoneWire#updateGeometry: {[rotate, rotation, geometry, spatial, camel, quaternion, scene, material, speed, axes, bone, texture, light, motor, emitter, velocity, piston, shader, delta, hinge, impulse, hallmarks, vertices, square, bounding, volume, calculate, mass, torque, arena, collect, collide, ball, radius, capsule, collision, heightfield, collidable, friction, joints, triangle, cinematic, sphere, bitmap, shape, plane, vecf, body, transmission, matrix]}
org.ode4j.ode.internal.Rotation#dQSetIdentity: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.ode4j.ode.internal.joints.DxJointHinge2#getAnchor2: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
org.dyn4j.geometry.HalfEllipse#getFarthestPoint: {[rotate, rotation, quaternion, axes, emitter, vertices, speed, bone, square, piston, hallmarks, triangle, hinge, vecf, shape, motor, plane, velocity, arena, heightfield, collision, volume, collidable, collide, spatial, impulse, delta, calculate, shader, bitmap, bounding, geometry, ball, sphere, radius, mass, cinematic, camel, joints, scene, capsule, light, friction, torque, texture, transmission, collect, body, matrix, material]}
com.jme3.input.FlyByCamera#unregisterInput: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]}
com.jme3.input.ChaseCamera#zoomCamera: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
org.ode4j.ode.internal.ragdoll.DxRagdoll#setAutoDisableAverageSamplesCount: {[piston, hinge, speed, joints, axes, body, motor, rotate, quaternion, bone, ball, impulse, torque, rotation, velocity, friction, delta, arena, emitter, mass, calculate, shape, bounding, sphere, collect, collision, cinematic, radius, transmission, capsule, bitmap, spatial, volume, triangle, vertices, vecf, collidable, hallmarks, heightfield, square, camel, geometry, matrix, plane, collide, material, light, shader, scene, texture]}
org.dyn4j.dynamics.joint.AngleJoint#getRelativeRotation: {[piston, speed, rotate, hinge, axes, spatial, geometry, motor, camel, rotation, bone, delta, scene, impulse, material, quaternion, velocity, joints, torque, friction, texture, body, light, mass, shader, ball, emitter, vertices, arena, square, hallmarks, bounding, transmission, volume, collect, triangle, calculate, collide, shape, capsule, heightfield, bitmap, cinematic, plane, collision, vecf, radius, collidable, sphere, matrix]}
org.ode4j.ode.internal.Rotation#dQMultiply2: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.ode4j.ode.internal.Rotation#dQMultiply1: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.ode4j.ode.internal.Rotation#dQMultiply3: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.ode4j.ode.internal.Rotation#dQMultiply0: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.math.Quaternion#normalizeLocal: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.math.Matrix4f#inverseRotateVect: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]}
net.smert.jreactphysics3d.constraint.SliderJoint#warmstart: {[motor, speed, velocity, impulse, delta, torque, hinge, piston, mass, rotate, axes, rotation, joints, friction, quaternion, body, transmission, bone, ball, square, arena, heightfield, vecf, collidable, triangle, collide, hallmarks, plane, radius, collision, collect, bitmap, calculate, emitter, cinematic, shader, vertices, texture, scene, capsule, light, material, geometry, sphere, volume, bounding, matrix, spatial, camel, shape]}
org.ode4j.ode.internal.DxGeom#dGeomGetOffsetQuaternion: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
net.smert.jreactphysics3d.mathematics.Transform#Transform(C): {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.cinematic.events.MotionEvent#needsDirection: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
org.ode4j.ode.internal.joints.DxJointPiston#dJointSetPistonAnchor: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, collect, shader, spatial, joints, transmission, collidable, shape, bitmap, texture, triangle, bounding, light, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
org.ode4j.ode.internal.joints.DxJointPU#setRelativeValues: {[rotate, axes, rotation, quaternion, emitter, speed, piston, hinge, vertices, shape, square, vecf, bone, triangle, motor, collision, plane, velocity, hallmarks, heightfield, collidable, shader, impulse, joints, collide, delta, bitmap, light, texture, torque, body, mass, volume, material, cinematic, capsule, sphere, bounding, friction, spatial, arena, ball, radius, scene, matrix, camel, collect, transmission, calculate, geometry]}
com.jme3.input.FlyByCamera#rotateCamera: {[quaternion, rotation, rotate, axes, speed, bone, piston, emitter, hinge, motor, velocity, impulse, calculate, delta, arena, square, vertices, collect, hallmarks, mass, ball, shader, transmission, joints, torque, spatial, shape, bounding, triangle, sphere, vecf, texture, light, material, collidable, cinematic, camel, radius, capsule, bitmap, collide, heightfield, friction, scene, volume, plane, geometry, matrix, body, collision]}
com.jme3.effect.ParticleEmitter#setRotateSpeed: {[rotate, rotation, quaternion, speed, axes, motor, piston, velocity, hinge, bone, impulse, delta, emitter, mass, square, torque, collect, hallmarks, calculate, joints, arena, vertices, shader, collidable, matrix, friction, body, spatial, collide, radius, shape, bitmap, heightfield, texture, light, material, transmission, collision, bounding, plane, geometry, scene, ball, camel, cinematic, sphere, volume, triangle, capsule, vecf]}
com.jme3.animation.AnimChannel#getSpeed: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]}
net.smert.jreactphysics3d.constraint.HingeJoint#initBeforeSolve: {[motor, speed, rotation, impulse, rotate, velocity, axes, hinge, quaternion, delta, mass, piston, torque, joints, friction, matrix, bone, body, arena, square, ball, transmission, calculate, vecf, triangle, heightfield, hallmarks, collect, collide, collidable, collision, emitter, radius, plane, vertices, bitmap, texture, scene, shader, volume, cinematic, material, spatial, light, camel, capsule, bounding, sphere, geometry, shape]}
org.ode4j.ode.internal.DxGeom#dGeomSetOffsetWorldQuaternion: {[piston, hinge, speed, joints, axes, body, motor, rotate, ball, quaternion, torque, impulse, bone, friction, velocity, rotation, delta, arena, mass, emitter, calculate, shape, bounding, sphere, radius, collision, collect, transmission, cinematic, volume, capsule, spatial, bitmap, triangle, vertices, vecf, collidable, hallmarks, square, heightfield, geometry, light, texture, material, shader, scene, plane, matrix, camel, collide]}
com.jme3.input.ChaseCamera#setToggleRotationTrigger: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
com.jme3.renderer.Camera#getDirection: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
net.smert.jreactphysics3d.constraint.SliderJoint#getTranslation: {[piston, hinge, speed, joints, axes, body, motor, rotate, ball, quaternion, torque, impulse, bone, friction, velocity, rotation, delta, arena, mass, emitter, calculate, shape, bounding, sphere, radius, collision, collect, transmission, cinematic, volume, capsule, spatial, bitmap, triangle, vertices, vecf, collidable, hallmarks, square, heightfield, geometry, light, texture, material, shader, scene, plane, matrix, camel, collide]}
org.ode4j.ode.internal.joints.DxJointPiston#setParam: {[piston, speed, rotate, hinge, quaternion, axes, rotation, motor, bone, velocity, joints, impulse, torque, body, delta, emitter, collect, friction, ball, mass, bounding, matrix, sphere, shape, vertices, radius, volume, spatial, square, shader, triangle, vecf, collision, arena, light, texture, collide, calculate, material, cinematic, transmission, collidable, scene, plane, bitmap, hallmarks, capsule, camel, heightfield, geometry]}
com.jme3.animation.Bone#getWorldBindRotation: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
com.jme3.input.ChaseCamera#setMinVerticalRotation: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
com.jme3.effect.ParticleEmitter#updateParticle: {[speed, velocity, motor, rotate, rotation, delta, impulse, mass, quaternion, axes, torque, piston, hinge, square, bone, transmission, collidable, radius, friction, hallmarks, heightfield, joints, collision, triangle, collect, vecf, collide, plane, emitter, body, sphere, shader, calculate, scene, bitmap, matrix, texture, material, light, vertices, shape, cinematic, spatial, arena, camel, ball, geometry, volume, capsule, bounding]}
com.jme3.scene.control.CameraControl#controlUpdate: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, spatial, motor, calculate, velocity, camel, vertices, arena, transmission, geometry, scene, impulse, collect, material, delta, texture, ball, light, triangle, sphere, hallmarks, cinematic, square, bitmap, radius, shader, vecf, joints, capsule, shape, friction, torque, collide, mass, heightfield, collidable, bounding, volume, plane, body, matrix, collision]}
com.jme3.animation.SpatialTrack#setKeyframes: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.ode4j.ode.internal.joints.DxJointHinge#getAxis: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
org.ode4j.ode.internal.joints.DxJointPiston#getAnchor2: {[piston, speed, rotate, hinge, quaternion, axes, rotation, motor, bone, velocity, joints, impulse, torque, body, delta, emitter, collect, friction, ball, mass, bounding, matrix, sphere, shape, vertices, radius, volume, spatial, square, shader, triangle, vecf, collision, arena, light, texture, collide, calculate, material, cinematic, transmission, collidable, scene, plane, bitmap, hallmarks, capsule, camel, heightfield, geometry]}
org.ode4j.ode.internal.joints.DxJointHinge2#setParamSuspensionCFM: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
com.jme3.audio.Listener#getLeft: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
com.jme3.math.Quaternion#add: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.dyn4j.dynamics.joint.PrismaticJoint#solvePositionConstraints: {[speed, motor, velocity, impulse, delta, hinge, piston, rotate, torque, axes, mass, rotation, joints, quaternion, friction, body, bone, transmission, ball, square, arena, heightfield, hallmarks, collidable, collide, vecf, radius, triangle, emitter, collect, plane, bitmap, calculate, collision, shader, cinematic, texture, capsule, scene, light, geometry, material, sphere, shape, vertices, matrix, bounding, volume, camel, spatial]}
org.ode4j.ode.internal.sTrimeshBoxColliderData#SetupInitialContext: {[rotation, rotate, quaternion, axes, speed, bone, emitter, motor, piston, velocity, hinge, square, impulse, delta, hallmarks, vertices, calculate, arena, mass, ball, torque, shader, shape, spatial, joints, triangle, bitmap, radius, collect, vecf, volume, texture, geometry, light, camel, plane, material, collidable, sphere, cinematic, transmission, body, heightfield, bounding, matrix, capsule, friction, scene, collision, collide]}
org.ode4j.ode.internal.DxBody#dBodySetQuaternion: {[piston, hinge, speed, joints, axes, body, motor, rotate, ball, quaternion, torque, impulse, bone, friction, velocity, rotation, delta, arena, mass, emitter, calculate, shape, bounding, sphere, radius, collision, collect, transmission, cinematic, volume, capsule, spatial, bitmap, triangle, vertices, vecf, collidable, hallmarks, square, heightfield, geometry, light, texture, material, shader, scene, plane, matrix, camel, collide]}
com.jme3.app.LegacyApplication#update: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]}
com.jme3.effect.ParticleTriMesh#updateParticleData: {[rotation, rotate, quaternion, speed, axes, motor, bone, velocity, piston, hinge, impulse, delta, emitter, mass, square, hallmarks, calculate, torque, spatial, arena, camel, collidable, geometry, collect, joints, collision, collide, vertices, ball, heightfield, radius, scene, friction, material, plane, light, volume, vecf, texture, bitmap, triangle, body, bounding, shader, matrix, shape, sphere, transmission, cinematic, capsule]}
com.jme3.cinematic.events.AbstractCinematicEvent#setSpeed: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]}
net.smert.jreactphysics3d.constraint.HingeJointInfo#HingeJointInfo(C): {[speed, piston, hinge, motor, rotate, axes, velocity, impulse, rotation, quaternion, delta, torque, joints, body, friction, mass, bone, ball, arena, emitter, transmission, square, collect, heightfield, collide, bounding, calculate, shape, collidable, hallmarks, plane, shader, sphere, volume, spatial, vecf, texture, bitmap, triangle, light, scene, vertices, material, geometry, camel, capsule, matrix, collision, radius, cinematic]}
org.ode4j.ode.internal.joints.DxJointPiston#dJointGetPistonAxis: {[piston, speed, rotate, hinge, quaternion, axes, rotation, motor, bone, velocity, joints, impulse, torque, body, delta, emitter, collect, friction, ball, mass, bounding, matrix, sphere, shape, vertices, radius, volume, spatial, square, shader, triangle, vecf, collision, arena, light, texture, collide, calculate, material, cinematic, transmission, collidable, scene, plane, bitmap, hallmarks, capsule, camel, heightfield, geometry]}
org.ode4j.ode.DLMotorJoint#setNumAxes: {[rotate, axes, rotation, quaternion, emitter, speed, piston, hinge, vertices, shape, square, vecf, bone, triangle, motor, collision, plane, velocity, hallmarks, heightfield, collidable, shader, impulse, joints, collide, delta, bitmap, light, texture, torque, body, mass, volume, material, cinematic, capsule, sphere, bounding, friction, spatial, arena, ball, radius, scene, matrix, camel, collect, transmission, calculate, geometry]}
com.jme3.input.ChaseCamera#getHorizontalRotation: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
org.ode4j.ode.internal.joints.DxJointHinge#setParamVel: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
com.jme3.cinematic.events.MotionEvent#jmeClone: {[rotation, quaternion, rotate, bone, axes, speed, emitter, spatial, piston, hinge, camel, motor, geometry, scene, velocity, material, calculate, texture, light, vertices, impulse, delta, arena, collect, shader, hallmarks, transmission, square, ball, triangle, bitmap, mass, torque, joints, collide, volume, sphere, cinematic, collidable, radius, vecf, collision, capsule, bounding, shape, matrix, friction, heightfield, plane, body]}
org.dyn4j.dynamics.joint.RevoluteJoint#getRelativeRotation: {[piston, speed, rotate, hinge, axes, spatial, geometry, motor, camel, rotation, bone, delta, scene, impulse, material, quaternion, velocity, joints, torque, friction, texture, body, light, mass, shader, ball, emitter, vertices, arena, square, hallmarks, bounding, transmission, volume, collect, triangle, calculate, collide, shape, capsule, heightfield, bitmap, cinematic, plane, collision, vecf, radius, collidable, sphere, matrix]}
com.jme3.math.Quaternion#addLocal: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.renderer.Camera#getLeft: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
com.jme3.math.Transform#setRotation: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
net.smert.jreactphysics3d.mathematics.Quaternion#identity: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.ode4j.ode.internal.DxBody#setFiniteRotationAxis: {[piston, hinge, speed, axes, rotate, motor, rotation, quaternion, joints, impulse, velocity, torque, delta, body, bone, friction, ball, mass, emitter, arena, square, transmission, shape, calculate, collect, vertices, bounding, spatial, sphere, collision, hallmarks, shader, radius, volume, triangle, camel, collide, geometry, light, vecf, texture, heightfield, bitmap, cinematic, matrix, material, collidable, scene, capsule, plane]}
org.dyn4j.dynamics.joint.AngleJoint#getJointAngle: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
com.jme3.cinematic.events.MotionEvent#getRotation: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
org.ode4j.ode.internal.DxBody#setQuaternion: {[piston, hinge, speed, joints, axes, body, motor, rotate, ball, quaternion, torque, impulse, bone, friction, velocity, rotation, delta, arena, mass, emitter, calculate, shape, bounding, sphere, radius, collision, collect, transmission, cinematic, volume, capsule, spatial, bitmap, triangle, vertices, vecf, collidable, hallmarks, square, heightfield, geometry, light, texture, material, shader, scene, plane, matrix, camel, collide]}
com.jme3.shadow.SpotLightShadowRenderer#checkCulling: {[rotation, quaternion, rotate, bone, spatial, camel, speed, axes, geometry, scene, material, emitter, light, texture, piston, shader, motor, hinge, velocity, impulse, calculate, delta, bitmap, arena, vertices, hallmarks, cinematic, transmission, ball, collect, volume, collide, collidable, mass, collision, capsule, bounding, square, torque, joints, sphere, heightfield, matrix, shape, vecf, plane, triangle, body, radius, friction]}
org.ode4j.ode.internal.joints.DxJointHinge#dJointGetHingeAnchor: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
org.ode4j.ode.internal.joints.DxJointHinge2#getParam: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
com.jme3.math.Matrix4f#rotateVect: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]}
org.ode4j.ode.DBody#getQuaternion: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.ode4j.ode.internal.joints.DxJointHinge#getAnchor: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
com.jme3.animation.Rotation#set: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
com.jme3.audio.Listener#getDirection: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
org.dyn4j.dynamics.joint.AngleJoint#solvePositionConstraints: {[speed, motor, velocity, impulse, delta, hinge, piston, rotate, torque, axes, mass, rotation, joints, quaternion, friction, body, bone, transmission, ball, square, arena, heightfield, hallmarks, collidable, collide, vecf, radius, triangle, emitter, collect, plane, bitmap, calculate, collision, shader, cinematic, texture, capsule, scene, light, geometry, material, sphere, shape, vertices, matrix, bounding, volume, camel, spatial]}
org.ode4j.ode.internal.joints.DxJointAMotor#getInfo1: {[speed, rotate, motor, rotation, velocity, impulse, delta, axes, quaternion, mass, piston, hinge, torque, square, joints, friction, bone, transmission, bitmap, hallmarks, heightfield, body, shader, collidable, collide, radius, cinematic, texture, collect, collision, capsule, light, emitter, triangle, vecf, plane, scene, material, ball, calculate, spatial, sphere, camel, arena, volume, bounding, matrix, geometry, vertices, shape]}
org.ode4j.ode.internal.joints.DxJointAMotor#getInfo2: {[velocity, motor, impulse, mass, delta, speed, axes, torque, hinge, rotate, piston, rotation, joints, square, friction, transmission, quaternion, body, hallmarks, arena, radius, ball, calculate, bone, sphere, matrix, bitmap, shape, shader, volume, texture, bounding, collect, emitter, scene, light, material, spatial, cinematic, camel, plane, capsule, vertices, collide, collision, heightfield, triangle, collidable, geometry, vecf]}
org.dyn4j.geometry.Slice#getRotation: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
net.smert.jreactphysics3d.mathematics.Quaternion#Slerp: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.scene.control.BillboardControl#rotateScreenAligned: {[quaternion, rotation, rotate, axes, bone, matrix, speed, hinge, emitter, piston, motor, spatial, camel, collect, velocity, impulse, transmission, scene, vertices, material, geometry, light, delta, volume, texture, triangle, hallmarks, joints, ball, sphere, square, heightfield, shader, mass, plane, radius, vecf, shape, bounding, bitmap, cinematic, collidable, capsule, collision, collide, arena, calculate, friction, torque, body]}
com.jme3.effect.ParticleEmitter#freeParticle: {[rotate, rotation, quaternion, speed, axes, motor, piston, velocity, hinge, bone, impulse, delta, emitter, mass, square, torque, collect, hallmarks, calculate, joints, arena, vertices, shader, collidable, matrix, friction, body, spatial, collide, radius, shape, bitmap, heightfield, texture, light, material, transmission, collision, bounding, plane, geometry, scene, ball, camel, cinematic, sphere, volume, triangle, capsule, vecf]}
org.ode4j.ode.internal.Misc#dMakeRandomVector: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.cinematic.Cinematic#setSpeed: {[speed, rotate, rotation, quaternion, velocity, motor, bone, piston, hinge, impulse, axes, delta, torque, mass, collect, collidable, emitter, joints, plane, friction, vecf, triangle, cinematic, capsule, collision, heightfield, collide, body, matrix, calculate, bitmap, transmission, square, bounding, hallmarks, radius, vertices, volume, scene, spatial, ball, shape, material, arena, light, sphere, camel, geometry, texture, shader]}
com.jme3.scene.debug.SkeletonPoints#updateGeometry: {[rotate, rotation, spatial, geometry, camel, quaternion, scene, material, bone, axes, texture, speed, light, emitter, shader, piston, motor, vertices, velocity, hinge, hallmarks, delta, bounding, square, impulse, volume, calculate, arena, mass, collect, triangle, ball, torque, collide, capsule, radius, collision, joints, cinematic, transmission, heightfield, collidable, bitmap, plane, friction, sphere, vecf, body, shape, matrix]}
net.smert.jreactphysics3d.constraint.FixedJoint#warmstart: {[motor, speed, velocity, impulse, delta, hinge, piston, torque, mass, rotate, axes, rotation, joints, friction, quaternion, body, transmission, bone, ball, square, arena, heightfield, vecf, collide, collidable, triangle, hallmarks, radius, calculate, plane, collect, collision, emitter, bitmap, shader, cinematic, texture, scene, capsule, vertices, light, geometry, sphere, material, matrix, shape, bounding, volume, spatial, camel]}
org.ode4j.ode.internal.DxGeom#dGeomSetQuaternion: {[rotate, quaternion, rotation, speed, axes, piston, hinge, motor, bone, velocity, impulse, joints, delta, emitter, torque, body, mass, friction, ball, collect, shape, square, bounding, vertices, sphere, spatial, arena, radius, triangle, shader, collision, cinematic, vecf, hallmarks, volume, capsule, light, texture, camel, material, collide, transmission, heightfield, scene, bitmap, collidable, matrix, plane, geometry, calculate]}
com.jme3.animation.Bone#getBindRotation: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
net.smert.jreactphysics3d.mathematics.Transform#Interpolate: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.ode4j.ode.internal.DxGeom#dGeomGetQuaternion: {[piston, hinge, speed, joints, axes, body, motor, rotate, ball, quaternion, torque, impulse, bone, friction, velocity, rotation, delta, arena, mass, emitter, calculate, shape, bounding, sphere, radius, collision, collect, transmission, cinematic, volume, capsule, spatial, bitmap, triangle, vertices, vecf, collidable, hallmarks, square, heightfield, geometry, light, texture, material, shader, scene, plane, matrix, camel, collide]}
org.ode4j.ode.internal.DxCollisionUtil#dQuatInvTransform: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.ode4j.ode.internal.joints.DxJointSlider#DxJointSlider(C): {[quaternion, rotation, rotate, speed, axes, bone, piston, hinge, motor, emitter, velocity, impulse, calculate, delta, collect, bounding, arena, sphere, transmission, mass, joints, torque, collidable, shader, square, ball, cinematic, vertices, volume, material, spatial, collide, texture, radius, light, capsule, plane, scene, hallmarks, collision, geometry, shape, body, heightfield, bitmap, triangle, matrix, vecf, friction, camel]}
org.ode4j.ode.internal.joints.DxJointPR#computeInitialRelativeRotation: {[piston, hinge, speed, axes, rotate, motor, rotation, quaternion, joints, impulse, velocity, torque, delta, body, bone, friction, ball, mass, emitter, arena, square, transmission, shape, calculate, collect, vertices, bounding, spatial, sphere, collision, hallmarks, shader, radius, volume, triangle, camel, collide, geometry, light, vecf, texture, heightfield, bitmap, cinematic, matrix, material, collidable, scene, capsule, plane]}
org.ode4j.ode.OdeHelper#createSapSpace: {[rotate, axes, rotation, quaternion, emitter, speed, piston, hinge, vertices, shape, square, vecf, bone, triangle, motor, collision, plane, velocity, hallmarks, heightfield, collidable, shader, impulse, joints, collide, delta, bitmap, light, texture, torque, body, mass, volume, material, cinematic, capsule, sphere, bounding, friction, spatial, arena, ball, radius, scene, matrix, camel, collect, transmission, calculate, geometry]}
org.dyn4j.geometry.Ellipse#getFarthestPoint: {[rotation, rotate, quaternion, axes, speed, bone, emitter, motor, piston, hinge, velocity, square, impulse, delta, hallmarks, vertices, calculate, arena, mass, ball, torque, shader, shape, spatial, triangle, joints, bitmap, collect, vecf, radius, volume, texture, light, geometry, plane, camel, material, cinematic, sphere, collidable, transmission, heightfield, capsule, body, bounding, friction, matrix, collision, scene, collide]}
org.ode4j.ode.internal.Rotation#dQFromAxisAndAngle: {[rotate, quaternion, rotation, axes, speed, emitter, bone, piston, hinge, motor, velocity, square, vertices, hallmarks, shape, impulse, arena, shader, delta, vecf, triangle, calculate, mass, heightfield, plane, ball, texture, light, material, collision, joints, torque, collide, bitmap, volume, collect, radius, spatial, scene, collidable, friction, transmission, sphere, capsule, camel, matrix, body, geometry, bounding, cinematic]}
org.ode4j.ode.internal.joints.DxJointHinge2#getAnchor: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
org.ode4j.ode.internal.joints.DxJointDHinge#dJointGetDHingeDistance: {[piston, hinge, speed, joints, axes, motor, body, rotate, impulse, torque, quaternion, velocity, ball, rotation, friction, bone, delta, arena, mass, emitter, bounding, calculate, collect, shape, sphere, transmission, radius, volume, collision, cinematic, light, texture, material, shader, geometry, scene, capsule, square, hallmarks, camel, bitmap, vertices, vecf, triangle, collide, spatial, plane, matrix, collidable, heightfield]}
org.ode4j.ode.internal.joints.DxJointDHinge#dJointSetDHingeParam: {[piston, hinge, speed, joints, axes, motor, body, rotate, impulse, torque, quaternion, velocity, ball, rotation, friction, bone, delta, arena, mass, emitter, bounding, calculate, collect, shape, sphere, transmission, radius, volume, collision, cinematic, light, texture, material, shader, geometry, scene, capsule, square, hallmarks, camel, bitmap, vertices, vecf, triangle, collide, spatial, plane, matrix, collidable, heightfield]}
org.ode4j.ode.internal.DxGeom#setOffsetQuaternion: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.ode4j.ode.internal.joints.DxJointHinge#getAnchor2: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
org.ode4j.ode.internal.DxBody#dBodyCopyQuaternion: {[piston, hinge, speed, joints, axes, body, motor, rotate, ball, quaternion, torque, impulse, bone, friction, velocity, rotation, delta, arena, mass, emitter, calculate, shape, bounding, sphere, radius, collision, collect, transmission, cinematic, volume, capsule, spatial, bitmap, triangle, vertices, vecf, collidable, hallmarks, square, heightfield, geometry, light, texture, material, shader, scene, plane, matrix, camel, collide]}
net.smert.jreactphysics3d.engine.DynamicsWorld#solvePositionCorrection: {[piston, hinge, speed, motor, joints, axes, impulse, body, torque, velocity, rotate, delta, friction, quaternion, ball, rotation, bone, mass, arena, transmission, emitter, calculate, collect, bounding, shape, square, sphere, cinematic, volume, capsule, collision, collide, plane, scene, heightfield, texture, bitmap, material, radius, light, shader, spatial, collidable, vecf, triangle, geometry, matrix, hallmarks, camel, vertices]}
com.jme3.scene.control.BillboardControl#controlRender: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]}
org.dyn4j.dynamics.joint.RevoluteJoint#getJointAngle: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
org.ode4j.ode.internal.joints.DxJointHinge2#setParamLoStop: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
com.jme3.input.FlyByCamera#setMoveSpeed: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]}
com.jme3.math.Quaternion#equals: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.cinematic.Cinematic#fitDuration: {[speed, rotate, rotation, quaternion, velocity, motor, bone, piston, hinge, impulse, axes, delta, torque, mass, collect, collidable, emitter, joints, plane, friction, vecf, triangle, cinematic, capsule, collision, heightfield, collide, body, matrix, calculate, bitmap, transmission, square, bounding, hallmarks, radius, vertices, volume, scene, spatial, ball, shape, material, arena, light, sphere, camel, geometry, texture, shader]}
net.smert.jreactphysics3d.engine.DynamicsWorld#integrateRigidBodiesPositions: {[speed, piston, hinge, motor, impulse, velocity, torque, joints, delta, axes, rotate, body, friction, mass, rotation, quaternion, ball, bone, arena, transmission, collect, calculate, square, emitter, heightfield, collide, plane, vecf, bounding, collidable, triangle, volume, scene, sphere, shape, vertices, texture, shader, material, cinematic, hallmarks, light, collision, capsule, radius, matrix, camel, geometry, spatial, bitmap]}
com.jme3.math.Quaternion#mult: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointSetTransmissionRatio: {[rotate, axes, rotation, square, speed, quaternion, hallmarks, velocity, piston, motor, hinge, emitter, shape, delta, vertices, impulse, mass, torque, joints, bone, plane, radius, sphere, transmission, shader, vecf, triangle, collision, bitmap, volume, collide, collidable, bounding, light, friction, body, heightfield, texture, cinematic, material, ball, capsule, calculate, scene, camel, collect, spatial, arena, geometry, matrix]}
com.jme3.shader.Uniform#clearValue: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.ode4j.ode.internal.joints.DxJointHinge2#setAnchor: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
org.ode4j.ode.internal.joints.DxJointHinge2#getAngle2: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
org.ode4j.ode.internal.joints.DxJointHinge2#getAngle1: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
net.smert.jreactphysics3d.mathematics.Quaternion#equals: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.ode4j.ode.DLMotorJoint#getNumAxes: {[rotate, axes, rotation, quaternion, emitter, speed, piston, hinge, vertices, shape, square, vecf, bone, triangle, motor, collision, plane, velocity, hallmarks, heightfield, collidable, shader, impulse, joints, collide, delta, bitmap, light, texture, torque, body, mass, volume, material, cinematic, capsule, sphere, bounding, friction, spatial, arena, ball, radius, scene, matrix, camel, collect, transmission, calculate, geometry]}
com.jme3.cinematic.events.AnimationEvent#setSpeed: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]}
org.ode4j.ode.internal.joints.DxJointSlider#setRelativeValues: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
com.jme3.input.FlyByCamera#riseCamera: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]}
org.ode4j.ode.internal.joints.DxJointDHinge#dJointGetDHingeParam: {[piston, hinge, speed, joints, axes, motor, body, rotate, impulse, torque, quaternion, velocity, ball, rotation, friction, bone, delta, arena, mass, emitter, bounding, calculate, collect, shape, sphere, transmission, radius, volume, collision, cinematic, light, texture, material, shader, geometry, scene, capsule, square, hallmarks, camel, bitmap, vertices, vecf, triangle, collide, spatial, plane, matrix, collidable, heightfield]}
org.ode4j.ode.internal.joints.DxJointPiston#dJointSetPistonAxis: {[rotation, quaternion, rotate, axes, speed, bone, piston, hinge, motor, emitter, velocity, impulse, delta, square, calculate, vertices, arena, hallmarks, mass, shader, torque, ball, joints, collect, spatial, shape, triangle, transmission, bitmap, vecf, texture, light, material, bounding, collidable, camel, sphere, geometry, collide, plane, cinematic, matrix, capsule, scene, volume, heightfield, friction, collision, radius, body]}
org.ode4j.ode.internal.joints.DxJointFixed#DxJointFixed(C): {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.ode4j.ode.internal.joints.DxJointHinge#setParamFMax: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
org.ode4j.ode.internal.joints.DxJointPR#dJointSetPRAxis2: {[rotation, quaternion, rotate, axes, speed, bone, piston, motor, hinge, emitter, velocity, impulse, delta, square, calculate, arena, vertices, hallmarks, mass, shader, ball, torque, joints, spatial, collect, shape, triangle, transmission, bitmap, vecf, texture, light, material, collidable, bounding, camel, sphere, geometry, collide, matrix, cinematic, plane, capsule, volume, scene, heightfield, friction, radius, collision, body]}
com.jme3.scene.debug.SkeletonWire#updateGeometry: {[rotate, rotation, spatial, geometry, camel, quaternion, scene, material, bone, axes, texture, speed, light, emitter, shader, piston, motor, vertices, velocity, hinge, hallmarks, delta, bounding, square, impulse, volume, calculate, arena, mass, collect, triangle, ball, torque, collide, capsule, radius, collision, joints, cinematic, transmission, heightfield, collidable, bitmap, plane, friction, sphere, vecf, body, shape, matrix]}
org.ode4j.ode.internal.joints.DxJointPR#dJointSetPRAxis1: {[rotation, quaternion, rotate, axes, speed, bone, piston, motor, hinge, emitter, velocity, impulse, delta, square, calculate, arena, vertices, hallmarks, mass, shader, ball, torque, joints, spatial, collect, shape, triangle, transmission, bitmap, vecf, texture, light, material, collidable, bounding, camel, sphere, geometry, collide, matrix, cinematic, plane, capsule, volume, scene, heightfield, friction, radius, collision, body]}
com.jme3.animation.Bone#getLocalRotation: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
com.jme3.cinematic.events.AbstractCinematicEvent#internalUpdate: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]}
com.jme3.math.Transform#Transform(C): {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.ode4j.ode.internal.joints.DxJointPiston#setAxis: {[piston, speed, rotate, hinge, quaternion, axes, rotation, motor, bone, velocity, joints, impulse, torque, body, delta, emitter, collect, friction, ball, mass, bounding, matrix, sphere, shape, vertices, radius, volume, spatial, square, shader, triangle, vecf, collision, arena, light, texture, collide, calculate, material, cinematic, transmission, collidable, scene, plane, bitmap, hallmarks, capsule, camel, heightfield, geometry]}
com.jme3.input.AbstractJoystick#getAxisCount: {[rotate, axes, rotation, quaternion, emitter, speed, piston, hinge, vertices, shape, square, vecf, bone, triangle, motor, collision, plane, velocity, hallmarks, heightfield, collidable, shader, impulse, joints, collide, delta, bitmap, light, texture, torque, body, mass, volume, material, cinematic, capsule, sphere, bounding, friction, spatial, arena, ball, radius, scene, matrix, camel, collect, transmission, calculate, geometry]}
com.jme3.scene.Spatial#getLocalRotation: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
com.jme3.cinematic.events.CinematicEvent#setSpeed: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]}
org.dyn4j.geometry.Transform#getRotationTransform: {[rotation, quaternion, rotate, axes, speed, bone, piston, motor, hinge, emitter, velocity, impulse, delta, calculate, square, arena, hallmarks, vertices, mass, ball, torque, shader, collect, spatial, joints, transmission, shape, bitmap, triangle, collidable, texture, light, vecf, camel, bounding, collide, material, sphere, geometry, collision, cinematic, capsule, friction, body, radius, matrix, scene, volume, plane, heightfield]}
org.ode4j.ode.internal.joints.DxJoint#setFixedOrientation: {[piston, hinge, speed, joints, axes, body, motor, rotate, ball, quaternion, torque, impulse, bone, friction, velocity, rotation, delta, arena, mass, emitter, calculate, shape, bounding, sphere, radius, collision, collect, transmission, cinematic, volume, capsule, spatial, bitmap, triangle, vertices, vecf, collidable, hallmarks, square, heightfield, geometry, light, texture, material, shader, scene, plane, matrix, camel, collide]}
com.jme3.input.FlyByCamera#getMoveSpeed: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]}
com.jme3.input.FlyByCamera#getRotationSpeed: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, velocity, emitter, impulse, delta, calculate, square, mass, arena, hallmarks, torque, collect, vertices, ball, joints, shader, spatial, collidable, collide, transmission, bounding, texture, bitmap, collision, light, shape, sphere, camel, material, heightfield, geometry, triangle, plane, vecf, scene, radius, friction, volume, matrix, cinematic, capsule, body]}
org.ode4j.ode.internal.joints.DxJointLMotor#getNumAxes: {[speed, rotate, motor, rotation, velocity, impulse, delta, axes, quaternion, mass, piston, hinge, torque, square, joints, friction, bone, transmission, bitmap, hallmarks, heightfield, body, shader, collidable, collide, radius, cinematic, texture, collect, collision, capsule, light, emitter, triangle, vecf, plane, scene, material, ball, calculate, spatial, sphere, camel, arena, volume, bounding, matrix, geometry, vertices, shape]}
com.jme3.input.FlyByCamera#moveCamera: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]}
com.jme3.input.ChaseCamera#setEnabled: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]}
com.jme3.math.Transform#getRotation: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
com.jme3.effect.influencers.NewtonianParticleInfluencer#clone: {[rotation, rotate, quaternion, speed, axes, motor, velocity, bone, piston, hinge, impulse, delta, emitter, mass, square, torque, hallmarks, calculate, collidable, arena, joints, collect, shader, collision, collide, ball, radius, heightfield, bitmap, vertices, texture, plane, friction, light, material, spatial, vecf, scene, triangle, bounding, geometry, transmission, camel, cinematic, body, shape, capsule, volume, sphere, matrix]}
org.ode4j.ode.OdeHelper#createHinge2Joint: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
org.dyn4j.dynamics.joint.AngleJoint#AngleJoint(C): {[speed, piston, hinge, motor, axes, rotate, impulse, velocity, rotation, delta, torque, joints, quaternion, body, friction, mass, bone, ball, arena, transmission, square, emitter, collect, calculate, heightfield, collide, shape, hallmarks, collidable, bounding, plane, vecf, shader, bitmap, sphere, spatial, triangle, volume, texture, light, geometry, capsule, camel, cinematic, scene, vertices, matrix, material, radius, collision]}
org.ode4j.ode.internal.Rotation#dWtoDQ: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.scene.control.BillboardControl#rotateCameraAligned: {[quaternion, rotation, rotate, bone, axes, speed, emitter, spatial, piston, hinge, camel, motor, geometry, scene, velocity, vertices, material, calculate, texture, light, arena, impulse, delta, hallmarks, collect, transmission, shader, square, ball, triangle, volume, bitmap, vecf, mass, joints, sphere, torque, collide, cinematic, shape, radius, bounding, collidable, plane, friction, capsule, heightfield, collision, matrix, body]}
com.jme3.math.Quaternion#dot: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.input.ChaseCamera#isDragToRotate: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]}
com.jme3.animation.Bone#setUserTransformsWorld: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
com.jme3.input.FlyByCamera#onAnalog: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]}
com.jme3.animation.Bone#getModelBindInverseRotation: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
com.jme3.renderer.Camera#normalize: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
com.jme3.animation.Bone#setBindTransforms: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
org.ode4j.ode.internal.DxGeom#dGeomSetOffsetQuaternion: {[piston, hinge, speed, joints, axes, body, motor, rotate, ball, quaternion, torque, impulse, bone, friction, velocity, rotation, delta, arena, mass, emitter, calculate, shape, bounding, sphere, radius, collision, collect, transmission, cinematic, volume, capsule, spatial, bitmap, triangle, vertices, vecf, collidable, hallmarks, square, heightfield, geometry, light, texture, material, shader, scene, plane, matrix, camel, collide]}
org.dyn4j.dynamics.joint.WheelJoint#getAngularTranslation: {[piston, hinge, speed, axes, rotate, motor, rotation, quaternion, joints, impulse, velocity, torque, delta, body, bone, friction, ball, mass, emitter, arena, square, transmission, shape, calculate, collect, vertices, bounding, spatial, sphere, collision, hallmarks, shader, radius, volume, triangle, camel, collide, geometry, light, vecf, texture, heightfield, bitmap, cinematic, matrix, material, collidable, scene, capsule, plane]}
org.ode4j.ode.internal.joints.DxJointHinge2#setParamVel: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
com.jme3.scene.Spatial#rotate: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, spatial, motor, velocity, calculate, camel, vertices, arena, impulse, transmission, geometry, scene, collect, delta, ball, material, triangle, texture, light, hallmarks, square, sphere, vecf, cinematic, radius, joints, bitmap, shape, shader, capsule, friction, torque, mass, heightfield, collide, collidable, bounding, volume, plane, body, matrix, collision]}
com.jme3.animation.Bone#updateModelTransforms: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
org.ode4j.ode.internal.joints.DxJointHinge#DxJointHinge(C): {[quaternion, rotation, rotate, speed, axes, bone, piston, hinge, motor, emitter, velocity, impulse, delta, calculate, collect, bounding, joints, torque, sphere, arena, mass, transmission, shader, collidable, square, volume, cinematic, radius, material, vertices, texture, collide, spatial, light, ball, capsule, plane, scene, hallmarks, body, collision, geometry, shape, heightfield, bitmap, triangle, friction, matrix, vecf, camel]}
org.ode4j.ode.internal.joints.DxJointFixed#dJointSetFixed: {[piston, hinge, speed, axes, rotate, motor, rotation, quaternion, joints, impulse, velocity, torque, delta, body, bone, friction, ball, mass, emitter, arena, square, transmission, shape, calculate, collect, vertices, bounding, spatial, sphere, collision, hallmarks, shader, radius, volume, triangle, camel, collide, geometry, light, vecf, texture, heightfield, bitmap, cinematic, matrix, material, collidable, scene, capsule, plane]}
net.smert.jreactphysics3d.constraint.SliderJoint#SliderJoint(C): {[speed, rotate, rotation, quaternion, axes, piston, hinge, motor, velocity, impulse, delta, bone, torque, joints, mass, body, friction, emitter, ball, square, collect, bounding, collide, arena, collidable, transmission, heightfield, sphere, hallmarks, plane, shader, volume, shape, spatial, texture, light, vecf, material, vertices, scene, triangle, collision, bitmap, camel, cinematic, radius, calculate, capsule, geometry, matrix]}
com.jme3.renderer.Camera#setFrame: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, square, transmission, ball, hallmarks, collect, shader, spatial, mass, joints, triangle, shape, bounding, sphere, vecf, torque, texture, light, material, radius, friction, cinematic, heightfield, collidable, camel, capsule, scene, bitmap, collide, volume, plane, matrix, body, collision, geometry]}
org.dyn4j.dynamics.contact.ContactConstraint#setTangentSpeed: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]}
com.jme3.input.FlyByCamera#setEnabled: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]}
org.dyn4j.dynamics.Settings#getMaximumRotation: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
org.ode4j.ode.internal.joints.DxJointLMotor#dJointSetLMotorNumAxes: {[speed, rotate, motor, rotation, velocity, impulse, delta, axes, quaternion, mass, piston, hinge, torque, square, joints, friction, bone, transmission, bitmap, hallmarks, heightfield, body, shader, collidable, collide, radius, cinematic, texture, collect, collision, capsule, light, emitter, triangle, vecf, plane, scene, material, ball, calculate, spatial, sphere, camel, arena, volume, bounding, matrix, geometry, vertices, shape]}
com.jme3.animation.AnimationFactory#addTimeRotationAngles: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
com.jme3.input.FlyByCamera#getZoomSpeed: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]}
org.ode4j.ode.internal.joints.DxJointHinge#setRelativeValues: {[rotation, quaternion, rotate, axes, speed, bone, piston, hinge, motor, emitter, velocity, impulse, delta, square, calculate, vertices, mass, arena, hallmarks, torque, shader, joints, collect, ball, spatial, shape, triangle, transmission, bitmap, vecf, texture, light, bounding, material, sphere, collidable, camel, collide, geometry, matrix, scene, plane, cinematic, capsule, body, heightfield, collision, volume, friction, radius]}
com.jme3.app.ChaseCameraAppState#getMaxVerticalRotation: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
org.dyn4j.geometry.Capsule#getRotation: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
com.jme3.math.Quaternion#fromAngleAxis: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.ode4j.ode.internal.joints.DxJointHinge2#setParamVel2: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
com.jme3.math.Matrix4f#setInverseRotationRadians: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
org.ode4j.ode.internal.joints.OdeJointsFactoryImpl#dJointCreateHinge: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
com.jme3.input.ChaseCamera#getRotationSensitivity: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointSetTransmissionMode: {[rotate, axes, rotation, square, speed, quaternion, hallmarks, velocity, piston, motor, hinge, emitter, shape, delta, vertices, impulse, mass, torque, joints, bone, plane, radius, sphere, transmission, shader, vecf, triangle, collision, bitmap, volume, collide, collidable, bounding, light, friction, body, heightfield, texture, cinematic, material, ball, capsule, calculate, scene, camel, collect, spatial, arena, geometry, matrix]}
net.smert.jreactphysics3d.mathematics.Quaternion#conjugate: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
net.smert.jreactphysics3d.mathematics.Quaternion#set: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.ode4j.ode.DRotation#dQMultiply1: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
org.ode4j.ode.DRotation#dQMultiply0: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
org.ode4j.ode.DRotation#dQMultiply3: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
org.ode4j.ode.DRotation#dQMultiply2: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
org.dyn4j.dynamics.Settings#reset: {[rotate, rotation, quaternion, speed, axes, velocity, motor, square, delta, piston, impulse, hinge, bone, mass, emitter, hallmarks, torque, radius, shader, bitmap, calculate, vertices, arena, joints, sphere, transmission, texture, cinematic, light, ball, shape, volume, collidable, friction, collect, material, bounding, capsule, collision, scene, heightfield, geometry, collide, spatial, body, triangle, vecf, plane, matrix, camel]}
com.jme3.math.Quaternion#inverseLocal: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.animation.Bone#getCombinedTransform: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
org.dyn4j.geometry.Ellipse#getRotation: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
org.ode4j.ode.internal.joints.DxJointPiston#computeInitialRelativeRotation: {[piston, hinge, speed, axes, rotate, motor, rotation, quaternion, joints, impulse, velocity, torque, delta, body, bone, friction, ball, mass, emitter, arena, square, transmission, shape, calculate, collect, vertices, bounding, spatial, sphere, collision, hallmarks, shader, radius, volume, triangle, camel, collide, geometry, light, vecf, texture, heightfield, bitmap, cinematic, matrix, material, collidable, scene, capsule, plane]}
com.jme3.animation.AnimationFactory#AnimationFactory(C): {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
com.jme3.animation.Bone#setUserTransforms: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
org.ode4j.ode.internal.joints.DxJointHinge2#setParamFMax: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
com.jme3.app.ChaseCameraAppState#isDragToRotate: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]}
org.ode4j.ode.DRotation#dQFromAxisAndAngle: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
com.jme3.opencl.Kernel#setArg: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.ode4j.ode.DBody#getMaxAngularSpeed: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]}
com.jme3.input.ChaseCamera#setTrailingRotationInertia: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
org.ode4j.ode.internal.joints.DxJointPiston#getParamHiStop2: {[piston, speed, rotate, hinge, quaternion, axes, rotation, motor, bone, velocity, joints, impulse, torque, body, delta, emitter, collect, friction, ball, mass, bounding, matrix, sphere, shape, vertices, radius, volume, spatial, square, shader, triangle, vecf, collision, arena, light, texture, collide, calculate, material, cinematic, transmission, collidable, scene, plane, bitmap, hallmarks, capsule, camel, heightfield, geometry]}
net.smert.jreactphysics3d.mathematics.Quaternion#inverse: {[rotate, quaternion, rotation, axes, speed, emitter, bone, piston, hinge, motor, velocity, square, vertices, hallmarks, shape, impulse, arena, shader, delta, vecf, triangle, calculate, mass, heightfield, plane, ball, texture, light, material, collision, joints, torque, collide, bitmap, volume, collect, radius, spatial, scene, collidable, friction, transmission, sphere, capsule, camel, matrix, body, geometry, bounding, cinematic]}
org.ode4j.ode.internal.DxBody#getFiniteRotationAxis: {[piston, hinge, speed, axes, rotate, motor, rotation, quaternion, joints, impulse, velocity, torque, delta, body, bone, friction, ball, mass, emitter, arena, square, transmission, shape, calculate, collect, vertices, bounding, spatial, sphere, collision, hallmarks, shader, radius, volume, triangle, camel, collide, geometry, light, vecf, texture, heightfield, bitmap, cinematic, matrix, material, collidable, scene, capsule, plane]}
org.ode4j.ode.internal.ragdoll.DxRagdoll#autoDisable: {[piston, hinge, speed, joints, axes, body, motor, rotate, quaternion, bone, ball, impulse, torque, rotation, velocity, friction, delta, arena, emitter, mass, calculate, shape, bounding, sphere, collect, collision, cinematic, radius, transmission, capsule, bitmap, spatial, volume, triangle, vertices, vecf, collidable, hallmarks, heightfield, square, camel, geometry, matrix, plane, collide, material, light, shader, scene, texture]}
org.ode4j.ode.internal.joints.DxJointHinge2#setParamSuspensionERP: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
com.jme3.effect.influencers.NewtonianParticleInfluencer#setSurfaceTangentRotation: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
com.jme3.audio.AudioListenerState#render: {[quaternion, rotation, rotate, speed, axes, bone, motor, piston, hinge, velocity, emitter, impulse, delta, calculate, square, mass, arena, torque, hallmarks, collect, joints, ball, shader, vertices, collidable, bounding, spatial, texture, collide, transmission, material, light, collision, sphere, shape, scene, plane, cinematic, capsule, heightfield, bitmap, camel, volume, triangle, vecf, radius, friction, body, matrix, geometry]}
org.ode4j.ode.DMisc#dMakeRandomVector: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
net.smert.jreactphysics3d.engine.ConstraintSolverData#ConstraintSolverData(C): {[piston, hinge, speed, motor, joints, axes, impulse, velocity, body, torque, rotate, delta, friction, quaternion, rotation, ball, bone, mass, arena, emitter, transmission, calculate, collect, bounding, shape, square, cinematic, sphere, volume, capsule, collide, plane, collision, heightfield, scene, bitmap, radius, spatial, material, texture, collidable, shader, light, vecf, triangle, matrix, geometry, hallmarks, camel, vertices]}
org.dyn4j.geometry.HalfEllipse#contains: {[rotation, rotate, quaternion, axes, speed, bone, emitter, motor, piston, hinge, velocity, square, impulse, delta, hallmarks, vertices, calculate, arena, mass, ball, torque, shader, shape, spatial, triangle, joints, bitmap, collect, vecf, radius, volume, texture, light, geometry, plane, camel, material, cinematic, sphere, collidable, transmission, heightfield, capsule, body, bounding, friction, matrix, collision, scene, collide]}
com.jme3.math.Matrix4f#multLocal: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
com.jme3.animation.Bone#getBindInverseTransform: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
org.ode4j.ode.DBody#getFiniteRotationAxis: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
com.jme3.app.ChaseCameraAppState#setZoomSpeed: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]}
org.ode4j.ode.internal.joints.DxJointPU#dJointSetPUAxis1: {[rotate, axes, rotation, quaternion, emitter, speed, piston, hinge, vertices, shape, square, vecf, bone, triangle, motor, collision, plane, velocity, hallmarks, heightfield, collidable, shader, impulse, joints, collide, delta, bitmap, light, texture, torque, body, mass, volume, material, cinematic, capsule, sphere, bounding, friction, spatial, arena, ball, radius, scene, matrix, camel, collect, transmission, calculate, geometry]}
net.smert.jreactphysics3d.mathematics.Quaternion#zero: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.ode4j.ode.internal.joints.DxJointPU#dJointSetPUAxis2: {[rotate, axes, rotation, quaternion, emitter, speed, piston, hinge, vertices, shape, square, vecf, bone, triangle, motor, collision, plane, velocity, hallmarks, heightfield, collidable, shader, impulse, joints, collide, delta, bitmap, light, texture, torque, body, mass, volume, material, cinematic, capsule, sphere, bounding, friction, spatial, arena, ball, radius, scene, matrix, camel, collect, transmission, calculate, geometry]}
org.ode4j.ode.internal.joints.DxJointPU#dJointSetPUAxis3: {[rotate, axes, rotation, quaternion, emitter, speed, piston, hinge, vertices, shape, square, vecf, bone, triangle, motor, collision, plane, velocity, hallmarks, heightfield, collidable, shader, impulse, joints, collide, delta, bitmap, light, texture, torque, body, mass, volume, material, cinematic, capsule, sphere, bounding, friction, spatial, arena, ball, radius, scene, matrix, camel, collect, transmission, calculate, geometry]}
org.dyn4j.dynamics.Settings#setMaximumRotation: {[rotate, rotation, quaternion, axes, speed, motor, velocity, emitter, square, piston, bone, hinge, hallmarks, impulse, delta, mass, vertices, arena, calculate, shader, bitmap, torque, shape, radius, ball, triangle, vecf, joints, texture, volume, light, cinematic, sphere, plane, material, capsule, spatial, collect, bounding, geometry, transmission, heightfield, scene, camel, body, collide, collision, friction, matrix, collidable]}
com.jme3.animation.SpatialTrack#SpatialTrack(C): {[quaternion, rotation, bone, rotate, spatial, emitter, axes, camel, scene, speed, texture, material, geometry, piston, light, hinge, shader, transmission, bitmap, vertices, calculate, cinematic, arena, radius, collect, triangle, sphere, motor, capsule, vecf, ball, velocity, mass, friction, heightfield, impulse, volume, shape, plane, torque, collision, square, joints, matrix, hallmarks, delta, collide, bounding, body, collidable]}
com.jme3.renderer.Camera#setAxes: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, square, transmission, ball, hallmarks, collect, shader, spatial, mass, joints, triangle, shape, bounding, sphere, vecf, torque, texture, light, material, radius, friction, cinematic, heightfield, collidable, camel, capsule, scene, bitmap, collide, volume, plane, matrix, body, collision, geometry]}
org.ode4j.ode.internal.joints.DxJointHinge#setParamLoStop: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
org.ode4j.ode.internal.joints.DxJoint#getHingeAngleFromRelativeQuat: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, transmission, arena, impulse, bounding, sphere, collect, vertices, radius, cinematic, delta, spatial, capsule, joints, triangle, ball, vecf, shape, shader, material, volume, heightfield, texture, friction, light, bitmap, square, torque, geometry, scene, hallmarks, collision, mass, collidable, camel, body, matrix, collide, plane]}
com.jme3.animation.Rotation#Rotation(C): {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
org.dyn4j.geometry.Transform#getRotation: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
org.ode4j.ode.internal.joints.DxJointSlider#dJointSetSliderAxis: {[rotation, quaternion, rotate, axes, speed, bone, piston, motor, hinge, emitter, velocity, impulse, delta, square, calculate, arena, vertices, hallmarks, mass, shader, ball, torque, joints, spatial, collect, shape, triangle, transmission, bitmap, vecf, texture, light, material, collidable, bounding, camel, sphere, geometry, collide, matrix, cinematic, plane, capsule, volume, scene, heightfield, friction, radius, collision, body]}
com.jme3.audio.Listener#getRotation: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
org.ode4j.ode.internal.joints.DxJointPiston#dJointGetPistonAnchor: {[piston, speed, rotate, hinge, quaternion, axes, rotation, motor, bone, velocity, joints, impulse, torque, body, delta, emitter, collect, friction, ball, mass, bounding, matrix, sphere, shape, vertices, radius, volume, spatial, square, shader, triangle, vecf, collision, arena, light, texture, collide, calculate, material, cinematic, transmission, collidable, scene, plane, bitmap, hallmarks, capsule, camel, heightfield, geometry]}
com.jme3.animation.AnimChannel#update: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]}
org.ode4j.ode.OdeHelper#createDHingeJoint: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
org.ode4j.ode.internal.joints.DxJointPiston#getParamLoStop2: {[piston, speed, rotate, hinge, quaternion, axes, rotation, motor, bone, velocity, joints, impulse, torque, body, delta, emitter, collect, friction, ball, mass, bounding, matrix, sphere, shape, vertices, radius, volume, spatial, square, shader, triangle, vecf, collision, arena, light, texture, collide, calculate, material, cinematic, transmission, collidable, scene, plane, bitmap, hallmarks, capsule, camel, heightfield, geometry]}
com.jme3.effect.ParticleEmitter#getRotateSpeed: {[rotate, rotation, quaternion, speed, axes, motor, piston, velocity, hinge, bone, impulse, delta, emitter, mass, square, torque, collect, hallmarks, calculate, joints, arena, vertices, shader, collidable, matrix, friction, body, spatial, collide, radius, shape, bitmap, heightfield, texture, light, material, transmission, collision, bounding, plane, geometry, scene, ball, camel, cinematic, sphere, volume, triangle, capsule, vecf]}
com.jme3.animation.AnimationFactory#addKeyFrameRotationAngles: {[rotation, rotate, quaternion, axes, speed, motor, velocity, bone, piston, hinge, impulse, emitter, delta, square, mass, calculate, hallmarks, torque, arena, collect, joints, vertices, ball, collidable, shader, collide, bitmap, spatial, collision, heightfield, texture, light, camel, radius, geometry, plane, cinematic, material, bounding, friction, capsule, shape, transmission, sphere, matrix, scene, vecf, triangle, volume, body]}
com.jme3.math.Quaternion#fromAngleNormalAxis: {[quaternion, rotation, rotate, axes, bone, emitter, speed, piston, hinge, motor, velocity, vertices, arena, calculate, square, impulse, shape, hallmarks, triangle, vecf, ball, transmission, delta, heightfield, spatial, shader, capsule, cinematic, collect, plane, friction, joints, collision, material, collide, texture, mass, light, bounding, torque, sphere, volume, bitmap, collidable, scene, body, camel, radius, geometry, matrix]}
com.jme3.input.ChaseCamera#setRotationSpeed: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, velocity, emitter, impulse, delta, calculate, square, mass, arena, hallmarks, torque, collect, vertices, ball, joints, shader, spatial, collidable, collide, transmission, bounding, texture, bitmap, collision, light, shape, sphere, camel, material, heightfield, geometry, triangle, plane, vecf, scene, radius, friction, volume, matrix, cinematic, capsule, body]}
com.jme3.util.BufferUtils#createFloatBuffer: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.input.ChaseCamera#setHideCursorOnRotate: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]}
com.jme3.math.Quaternion#nlerp: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.ode4j.math.DQuaternion#sum: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.ode4j.ode.internal.joints.DxJointLMotor#getInfo2: {[rotate, axes, rotation, quaternion, emitter, speed, piston, hinge, vertices, shape, square, vecf, bone, triangle, motor, collision, plane, velocity, hallmarks, heightfield, collidable, shader, impulse, joints, collide, delta, bitmap, light, texture, torque, body, mass, volume, material, cinematic, capsule, sphere, bounding, friction, spatial, arena, ball, radius, scene, matrix, camel, collect, transmission, calculate, geometry]}
org.ode4j.ode.internal.joints.DxJointLMotor#setNumAxes: {[speed, rotate, motor, rotation, velocity, impulse, delta, axes, quaternion, mass, piston, hinge, torque, square, joints, friction, bone, transmission, bitmap, hallmarks, heightfield, body, shader, collidable, collide, radius, cinematic, texture, collect, collision, capsule, light, emitter, triangle, vecf, plane, scene, material, ball, calculate, spatial, sphere, camel, arena, volume, bounding, matrix, geometry, vertices, shape]}
net.smert.jreactphysics3d.mathematics.Quaternion#setZ: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.dyn4j.collision.narrowphase.Sat#detect: {[rotate, axes, rotation, quaternion, emitter, speed, piston, hinge, vertices, shape, square, vecf, bone, triangle, motor, collision, plane, velocity, hallmarks, heightfield, collidable, shader, impulse, joints, collide, delta, bitmap, light, texture, torque, body, mass, volume, material, cinematic, capsule, sphere, bounding, friction, spatial, arena, ball, radius, scene, matrix, camel, collect, transmission, calculate, geometry]}
net.smert.jreactphysics3d.mathematics.Quaternion#setY: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
net.smert.jreactphysics3d.mathematics.Quaternion#setX: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
net.smert.jreactphysics3d.mathematics.Quaternion#setW: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.animation.Bone#getModelSpaceRotation: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
org.ode4j.ode.internal.joints.DxJointHinge2#dJointGetHinge2Param: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
com.jme3.app.ChaseCameraAppState#setToggleRotationTrigger: {[rotation, quaternion, rotate, axes, speed, bone, piston, motor, hinge, emitter, velocity, impulse, delta, calculate, square, arena, hallmarks, vertices, mass, ball, torque, shader, collect, spatial, joints, transmission, shape, bitmap, triangle, collidable, texture, light, vecf, camel, bounding, collide, material, sphere, geometry, collision, cinematic, capsule, friction, body, radius, matrix, scene, volume, plane, heightfield]}
org.ode4j.ode.internal.DxBody#setFiniteRotationMode: {[piston, hinge, speed, axes, rotate, motor, rotation, quaternion, joints, impulse, velocity, torque, delta, body, bone, friction, ball, mass, emitter, arena, square, transmission, shape, calculate, collect, vertices, bounding, spatial, sphere, collision, hallmarks, shader, radius, volume, triangle, camel, collide, geometry, light, vecf, texture, heightfield, bitmap, cinematic, matrix, material, collidable, scene, capsule, plane]}
com.jme3.input.AbstractJoystick#addAxis: {[rotate, axes, rotation, quaternion, emitter, speed, piston, hinge, vertices, shape, square, vecf, bone, triangle, motor, collision, plane, velocity, hallmarks, heightfield, collidable, shader, impulse, joints, collide, delta, bitmap, light, texture, torque, body, mass, volume, material, cinematic, capsule, sphere, bounding, friction, spatial, arena, ball, radius, scene, matrix, camel, collect, transmission, calculate, geometry]}
com.jme3.animation.AnimChannel#setSpeed: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]}
org.ode4j.ode.DBody#setMaxAngularSpeed: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]}
org.ode4j.ode.internal.joints.DxJointPiston#getAnchor: {[piston, speed, rotate, hinge, quaternion, axes, rotation, motor, bone, velocity, joints, impulse, torque, body, delta, emitter, collect, friction, ball, mass, bounding, matrix, sphere, shape, vertices, radius, volume, spatial, square, shader, triangle, vecf, collision, arena, light, texture, collide, calculate, material, cinematic, transmission, collidable, scene, plane, bitmap, hallmarks, capsule, camel, heightfield, geometry]}
org.dyn4j.geometry.Transform#lerped: {[rotate, rotation, quaternion, spatial, geometry, camel, scene, axes, bone, material, speed, texture, emitter, light, motor, piston, vertices, velocity, hinge, shader, hallmarks, delta, square, impulse, calculate, bounding, volume, arena, mass, collect, triangle, ball, torque, capsule, collide, cinematic, radius, joints, collision, plane, heightfield, transmission, collidable, vecf, friction, sphere, shape, body, bitmap, matrix]}
org.dyn4j.geometry.Rotatable#rotate: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]}
org.dyn4j.geometry.Circle#getAxes: {[rotate, axes, rotation, quaternion, emitter, speed, piston, hinge, vertices, shape, square, vecf, bone, triangle, motor, collision, plane, velocity, hallmarks, heightfield, collidable, shader, impulse, joints, collide, delta, bitmap, light, texture, torque, body, mass, volume, material, cinematic, capsule, sphere, bounding, friction, spatial, arena, ball, radius, scene, matrix, camel, collect, transmission, calculate, geometry]}
com.jme3.renderer.Camera#lookAtDirection: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
com.jme3.input.FlyByCamera#isDragToRotate: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]}
org.ode4j.ode.internal.joints.DxJointDHinge#getAxis: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
org.dyn4j.dynamics.joint.MotorJoint#getAngularError: {[piston, speed, rotate, hinge, axes, spatial, geometry, motor, camel, rotation, bone, delta, scene, impulse, material, quaternion, velocity, joints, torque, friction, texture, body, light, mass, shader, ball, emitter, vertices, arena, square, hallmarks, bounding, transmission, volume, collect, triangle, calculate, collide, shape, capsule, heightfield, bitmap, cinematic, plane, collision, vecf, radius, collidable, sphere, matrix]}
com.jme3.animation.AnimChannel#setAnim: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]}
org.ode4j.ode.internal.joints.DxJointHinge#dJointSetHingeParam: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
org.ode4j.ode.internal.joints.DxJointHinge#dJointGetHingeAnchor2: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
org.ode4j.ode.internal.joints.DxJointPiston#setParamHiStop2: {[piston, speed, rotate, hinge, quaternion, axes, rotation, motor, bone, velocity, joints, impulse, torque, body, delta, emitter, collect, friction, ball, mass, bounding, matrix, sphere, shape, vertices, radius, volume, spatial, square, shader, triangle, vecf, collision, arena, light, texture, collide, calculate, material, cinematic, transmission, collidable, scene, plane, bitmap, hallmarks, capsule, camel, heightfield, geometry]}
org.ode4j.ode.internal.joints.DxJointSlider#computeInitialRelativeRotation: {[piston, hinge, speed, axes, rotate, motor, rotation, quaternion, joints, impulse, velocity, torque, delta, body, bone, friction, ball, mass, emitter, arena, square, transmission, shape, calculate, collect, vertices, bounding, spatial, sphere, collision, hallmarks, shader, radius, volume, triangle, camel, collide, geometry, light, vecf, texture, heightfield, bitmap, cinematic, matrix, material, collidable, scene, capsule, plane]}
com.jme3.effect.ParticleEmitter#emitParticle: {[rotate, rotation, quaternion, axes, speed, motor, velocity, piston, bone, hinge, emitter, impulse, delta, square, mass, hallmarks, torque, vertices, calculate, joints, shader, arena, shape, radius, collect, texture, bitmap, light, material, ball, friction, triangle, vecf, spatial, volume, sphere, collidable, scene, transmission, body, plane, cinematic, geometry, matrix, collide, collision, camel, bounding, capsule, heightfield]}
org.ode4j.ode.internal.joints.DxJointHinge#dJointSetHingeAxisOffset: {[quaternion, rotation, rotate, axes, speed, bone, piston, emitter, hinge, motor, velocity, impulse, calculate, delta, arena, vertices, square, transmission, collect, ball, hallmarks, shader, mass, joints, spatial, bounding, shape, torque, sphere, triangle, vecf, texture, light, material, radius, cinematic, collidable, heightfield, capsule, friction, camel, scene, volume, collide, bitmap, plane, matrix, collision, geometry, body]}
org.ode4j.ode.internal.joints.DxJointFixed#computeInitialRelativeRotation: {[piston, hinge, speed, axes, rotate, motor, rotation, quaternion, joints, impulse, velocity, torque, delta, body, bone, friction, ball, mass, emitter, arena, square, transmission, shape, calculate, collect, vertices, bounding, spatial, sphere, collision, hallmarks, shader, radius, volume, triangle, camel, collide, geometry, light, vecf, texture, heightfield, bitmap, cinematic, matrix, material, collidable, scene, capsule, plane]}
com.jme3.input.ChaseCamera#setDownRotateOnCloseViewOnly: {[rotation, quaternion, rotate, axes, speed, bone, piston, motor, hinge, emitter, velocity, impulse, delta, calculate, square, arena, hallmarks, vertices, mass, ball, torque, shader, collect, spatial, joints, transmission, shape, bitmap, triangle, collidable, texture, light, vecf, camel, bounding, collide, material, sphere, geometry, collision, cinematic, capsule, friction, body, radius, matrix, scene, volume, plane, heightfield]}
com.jme3.animation.Bone#setBindingPose: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, velocity, transmission, arena, cinematic, bounding, sphere, vertices, collect, capsule, impulse, spatial, radius, ball, triangle, bitmap, vecf, shape, friction, delta, heightfield, joints, shader, volume, material, square, hallmarks, camel, geometry, texture, collision, light, collidable, torque, scene, matrix, body, plane, mass, collide]}
org.dyn4j.dynamics.Settings#getMaximumRotationSquared: {[rotate, rotation, quaternion, axes, speed, motor, velocity, emitter, square, piston, bone, hinge, hallmarks, impulse, delta, mass, vertices, arena, calculate, shader, bitmap, torque, shape, radius, ball, triangle, vecf, joints, texture, volume, light, cinematic, sphere, plane, material, capsule, spatial, collect, bounding, geometry, transmission, heightfield, scene, camel, body, collide, collision, friction, matrix, collidable]}
org.ode4j.ode.internal.joints.DxJointAMotor#getNumAxes: {[speed, rotate, motor, rotation, velocity, impulse, delta, axes, quaternion, mass, piston, hinge, torque, square, joints, friction, bone, transmission, bitmap, hallmarks, heightfield, body, shader, collidable, collide, radius, cinematic, texture, collect, collision, capsule, light, emitter, triangle, vecf, plane, scene, material, ball, calculate, spatial, sphere, camel, arena, volume, bounding, matrix, geometry, vertices, shape]}
org.ode4j.ode.DBody#setFiniteRotationMode: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
net.smert.jreactphysics3d.mathematics.Quaternion#normalize: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.input.ChaseCamera#getTrailingRotationInertia: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
org.ode4j.ode.internal.DxBody#dBodyGetFiniteRotationMode: {[piston, hinge, speed, axes, rotate, motor, rotation, quaternion, joints, impulse, velocity, torque, delta, body, bone, friction, ball, mass, emitter, arena, square, transmission, shape, calculate, collect, vertices, bounding, spatial, sphere, collision, hallmarks, shader, radius, volume, triangle, camel, collide, geometry, light, vecf, texture, heightfield, bitmap, cinematic, matrix, material, collidable, scene, capsule, plane]}
org.ode4j.ode.internal.joints.DxJointHinge#setAxisOffset: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
org.dyn4j.geometry.Transform#setRotation: {[rotation, quaternion, rotate, axes, speed, bone, piston, motor, hinge, emitter, velocity, impulse, delta, calculate, square, arena, hallmarks, vertices, mass, ball, torque, shader, collect, spatial, joints, transmission, shape, bitmap, triangle, collidable, texture, light, vecf, camel, bounding, collide, material, sphere, geometry, collision, cinematic, capsule, friction, body, radius, matrix, scene, volume, plane, heightfield]}
org.ode4j.ode.internal.joints.DxJointDHinge#dJointSetDHingeAnchor1: {[piston, hinge, speed, joints, axes, motor, body, rotate, impulse, torque, quaternion, velocity, ball, rotation, friction, bone, delta, arena, mass, emitter, bounding, calculate, collect, shape, sphere, transmission, radius, volume, collision, cinematic, light, texture, material, shader, geometry, scene, capsule, square, hallmarks, camel, bitmap, vertices, vecf, triangle, collide, spatial, plane, matrix, collidable, heightfield]}
org.ode4j.ode.internal.joints.DxJointDHinge#dJointSetDHingeAnchor2: {[piston, hinge, speed, joints, axes, motor, body, rotate, impulse, torque, quaternion, velocity, ball, rotation, friction, bone, delta, arena, mass, emitter, bounding, calculate, collect, shape, sphere, transmission, radius, volume, collision, cinematic, light, texture, material, shader, geometry, scene, capsule, square, hallmarks, camel, bitmap, vertices, vecf, triangle, collide, spatial, plane, matrix, collidable, heightfield]}
org.ode4j.ode.internal.joints.DxJointPR#setRelativeValues: {[rotation, quaternion, rotate, axes, speed, bone, piston, motor, hinge, emitter, velocity, impulse, delta, square, calculate, arena, vertices, hallmarks, mass, shader, ball, torque, joints, spatial, collect, shape, triangle, transmission, bitmap, vecf, texture, light, material, collidable, bounding, camel, sphere, geometry, collide, matrix, cinematic, plane, capsule, volume, scene, heightfield, friction, radius, collision, body]}
org.ode4j.ode.internal.DxCollisionUtil#dQuatInv: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.app.ChaseCameraAppState#getZoomSpeed: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]}
com.jme3.audio.Listener#setRotation: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
org.ode4j.ode.internal.joints.DxJointAMotor#setNumAxes: {[speed, rotate, motor, rotation, velocity, impulse, delta, axes, quaternion, mass, piston, hinge, torque, square, joints, friction, bone, transmission, bitmap, hallmarks, heightfield, body, shader, collidable, collide, radius, cinematic, texture, collect, collision, capsule, light, emitter, triangle, vecf, plane, scene, material, ball, calculate, spatial, sphere, camel, arena, volume, bounding, matrix, geometry, vertices, shape]}
net.smert.jreactphysics3d.mathematics.Quaternion#getRotationAngleAxis: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
org.ode4j.ode.internal.joints.DxJointHinge2#setParamHiStop: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
org.ode4j.ode.internal.joints.DxJointDHinge#setAxis: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
org.ode4j.ode.internal.DxCollisionUtil#dQuatTransform: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.input.ChaseCamera#getMaxVerticalRotation: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
net.smert.jreactphysics3d.constraint.HingeJoint#HingeJoint(C): {[speed, rotate, rotation, quaternion, piston, axes, hinge, motor, velocity, impulse, delta, bone, torque, joints, mass, body, friction, emitter, ball, square, collect, transmission, collide, arena, collidable, bounding, heightfield, plane, hallmarks, shader, sphere, volume, texture, vecf, shape, spatial, light, triangle, collision, material, scene, bitmap, vertices, camel, cinematic, calculate, geometry, matrix, capsule, radius]}
org.ode4j.ode.internal.joints.DxJointHinge2#DxJointHinge2(C): {[motor, speed, velocity, impulse, delta, mass, rotate, torque, rotation, hinge, piston, quaternion, axes, friction, heightfield, joints, collidable, collide, triangle, vecf, plane, collision, body, transmission, bone, collect, square, vertices, ball, bitmap, shape, volume, scene, shader, radius, bounding, arena, texture, cinematic, capsule, light, hallmarks, material, spatial, calculate, camel, matrix, sphere, geometry, emitter]}
org.ode4j.ode.internal.joints.DxJointHinge#computeInitialRelativeRotation: {[piston, hinge, speed, axes, rotate, motor, rotation, quaternion, joints, impulse, velocity, torque, delta, body, bone, friction, ball, mass, emitter, arena, square, transmission, shape, calculate, collect, vertices, bounding, spatial, sphere, collision, hallmarks, shader, radius, volume, triangle, camel, collide, geometry, light, vecf, texture, heightfield, bitmap, cinematic, matrix, material, collidable, scene, capsule, plane]}
com.jme3.scene.control.BillboardControl#rotateAxial: {[rotate, rotation, quaternion, axes, speed, bone, emitter, piston, spatial, hinge, motor, vertices, geometry, velocity, camel, square, hallmarks, scene, delta, impulse, calculate, material, arena, texture, triangle, volume, light, mass, bounding, ball, vecf, shape, collect, torque, plane, shader, joints, radius, transmission, heightfield, sphere, collision, capsule, cinematic, matrix, body, collidable, bitmap, friction, collide]}
org.ode4j.ode.internal.joints.DxJointHinge2#setParamFMax2: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
net.smert.jreactphysics3d.mathematics.Transform#getOrientation: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.input.ChaseCamera#getVerticalRotation: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
org.ode4j.ode.internal.joints.DxJointUniversal#setRelativeValues: {[rotate, axes, rotation, quaternion, emitter, speed, piston, hinge, vertices, shape, square, vecf, bone, triangle, motor, collision, plane, velocity, hallmarks, heightfield, collidable, shader, impulse, joints, collide, delta, bitmap, light, texture, torque, body, mass, volume, material, cinematic, capsule, sphere, bounding, friction, spatial, arena, ball, radius, scene, matrix, camel, collect, transmission, calculate, geometry]}
com.jme3.math.Quaternion#clone: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.math.Quaternion#subtractLocal: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.ode4j.ode.internal.ragdoll.DxRagdollBody#getQuaternion: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.animation.AnimationFactory#addKeyFrameRotation: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
org.ode4j.math.DQuaternion#scale: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.dyn4j.geometry.Vector2#rotate: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]}
com.jme3.scene.control.LightControl#spatialTolight: {[spatial, bone, camel, rotation, quaternion, rotate, scene, geometry, material, texture, light, shader, emitter, speed, axes, piston, hinge, bitmap, motor, calculate, vertices, velocity, transmission, cinematic, arena, volume, impulse, collect, delta, hallmarks, bounding, capsule, ball, collide, triangle, collidable, sphere, collision, radius, joints, shape, square, mass, torque, matrix, heightfield, friction, body, vecf, plane]}
org.dyn4j.geometry.Shape#rotateAboutCenter: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]}
com.jme3.math.Quaternion#inverse: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.ode4j.ode.internal.DxBody#dBodySetFiniteRotationAxis: {[piston, hinge, speed, axes, rotate, motor, rotation, quaternion, joints, impulse, velocity, torque, delta, body, bone, friction, ball, mass, emitter, arena, square, transmission, shape, calculate, collect, vertices, bounding, spatial, sphere, collision, hallmarks, shader, radius, volume, triangle, camel, collide, geometry, light, vecf, texture, heightfield, bitmap, cinematic, matrix, material, collidable, scene, capsule, plane]}
com.jme3.shadow.PointLightShadowRenderer#checkCulling: {[rotation, quaternion, rotate, bone, spatial, camel, speed, axes, geometry, scene, material, emitter, light, texture, piston, shader, motor, hinge, velocity, impulse, calculate, delta, bitmap, arena, vertices, hallmarks, cinematic, transmission, ball, collect, volume, collide, collidable, mass, collision, capsule, bounding, square, torque, joints, sphere, heightfield, matrix, shape, vecf, plane, triangle, body, radius, friction]}
com.jme3.shadow.DirectionalLightShadowRenderer#updateShadowCams: {[rotation, quaternion, rotate, bone, spatial, camel, speed, axes, geometry, scene, material, emitter, light, texture, piston, shader, motor, hinge, velocity, impulse, calculate, delta, bitmap, arena, vertices, hallmarks, cinematic, transmission, ball, collect, volume, collide, collidable, mass, collision, capsule, bounding, square, torque, joints, sphere, heightfield, matrix, shape, vecf, plane, triangle, body, radius, friction]}
com.jme3.input.ChaseCamera#isHideCursorOnRotate: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]}
org.ode4j.ode.internal.joints.DxJointPiston#setRelativeValues: {[rotation, quaternion, rotate, axes, speed, bone, piston, hinge, motor, emitter, velocity, impulse, delta, square, calculate, vertices, arena, hallmarks, mass, shader, torque, ball, joints, collect, spatial, shape, triangle, transmission, bitmap, vecf, texture, light, material, bounding, collidable, camel, sphere, geometry, collide, plane, cinematic, matrix, capsule, scene, volume, heightfield, friction, collision, radius, body]}
org.ode4j.ode.internal.joints.OdeJointsFactoryImpl#dJointCreateDHinge: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
com.jme3.animation.AnimationFactory#interpolate: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
org.ode4j.ode.DGeom#getOffsetQuaternion: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
net.smert.jreactphysics3d.mathematics.Quaternion#dot: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.math.Quaternion#getRotationColumn: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
org.ode4j.ode.internal.DxWorld#getMaxAngularSpeed: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]}
com.jme3.animation.BoneTrack#setTime: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, velocity, transmission, arena, cinematic, bounding, sphere, vertices, collect, capsule, impulse, spatial, radius, ball, triangle, bitmap, vecf, shape, friction, delta, heightfield, joints, shader, volume, material, square, hallmarks, camel, geometry, texture, collision, light, collidable, torque, scene, matrix, body, plane, mass, collide]}
org.ode4j.ode.DAMotorJoint#setNumAxes: {[rotate, axes, rotation, quaternion, emitter, speed, piston, hinge, vertices, shape, square, vecf, bone, triangle, motor, collision, plane, velocity, hallmarks, heightfield, collidable, shader, impulse, joints, collide, delta, bitmap, light, texture, torque, body, mass, volume, material, cinematic, capsule, sphere, bounding, friction, spatial, arena, ball, radius, scene, matrix, camel, collect, transmission, calculate, geometry]}
org.ode4j.ode.internal.joints.DxJoint#getHingeAngle: {[piston, hinge, speed, joints, axes, body, motor, rotate, quaternion, ball, impulse, torque, bone, rotation, velocity, friction, delta, arena, mass, emitter, calculate, shape, bounding, sphere, collect, radius, collision, transmission, cinematic, volume, capsule, spatial, bitmap, triangle, vertices, vecf, hallmarks, collidable, square, heightfield, geometry, light, texture, material, shader, scene, matrix, camel, plane, collide]}
org.ode4j.ode.internal.Rotation#dDQfromW: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.animation.SpatialTrack#getRotations: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.app.ChaseCameraAppState#registerWithInput: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]}
com.jme3.app.ChaseCameraAppState#getMinVerticalRotation: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
com.jme3.effect.ParticleMesh#updateParticleData: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
com.jme3.cinematic.events.AnimationEvent#onPlay: {[speed, rotate, rotation, motor, velocity, quaternion, piston, impulse, delta, hinge, axes, bone, mass, torque, collect, collidable, joints, friction, emitter, heightfield, plane, collide, collision, square, triangle, vecf, body, transmission, calculate, matrix, hallmarks, radius, bounding, scene, volume, capsule, cinematic, vertices, shader, material, ball, shape, texture, arena, spatial, light, bitmap, geometry, camel, sphere]}
org.ode4j.ode.internal.joints.DxJointAMotor#dJointGetAMotorNumAxes: {[speed, rotate, motor, rotation, velocity, impulse, delta, axes, quaternion, mass, piston, hinge, torque, square, joints, friction, bone, transmission, bitmap, hallmarks, heightfield, body, shader, collidable, collide, radius, cinematic, texture, collect, collision, capsule, light, emitter, triangle, vecf, plane, scene, material, ball, calculate, spatial, sphere, camel, arena, volume, bounding, matrix, geometry, vertices, shape]}
org.ode4j.ode.internal.joints.DxJointHinge#setParamHiStop: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
com.jme3.animation.AnimationFactory#getRotationForFrame: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
org.ode4j.ode.DAMotorJoint#getNumAxes: {[rotate, axes, rotation, quaternion, emitter, speed, piston, hinge, vertices, shape, square, vecf, bone, triangle, motor, collision, plane, velocity, hallmarks, heightfield, collidable, shader, impulse, joints, collide, delta, bitmap, light, texture, torque, body, mass, volume, material, cinematic, capsule, sphere, bounding, friction, spatial, arena, ball, radius, scene, matrix, camel, collect, transmission, calculate, geometry]}
org.ode4j.math.DQuaternion#set: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.ode4j.ode.OdeMath#dNormalize4: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
org.dyn4j.dynamics.Island#solve: {[speed, motor, velocity, delta, impulse, rotate, mass, torque, piston, hinge, axes, rotation, joints, friction, quaternion, transmission, square, body, bone, ball, hallmarks, radius, arena, emitter, bitmap, heightfield, sphere, shader, calculate, collidable, cinematic, collect, triangle, vecf, collide, texture, shape, light, scene, capsule, material, plane, collision, bounding, volume, geometry, spatial, vertices, camel, matrix]}
org.ode4j.ode.internal.joints.DxJointHinge#dJointGetHingeParam: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
net.smert.jreactphysics3d.engine.ConstraintSolver#ConstraintSolver(C): {[piston, hinge, speed, motor, joints, axes, impulse, velocity, body, torque, rotate, delta, friction, quaternion, rotation, ball, bone, mass, arena, emitter, transmission, calculate, collect, bounding, shape, square, cinematic, sphere, volume, capsule, collide, plane, collision, heightfield, scene, bitmap, radius, spatial, material, texture, collidable, shader, light, vecf, triangle, matrix, geometry, hallmarks, camel, vertices]}
com.jme3.input.ChaseCamera#getMinVerticalRotation: {[rotation, quaternion, rotate, axes, speed, bone, motor, piston, hinge, emitter, velocity, impulse, delta, calculate, square, arena, mass, hallmarks, vertices, ball, torque, shader, collect, spatial, joints, transmission, collidable, bitmap, shape, texture, triangle, light, bounding, collide, sphere, camel, vecf, material, collision, geometry, matrix, body, friction, capsule, cinematic, heightfield, scene, plane, radius, volume]}
com.jme3.app.ChaseCameraAppState#setDragToRotate: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]}
com.jme3.animation.BoneTrack#getRotations: {[quaternion, rotation, rotate, axes, bone, speed, emitter, piston, hinge, motor, calculate, transmission, velocity, arena, bounding, sphere, impulse, vertices, collect, radius, cinematic, ball, spatial, capsule, triangle, vecf, friction, shape, delta, shader, heightfield, joints, material, volume, bitmap, texture, light, square, geometry, hallmarks, scene, collision, collidable, torque, camel, body, mass, plane, matrix, collide]}
com.jme3.input.ChaseCamera#setDragToRotate: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]}
com.jme3.animation.Bone#getWorldBindInverseRotation: {[quaternion, rotation, rotate, axes, speed, bone, emitter, piston, hinge, motor, velocity, calculate, impulse, arena, delta, vertices, transmission, square, ball, collect, hallmarks, spatial, shader, bounding, mass, sphere, joints, triangle, torque, shape, vecf, texture, light, collidable, material, radius, friction, cinematic, capsule, camel, collide, heightfield, volume, scene, body, bitmap, collision, matrix, geometry, plane]}
org.ode4j.ode.internal.joints.DxJointLMotor#dJointGetLMotorNumAxes: {[speed, rotate, motor, rotation, velocity, impulse, delta, axes, quaternion, mass, piston, hinge, torque, square, joints, friction, bone, transmission, bitmap, hallmarks, heightfield, body, shader, collidable, collide, radius, cinematic, texture, collect, collision, capsule, light, emitter, triangle, vecf, plane, scene, material, ball, calculate, spatial, sphere, camel, arena, volume, bounding, matrix, geometry, vertices, shape]}
com.jme3.input.FlyByCamera#setDragToRotate: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]}
org.ode4j.ode.internal.joints.OdeJointsFactoryImpl#dJointCreateHinge2: {[piston, speed, hinge, quaternion, rotate, axes, rotation, motor, bone, velocity, impulse, joints, torque, delta, body, friction, emitter, ball, mass, bounding, collect, sphere, arena, volume, radius, shape, shader, texture, light, material, scene, cinematic, collide, geometry, square, plane, collidable, capsule, vertices, spatial, matrix, transmission, collision, camel, heightfield, hallmarks, bitmap, calculate, vecf, triangle]}
com.jme3.scene.control.BillboardControl#rotateBillboard: {[rotate, rotation, quaternion, axes, speed, emitter, piston, bone, hinge, motor, velocity, square, vertices, impulse, delta, hallmarks, calculate, arena, mass, shape, shader, triangle, collect, torque, vecf, bitmap, joints, spatial, ball, light, plane, texture, matrix, cinematic, geometry, capsule, collision, material, heightfield, radius, volume, camel, transmission, body, sphere, collide, collidable, friction, bounding, scene]}
org.dyn4j.dynamics.joint.WeldJoint#solvePositionConstraints: {[speed, motor, velocity, impulse, delta, hinge, piston, rotate, torque, axes, mass, rotation, joints, quaternion, friction, body, bone, transmission, ball, square, arena, heightfield, hallmarks, collidable, collide, vecf, radius, triangle, emitter, collect, plane, bitmap, calculate, collision, shader, cinematic, texture, capsule, scene, light, geometry, material, sphere, shape, vertices, matrix, bounding, volume, camel, spatial]}
}
