{
com.jme3.input.ChaseCamera#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.scene.Geometry#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.dynamics.joint.PinJoint#initializeConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.font.BitmapText#setAlignment: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.animation.CompactVector3Array#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.dyn4j.geometry.Circle#project: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.libccd.CCDVec3#ccdVec3Normalize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJointAMotor#DxJointAMotor(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.Rotation#dRfromQ: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.cinematic.events.AbstractCinematicEvent#getDuration: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxMass#dMassSetParameters: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.shader.UniformBindingManager#setCamera: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.dyn4j.geometry.Circle#createMass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxConvex#CheckEdgeIntersection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.ode.OdeMath#dMULTIPLY0_333: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.dyn4j.geometry.decompose.DoubleEdgeList#getReferenceFace: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.ode.OdeMath#dMULTIPLY0_331: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.renderer.RenderManager#setViewPort: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJointUniversal#getLimot1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.math.Vector2f#set: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.dyn4j.dynamics.joint.RevoluteJoint#getMotorTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.shadow.ShadowUtil#updateFrustumPoints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.dyn4j.dynamics.joint.PrismaticJoint#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.font.BitmapFont#BitmapFont(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.dyn4j.dynamics.Body#getMass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.animation.AnimationFactory#buildAnimation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.math.Matrix3f#getRow: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.scene.Geometry#getWorldMatrix: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.renderer.opengl.TextureUtil#uploadSubTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.scene.Mesh#setBound: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.math.Quaternion#toRotationMatrix: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxMass#adjust: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.geometry.Geometry#createCircle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
net.smert.jreactphysics3d.collision.shapes.ConeShape#getLocalSupportPointWithoutMargin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJointTransmission#getMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.dyn4j.dynamics.Body#isOnIsland: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.dyn4j.geometry.Mass#getInertia: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.ragdoll.DRagdollBoneConfig#getRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxBody#dBodyGetAutoDisableAngularThreshold: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.Matrix#dFactorCholesky: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.shader.UniformBindingManager#setWorldMatrix: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
net.smert.jreactphysics3d.body.RigidBody#applyForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJointTransmission#dJointGetTransmissionAngle2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJointTransmission#dJointGetTransmissionAngle1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJointLMotor#dJointSetLMotorParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.shadow.PointLightShadowFilter#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.math.Quaternion#oppositeLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.dyn4j.dynamics.joint.RevoluteJoint#getMaximumMotorTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.shader.ShaderNodeVariable#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.math.Matrix4f#setInverseRotationDegrees: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.scene.control.LodControl#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.Cinematic#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#add: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DAMotorJoint#from: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Settings#getRestitutionVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapFont#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMatrix#dLDLTAddTL: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideCapsuleSphere#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#addTorques: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.asset.TextureKey#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointGetTransmissionRatio: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#getParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Quaternion#multLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#dGeomSetOffsetRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#ACCUM_SCALE_MATRIX_3X3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimAABBSet#GIM_CONVERT_VEC3F_GUINT_XZ_CLAMPED: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxHeightfield#computeAABB: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBox#setLengths: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Matrix22#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Geometry#createPolygonalSliceAtOrigin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCD#__ccdGJK: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingBox#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.StringBlock#setAlignment: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#dMassAdd: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingSphere#getVolume: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrixN#set: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.AssetLinkNode#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DPRJoint#addTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapFont#createLabel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.SpotLight#intersectsSphere: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Matrix33#difference: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.ShaderGenerationInfo#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.SkeletonControl#updateTargetsAndMaterials: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RevoluteJoint#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.MotionEvent#computeTargetDirection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.FastMath#asin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPlane2D#dJointSetPlane2DAngleParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.cinematic.KeyFrame#trigger: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.ContactSolver#computeFriction2Impulse: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointGetTransmissionMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxSphere#DxSphere(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.PoseTrack#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.Kerning#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#MATRIX_PRODUCT_4X4: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.AbstractBroadphaseDetector#update: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#getAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDVec3#ccdVec3Z: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDVec3#ccdVec3Y: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDVec3#ccdVec3X: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Quaternion#toAngles: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightList#setOwner: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGimpactCollision#GetPointFromBarycentric: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxHeightfield#sortPlanes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Mass#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Ellipse#contains: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterSphereShape#getRandomPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.bih.BIHNode#intersectBrute: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.AbstractShadowFilter#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointDBall#anchor1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterPointShape#deepClone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.SpotLightShadowFilter#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#dMassSetCapsule: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCollisionUtil#dBoxTouchesBox: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.AbstractCinematicEvent#AbstractCinematicEvent(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointDBall#getAnchor1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.OdeJointsFactoryImpl#dJointCreateAMotor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#COPY_MATRIX_4X4: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.HingeJoint#computeCurrentHingeAngle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Matrix#_dEstimateInvertPDMatrixTmpbufSize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.audio.LowPassFilter#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.DistanceJoint#initializeConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingSphere#distanceToEdge: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.input.FlyByCamera#setRotationSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrix3#add: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollisionLibccdCylinderStacking#collideCylCyl: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.decompose.EarClipping#triangulate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCD#doSimplex4: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCD#doSimplex2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCD#doSimplex3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#getScreenCoordinates: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.decompose.Triangulator#triangulate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.Material#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.PQTorus#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJoint#setBall: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#dMassSetCylinder: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.World#solveTOI: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Torque#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.MotionEvent#setRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.BatchNode#findBatchByMaterial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Geometry#createPolygonalCapsule: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Mass#Mass(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCylinder#DxCylinder(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingVolume#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.SkeletonControl#applySkinning: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMatrix#dSolveCholesky: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DTransmissionJoint#setMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Settings#getRestitutionVelocitySquared: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGimpact#computeAABB: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxPosR#Rw: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#getParamVel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGimpactCollision#Decompose: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDVec3#ccdVec3Sub: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.AngleJoint#getReactionTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#getRotationSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#transpose: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#getChangeInOrientation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.ragdoll.DxRagdoll#DxRagdoll(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.collision.continuous.ConservativeAdvancement#getTimeOfImpact: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapText#getAlignment: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.RadialParticleInfluencer#applyVelocityVariation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#setSphere: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#getMass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCD#run: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Torus#updateGeometry: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrixN#wrap: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.AnimationEvent#initEvent: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.control.BillboardControl#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapCharacterSet#merge: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.KeyFrame#getCinematicEvents: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Settings#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.FrictionJoint#getReactionTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RevoluteJoint#getReactionTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#transposeLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxWorld#dWorldImpulseToForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.ccd_support_t#v: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Mass#setType: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.CinematicEvent#initEvent: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideCapsulePlane#dCollideCapsulePlane: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.ConeShape#getRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.DistanceJoint#getReactionForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.effect.ParticleEmitter#setFacingVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeHelper#createCylinder: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#getAngleRate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.ccd_center_fn#run: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.CapsuleShape#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.BatchNode#getTransformMatrix: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#getAngle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.HingeJoint#warmstart: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.audio.AudioNode#isVelocityFromTranslation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.CameraNode#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#setBoxTotal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#dMassSetCapsuleTotal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.logic.StaticPassLightingLogic#transformDirection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.WheelJoint#getReactionForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.WeldJoint#getRelativeRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.renderer.RenderManager#setViewProjection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.SliderJoint#isMotorEnabled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Capsule#contains: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dMultiply1_333: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.FrictionJoint#setMaximumTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#setRotationDiscRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapCharacterSet#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideHeightfield#dCollideHeightfield: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Slice#getSliceRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.FrictionJoint#getReactionForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.BodyFixture#createMass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Quaternion#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointGetTransmissionRadius1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.ContactConstraintSolver#solveVelocityContraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointGetTransmissionRadius2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#set: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.CompactVector3Array#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Matrix33#multiply: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Dome#getRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointLMotor#getParamVel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#check: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxHeightfield#get: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDVec3#ccdVec3Sub2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingSphere#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#setMass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.DefaultParticleInfluencer#getVelocityVariation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideCapsuleCylinder#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DTransmissionJoint#getRadius1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PssmShadowRenderer#setPostShadowParams: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DTransmissionJoint#getRadius2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#SCALE_MATRIX_4X4: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.PointLight#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#ACCUM_SCALE_MATRIX_4X4: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.decompose.DoubleEdgeListHalfEdge#getPrevious: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#addLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.BatchNode#updateSubBatch: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderNode#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.SpotLightShadowRenderer#updateShadowCams: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCD#ccdFirstDirDefault: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCapsule#dGeomCapsuleSetParams: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.CylinderShape#getRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Matrix33#Matrix33(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.CompactQuaternionArray#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Rotation#dQtoR: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxSphere#dGeomSphereGetRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.MotionEvent#cloneForSpatial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PrismaticJoint#getMotorForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#setRadius2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#setRadius1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#setTrimesh: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideRayCylinder#dCollideRayCylinder: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#getAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#getAnchor1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.ParticleInfluencer#setVelocityVariation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxSphere#dGeomSpherePointDepth: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.app.ChaseCameraAppState#getRotationSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#setParamVel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Line#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.SpotLightShadowFilter#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.ContactPoint#setFrictionImpulse2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.ContactPoint#setFrictionImpulse1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Cylinder#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Ellipse#getHalfHeight: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.app.StatsView#StatsView(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.StringBlock#getAlignment: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMatrix#dFactorCholesky: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RevoluteJoint#isMotorEnabled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingBox#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointLMotor#dJointGetLMotorParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Transform#lerp: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.Letters#update: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Matrix33#getTranspose: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.VertexBuffer#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DSphere#getRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.MotionEvent#internalUpdate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.ContactManifold#getFrictionImpulse2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.ContactManifold#getFrictionImpulse1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Matrix#Matrix(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#dMassSetSphere: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Segment#contains: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Misc#dClearUpperTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDVec3#ccdVec3Add: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.AbstractCinematicEvent#getSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapFont#getCharSet: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.SpotLight#intersectsBox: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#accumulate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMatrix#dFactorLDLT: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PssmShadowUtil#computeZFar: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.audio.AudioNode#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.AssetLinkNode#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDVec3#ccdVec3Dist2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxTrimeshHeightfield#computeAABB: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.Cinematic#enqueueCinematicEvent: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPlane2D#getParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.light.PointLight#intersectsBox: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PinJoint#getReactionForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Matrix33#invert: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.AbstractCollidable#getRotationDiscRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrix3#reTranspose: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.HalfEllipse#getRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PointLightShadowRenderer#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#clearTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLDebugES#glUniformMatrix4: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.HingeJoint#getMaxMotorTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLDebugES#glUniformMatrix3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.FrictionJoint#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGimpact#DxGimpact(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.SolvedContactPoint#getNormalImpulse: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PrismaticJoint#isMotorEnabled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.material.MatParamOverride#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrix3#set: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.DefaultParticleInfluencer#cloneFields: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Plane#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.KeyFrame#setCinematicEvents: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCollisionUtil#dGetEulerAngleFromRot: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.FrictionJoint#FrictionJoint(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PinJoint#PinJoint(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.AudioTrack#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.DirectionalLightShadowRenderer#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.SpotLightShadowRenderer#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.Letters#Letters(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.ParticleEmitter#getVelocityVariation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Ring#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPR#addTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingSphere#transform: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GL#glUniformMatrix3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GL#glUniformMatrix4: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.RenderManager#setWorldMatrix: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#getParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.cinematic.Cinematic#onPlay: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimContact#gim_merge_contacts: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DWorld#setMaxAngularSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Torus#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.PoiLightProbeLightFilter#filterLights: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.Light#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.BasicShadowRenderer#postFrame: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Ring#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDMPR#findPenetrSegment: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.UserData#readList: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#copy: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.LineSegment#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Matrix2x2#Matrix2x2(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCapsule#dGeomCapsulePointDepth: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderNodeDefinition#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Matrix22#multiply: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#get: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.decompose.SweepLine#merge: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDPolyTope#ccdPtEdgeVec3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Matrix22#getInverse: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Matrix22#getTranspose: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCD#ccdGJKPenetration: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DWorld#getMaxAngularSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#getWorldCoordinates: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.SkeletonControl#softwareSkinUpdate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Settings#getSleepAngularVelocitySquared: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.sCylinderBoxData#_cldTestAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Matrix3x3#computeSkewSymmetricMatrixForCrossProduct: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.Cinematic#setTime: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxWorld#dWorldGetMaxAngularSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.VertexBuffer#convertToHalf: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.LetterQuad#isLineWrap: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDSupport#ccdSupportCopy: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.sCylinderBoxData#_cldInitCylinderBox: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.environment.util.LightsDebugState#update: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.LetterQuad#setBitmapChar: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.AnimationEvent#dispose: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#dJointGetAMotorParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Sphere#setGeometryData: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.LetterQuad#getBitmapChar: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingBox#whichSide: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#fillFloatBuffer: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.SliderJoint#getMotorSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Mass#hashCode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMass#setCylinder: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.CylinderShape#getHeight: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Torus#Torus(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointLMotor#dJointGetLMotorAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Settings#getSleepLinearVelocitySquared: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.Animation#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.AbstractCinematicEvent#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Geometry#createSlice: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.VariableMapping#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.WheelJoint#getMotorTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.ContactConstraint#getTangentSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMass#setCapsule: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMass#getMass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrix3#DMatrix3(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Transform#fromOpenGL: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.NewtonianParticleInfluencer#influenceParticle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.World#convexCast: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapCharacterSet#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderNode#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#set: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingSphere#setSphere: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#getRadius1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#getRadius2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Polygon#getRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Sphere#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.CinematicEvent#getSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointSetTransmissionParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.NewtonianParticleInfluencer#NewtonianParticleInfluencer(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dMULTIPLY1_333: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointLMotor#getAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.MotorJoint#getMaximumTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMass#setSphereTotal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.input.FlyByCamera#setZoomSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.control.AbstractControl#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Triangle#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.SphereShape#computeLocalInertiaTensor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.texture.TextureCubeMap#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.DynamicsWorld#solveContactsAndConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.WheelJoint#getReactionTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrixN#DMatrixN(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingSphere#intersectsBoundingBox: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.MatParamOverride#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.MotorJoint#getReactionTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.Node#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.DefaultParticleInfluencer#setVelocityVariation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.WeldJoint#initializeConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.cinematic.TimeLine#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.Pose#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.DistanceJoint#getReactionTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideTrimeshCCylinder#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.ragdoll.DxRagdollBoneConfig#DxRagdollBoneConfig(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.ParticleEmitter#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxWorld#setMaxAngularSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterSphereShape#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointGetTransmissionParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.UserData#writeList: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.PoseTrack#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Geometry#createUnitCirclePolygon: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.HingeJoint#getMotorTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.Contact#getTangentialImpulse: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DUniversalJoint#addTorques: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideRayCylinder_ODE_0_12#dCollideRayCylinder: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.PointLight#getInvRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingSphere#mergeLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.TimeLine#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.ragdoll.DxRagdollBody#getRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.bih.BIHNode#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dMULTIPLYOP2_333: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DAMotorJoint#getMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Circle#contains: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.AnimControl#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.decompose.DoubleEdgeList#removeHalfEdges: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDMPR#findPenetr: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Matrix22#add: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#getAxisRel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Transform#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.instancing.InstancedGeometry#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.Cinematic#initialize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#getViewProjectionMatrix: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCapsule#getPointDepth: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#matrixInvert: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Misc#dMakeRandomMatrix: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDMPR#portalCanEncapsuleOrigin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.RadialParticleInfluencer#getRadialVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#setDefaultHorizontalRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCD#tripleCross: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointLMotor#setParamVel3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointLMotor#setParamVel2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.app.ChaseCameraAppState#onAnalog: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Geometry#scale: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxSphere#dGeomSphereSetRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.app.ChaseCameraAppState#setRotationSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Matrix3x3#add: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.BoxShape#computeLocalInertiaTensor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingSphere#intersectsSphere: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideCylinderSphere#dCollideCylinderSphere: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.Material#setMatrix4: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.AnimationEvent#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingSphere#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PointLightShadowFilter#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.FilterPostProcessor#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDVec3#ccdVec3Dot: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimAABBSet#gim_aabbset_sort: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#isKinematic: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RopeJoint#getReactionTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.light.LightProbeBlendingProcessor#computeBlendFactors: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMass#add: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PrismaticJoint#initializeConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Rectangle#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#MATRIX_PRODUCT_2X2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Rectangle#createMass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.WheelJoint#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPlane2D#dJointSetPlane2DXParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.CapsuleShape#CapsuleShape(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.CapsuleShape#getHeight: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideRaySphere#dCollideRaySphere: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapText#getFont: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.RenderState#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Settings#getVelocityConstraintSolverIterations: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Transform#multiply: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Eigen3f#calculateEigen: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrix3#wrap: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.Cinematic#activateCamera: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.SkeletonControl#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.SoundEvent#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Line#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Geometry#createPolygonalSlice: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.FastMath#convertFloatToHalf: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.CapsuleShape#getLocalBounds: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.BoneTrack#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointLMotor#setParamFMax: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#rotateCamera: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.ConvexMeshShape#computeLocalInertiaTensor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#setCapsuleTotal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#getMass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#dJointGetAMotorAngle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapCharacterSet#getCharacterSet: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Mass#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDVec3#ccdVec3Scale: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointUniversal#getAngle1Internal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Matrix33#sum: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#equalIdentity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#TRANSPOSE_MATRIX_4X4: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Circle#Circle(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDMPR#expandPortal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCylinder#dCreateCylinder: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.StringBlock#getVerticalAlignment: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.audio.AudioNode#cloneFields: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#onFrustumChange: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterSphereShape#EmitterSphereShape(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDVec3#ccdVec3Len2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.VertexBuffer#setElementComponent: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderNodeVariable#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.CollisionShape#computeLocalInertiaTensor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapCharacterSet#readCharset: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.FastMath#convertHalfToFloat: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCD#doSimplex: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Geometry#createCapsule: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.Animation#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#invert: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointLMotor#getParamFMax2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointLMotor#getParamFMax3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.font.Letters#getCharacterSetPage: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.OdeJointsFactoryImpl#dJointCreateTransmission: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DCylinder#getRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.TrackInfo#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.SpotLightShadowRenderer#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.Filter#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.AngleJoint#getRelativeRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Quaternion#getMatrix: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeHelper#createMass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPlane2D#getInfo1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterSphereShape#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCollisionUtil#dMatrix3Det: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.AbstractShadowFilter#preFrame: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#add: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCD#simplexToPolytope3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Ellipse#createMass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCD#simplexToPolytope4: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDMPR#findPos: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrix3#setIdentity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Matrix33#identity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointLMotor#getParamFMax: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.EmptyParticleInfluencer#setVelocityVariation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#updateViewProjection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointLMotor#setParamFMax3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointLMotor#setParamFMax2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMass#setMass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.ConstraintSolver#solveVelocityConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.control.LodControl#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DAMotorJoint#addTorques: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterPointShape#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.ContactPoint#getFrictionImpulse2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.ContactPoint#getFrictionImpulse1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PrismaticJoint#setMaximumMotorForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#addTorques: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#ACCUM_SCALE_MATRIX_2X2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Matrix33#transpose: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Matrix3x3#Matrix3x3(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.SliderJoint#warmstart: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#setZero: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapCharacter#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.export.JmeImporter#getCapsule: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.app.ChaseCameraAppState#setDefaultHorizontalRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#setLinearVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.effect.ParticleEmitter#setRotateSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.AnimChannel#getSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeHelper#createSphere: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.Skeleton#computeSkinningMatrices: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointDBall#getInfo2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.debug.WireSphere#WireSphere(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PssmShadowFilter#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#setDefaultVerticalRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dMultiply0_333: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Capsule#createMass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Sphere#getRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Settings#setSleepLinearVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DLCP#dSolveLCP: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightList#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.CollisionShape#updateAABB: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.CylinderShape#getLocalSupportPointWithoutMargin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapCharacterSet#getCharacter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DLCP#dTestSolveLCP: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.ShaderGenerationInfo#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Sphere#Sphere(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.ParticleInfluencer#getVelocityVariation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Slice#getRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Settings#setSleepAngularVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.AbstractCinematicEvent#pause: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderNodeDefinition#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Torque#set: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.texture.Image#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.NewtonianParticleInfluencer#getNormalVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapTextPage#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.SliderJoint#getMaxMotorForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollisionLibccd#ccdGeomToSphere: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PrismaticJoint#solvePositionConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DAMotorJoint#setMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.shadow.DirectionalLightShadowFilter#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDMPR#portalReachTolerance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.sTrimeshBoxColliderData#SetupInitialContext: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#angleRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.app.LegacyApplication#update: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.Joint#getReactionTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.CinematicEventListener#onStop: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.AbstractCinematicEvent#setSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.HingeJointInfo#HingeJointInfo(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.texture.Texture3D#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.MotionPath#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.ColorRGBA#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.app.ChaseCameraAppState#setDefaultVerticalRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.decompose.SweepLine#regular: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.ConeShape#getLocalBounds: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Matrix22#invert: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.CylinderShape#computeLocalInertiaTensor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Slice#contains: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.Skeleton#createSkinningMatrices: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrix3#newArray: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PrismaticJoint#solveVelocityConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.FrictionJoint#solveVelocityConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.PQTorus#PQTorus(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Eigen3f#scaleMatrix: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.WheelJoint#WheelJoint(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#setParamHiStop3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.shadow.PointLightShadowRenderer#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#setParamHiStop2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapCharacterSet#writeCharset: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.MotionEvent#jmeClone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PrismaticJoint#getReactionForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RevoluteJoint#getRelativeRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RevoluteJoint#getMotorSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.WheelJoint#isMotorEnabled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#setParamLoStop: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.SphereShape#getLocalBounds: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.Material#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.debug.WireSphere#fromBoundingSphere: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Mesh#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#getProjectionMatrix: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DSphere#setRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.TechniqueDef#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.narrowphase.CircleDetector#distance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DCapsule#setParams: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DLCP#checkFactorization: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.SpatialTrack#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.ContactManifold#setFrictionImpulse2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.ContactManifold#setFrictionImpulse1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#MATRIX_PRODUCT_3X3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Plane#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.body.RigidBody#setMassInverse: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#clearAccumulatedTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.shadow.AbstractShadowFilter#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.decompose.DoubleEdgeList#getPreviousEdge: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMass#setSphere: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.SpotLightShadowRenderer#checkCulling: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.ContactSolver#setIsSplitImpulseActive: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#setParamLoStop2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#setParamLoStop3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#setParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.DefaultParticleInfluencer#applyVelocityVariation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCapsule#setParams: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.ContactManifold#setFrictionTwistImpulse: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DHingeJoint#addTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.MotorJoint#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#TRANSPOSE_MATRIX_3X3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.SkeletonControl#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.FrictionJoint#getMaximumTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPlane2D#setParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterPointShape#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Geometry#minkowskiSum: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.AbstractShadowRenderer#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollisionLibccdCylinderStacking#addContact: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.AngleJoint#solvePositionConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCD#nextSupport: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingSphere#merge: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.BoneTrack#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointLMotor#getParamVel2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointLMotor#getParamVel3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.effect.ParticleEmitter#freeParticle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.ccd_vec3_t#ccd_vec3_t(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Ring#getInnerRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointLMotor#DxJointLMotor(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.body.RigidBody#setAngularVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#setAngle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.body.RigidBody#setLinearVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Matrix3x3#subtract: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Slice#createMass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Mass#getMass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.cinematic.Cinematic#setSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDPolyTope#ccdPtAddFace: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#setProjectionMatrix: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.texture.Texture2D#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideCapsuleSphere#dCollideCapsuleSphere: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingSphere#setRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.FixedJoint#warmstart: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#getAngularVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.asset.TextureKey#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.Cinematic#removeCinematicEvent: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector2f#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollisionLibccdCylinderStacking#testAndAddDiscContact: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDVec3#ccdVec3PointSegmentDist2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.NewtonianParticleInfluencer#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.DynamicsWorld#setSleepLinearVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Triangle#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDMPR#portalEncapsulesOrigin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDVec3#CCD_VEC3_STATIC: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Matrix2x2#set: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.TangentBinormalGenerator#bulkPut: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.DirectionalLightShadowRenderer#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Line#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.CapsuleShape#getLocalSupportPointWithoutMargin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.texture.Texture#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#dJointGetAMotorMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGimpactCollision#IntersectCapsuleTri: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterMeshVertexShape#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Torus#getOuterRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Ellipse#getFarthestPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrixN#mulNew: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.SkyFactory#createSky: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.AbstractCollidable#AbstractCollidable(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#dMassSetSphereTotal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Dome#Dome(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCylinder#setParams: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Transform#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Link#updateLength: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.Bone#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.AbstractCinematicEvent#initEvent: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#setMass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Shape#getRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Rotation#dRFromEulerAngles: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointUniversal#computeInitialRelativeRotations: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#dJointSetAMotorMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.NewtonianParticleInfluencer#applyVelocityVariation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Matrix22#product: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.ragdoll.DxRagdollBody#DxRagdollBody(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Mass#isInfinite: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#dMassSetTrimeshTotal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingSphere#averagePoints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingVolume#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Matrix22#Matrix22(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapText#setVerticalAlignment: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Transform#inverse: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.PQTorus#getRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Mesh#setInterleaved: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.SolvedContactPoint#getTangentialImpulse: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.DynamicsWorld#getSleepAngularVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.CylinderShape#getLocalBounds: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.Skeleton#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.AnimControl#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.PointLight#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.SpotLight#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.input.FlyByCamera#setMoveSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.material.RenderState#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.DefaultParticleInfluencer#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.Cinematic#fitDuration: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.decompose.DoubleEdgeListVertex#getEdgeTo: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.Joint#solveVelocityConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#getTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#DxJointTransmission(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.PointLight#intersectsFrustum: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Node#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#Matrix4f(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Eigen3f#positiveRank: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.AnimationEvent#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#setCylinder: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Geometry#updateWorldTransforms: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.AngleJoint#initializeConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.audio.AudioKey#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingSphere#getRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGimpact#dGeomTriMeshIsTCEnabled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Mass#create: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.decompose.SweepLine#end: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RevoluteJoint#initializeConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.AnimationEvent#setSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.effect.ParticleEmitter#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapFont#getLineWidth: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideCapsuleBox#dCollideCapsuleBox: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.BallAndSocketJoint#solveVelocityConstraint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#dJointGetAMotorAxisRel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.light.DirectionalLight#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideConvexCapsule#dCollideConvexCapsule: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeHelper#createTransmissionJoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Transform#getOpenGLMatrix: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.AbstractShape#AbstractShape(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMatrix#dInvertPDMatrix: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPlane2D#dJointSetPlane2DYParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideCapsuleBox#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.SkeletonControl#applySkinningTangents: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxHeightfieldData#SetData: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.AbstractShadowRenderer#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Torus#getInnerRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapCharacter#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Circle#getRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapCharacterSet#addCharacter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Step#dxStepIsland_Stage0_Bodies: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.AbstractCinematicEvent#internalUpdate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCD#ccdGJKSeparate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.VertexBuffer#compact: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Matrix3x3#multiply: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Settings#setRestitutionVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDSupport#__ccdSupport: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DLCP#solve1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.DefaultParticleInfluencer#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dMULTIPLY2_333: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#setParamFMax3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#setParamFMax2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.AbstractCinematicEvent#getListeners: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DLCP#transfer_i_from_C_to_N: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.body.RigidBody#getExternalTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingSphere#whichSide: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Shape#createMass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Geometry#createSliceAtOrigin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.ConeShape#getHeight: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.texture.image.MipMapImageRaster#setPixel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.CinematicEvent#setSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointGetTransmissionContactPoint1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointGetTransmissionContactPoint2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Cylinder#updateGeometry: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointLMotor#getParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#IDENTIFY_MATRIX_4X4: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#getWorldCenter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTrimesh#gim_trimesh_set_tranform: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.Letters#isPrintable: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.input.FlyByCamera#getMoveSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.FlyByCamera#getRotationSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Rectangle#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.VertexBuffer#getNumElements: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.VertexBuffer#copyElements: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDVec3#ccdVec3PointTriDist2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.WheelJoint#initializeConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge#addTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.Mesh#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideSphereBox#dCollideSphereBox: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTrimeshCapsuleCollision#CALC_CAPSULE_AABB: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMatrix#dSolveLDLT: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.NewtonianParticleInfluencer#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightProbe#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.WheelJoint#solveVelocityConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.app.StatsAppState#loadFpsText: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Torque#Torque(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCapsule#dCreateCapsule: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.MotorJoint#setMaximumTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Ellipse#getHalfWidth: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPlane2D#getYParamVel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.AABB#AABB(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.AbstractCinematicEvent#removeListener: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingBox#mergeLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMisc#dPrintMatrix: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingSphere#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#setMass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapCharacterSet#setStyle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#getWorldOffsetPosr: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Transform#invert: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#ZERO_MATRIX_4X4: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#setRatio: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.PointLight#setRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideConvexCapsule#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#rotate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.EmptyParticleInfluencer#getVelocityVariation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.HalfEllipse#getHalfWidth: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.input.FlyByCamera#zoomCamera: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RevoluteJoint#getReactionForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDPolyTope#ccdPtAddVertexCoords: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.ragdoll.DxRagdollBoneConfig#getRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.SpotLight#setSpotInnerAngle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideRayCapsule#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.texture.TextureCubeMap#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCollisionUtil#dMat3GetCol: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.narrowphase.CircleDetector#raycast: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PrismaticJoint#getReactionTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.ContactConstraint#setTangentSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Matrix33#add: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DLCP#DLCP(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.ragdoll.DRagdollConfig#getMass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#getMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DTransmissionJoint#setRadius2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterBoxShape#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DTransmissionJoint#setRadius1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DLCP#estimate_transfer_i_from_C_to_N_mem_req: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.MatParamTexture#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Matrix22#difference: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightList#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMassC#getMass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.HingeJoint#getMotorSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCollisionUtil#dMat3ColCrossVector3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.bih.BIHTree#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.Kerning#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.control.CameraControl#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.input.FlyByCamera#getZoomSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Matrix2x2#add: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.audio.AudioNode#setVelocityFromTranslation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.control.BillboardControl#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapText#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDQuat#ccdQuatSetAngleAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#setMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.DefaultLightFilter#filterLights: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#setTrimeshTotal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointSetTransmissionRadius1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointSetTransmissionRadius2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Matrix2x2#multiply: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PinJoint#getReactionTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.body.RigidBody#applyTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.texture.Texture2D#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDMPR#ccdMPRPenetration: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.VertexBuffer#getElementComponent: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DRotation#dRSetIdentity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPlane2D#DxJointPlane2D(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.asset.AssetKey#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.app.StatsAppState#StatsAppState(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#dMassSetBoxTotal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.ColorRGBA#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDMPR#findOrigin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Ring#setInnerRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Torus#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDVec3#ccdVec3Cross: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.ContactPoint#setPenetrationImpulse: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Capsule#getFarthestFeature: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Settings#reset: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Matrix22#sum: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeHelper#createLMotorJoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.cinematic.KeyFrame#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.ContactManifold#getFrictionTwistImpulse: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.AbstractCinematicEvent#addListener: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dMULTIPLYOP0_333: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.PoseFrame#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxSphere#getRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DTransmissionJoint#getMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.Cinematic#onUpdate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.AbstractShadowRenderer#renderShadowMap: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.PoseFrame#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapFont#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#setFrustumPerspective: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeHelper#createAMotorJoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Slice#Slice(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointUniversal#getAngle2Internal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Transform#set: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.SpotLight#setSpotOuterAngle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.ShadowUtil#getGeometriesInLightRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.LetterQuad#LetterQuad(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapText#BitmapText(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Quaternion#Quaternion(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDMPR#findPenetrTouch: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#getParamFMax3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#getMaxAngularSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#getParamFMax2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Matrix33#subtract: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.ConeShape#computeLocalInertiaTensor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.texture.Texture#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.MotionEvent#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointUniversal#getAngles: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Matrix3x3#set: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.MotorJoint#solveVelocityConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Geometry#createHalfEllipseAtOrigin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RopeJoint#getReactionForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.collision.Collidable#getRotationDiscRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.MotorJoint#getReactionForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.UserData#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingSphere#recurseMini: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.util.BoundingSphereDebug#getRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.control.CameraControl#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Spline#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointGetTransmissionBacklash: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PointLightShadowRenderer#updateShadowCams: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.DefaultParticleInfluencer#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#getAxis2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Dome#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#invertLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#getAxis1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTrimesh#gim_trimesh_create_from_arrays: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PrismaticJoint#getMaximumMotorForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#getAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointUniversal#addTorques: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxSphere#computeAABB: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMass#setCapsuleTotal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Geometry#createHalfEllipse: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Ring#Ring(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.DirectionalLight#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.app.StatsAppState#setFont: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.HingeJoint#isMotorEnabled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.HalfEllipse#contains: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeHelper#createCapsule: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.control.LightControl#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Ring#getOuterRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDQuat#ccdQuatRotVec: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideRayCapsule#dCollideRayCapsule: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.app.ChaseCameraAppState#setZoomSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#zero: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Settings#setMaximumRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.DynamicsWorld#setNumIterationsVelocitySolver: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapFont#getCharacterAdvance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointFixed#getInfo2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Vector2f#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.MotionPath#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Settings#getSleepAngularVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Ellipse#getRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.util.TangentBinormalGenerator#putValue: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Sphere#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.asset.AssetManager#loadFont: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.LightNode#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Spline#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.AbstractShape#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#dMassCheck: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Circle#getFarthestPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointConstrainedBall#getInfo1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPlane2D#setAngleParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.shader.VariableMapping#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.CapsuleShape#computeLocalInertiaTensor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Ring#setOuterRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.AnimChannel#update: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Mass#getType: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DHinge2Joint#addTorques: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.texture.image.DefaultImageRaster#getPixel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDMPR#discoverPortal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.ParticleEmitter#getRotateSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.font.LetterQuad#update: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#getRatio: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMatrix#dIsPositiveDefinite: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.texture.Texture3D#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.VertexBuffer#createBuffer: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrixN#newSubMatrix: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapFont#setCharSet: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.VertexBuffer#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#getParamVel3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#getParamVel2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#setRotationSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Capsule#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.ContactSolver#computeFrictionVectors: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingSphere#intersects: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimRadixSort#GIM_RADIX_SORT_RTOKENS: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#setClipPlane: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Line#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Matrix#dEstimateInvertPDMatrixTmpbufSize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxRay#ray_sphere_helper: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.export.JmeExporter#getCapsule: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGimpact#dGeomTriMeshEnableTC: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DWorld#impulseToForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.effect.ParticleEmitter#isFacingVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.SphereShape#updateAABB: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapCharacter#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.SequentialImpulses#initialize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#isDynamic: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCollisionUtil#dMatrix3Inv: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#getBodyPosr: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrix3#eqTranspose: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Quaternion#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.MotionEvent#initEvent: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#getAngle1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#getAngle2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDVec3#CCD_VEC3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.body.RigidBody#getMass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimAABBSet#GIM_CONVERT_VEC3F_GUINT_XZ_UPPER_CLAMPED: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterMeshVertexShape#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#onFrameChange: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.ContactSolver#computeFriction1Impulse: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Sphere#updateGeometry: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Dome#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrix3#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.PQTorus#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#SCALE_MATRIX_3X3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#readFloatBuffer: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.AnimChannel#setSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#setMaxAngularSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#getParamFMax: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Settings#setVelocityConstraintSolverIterations: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.cinematic.Cinematic#onPause: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.OccludersExtractor#OccludersExtractor(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Transform#lerped: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.MatParam#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCollisionUtil#dMultiplyMat3Vec3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix3f#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxWorld#impulseToForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Matrix33#product: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.decompose.DoubleEdgeListFace#getEdgeCount: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightProbe#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Ray#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#DxMass(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Segment#createMass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.MotorJoint#getAngularError: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Matrix33#getInverse: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.AnimChannel#setAnim: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#getViewMatrix: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterBoxShape#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapCharacterSet#BitmapCharacterSet(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.MatParamTexture#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#dJointSetAMotorAngle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Matrix22#identity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCollisionUtil#dMatrix3Copy: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.CapsuleShape#isEqualTo: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#setParamHiStop: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.body.RigidBody#getMassInverse: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#setParameters: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Matrix2x2#subtract: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideCapsuleCapsule#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.TangentBinormalGenerator#setToleranceAngle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.logic.SinglePassAndImageBasedLightingLogic#updateLightListUniforms: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.SoundEvent#initEvent: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RevoluteJoint#solveVelocityConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Matrix22#transpose: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDPolyTope#ccdPtFaceVec3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.AbstractBox#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#getLocalCenter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.CameraNode#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#COPY_MATRIX_2X2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTrimesh#gim_trimesh_update_vertices: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Polygon#Polygon(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Settings#getMaximumRotationSquared: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.WheelJoint#getMotorSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.control.AbstractControl#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.WeldJoint#getReactionForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DLCP#transfer_i_from_N_to_C: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimAABBSet#GIM_CONVERT_VEC3F_GUINT_XZ: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.opencl.Device#hasHalfFloat: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.DynamicsWorld#setSleepAngularVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.ContactSolver#storeImpulses: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.cinematic.Cinematic#addCinematicEvent: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDMPR#portalDir: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.ragdoll.DxRagdoll#addBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.light.PointLight#PointLight(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Slice#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Segment#getRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.system.NullRenderer#setWorldMatrix: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.AbstractCinematicEvent#play: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.WeldJoint#getReactionTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.MotionEvent#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Matrix22#subtract: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDVec3#ccdVec3Copy: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDVec3#__ccdVec3PointSegmentDist2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.TechniqueDef#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Geometry#createPolygonalCircle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.OdeJointsFactoryImpl#dJointCreateLMotor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.audio.AudioNode#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMatrix#dRemoveRowCol: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#setBacklash: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.SpatialTrack#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Quaternion#fromMatrix: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.body.RigidBody#setMass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.material.logic.StaticPassLightingLogic#transformPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Geometry#getRotationRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.audio.LowPassFilter#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.Cinematic#clear: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPlane2D#getXParamFMax: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.audio.AudioNode#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.instancing.InstancedGeometry#updateInstances: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.app.ChaseCameraAppState#getZoomSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#createSweptAABB: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterSphereShape#getRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#Body(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.LightNode#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.StringBlock#setVerticalAlignment: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.HalfEllipse#createMass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideCapsulePlane#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Rotation#dRSetIdentity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.SpotLight#intersectsFrustum: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix3f#fillFloatBuffer: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#dInitColliders: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#dMassRotate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#dMassSetBox: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.cinematic.KeyFrame#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.WheelJoint#getMaximumMotorTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Slice#validate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxSphere#setRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrix3C#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#DxJointHinge2(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.asset.AssetKey#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.Skeleton#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.app.SimpleApplication#initialize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#dMassAdjust: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.UserData#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#getAccumulatedTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollisionLibccd#ccdGeomToCyl: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.Filter#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.ContactSolver#computePenetrationImpulse: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.texture.image.DefaultImageRaster#setPixel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix3f#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#getLimot1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#getLimot2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.AbstractCinematicEvent#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.ContactSolver#isSplitImpulseActive: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PulleyJoint#getReactionForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.Joint#solveVelocityConstraint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#setParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideTrimeshCCylinder#dCollideCCTL: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Circle#validate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMatrix#dLDLTRemove: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Mass#getInverseMass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#isStatic: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#setParamVel3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#setParamVel2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Torque#getTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Capsule#getFarthestPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.SpotLight#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.control.LightControl#spatialTolight: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterSphereShape#setRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.SliderJoint#getMotorForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#SCALE_MATRIX_2X2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.RadialParticleInfluencer#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.CapsuleShape#getLocalSupportPointWithMargin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.TrackInfo#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMisc#dClearUpperTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PointLightShadowRenderer#checkCulling: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.app.StatsAppState#getFpsText: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointLMotor#setParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.shadow.DirectionalLightShadowRenderer#updateShadowCams: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.Cinematic#Cinematic(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#getLinearVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Matrix#dInvertPDMatrix: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.Bone#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.RadialParticleInfluencer#setRadialVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointLMotor#setParamVel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.SphereShape#getRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.StringBlock#StringBlock(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.DynamicsWorld#setContactsPositionCorrectionTechnique: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#setAngularVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.CompactQuaternionArray#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Capsule#getRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.Pose#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#setParamFMax: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxWorld#getMaxAngularSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Cylinder#getRadius2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.narrowphase.CircleDetector#detect: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.control.AreaUtils#calcScreenArea: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dMULTIPLYOP1_333: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapFont#findKerningAmount: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Cylinder#Cylinder(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#adjoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#setCapsule: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.LetterQuad#invalidate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#dJointSetAMotorParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.LineSegment#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.texture.image.MipMapImageRaster#getPixel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Cylinder#getRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.ParticleEmitter#setVelocityVariation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.AnimationEvent#onPlay: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.body.RigidBody#setIsSleeping: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.shadow.DirectionalLightShadowFilter#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPlane2D#getYParamFMax: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrix3C#reTranspose: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.FilterPostProcessor#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.control.LightControl#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.Contact#getNormalImpulse: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#dMassSetCylinderTotal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DCapsule#getRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapText#getVerticalAlignment: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCapsule#getRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#vRotateCamera: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.ccd_first_dir_fn#run: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Slice#getFarthestPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.sCylinderTrimeshColliderData#_InitCylinderTrimeshData: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.system.NullRenderer#setViewProjectionMatrices: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Capsule#getCapRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Ray#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.NewtonianParticleInfluencer#setNormalVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.EffectTrack#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dMultiply2_333: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#IDENTIFY_MATRIX_3X3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCapsule#DxCapsule(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDMPR#refinePortal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.AbstractCinematicEvent#stop: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimAABBSet#GIM_CONVERT_VEC3F_GUINT_XZ_UPPER: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.AudioTrack#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.decompose.SweepLine#split: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingSphere#contains: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#COPY_MATRIX_3X3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.RadialParticleInfluencer#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.bih.BIHNode#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Island#solve: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Mass#getInverseInertia: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PulleyJoint#getReactionTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrixN#reTranspose: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPlane2D#getXParamVel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.audio.AudioKey#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointSetTransmissionBacklash: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrixN#makeRandom: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.PointLight#getRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.Cinematic#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxSphere#dCreateSphere: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#getBacklash: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMisc#dMakeRandomMatrix: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#setCylinderTotal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDVec3#ccdVec3Eq: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollisionLibccd#ccdGeomToCap: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxQuickStep#dxQuickStepIsland_Stage0_Bodies: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.body.RigidBody#getAngularVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTrimesh#gim_trimesh_capsule_collision: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.ccd_pt_el_t#witness: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingSphere#BoundingSphere(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DCylinder#setParams: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMass#setCylinderTotal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Circle#createAABB: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCylinder#dGeomCylinderSetParams: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Settings#getSleepLinearVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.SoundEvent#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Misc#dPrintMatrix: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Capsule#Capsule(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.app.SimpleApplication#loadGuiFont: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.Cinematic#dispose: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.asset.DesktopAssetManager#loadFont: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#getContactPoint1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#getContactPoint2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDPolyTope#ccdPtAddEdge: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.Light#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.AbstractBox#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#setSphereTotal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.NewtonianParticleInfluencer#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.CapsuleShape#getRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PssmShadowFilter#preFrame: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapCharacter#BitmapCharacter(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.EffectTrack#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RevoluteJoint#setMaximumMotorTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.body.RigidBody#getLinearVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.WeldJoint#solvePositionConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#dMassSetZero: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PrismaticJoint#getMotorSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.collision.bih.BIHTree#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.instancing.InstancedGeometry#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideConvexCapsuleCCD#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#dJointAddPistonForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJointHinge#getInfo2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJointUniversal#getInfo2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJoint#setBall2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.bounding.BoundingBox#setMinMax: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.util.mikktspace.MikktspaceTangentGenerator#getTexCoord: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.math.Vector3f#dot: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.bounding.BoundingVolume#contains: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.effect.shapes.EmitterMeshVertexShape#getRandomPointAndNormal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.math.Vector3f#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.math.Vector2f#rotateAroundOrigin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.math.DMatrixN#plusEq: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.ode.OdeMath#dInvertMatrix3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.math.Vector2f#subtract: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.util.mikktspace.MikktspaceTangentGenerator#generateSharedVerticesIndexListSlow: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.cinematic.MotionPath#addWayPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJointAMotor#setMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.util.TangentBinormalGenerator#generate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.math.Vector3f#interpolateLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.collision.bih.BIHTriangle#getCenter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.light.LightProbe#intersectsBox: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.shadow.SpotLightShadowRenderer#doDisplayFrustumDebug: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.geometry.AbstractShape#rotateAboutCenter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.math.Spline#getControlPoints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.animation.BoneTrack#BoneTrack(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.math.Matrix3f#mult: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.dyn4j.geometry.Vector2#distanceSquared: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.light.SpotLight#setPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxGimpact#dGeomTriMeshSetData: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.math.Vector4f#angleBetween: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.effect.ParticleEmitter#setInitialVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.light.DirectionalLight#setDirection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.scene.BatchNode#doTransforms: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.math.Vector3f#divideLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.math.Rectangle#setB: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.math.Rectangle#setC: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.math.Rectangle#setA: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.math.Matrix3f#fromAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.cinematic.events.CinematicEventListener#onPause: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.collision.bih.BIHTriangle#BIHTriangle(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.math.Matrix4f#setTranslation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJointHinge2#dJointGetHinge2Anchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.math.Vector3f#distance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.scene.debug.WireBox#makeGeometry: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.collision.bih.BIHTree#getTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.math.Vector2f#angleBetween: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.collision.bih.BIHTriangle#getNormal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.audio.openal.ALAudioRenderer#updateListenerParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.animation.BoneTrack#getTranslations: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.util.mikktspace.MikktspaceTangentGenerator#DegenEpilogue: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.effect.shapes.EmitterShape#getRandomPointAndNormal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.light.DirectionalLight#getDirection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.collision.bih.TriangleAxisComparator#compare: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.math.Vector2f#negateLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.math.Vector3f#distanceSquared: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.queue.OpaqueComparator#compare: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.TriangleData#TriangleData(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.ParticleEmitter#setGravity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterMeshFaceShape#getRandomPointAndNormal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.bih.BIHTree#sortTriangles: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.StripBox#duUpdateGeometryNormals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Ring#getUp: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Surface#validateInputData: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#updateCamera: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#getUp: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.environment.util.EnvMapUtils#getCubemapFaceTexCoordFromVector: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#minLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.shadow.BasicShadowRenderer#getPoints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#setScale: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#zero: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector2f#add: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#addLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingSphere#getMaxAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#setLocalScale: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.audio.AudioSource#getPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#setLocalTranslation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterPointShape#getRandomPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#getLocalScale: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.bih.BIHTriangle#get3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#lookAt: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#setSpatial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.BufferUtils#setInBuffer: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.collision.bih.BIHTriangle#get2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.bih.BIHTriangle#get1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.SpotLight#getPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#scale: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.FastMath#sphericalToCartesian: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.FastMath#sphericalToCartesianZ: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.material.MatParam#getValueAsString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingBox#getExtent: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Rectangle#random: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.BufferUtils#getVector2Array: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#mult: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.environment.generation.IrradianceMapGenerator#generateIrradianceMap: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.ShadowUtil#updateFrustumPoints2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#zero: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.environment.generation.PrefilteredEnvMapFaceGenerator#generatePrefilteredEnvMap: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.EnvironmentCamera#createOffCamera: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector2f#smallestAngleBetween: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.ParticleEmitter#setFaceNormal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.mikktspace.MikktspaceTangentGenerator#calcTexArea: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.LineSegment#getNegativeEnd: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#move: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector2f#determinant: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.util.EnvMapUtils#getSolidAngleAndVector: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Plane#whichSide: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.util.EnvMapUtils#generateIrradianceMap: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Plane#pseudoDistance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Triangle#Triangle(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.Bone#getWorldBindPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector2f#isValidVector: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Ring#setUp: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.audio.Listener#getUp: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.control.BillboardControl#BillboardControl(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Eigen3f#getEigenVector: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#subtract: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.mikktspace.MikktspaceTangentGenerator#MergeVertsSlow: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.audio.Listener#getVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.BufferUtils#addInBuffer: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Plane#reflect: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterShape#getRandomPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Quaternion#toAngleAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Plane#isOnPlane: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix3f#fromAngleNormalAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector2f#normalize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Ring#getCenter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#maxLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.EmptyParticleInfluencer#setInitialVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#negate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.util.TangentBinormalGenerator#processTriangles: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.Bone#Bone(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.collision.CollisionResult#getContactNormal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.audio.AudioNode#getVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Ray#distanceSquared: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.AbstractTriangle#get3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.AbstractTriangle#get2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.AbstractTriangle#get1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingVolume#setCenter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector2f#addLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.ui.Picture#setWidth: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#multAcross: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#distanceToNearPlane: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.SweepSphere#setVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.SpotLight#getDirection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#set: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingVolume#intersects: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Quaternion#lookAt: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Spline#interpolate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector2f#divide: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#scaleAdd: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.FastMath#interpolateCatmullRom: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#getUpVector: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.Intersection#findMinMax: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Spline#initCatmullRomWayPoints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.ParticleEmitter#getFaceNormal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Transform#transformInverseVector: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.DirectionalLight#DirectionalLight(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Ray#getDirection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterMeshConvexHullShape#getRandomPointAndNormal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.debug.Arrow#Arrow(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.app.LegacyApplication#initCamera: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix3f#scale: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.CompactVector3Array#deserialize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#normalize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#add: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.ParticleInfluencer#setInitialVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.AbstractShadowRenderer#setShadowZFadeLength: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#multNormalAcross: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix3f#setColumn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Curve#createCatmullRomMesh: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#getWorldTranslation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingBox#checkMinMax: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.SweepSphere#collideWithVertex: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.Bone#getLocalPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.bih.BIHTree#createNode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.ParticleEmitter#getGravity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.BoneTrack#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Vector2f#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.util.EnvMapUtils#getHammersleyPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.util.TangentBinormalGenerator#processTriangleData: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.mikktspace.MikktspaceTangentGenerator#evalTspace: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Triangle#computeTriangleNormal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Quaternion#opposite: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.audio.AudioNode#updateGeometricState: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.AnimationFactory#addKeyFrameTranslation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterSphereShape#getRandomPointAndNormal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.app.ChaseCameraAppState#zoomCamera: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.SpatialTrack#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Eigen3f#getEigenVectors: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.debug.SkeletonInterBoneWire#updateGeometry: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.DirectionalLightShadowRenderer#init: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.cinematic.MotionPath#interpolatePath: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Curve#createLinearMesh: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector2f#Vector2f(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.audio.AudioSource#getDirection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterBoxShape#getRandomPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Triangle#get3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Triangle#get2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Triangle#get1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#add: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.mikktspace.MikktspaceTangentGenerator#generateSharedVerticesIndexList: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.BufferUtils#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix3f#setRow: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#setLocation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PssmShadowFilter#getDirection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#project: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#inverseRotateVect: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#setUpVector: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.CurveAndSurfaceMath#interpolate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.audio.Listener#setVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.AnimationFactory#addTimeScale: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Rectangle#getA: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Rectangle#getB: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Rectangle#getC: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#interpolateLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#getDirection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.environment.generation.PrefilteredEnvMapFaceGenerator#importanceSampleGGX: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.Pose#Pose(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#normalizeLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#getLocalTranslation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector2f#multLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Triangle#get: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.mikktspace.MikktspaceTangentGenerator#generateInitialVerticesIndexList: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.Bone#getBindPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.ParticleEmitter#updateParticle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.SpatialTrack#getTranslations: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingVolume#BoundingVolume(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.light.SpotLight#setDirection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.AbstractBox#updateGeometry: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#set: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#multNormal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.audio.Listener#getLeft: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Dome#getCenter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector2f#negate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#fromAngleAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightProbe#getPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.BufferUtils#populateFromBuffer: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.FastMath#interpolateBezier: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.TangentBinormalGenerator#parity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.ParticleTriMesh#updateParticleData: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Plane#Plane(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#getLocation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#addLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix3f#fromAngleAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#generateComplementBasis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Surface#createNurbsSurface: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Ray#setDirection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Plane#setOriginNormal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.SweepSphere#getCenter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#getLeft: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingBox#intersects: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#subtract: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Transform#setTranslation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#rotateVect: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Ray#setOrigin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.EnvironmentCamera#getPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PssmShadowFilter#setDirection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.util.EnvMapUtils#evalShBasis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#negateLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#maxLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Vector2f#interpolateLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.audio.Listener#getDirection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.environment.util.EnvMapUtils#prefilterEnvMapTexel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.FastMath#getBezierP1toP2Length: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.FastMath#interpolateLinear: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.input.FlyByCamera#setUpVector: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.RadialParticleInfluencer#setOrigin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.debug.WireFrustum#WireFrustum(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.debug.SkeletonPoints#updateGeometry: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.AnimationFactory#addTimeTranslation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.LineSegment#setOrigin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.audio.AudioNode#getPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Ray#intersects: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.AbstractTriangle#set: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Plane#setPlanePoints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.MotionPath#iterator: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Line#getStart: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.SweepSphere#getDimension: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#crossLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.ParticleEmitter#emitParticles: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.util.TangentBinormalGenerator#genTangentLines: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.RadialParticleInfluencer#getOrigin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.MotionPath#removeWayPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#setTransform: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#multProj: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Triangle#getNormal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PssmShadowRenderer#setShadowZFadeLength: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#angleBetween: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.BasicShadowRenderer#BasicShadowRenderer(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.Bone#getLocalScale: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.PointLight#setPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Quaternion#mult: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.collision.CollisionResult#getContactPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Uniform#clearValue: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#getLookAtOffset: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterPointShape#getRandomPointAndNormal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Line#updateGeometry: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.xml.SAXUtil#parseVector3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.generation.IrradianceMapGenerator#run: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Box#Box(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#divide: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Ray#Ray(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.input.FlyByCamera#riseCamera: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.StripBox#StripBox(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Spline#removeControlPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.debug.SkeletonWire#updateGeometry: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingBox#computeFromTris: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Transform#Transform(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Curve#createBezierMesh: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.DefaultParticleInfluencer#getInitialVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.DefaultParticleInfluencer#setInitialVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.SweepSphere#getVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.audio.AudioSource#getVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#mult: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Triangle#setNormal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#toTranslationVector: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#setLookAtOffset: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Line#updatePoints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.input.FlyByCamera#moveCamera: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.mikktspace.MikktspaceTangentGenerator#initTriInfo: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#cloneFields: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#negate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.Bone#getModelBindInversePosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.control.BillboardControl#rotateCameraAligned: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix3f#multLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix3f#fromStartEndVectors: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.BatchNode#doTransformsTangents: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterBoxShape#getLen: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.SpotLightShadowRenderer#init: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingVolume#distanceSquaredTo: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.FastMath#computeNormal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.audio.Listener#getLocation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.TangentBinormalGenerator#splitVertices: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.SweepSphere#setDimension: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.mikktspace.MikktspaceTangentGenerator#MergeVertsFast: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.FastMath#getCatmullRomP1toP2Length: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterBoxShape#getMin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.LineSegment#distanceSquared: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#mult: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#negateLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.environment.EnvironmentCamera#setPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#divide: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Quaternion#fromAngleAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterMeshVertexShape#getRandomPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.Bone#getModelSpaceScale: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#getWorldScale: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Eigen3f#computeVectors: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#Vector3f(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterBoxShape#EmitterBoxShape(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterSphereShape#setCenter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#toScaleVector: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.util.CubeMapWrapper#getPixel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightProbe#setPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Triangle#calculateNormal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Triangle#getCenter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.Bone#getWorldBindScale: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#setW: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.shadow.PointLightShadowRenderer#doDisplayFrustumDebug: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#setY: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#setX: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#setZ: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Plane#getNormal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#setZ: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#setY: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#fromAngleNormalAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#setX: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.MotionAllowedListener#checkMotionAllowed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.SpatialTrack#getScales: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#scaleAdd: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.AnimationFactory#getScaleForFrame: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterBoxShape#getRandomPointAndNormal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.Material#setVector3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.Material#setVector2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.generation.PrefilteredEnvMapFaceGenerator#prefilterEnvMapTexel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.LineSegment#LineSegment(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.Material#setVector4: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.collision.SweepSphere#collideWithSegment: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.AnimationFactory#getTranslationForFrame: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Ray#getOrigin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Spline#addControlPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.audio.Listener#setLocation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Surface#Surface(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#Vector4f(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.Pose#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#isValidVector: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.SweepSphere#setCenter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector2f#cross: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.FastMath#cartesianZToSpherical: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingSphere#computeFromTris: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.mikktspace.MikktspaceTangentGenerator#generateTSpaces: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Transform#getScale: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.control.LightControl#lightToSpatial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.TangentBinormalGenerator#processTriangleStrip: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#projectLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#dot: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.BatchNode#doCopyBuffer: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.audio.openal.ALAudioRenderer#setSourceParams: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.SweepSphere#isPointInTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.TangentBinormalGenerator#isDegenerateTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.Bone#getBindScale: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector2f#zero: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.CompactVector3Array#serialize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingVolume#getCenter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Ray#intersectsWherePlane: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.TangentBinormalGenerator#genNormalLines: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.LineSegment#getOrigin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.SpatialTrack#SpatialTrack(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.Bone#getWorldBindInversePosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.VertexInfo#VertexInfo(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.Bone#getWorldBindInverseScale: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.SweepSphere#pointsOnSameSide: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#multLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.environment.util.EnvMapUtils#generatePrefilteredEnvMap: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Triangle#set1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Triangle#set2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Triangle#set3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.util.EnvMapUtils#getSphericalHarmonicsCoefficents: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.AbstractBox#computeVertices: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Curve#Curve(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Line#distance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#isValidVector: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.EmptyParticleInfluencer#getInitialVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterMeshVertexShape#setMeshes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.MotionPath#getWayPointIndexForDistance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Ray#intersectWherePlanar: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Rectangle#Rectangle(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.BufferUtils#multInBuffer: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.FastMath#counterClockwise: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Ring#setCenter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Line#Line(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.util.EnvMapUtils#importanceSampleGGX: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Line#Line(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Quaternion#fromAngleNormalAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.util.BufferUtils#createFloatBuffer: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Surface#getControlPoints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingBox#getMax: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Line#getDirection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Spline#Spline(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.input.InputManager#getCursorPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Triangle#set: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Ray#intersectWherePlanarQuad: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#translateVect: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingSphere#calcWelzl: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#divideLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Vector2f#mult: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingBox#BoundingBox(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterMeshConvexHullShape#getRandomPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#worldToLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Triangle#calculateCenter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.util.CubeMapWrapper#setPixel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.CurveAndSurfaceMath#interpolateNurbs: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.LineSegment#distance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PssmShadowRenderer#setDirection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.TangentBinormalGenerator#approxEqual: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingBox#getMin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Transform#getTranslation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#lookAtDirection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.util.mikktspace.MikktspaceTangentGenerator#genTangSpace: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.PointLight#getPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#minLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector2f#divideLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector2f#setY: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector2f#setX: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Surface#buildSurface: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.ui.Picture#setHeight: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.ColorRGBA#toVector3f: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.debug.Arrow#setArrowExtent: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.MotionEvent#setDirection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.CollisionResult#setContactPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix3f#getColumn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.ColorRGBA#toVector4f: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.effect.ParticleEmitter#emitParticle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.shadow.BasicShadowRenderer#setDirection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Plane#getClosestPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector2f#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.Bone#setBindingPose: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.FastMath#cartesianToSpherical: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#inverseTranslateVect: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#center: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterPointShape#setPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.TangentBinormalGenerator#processTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector2f#normalizeLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#multLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Line#distanceSquared: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingVolume#distanceToEdge: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.TangentBinormalGenerator#processTriangleFan: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#cross: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.audio.AudioNode#setVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.BufferUtils#normalizeVector3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.BufferUtils#normalizeVector2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.AbstractBox#getCenter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector2f#dot: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Line#setOrigin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Ray#intersectWhere: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Line#getOrigin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.bih.BIHTree#setMinMax: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.Pose#apply: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Line#random: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterBoxShape#setMin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Curve#createNurbMesh: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.LineSegment#getPositiveEnd: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.LineSegment#isPointInsideBounds: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.audio.AudioNode#setDirection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingBox#contains: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#normalize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.control.BillboardControl#rotateAxial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Line#setDirection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.ParticleEmitter#getInitialVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.MotionEvent#setLookAt: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.MotionPath#getWayPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.queue.OpaqueComparator#distanceToCam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Plane#setNormal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Triangle#setCenter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.debug.WireFrustum#update: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.CollisionResult#setContactNormal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Mesh#getTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.mikktspace.MikktspaceTangentGenerator#getPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.TangentBinormalGenerator#linkVertices: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.EnvironmentCamera#EnvironmentCamera(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Quaternion#getRotationColumn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Line#getEnd: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.BoneTrack#setTime: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.ParticleInfluencer#getInitialVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.queue.TransparentComparator#distanceToCam2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.bih.BIHTree#createBox: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterSphereShape#getCenter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterPointShape#getPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingVolume#distanceTo: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.Bone#getModelBindInverseScale: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.BoneTrack#getScales: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.ParticleEmitter#updateParticleState: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.audio.openal.ALAudioRenderer#setListenerParams: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#normalizeLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.MotionEvent#getDirection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingBox#distanceToEdge: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.Bone#getModelSpacePosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterMeshFaceShape#getRandomPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#subtractLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector2f#subtractLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.CompactVector3Array#getElementClass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Surface#addNormal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.audio.AudioNode#getDirection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.ShadowUtil#computeBoundForPoints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PssmShadowRenderer#getDirection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingBox#intersectsBoundingBox: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterMeshVertexShape#deepClone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Eigen3f#main: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.LineSegment#set: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.mikktspace.MikktspaceTangentGenerator#getNormal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.control.BillboardControl#rotateBillboard: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.audio.openal.ALAudioRenderer#updateSourceParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.BasicShadowRenderer#getDirection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterBoxShape#setLen: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Line#orthogonalLineFit: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#localToWorld: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.util.EnvMapUtils#getVectorFromCubemapFaceTexCoord: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.FastMath#extrapolateLinear: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.LineSegment#setDirection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Transform#setScale: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#subtractLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.material.logic.StaticPassLightingLogic#render: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.dyn4j.geometry.Geometry#createRightTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.shadow.PssmShadowRenderer#setMatParams: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.shadow.ShadowUtil#updateShadowCamera: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.renderer.RenderManager#renderGeometry: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.scene.BatchNode#mergeGeometries: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.dyn4j.geometry.Geometry#createEquilateralTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.shadow.OccludersExtractor#process: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.collision.CollisionResult#getTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.collision.CollisionResult#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.dyn4j.geometry.Geometry#createTriangleAtOrigin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.shadow.PssmShadowRenderer#postQueue: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.shadow.BasicShadowRenderer#postQueue: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.shadow.AbstractShadowRenderer#setMatParams: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.shadow.AbstractShadowRenderer#setPostShadowParams: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.ode.DTransmissionJoint#setAxis2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJointHinge2#setParamFudgeFactor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJointHinge2#dJointGetHinge2Anchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.CollideTrimeshBox#SUBTRACT: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.DTransmissionJoint#setAxis1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.dynamics.joint.PrismaticJoint#setLimitsEnabled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxCollisionUtil#dVector3Cross: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxConvex#GetSupportSide: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxMass#setBox: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJointUniversal#getLimot2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.OdeMath#dDOT: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJointPiston#dJointSetPistonAnchorOffset: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.OdeHelper#createDBallJoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJointBall#getInfo2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.OdeMath#dSafeNormalize3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJointPU#setAnchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJointHinge#setAnchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.DBody#addForceAtPos: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxCollisionUtil#dVector3LengthSquare: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxBody#vectorFromWorld: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxBody#getRelPointPos: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.DGeom#setPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.math.DMatrix3C#dotColCol: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJointDBall#dJointSetDBallAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJointDBall#dJointSetDBallAnchor1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.math.DVector3#dotCol: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.DBody#getTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.DMassC#getI: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.DMassC#getC: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxBody#dBodyGetForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxGeom#dGeomSetPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJointPiston#dJointSetPistonParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJointBall#dJointSetBallParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.DRay#set: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.CollideBoxPlane#done: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.libccd.CCDVec3#ccdVec3Set: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.DRotation#dRFromAxisAndAngle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.math.DMatrix3#dotRow: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxGimpactCollision#Vector3Multiply: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.math.DVector3#distance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.DLMotorJoint#setAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.Rotation#dRFromZAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.dyn4j.geometry.Matrix33#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxBox#getPointDepth: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.sCylinderBoxData#_cldClipBoxToCylinder: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.math.Matrix4f#fromFrame: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.Rotation#dRFromAxisAndAngle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.DBody#addRelTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.DPlane#getNormal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJointPR#dJointSetPRAnchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.dynamics.contact.ContactConstraintId#getBody1Id: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideTrimeshBox#LENGTHOF: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJoint#setAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#setAxis2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#setAxis1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#getAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#dJointSetAMotorAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxPosR#pos: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.debug.WireBox#updatePositions: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.texture.Texture#createSimpleClone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.shadow.PssmShadowFilter#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointDBall#anchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#setTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#dJointGetHinge2Angle2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#dJointGetHinge2Angle1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DGeom#getBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.texture.Image#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.material.MatParam#read: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointDBall#getAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointBall#dJointGetBallAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DSpace#collide: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.StripBox#duUpdateGeometryVertices: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeHelper#createPistonJoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointSetTransmissionAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointDBall#dJointGetDBallDistance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#getAngle2Rate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#getAxis2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#getAxis1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DPistonJoint#setAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#addForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dMultiply0_133: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBox#dGeomBoxSetLengths: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge#dJointSetHingeAnchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#dJointGetPistonParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointBall#setAnchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DPUJoint#setAnchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dCROSSMAT: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.debug.WireSphere#updatePositions: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodySetPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideBoxPlane#BAR2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#updateUniform: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#getPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#dJointSetHinge2Param: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyGetPointVel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.sCylinderTrimeshColliderData#_cldClipCylinderToTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dMultiply1_331: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCollisionUtil#dVector3Add: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DVector3#set: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Misc#dMaxDifference: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodySetForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#getPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#dJointSetHinge2Anchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCollisionUtil#dVector3CrossMat3Col: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrix3#isEq: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DVector3ColView#DVector3ColView(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrix3#dotRowRow: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dCROSS: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.Info2Descr#setJ2aNegated: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#setForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBox#setLengths: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.Info2Descr#setJ2lNegated: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.sTrimeshBoxColliderData#_cldTestSeparatingAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPR#setAnchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#setPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#addForceAtPos: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.sCylinderTrimeshColliderData#_cldTestCircleToEdgeAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideCylinderPlane#dCollideCylinderPlane: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideTrimeshBoxOld#SUBTRACT: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyGetLinearVel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodySetTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#getAngleRate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCollisionUtil#dVector3Length: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#setTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#setAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideTrimeshBoxOld#ADD: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#setAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointBall#setParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#setAnchor1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dSetCrossMatrixMinus: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxPlane#setParams: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#setParamLoStop2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxHeightfieldData#IsOnHeightfield2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyAddForceAtPos: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimAABBSet#gim_aabbset_update: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointBall#dJointGetBallParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeHelper#createBallJoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrix3C#dotRowCol: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DVector3#sub: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DHingeJoint#setAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#addForceAtRelPos: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#vectorFromWorld: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxPlane#getPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DUniversalJoint#setAnchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCollisionUtil#dClosestLineBoxPoints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#addForceAtRelPos: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#getPosRelPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DVector3#eqProd: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#getAngle1Rate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.BoneTrack#setKeyframes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGimpactCollision#Vector3Negate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBox#dBoxBox: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#getAngle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodySetMass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMatrix#dVectorScale: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointDHinge#dJointGetDHingeAnchor1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointDHinge#dJointGetDHingeAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGimpactCollision#Vector3Copy: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dMULTIPLYADD0_331: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#setFiniteRotationAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideTrimeshBox#GenerateContact: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointLMotor#dJointSetLMotorAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#getPosRelPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#dGeomGetPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DSliderJoint#setAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMatrix#dMultiply1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMatrix#dMultiply0: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DGeom#setOffsetPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMatrix#dMultiply2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dMULTIPLY1_331: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#addTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DSphere#getPointDepth: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DAABB#setMinMax: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyGetPosRelPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#dGeomGetOffsetPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#setParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#setAnchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DPistonJoint#setAnchorOffset: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dMULTIPLY0_133: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#addRelForceAtRelPos: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DDoubleHingeJoint#setAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#addTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollisionLibccd#ccdGeomToObj: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#getC: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#getI: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge#setAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#dJointGetPistonAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DRotation#dRFromZAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DVector3View#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.sCylinderBoxData#_cldClipCylinderToBox: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointBall#setRelativeValues: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#getParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DGeom#getPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#addForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#DxJointPiston(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCollisionUtil#dVector3Inv: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#getPositionRate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxHeightfield#dGeomRaySetNoNormalize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Rotation#dRFrom2Axes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointDBall#setAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointDBall#setAnchor1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrix3C#viewCol: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#setAnchorOffset: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrix3#viewCol: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.OdeJointsFactoryImpl#dJointCreatePiston: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#addRelForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyAddRelForceAtPos: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJoint#getAxis2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCylinder#computeAABB: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMisc#dMaxDifference: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxQuadTreeSpace#dQuadTreeSpaceCreate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#setLinearVel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#getRelPointVel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGimpactCollision#DVector3Tovec3f: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dAddVectorCross3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyVectorToWorld: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DAABB#setMin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DVector3#reAdd: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCollisionUtil#dVector3Subtract: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DAABB#shiftPos: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrix3C#dotCol: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#getAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DVector3#addScaled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideTrimeshBoxOld#LENGTHOF: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Torus#setGeometryData: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#getPointVel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyAddRelForceAtRelPos: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrix3#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxConvex#SupportIndex: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideTrimeshCCylinder#VEC_SCALE: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DAABB#setMax: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DRay#getDirection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#vectorToWorld: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dCalcVectorDot3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxRay#dGeomRaySet: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointDBall#getDistance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#getForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPU#setAxis1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#dJointSetPistonAnchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPU#setAxis3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Matrix#dIsPositiveDefinite: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCollisionUtil#answer: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dMultiply0_331: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPU#setAxisP: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#setParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointBall#dJointSetBallAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPU#dJointSetPUAnchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.SpatialTrack#setKeyframes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DVector3#dot: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#getAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#setParamSuspensionCFM: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DHinge2Joint#setAnchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.Info2Descr#setJ1aCrossMatrix: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DPlane#getPointDepth: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrix3#dMultiply0: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCollisionUtil#dVector3Copy: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrix3C#isEq: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#getOffsetPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideBoxPlane#FOO2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#dJointGetPistonAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DVector3#isEq: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyGetPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#addForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxPosR#R: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrix3C#dotRowRow: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointBall#getParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointSlider#setAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointUniversal#dJointSetUniversalAxis2Offset: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#vectorToWorld: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#setFiniteRotationAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DHinge2Joint#setAxis1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DHinge2Joint#setAxis2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxConvex#ComputeInterval: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dCopyVector3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#getParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimAABBSet#gim_aabbset_calc_global_bound: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Matrix#dSolveCholesky: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dCalcVectorCross3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dOrthogonalizeR: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DPUJoint#setAxisP: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DPUJoint#setAxis2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DPUJoint#setAxis1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DPUJoint#setAxis3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCollisionUtil#dClipPolyToCircle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrix3#isEqual: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DTransmissionJoint#setAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DTransmissionJoint#setAnchor1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#getRelPointPos: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyVectorFromWorld: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCollisionUtil#dVector3Scale: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMass#setBox: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DVector3#DVector3(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCollisionUtil#dQuatInvTransform: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBallJoint#setAnchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Rotation#dQFromAxisAndAngle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#addRelForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DPRJoint#setAnchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointDHinge#dJointGetDHingeDistance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#getAnchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointDHinge#dJointSetDHingeParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DVector3#reSub: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCollisionUtil#dLineClosestApproach: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#setParamLoStop: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#getInfo2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#setAxis2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#setAxis1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DTransmissionJoint#setAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.effect.ParticlePointMesh#initParticleData: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointSetTransmissionRatio: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMass#translate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DPistonJoint#setAnchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#setAnchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DHingeJoint#setAnchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#getAngle2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#getAngle1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideTrimeshBox#SET: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJoint#setAnchors: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointDHinge#dJointGetDHingeParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.CompactVector3Array#CompactVector3Array(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#setAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointDBall#setParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyAddTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#getAngularVel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#setAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#setLinearVel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyAddRelTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideBoxPlane#dCollideBoxPlane: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGimpactCollision#MakeMatrix: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJoint#getAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeHelper#createHinge2Joint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Rotation#dWtoDQ: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.shader.Uniform#setValue: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyAddForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DWorld#setGravity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DVector3#scale: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrix3#eqMul: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Dome#updateGeometry: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCollisionUtil#dCollideSpheres: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#setParamVel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingSphere#computeFromPoints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrix3C#dotRow: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dDOTpq: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCollisionUtil#dClosestLineSegmentPoints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideTrimeshBoxOld#GenerateContact: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.sCylinderTrimeshColliderData#_cldTestAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#dMassTranslate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#setParamVel2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPR#getInfo2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideTrimeshBox#POINTDISTANCE: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#setPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyGetRelPointVel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMass#getC: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMass#getI: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DCapsule#getPointDepth: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxWorld#setGravity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#translate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointSetTransmissionMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.sCylinderTrimeshColliderData#_CalculateAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dCalcMatrix3Det: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dMULTIPLYOP0_331: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxPosRC#R: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#getLinearVel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGimpactCollision#Vector3Add: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#setParamFMax: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideTrimeshBoxOld#CONSTRUCTPLANE: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointDBall#getParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointSetTransmissionAxis2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointSetTransmissionAxis1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBox#TST1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#getLinearVel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyAddRelForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#setForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#getParamHiStop2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DVector3#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointDHinge#dJointSetDHingeAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideTrimeshBox#GETCOL: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.ragdoll.DxRagdoll#autoDisable: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrix3#dotColCol: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#setParamSuspensionERP: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyAddForceAtRelPos: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.sTrimeshBoxColliderData#_cldClosestPointOnTwoLines: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJoint#getHingeAngleFromRelativeQuat: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxSphere#getPointDepth: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideTrimeshCCylinder#VEC_SUM: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DVector3C#dotCol: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.OdeJointsFactoryImpl#dJointCreateBall: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideTrimeshBox#ADD: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointSetTransmissionAnchor1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointSetTransmissionAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointConstrainedBall#getInfo2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.sCylinderTrimeshColliderData#TestOneTriangleVsCylinder: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dMultiplyAdd0_331: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#dJointGetPistonAnchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointUniversal#setAxis2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointUniversal#setAxis1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#getParamLoStop2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DVector3C#distance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrix3#viewRowT: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#getForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideTrimeshBox#CONSTRUCTPLANE: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DGeom#getOffsetPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DPlane#setParams: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#dJointGetHinge2Param: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterMeshFaceShape#setMeshes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxConvex#IsPointInPolygon: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrix3#dotCol: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.Info2Descr#setC: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#getAnchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DUniversalJoint#setAxis1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DUniversalJoint#setAxis2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DVector3View#dot: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointLimitMotor#addLimot: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Eigen3f#Eigen3f(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DDoubleBallJoint#setAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMass#setI: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DDoubleBallJoint#setAnchor1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCollisionUtil#dVector3Dot: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dPlaneSpace: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBox#computeAABB: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMass#setC: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#getInfo2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dSetCrossMatrixPlus: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#setPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodySetLinearVel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#setParamHiStop2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointSlider#getInfo2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxPosRC#pos: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointBall#dJointSetBallAnchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DPRJoint#setAxis2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DPRJoint#setAxis1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxPlane#getPointDepth: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.Info2Descr#setJ2aCrossMatrix: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dSubtractVectorCross3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#addRelTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBox#getPointDepth: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideTrimeshBoxOld#SET: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DVector3C#isEq: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#addRelForceAtPos: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointUniversal#dJointSetUniversalAnchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Matrix#dMultiply1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Matrix#dMultiply2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Matrix#dMultiply0: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dAddScaledVectors3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#setAngularVel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxQuadTreeSpace#DxQuadTreeSpace(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointDHinge#dJointSetDHingeAnchor1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.sTrimeshBoxColliderData#_cldClipping: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointDHinge#dJointSetDHingeAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.sTrimeshBoxColliderData#_cldTestOneTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.PQTorus#updateGeometry: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.math.DVector3#eqSum: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.sCylinderBoxData#PerformCollisionChecking: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyGetAngularVel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#setParamHiStop: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointDHinge#setAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.environment.util.BoundingSphereDebug#setGeometryData: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DAABB#expand: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointUniversal#setAnchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dMULTIPLYOP0_133: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DAMotorJoint#setAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#setParamFMax2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#getPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dCalcVectorDot3_14: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.effect.ParticleTriMesh#initParticleData: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#_dSafeNormalize3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodySetAngularVel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#getTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DVector3C#dot: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointDBall#DxJointDBall(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideTrimeshBoxOld#POINTDISTANCE: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.OdeJointsFactoryImpl#dJointCreateDBall: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.sCylinderTrimeshColliderData#_cldTestSeparatingAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#getPointVel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointBall#getAnchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#getPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideTrimeshBoxOld#GETCOL: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodySetFiniteRotationAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBallJoint#setAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeHelper#createQuadTreeSpace: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPR#setAxis2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPR#setAxis1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#getRelPointVel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGimpactCollision#TransformVector3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointDBall#dJointGetDBallParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dCalcVectorDot3_41: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DVector3C#reSub: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dMULTIPLYOP1_331: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dCalcVectorDot3_44: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointDBall#dJointSetDBallParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DVector3RowTView#DVector3RowTView(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrix3#dotRowCol: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Rotation#dDQfromW: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxRay#set: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGimpactCollision#Vector3Subtract: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.sTrimeshBoxColliderData#_cldTestNormal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.sCylinderBoxData#_cldTestSeparatingAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxPlane#getNormal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#setC: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#setOffsetPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBox#getLengths: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCapsule#computeAABB: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#setI: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointBall#dJointGetBallAnchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointBall#setAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointLimitMotor#addTwoPointLimot: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#getAngularVel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DVector3#eqCross: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.Info2Descr#setJ1a: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#setAngularVel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.Info2Descr#setJ1l: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.sCylinderTrimeshColliderData#_cldClipCylinderEdgeToTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.Info2Descr#setJ2a: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyGetTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.Info2Descr#setJ2l: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointBall#DxJointBall(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Box#duUpdateGeometryVertices: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.math.DVector3#eqDiff: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#computeOBB: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.util.BufferUtils#getVector3Array: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxRay#getDirection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#addRelForceAtRelPos: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointUniversal#dJointSetUniversalAxis1Offset: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyGetRelPointPos: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.sCylinderBoxData#_cldTestEdgeCircleAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointBall#getAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Capsule#rotate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.DGeom#getRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxGeom#setOffsetRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxGeom#getOffsetRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.math.LineSegment#getDirection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.animation.SpatialTrack#setTime: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.renderer.Camera#setRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.dynamics.joint.WheelJoint#getAnchor1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.math.Vector3f#generateOrthonormalBasis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.math.Quaternion#Quaternion(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.geometry.Ellipse#rotate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.geometry.decompose.DoubleEdgeList#getYMonotonePolygons: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.DBody#getFiniteRotationMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.geometry.HalfEllipse#getRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJointAMotor#dJointSetAMotorNumAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.DGeom#setOffsetWorldQuaternion: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.dynamics.Island#Island(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxGeom#dGeomGetRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.cinematic.events.CinematicEventListener#onPlay: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.effect.ParticlePointMesh#updateParticleData: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.input.ChaseCamera#onAnalog: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.animation.Bone#setLocalRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.dynamics.AABBBroadphaseFilter#isAllowed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJointHinge#dJointSetHingeAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.DSapSpace#AXES(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.math.DQuaternion#add: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.geometry.HalfEllipse#getAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
net.smert.jreactphysics3d.constraint.FixedJoint#solvePositionConstraint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.math.Quaternion#slerp: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.DGeom#setQuaternion: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.DBody#getRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.scene.Spatial#rotateUpTo: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
net.smert.jreactphysics3d.engine.DynamicsWorld#getSleepLinearVelocity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.math.Quaternion#fromAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
net.smert.jreactphysics3d.constraint.ContactPoint#getPenetrationImpulse: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.animation.Bone#setUserTransformsInModelSpace: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.DBody#setQuaternion: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.scene.Geometry#computeWorldMatrix: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.scene.Spatial#lookAt: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.animation.CompactQuaternionArray#CompactQuaternionArray(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
net.smert.jreactphysics3d.constraint.FixedJoint#solveVelocityConstraint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJointHinge#getParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.DGeom#setOffsetQuaternion: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJointSlider#dJointSetSliderAxisDelta: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.input.AbstractJoystick#getAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.input.Joystick#getAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.input.ChaseCamera#setRotationSensitivity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.animation.Bone#setAnimTransforms: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxGeom#setQuaternion: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJointUniversal#dJointSetUniversalAxis1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJointUniversal#dJointSetUniversalAxis2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#getFiniteRotationMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.AbstractJoystick#getAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.FixedJoint#FixedJoint(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointDHinge#DxJointDHinge(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Transform#rotate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#computePosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyGetRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge#dJointSetHingeAnchorDelta: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Rectangle#getRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#dGeomSetRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.AnimationFactory#addTimeRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.FlyByCamera#onAction: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#Camera(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.app.ChaseCameraAppState#setMaxVerticalRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#dGeomGetOffsetRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#getWorldRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DGeom#setRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#setLocalRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DQuaternion#DQuaternion(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DGeom#getQuaternion: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.NewtonianParticleInfluencer#getSurfaceTangentRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.WeldJoint#WeldJoint(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge#dJointGetHingeAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Ellipse#getAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Quaternion#subtract: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.FlyByCamera#mapJoystick: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.collision.AbstractCollidable#rotate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge#getAngle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.FlyByCamera#registerWithInput: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Transform#setOrientation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#getDownRotateOnCloseViewOnly: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.app.ChaseCameraAppState#onAction: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DQuaternion#isEq: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.AbstractShape#rotate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#onAction: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DQuaternion#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.AnimationFactory#addKeyFrameTransform: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyGetFiniteRotationAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Rotation#dQfromR: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodySetRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointUniversal#DxJointUniversal(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#getRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.app.ChaseCameraAppState#rotateCamera: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeHelper#createHingeJoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.HingeJoint#solveVelocityConstraint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Convex#getAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge#getAngleRate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge#setParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#setOffsetWorldQuaternion: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Quaternion#add: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.Bone#blendAnimTransforms: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DRotation#dRfromQ: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.collision.AbstractCollidable#rotateAboutCenter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge#setParamBounce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Quaternion#fromAngles: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Quaternion#set: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.CompactQuaternionArray#serialize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPR#DxJointPR(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#setMaxVerticalRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.Bone#getOffsetTransform: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodySetFiniteRotationMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.app.ChaseCameraAppState#setMinVerticalRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Quaternion#multiply: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMass#rotate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.app.DebugKeyListener#onAction: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.collision.Collidable#rotateAboutCenter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.CompactQuaternionArray#deserialize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.Bone#getModelBindInverseTransform: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dxStepBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#dJointSetPistonAxisDelta: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.CompactQuaternionArray#getElementClass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.app.ChaseCameraAppState#initTogleRotateInput: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Rotation#dQSetIdentity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.HalfEllipse#getFarthestPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.FlyByCamera#unregisterInput: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#zoomCamera: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Rotation#dQMultiply2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Rotation#dQMultiply1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Rotation#dQMultiply3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Rotation#dQMultiply0: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DGeom#getOffsetRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Quaternion#normalizeLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#dGeomGetOffsetQuaternion: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.FixedJoint#initBeforeSolve: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Transform#Transform(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.MotionEvent#needsDirection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPU#setRelativeValues: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.FlyByCamera#rotateCamera: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.HingeJoint#initBeforeSolve: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.HingeJoint#solvePositionConstraint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#setToggleRotationTrigger: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.SliderJoint#initBeforeSolve: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.Bone#getWorldBindRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#setMinVerticalRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.control.CameraControl#controlUpdate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge#getAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#getRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Quaternion#add: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DLMotorJoint#setNumAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#getHorizontalRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge#setParamVel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.SliderJoint#solvePositionConstraint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Quaternion#addLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Transform#setRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Quaternion#identity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.AngleJoint#getJointAngle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.MotionEvent#getRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.instancing.InstancedGeometry#updateInstance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DGeom#setOffsetWorldRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge#dJointGetHingeAnchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.BallAndSocketJoint#initBeforeSolve: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#getQuaternion: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge#getAnchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.Rotation#set: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#getInfo1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#getInfo2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Slice#getRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Quaternion#Slerp: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.control.BillboardControl#rotateScreenAligned: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Misc#dMakeRandomVector: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#dGeomSetQuaternion: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyCreate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#setRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.Bone#getBindRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Transform#Interpolate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointSlider#DxJointSlider(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPR#computeInitialRelativeRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeHelper#createSapSpace: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#setOffsetQuaternion: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge#getAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.control.BillboardControl#controlRender: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RevoluteJoint#getJointAngle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RevoluteJoint#RevoluteJoint(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Quaternion#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RevoluteJoint#solvePositionConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Quaternion#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DLMotorJoint#getNumAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointSlider#setRelativeValues: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#dJointSetPistonAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointFixed#DxJointFixed(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge#setParamFMax: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyCopyRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPR#dJointSetPRAxis2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPR#dJointSetPRAxis1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.Bone#getLocalRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix3f#set: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.AbstractJoystick#getAxisCount: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Rotation#DQFR_case_1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Rotation#DQFR_case_2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#getLocalRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Rotation#DQFR_case_0: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Transform#getRotationTransform: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointLMotor#getNumAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#setEnabled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Transform#getRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.AngleJoint#AngleJoint(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Quaternion#dot: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.MotorJoint#MotorJoint(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#isDragToRotate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#setRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.Bone#setUserTransformsWorld: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.FlyByCamera#onAnalog: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.Bone#getModelBindInverseRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#normalize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.Bone#setBindTransforms: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.WheelJoint#getAngularTranslation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.Bone#updateModelTransforms: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge#DxJointHinge(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointFixed#dJointSetFixed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.SliderJoint#SliderJoint(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#setFrame: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.FlyByCamera#setEnabled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Settings#getMaximumRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointLMotor#dJointSetLMotorNumAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.AnimationFactory#addTimeRotationAngles: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge#setRelativeValues: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.app.ChaseCameraAppState#getMaxVerticalRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Capsule#getRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#setInverseRotationRadians: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.OdeJointsFactoryImpl#dJointCreateHinge: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.SliderJoint#solveVelocityConstraint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#getRotationSensitivity: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Quaternion#conjugate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Quaternion#set: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DRotation#dQMultiply1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DRotation#dQMultiply0: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DRotation#dQMultiply3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DRotation#dQMultiply2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Quaternion#inverseLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.Bone#getCombinedTransform: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Ellipse#getRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#computeInitialRelativeRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.AnimationFactory#AnimationFactory(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.Bone#setUserTransforms: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.app.ChaseCameraAppState#isDragToRotate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DRotation#dQfromR: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DRotation#dQFromAxisAndAngle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.opencl.Kernel#setArg: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#setTrailingRotationInertia: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Quaternion#fromRotationMatrix: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Quaternion#inverse: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#getFiniteRotationAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#getRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.NewtonianParticleInfluencer#setSurfaceTangentRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.audio.AudioListenerState#render: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMisc#dMakeRandomVector: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#multLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.Bone#getBindInverseTransform: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#getFiniteRotationAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPU#dJointSetPUAxis1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Quaternion#zero: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPU#dJointSetPUAxis2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPU#dJointSetPUAxis3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#setAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge#setParamLoStop: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Quaternion#toAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.Rotation#Rotation(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Transform#getRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointSlider#dJointSetSliderAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.audio.Listener#getRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeHelper#createDHingeJoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#rotate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.AnimationFactory#addKeyFrameRotationAngles: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#setHideCursorOnRotate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Quaternion#nlerp: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DQuaternion#sum: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointLMotor#getInfo2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointLMotor#setNumAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Quaternion#setZ: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.collision.narrowphase.Sat#detect: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Quaternion#setY: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Quaternion#setX: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Quaternion#setW: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.Bone#getModelSpaceRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.app.ChaseCameraAppState#setToggleRotationTrigger: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#setFiniteRotationMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.AbstractJoystick#addAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Rotatable#rotate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Circle#getAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Rotation#dRtoQ: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.FlyByCamera#isDragToRotate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointDHinge#getAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#setOffsetWorldRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge#dJointSetHingeParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge#dJointGetHingeAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointSlider#computeInitialRelativeRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Transform#toTransformMatrix: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge#dJointSetHingeAxisOffset: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointFixed#computeInitialRelativeRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#setDownRotateOnCloseViewOnly: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#getNumAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#setFiniteRotationMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Quaternion#normalize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#getTrailingRotationInertia: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyGetFiniteRotationMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PrismaticJoint#PrismaticJoint(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge#setAxisOffset: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Transform#setRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPR#setRelativeValues: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCollisionUtil#dQuatInv: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.audio.Listener#setRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#setNumAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Quaternion#getRotationAngleAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCollisionUtil#dQuatTransform: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#getMaxVerticalRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxPlane#getRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.HingeJoint#HingeJoint(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge#computeInitialRelativeRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Transform#getOrientation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#getVerticalRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointUniversal#setRelativeValues: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DGeom#setOffsetRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Quaternion#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Quaternion#subtractLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.ragdoll.DxRagdollBody#getQuaternion: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.AnimationFactory#addKeyFrameRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DQuaternion#scale: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Vector2#rotate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Shape#rotateAboutCenter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Quaternion#inverse: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#isHideCursorOnRotate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#setRelativeValues: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.OdeJointsFactoryImpl#dJointCreateDHinge: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.BallAndSocketJoint#solvePositionConstraint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.AnimationFactory#interpolate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DGeom#getOffsetQuaternion: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Quaternion#dot: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DAMotorJoint#setNumAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.SpatialTrack#getRotations: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.app.ChaseCameraAppState#registerWithInput: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.app.ChaseCameraAppState#getMinVerticalRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.effect.ParticleMesh#updateParticleData: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#dGeomSetOffsetWorldRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#dJointGetAMotorNumAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge#setParamHiStop: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#setRotationQuaternion: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.AnimationFactory#getRotationForFrame: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DAMotorJoint#getNumAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DQuaternion#set: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeMath#dNormalize4: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge#dJointGetHingeParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#getMinVerticalRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.app.ChaseCameraAppState#setDragToRotate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.BoneTrack#getRotations: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#setDragToRotate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.animation.Bone#getWorldBindInverseRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointLMotor#dJointGetLMotorNumAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Matrix4f#toRotationQuat: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.input.FlyByCamera#setDragToRotate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.OdeJointsFactoryImpl#dJointCreateHinge2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#setRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.ragdoll.DxRagdoll#getBones: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxBody#setAutoDisableLinearThreshold: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.ragdoll.DxRagdoll#addUniversalJoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.util.BufferUtils#createVector3Buffer: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.dynamics.joint.AngleJoint#setLowerLimit: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.dynamics.Body#applyTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxWorld#dWorldGetAutoDisableFlag: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxBody#setDynamic: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.Step#dxStepIsland: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxBody#dBodySetAngularDampingThreshold: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
net.smert.jreactphysics3d.engine.Impulse#Impulse(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.dynamics.joint.RopeJoint#setLimitsEnabled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxBody#getMaxAngularSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
net.smert.jreactphysics3d.mathematics.Quaternion#subtract: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.dynamics.joint.WheelJoint#getAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.cinematic.KeyFrame#isEmpty: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.CollideCapsuleCapsule#dCollideCapsuleCapsule: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxBody#setDampingDefaults: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.dynamics.World#step: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxBody#getAngularDamping: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxBody#enable: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.geometry.Triangle#contains: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxBody#setAngularDamping: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.dynamics.joint.WeldJoint#solveVelocityConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxBody#dBodySetLinearDampingThreshold: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJointTransmission#dJointGetTransmissionAnchor1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.Step#dxEstimateMemoryRequirements: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJointTransmission#dJointGetTransmissionAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJoint#getAnchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxGeom#dGeomGetBodyNext: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJointPU#dJointGetPUAngle1Rate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.dynamics.DetectResult#setFixture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.material.ShaderGenerationInfo#getVertexUniforms: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.DBody#getNumJoints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.BodyMoveCallBack#run: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxGeom#getOffsetQuaternion: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.processmem.DxSingleIslandCallContext#GetSelectedIslandJointsA: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.dynamics.contact.SolvedContactPoint#SolvedContactPoint(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.dynamics.DetectResult#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.dynamics.RaycastResult#setBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.DBox#getLengths: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.dynamics.joint.MotorJoint#setAngularTarget: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.dynamics.World#isEmpty: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.dynamics.DetectBroadphaseFilter#isAllowed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.OdeHelper#createBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
net.smert.jreactphysics3d.constraint.BallAndSocketJoint#BallAndSocketJoint(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxBody#setMaxAngularSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.processmem.DxSingleIslandCallContext#GetSelectedIslandJointsP: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.dynamics.World#containsJoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.material.Material#setTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
net.smert.jreactphysics3d.constraint.SliderJoint#setMaxMotorForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeHelper#connectingJoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PinJoint#getAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.ragdoll.DxRagdoll#addConstrainedBallJoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.Node#updateWorldBound: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointLMotor#setAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RevoluteJoint#setMotorSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.ContactEdge#ContactEdge(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Quad#Quad(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.BallAndSocketJointInfo#BallAndSocketJointInfo(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RopeJoint#setUpperLimit: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#DxBody(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJoint#destroy: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RevoluteJoint#setLimits: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyGetJoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.WarmStartingContactManager#updateAndNotify: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.DynamicsWorld#notifyRemovedOverlappingPair: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Island#clear: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RopeJoint#solveVelocityConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.processmem.DxStepperProcessingCallContext#m_islandJointsCount: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#dJointGetHinge2Axis1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#dJointGetHinge2Axis2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.processmem.DxStepperProcessingCallContext#m_islandBodiesStartA: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RopeJoint#setLimits: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyGetMass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.processmem.DxWorldProcessIslandsInfo#GetJointsArrayP: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.Joint#isActive: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJoint#dJointGetBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge#dJointAddHingeTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.World#addJoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.processmem.DxSingleIslandCallContext#GetSelectedIslandBodiesA: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#dGeomSetOffsetWorldPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.ragdoll.DRagdollConfig#getJoints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#isKinematic: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyGetNextGeom: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPR#dJointGetPRPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointUniversal#dJointGetUniversalAngle1Rate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodySetAutoDisableAverageSamplesCount: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJoint#getBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#removeFixtures: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.RaycastAdapter#allow: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJoint#DxJoint(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.AngleJoint#setUpperLimit: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.processmem.DxSingleIslandCallContext#GetSelectedIslandJointsEndP: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.ConvexCastResult#ConvexCastResult(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.WheelJoint#getAngularSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#dJointGetHinge2Angle2Rate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxWorld#dWorldSetAutoDisableFlag: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.World#getBodyCount: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPU#dJointSetPUAnchorDelta: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Constraint#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#getInfo2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyIsEnabled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxWorld#dInternalHandleAutoDisabling: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodySetAutoDisableSteps: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodySetAutoDisableAngularThreshold: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.body.Body#getBodyID: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#updateMass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.BodyIndexPair#BodyIndexPair(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.ragdoll.DxRagdoll#adjustMass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.HingeJoint#resetLimits: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyGetLinearDamping: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.HingeJoint#setMaxMotorTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPU#dJointGetPUPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#isAutoSleepingEnabled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.World#setBroadphaseDetector: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.DynamicsWorld#getRigidBodies: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyGetAngularDamping: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.OdeJointsFactoryImpl#dConnectingJointList: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Capacity#Capacity(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.RaycastBroadphaseFilter#isAllowed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#setDamping: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodySetAngularDamping: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointConstrainedBall#DxJointConstrainedBall(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Capacity#hashCode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.OdeJointsFactoryImpl#dJointAttach: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPU#dJointSetPUAnchorOffset: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#setAutoDisableFlag: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.ContactSolver#computeMixedRestitutionFactor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#removeFixture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DJoint#getBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.Island#getBodies: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#dJointGetPistonPositionRate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.ContactConstraint#ContactConstraint(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#measureAngle2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#measureAngle1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.ConstraintSolver#solvePositionConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.ContactConstraintId#hashCode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#computeGlobalAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJoint#dJointAttach: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#setBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.FrictionJoint#initializeConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.CollisionDetection#broadPhaseNotifyRemovedOverlappingPair: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#setMovedCallback: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.SliderJoint#setMotorSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.collision.AxisAlignedBounds#isOutside: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.ContactPoint#getLocalPointOnBody2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.ContactPoint#getLocalPointOnBody1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.World#getJoints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#getNumJoints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.ragdoll.DxRagdoll#addHingeJoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.AngleJoint#setLimitEnabled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyGetFirstGeom: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.dxStepperStage0JointsCallContext#dxStepperStage0JointsCallContext(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#dGeomSetBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#dJointGetAMotorAngleRate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxWorld#dWorldSetLinearDamping: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Island#add: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPU#dJointGetPUAnchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.ConvexCastResult#setFixture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.broadphase.PairManager#reallocatePairs: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.ContactConstraint#getFixture1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.ContactConstraint#getFixture2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.DynamicsWorld#setInterpolationFactorToAllBodies: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxQuickStep#dxQuickStepIsland_Stage3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RevoluteJoint#getAnchor1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RevoluteJoint#getAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxQuickStep#dxQuickStepIsland_Stage1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#dJointGetHinge2Angle1Rate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointGroup#exportJoints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.DestructionAdapter#destroyed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.processmem.DxStepperProcessingCallContext#GetSelectedIslandJointsEnd: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Constraint#getBody1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Constraint#getBody2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointDBall#dJointGetDBallAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointDBall#dJointGetDBallAnchor1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyEnable_noAdis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.ContactConstraintId#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointDHinge#getInfo2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.ConvexCastListener#allow: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.ContactSolver#applySplitImpulse: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.TimeOfImpactSolver#solve: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.ContactManifold#addContactPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#getLinearDampingThreshold: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#setAutoDisableAngularThreshold: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.DynamicsWorld#resetContactManifoldListsOfBodies: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#dCollide: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.MotorJoint#setLinearTarget: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#getAngularDampingThreshold: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxQuickStep#dxEstimateMemoryRequirements: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.ContactSolver#applyImpulse: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PulleyJoint#solveVelocityConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.World#shift: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeHelper#areConnected: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.BodyIterator#remove: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#applyForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.World#containsBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodySetAutoDisableTime: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.processmem.DxWorldProcessIslandsInfo#BuildIslandsAndEstimateStepperMemoryRequirements: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.ConvexCastAdapter#allow: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.OdeJointsFactoryImpl#_dAreConnected: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Capacity#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RopeJoint#RopeJoint(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodySetGyroscopicMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#setMovedCallback: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DBody#isConnectedTo: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.Joint#getBody2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.Joint#getBody1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#isActive: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.OdeJointsFactoryImpl#_dAreConnectedExcluding: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.broadphase.PairManager#findPairWithHashValue: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJoint#getAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.BodyIterator#BodyIterator(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPlane2D#getInfo2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.processmem.DxWorldProcessIslandsInfo#AssignInfo: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Constraint#Constraint(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#getGyroscopicMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.ContactSolver#ContactSolver(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RopeJoint#getAnchor1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RopeJoint#getAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.BroadPhasePair#newBodiesIndexPair: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.ragdoll.DxRagdollBody#getBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge#getInfo1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.ContactConstraintId#ContactConstraintId(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.SimpleContactManager#postSolveNotify: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointSlider#dJointAddSliderForce: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxQuickStep#dxQuickStepIsland_Stage0_Joints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#getInContactBodies: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#makeV1andV2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointConstrainedBall#setAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.Impulse#getLinearImpulseBody2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.Impulse#getLinearImpulseBody1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodySetKinematic: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.World#removeJoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#setAutoSleepingEnabled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeHelper#areConnectedExcluding: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RevoluteJoint#setLowerLimit: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RopeJoint#setUpperLimitEnabled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.RaycastResult#getBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.FrictionJoint#getAnchor1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.FrictionJoint#getAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.ContactPoint#getBody2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyIsKinematic: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.ContactPoint#getBody1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxQuickStep#SOR_LCP: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#getBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderGenerator#generateDeclarationAndMainBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointUniversal#dJointAddUniversalTorques: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#getMass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.DynamicsWorld#notifyNewContact: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPR#dJointGetPRPositionRate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.AngleJoint#getAnchor1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.AngleJoint#getAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#isConnectedTo: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.RaycastListener#allow: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#dJointAddHinge2Torques: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.DynamicsWorld#DynamicsWorld(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.ContactConstraintId#getBody2Id: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.ConvexCastResult#setBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#dJointGetAMotorAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RopeJoint#initializeConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodySetAutoDisableDefaults: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.ContactPoint#getBody2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.ContactPoint#getBody1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#getAxisInfo: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.ConvexCastResult#getBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#getAutoDisableSteps: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.Island#addJoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.World#getDetectBroadphaseFilter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.DynamicsWorld#setIsSleepingEnabled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RevoluteJoint#setUpperLimit: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyGetWorld: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyGetData: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.DetectAdapter#allow: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#getJoints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxQuickStep#dxQuickStepIsland: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#dJointGetPistonPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#isInContact: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.processmem.DxIslandsProcessingCallContext#ThreadedProcessJobStart: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxWorld#DxWorld(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPR#dJointAddPRTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#setAngularDampingThreshold: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#setLinearDamping: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyGetAutoDisableFlag: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.BodyIndexPair#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#computePosr: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.processmem.DxIslandsProcessingCallContext#ThreadedProcessIslandSearch: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.OdeFactoryImpl#checkWorld: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PrismaticJoint#getJointSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.body.RigidBody#removeJointFromJointsList: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodySetDynamic: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointDBall#updateTargetDistance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.CollisionWorld#computeNextAvailableBodyID: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointGetTransmissionAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.ContactSolver#initializeContactConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#setActive: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Common#dUASSERT: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#dJointAddAMotorTorques: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.DistanceJoint#solvePositionConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#dJointGetPistonAngleRate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#isAsleep: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#isBullet: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PinJoint#setTarget: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#getFirstGeom: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.GJK.GJKAlgorithm#GJKAlgorithm(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.BallAndSocketJoint#warmstart: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.World#getJoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodySetMovedCallback: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyGetNumJoints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#getJoinedBodies: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PrismaticJoint#setLowerLimit: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.Island#getNumJoints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#getInfo1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.FixedJointInfo#FixedJointInfo(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PulleyJoint#setLength: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PulleyJoint#PulleyJoint(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.broadphase.PairManager#removePairWithHashValue: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodySetData: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.processmem.DxStepperProcessingCallContext#m_islandJointsStartA: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#destroy: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointContact#getInfo2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.ContactPointInfo#getBody2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.ContactPointInfo#getBody1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#disable: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.AngleJoint#setLimits: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.World#getBodyIterator: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#setMassType: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.SliderJoint#resetLimits: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.ConvexCastResult#getFixture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#setAutoDisableTime: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.AngleJoint#solveVelocityConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.ContactPointInfo#setBody2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.ContactPointInfo#setBody1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.DetectListener#allow: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.ContactSolver#solve: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyGetAngularDampingThreshold: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#getContacts: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#isFlagsGyroscopic: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.body.RigidBody#getJointsList: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.ContactManifold#getIndexToRemove: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#setMass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.MotorJoint#getAnchor1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.MotorJoint#getAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyEnable: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PrismaticJoint#setMotorSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.World#removeAllBodies: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.World#removeBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RopeJoint#setLowerLimitEnabled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.ragdoll.DxRagdoll#setAngularDamping: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#getAutoDisableAverageSamplesCount: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Capacity#getBodyCount: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.World#getBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxQuickStep#compute_invM_JT: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.SequentialImpulses#solveVelocityContraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxWorld#dWorldSetAngularDamping: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PulleyJoint#setRatio: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.HingeJoint#enableMotor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyGetAutoDisableLinearThreshold: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.ConstraintSolver#initializeForIsland: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodySetMaxAngularSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.BodyIterator#next: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.RaycastResult#getFixture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.DynamicsWorld#resetBodiesMovementVariable: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#setGravityMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PrismaticJoint#setMotorEnabled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.DynamicsWorld#updateOverlappingPair: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxSAPSpace#collideGeomsNoAABBs: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxQuickStep#dxQuickStepIsland_Stage2a: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxQuickStep#dxQuickStepIsland_Stage2b: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyDestroy: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Step#run: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#getData: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.broadphase.BodyPair#newBodiesIndexPair: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.DistanceJoint#DistanceJoint(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.processmem.dmemestimate_fn_t#dxEstimateMemoryRequirements: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodySetGravityMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.ContactConstraint#getBody1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.ContactConstraint#getBody2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyCopyPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.DetectResult#DetectResult(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.RaycastResult#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#getLinearDamping: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.DynamicsWorld#integrateRigidBodiesVelocities: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.HingeJoint#setMotorSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.PersistedContactPoint#PersistedContactPoint(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPR#getInfo1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#getAutoDisableTime: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.WheelJoint#setFrequency: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#addFixture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.processmem.DxWorldProcessMemArena#AllocateArrayDxBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.SequentialImpulses#warmStart: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodySetAutoDisableLinearThreshold: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Step#dxStepIsland_Stage3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#setBullet: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.World#World(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.OverlappingPair#update: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.DynamicsWorld#initVelocityArrays: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PrismaticJoint#setLimits: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.DistanceJoint#solveVelocityConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#getAutoDisableAngularThreshold: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodySetDamping: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPU#getInfo2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodySetDampingDefaults: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PulleyJoint#initializeConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJoint#dJointGetNumBodies: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.broadphase.PairManager#lookForAPair: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.ragdoll.DxRagdoll#getJoints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.WheelJoint#solvePositionConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PulleyJoint#solvePositionConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPR#dJointGetPRAngleRate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.ragdoll.DxRagdoll#destroy: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.body.RigidBody#setJointsList: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.RaycastResult#RaycastResult(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.SequentialImpulses#solvePositionContraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.ContactPoint#setWorldPointOnBody2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RevoluteJoint#setMotorEnabled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.ContactPoint#setWorldPointOnBody1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.processmem.DxSingleIslandCallContext#DxSingleIslandCallContext(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.ragdoll.DxRagdoll#addFixedJoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.JointEdge#JointEdge(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.processmem.DxWorldProcessIslandsInfo#GetBodiesArray: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.DistanceJoint#getAnchor1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.DistanceJoint#getAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#dGeomClearOffset: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#collideAABBs: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.Island#Island(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.broadphase.PairManager#findPair: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.broadphase.PairManager#computePairOffset: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#dGeomGetBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.Joint#isActive: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.DetectResult#getBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPR#dJointGetPRAnchor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJoint#isEnabledAndDynamic: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.InteractionEdge#InteractionEdge(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyGetLinearDampingThreshold: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#bodyRemove: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#setAutoDisableSteps: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PrismaticJoint#getAnchor1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PrismaticJoint#getAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.ContactConstraintId#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PrismaticJoint#getJointTranslation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.WheelJoint#setMotorEnabled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPU#dJointGetPUAngle2Rate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#setData: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.OdeFactoryImpl#dTestDataStructures: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.SliderJointInfo#SliderJointInfo(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.ContactSolver#warmStart: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#getAutoDisableFlag: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.PersistedContactPoint#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.processmem.DxSingleIslandCallContext#AssignIslandSelection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.Impulse#getAngularImpulseBody2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.Impulse#getAngularImpulseBody1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyDisable: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.DistanceJoint#setDistance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.ContactManifold#update: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.processmem.DxStepperProcessingCallContext#AssignIslandSelection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJoint#removeJointReferencesFromAttachedBodies: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.SimpleContactManager#updateAndNotify: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#applyImpulse: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RevoluteJoint#getJointSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RopeJoint#solvePositionConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.WheelJoint#setMaximumMotorTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#dJointSetHinge2Axis2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#dJointSetHinge2Axis1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeHelper#connectingJointList: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.DetectResult#setBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#removeAllFixtures: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointSlider#dJointGetSliderPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DGeom#setBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.OdeJointsFactoryImpl#dConnectingJoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJoint#attach: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.BodyIterator#hasNext: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.World#getJointCount: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#dGeomSetOffsetPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.WeldJoint#getAnchor1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.WeldJoint#getAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.SliderJoint#enableMotor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#setAutoDisableAverageSamplesCount: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.DestructionListener#destroyed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#computeEulerAngles: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointLMotor#computeGlobalAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.World#removeAllBodiesAndJoints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.ContactPoint#getFixture2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.ContactPoint#getFixture1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.WheelJoint#getLinearSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#getGravityMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.broadphase.BodyPair#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxSAPSpace2#collideGeomsNoAABBs: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#isEnabled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.DynamicsWorld#addJointToBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#DESTRUCTOR: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointDHinge#dJointGetDHingeAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.Island#getJoints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge#dJointGetHingeAngleRate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#getAutoDisableLinearThreshold: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointSlider#dJointGetSliderPositionRate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.SimpleContactManager#preSolveNotify: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.RaycastResult#setFixture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.broadphase.PairManager#isDifferentPair: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.World#getBodies: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#setOnIsland: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyGetAutoDisableAverageSamplesCount: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.body.Body#Body(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#setRelativeValues: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.ContactSolver#computeMixedFrictionCoefficient: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.ContactConstraint#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyGetAutoDisableTime: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Step#dxEstimateStepMemoryRequirements: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PinJoint#solveVelocityConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PulleyJoint#getAnchor2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.ContactPoint#ContactPoint(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PulleyJoint#getAnchor1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPiston#dJointGetPistonAngle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.ConvexCastResult#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyGetMaxAngularSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.DynamicsWorld#updateRigidBodiesAABB: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.Island#addBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.CollisionDetection#broadPhaseNotifyAddedOverlappingPair: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.DynamicsWorld#computeIslands: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#getNextGeom: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.WheelJoint#setDampingRatio: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPU#dJointGetPUPositionRate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#setGyroscopicMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Step#dxStepIsland_Stage0_Joints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge2#makeW1andW2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#setLinearDampingThreshold: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodySetAutoDisableFlag: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyGetGyroscopicMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Capacity#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointUniversal#getAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#DxGeom(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#setKinematic: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PrismaticJoint#setLimitEnabled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.ContactPoint#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointAMotor#setEulerReferenceVectors: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyGetAutoDisableSteps: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.DetectResult#getFixture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#setAsleep: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.processmem.DxWorldProcessIslandsInfo#GetJointsArray: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.World#setDetectBroadphaseFilter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Step#dxStepIsland_Stage2b: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.ContactPoint#getWorldPointOnBody1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointGetTransmissionAxis1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Step#dxStepIsland_Stage2c: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointTransmission#dJointGetTransmissionAxis2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.ContactPoint#getWorldPointOnBody2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.DynamicsWorld#resetBodiesForceAndTorque: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.WheelJoint#getLinearTranslation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DJoint#attach: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxWorld#dWorldDestroy: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointUniversal#dJointGetUniversalAngle2Rate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RopeJoint#setLowerLimit: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#getJoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.BodyFixture#BodyFixture(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodySetLinearDamping: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.World#getBroadphaseDetector: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.broadphase.BodyPair#hashCode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxWorld#dWorldSetMaxAngularSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PrismaticJoint#setUpperLimit: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PulleyJoint#getLength1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PulleyJoint#getLength2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyGetGravityMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxQuickStep#run: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.WheelJoint#setMotorSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.DynamicsWorld#setJointsPositionCorrectionTechnique: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#bodyAdd: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#dGeomCreateOffset: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.DynamicsWorld#notifyAddedOverlappingPair: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.processmem.DxStepperProcessingCallContext#m_islandJointsStartOfs: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PrismaticJoint#getAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.WheelJoint#getAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointHinge#dJointGetHingeAngle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.ContactSolver#initializeForIsland: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.processmem.DxStepperProcessingCallContext#DxStepperProcessingCallContext(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.World#raycast: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.DynamicsWorld#updateSleepingBodies: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.DynamicsWorld#getNumJoints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointPR#dJointGetPRAngle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.ContactPoint#ContactPoint(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.World#addBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.joints.DxJointSlider#computeOffset: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingBox#transform: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.DGeom#copyRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.renderer.Camera#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.scene.SimpleBatchNode#getTransformMatrix: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.math.Transform#fromTransformMatrix: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.effect.ParticleEmitter#renderFromControl: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.renderer.Camera#copyFrom: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxGeom#copyRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxGeom#copyOffsetRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxGeom#dGeomCopyOffsetRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxGeom#dGeomCopyRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.DRotation#dRFromEulerAngles: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.math.Quaternion#apply: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.shader.UniformBindingManager#updateUniformBindings: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.DGeom#copyOffsetRotation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
net.smert.jreactphysics3d.body.RigidBody#getInertiaTensorInverseWorld: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
net.smert.jreactphysics3d.body.RigidBody#getInertiaTensorWorld: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.math.Matrix4f#toRotationMatrix: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.scene.Spatial#getLocalToWorldMatrix: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.shader.ShaderGenerator#generateUniforms: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.cinematic.events.AnimationTrack#AnimationTrack(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.material.MatParam#getWrapMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.renderer.opengl.GLRenderer#deleteShader: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.environment.LightProbeFactory#updateProbe: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.asset.DesktopAssetManager#loadMaterial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.shadow.DirectionalLightShadowRenderer#DirectionalLightShadowRenderer(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.scene.Geometry#oldDeepClone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.dyn4j.geometry.Geometry#flipAlongTheYAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.renderer.ViewPort#attachScene: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.shadow.DirectionalLightShadowRenderer#setMaterialParameters: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.light.LightProbeBlendingStrategy#registerProbe: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.scene.Node#depthFirstTraversal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.renderer.Statistics#getData: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.renderer.opengl.GLRenderer#setTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.texture.TextureProcessor#postProcess: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.scene.Spatial#addLight: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.scene.instancing.InstanceTypeKey#InstanceTypeKey(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.collision.CollisionResult#setGeometry: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.dyn4j.geometry.Geometry#cleanse: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.shadow.PointLightShadowRenderer#getReceivers: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.dyn4j.dynamics.joint.WheelJoint#getJointSpeed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.asset.AssetManager#setShaderGenerator: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.shadow.ShadowUtil#getLitGeometriesInViewPort: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.material.Material#render: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.effect.ParticleEmitter#oldClone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.shader.Glsl100ShaderGenerator#isVarying: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.app.StatsAppState#loadDarken: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.scene.Batch#getGeometry: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.scene.GeometryGroupNode#GeometryGroupNode(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.opencl.Context#bindImage: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.scene.BatchNode#doBatch: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.scene.Geometry#updateWorldLightList: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.material.TechniqueDef#getShaderParamDefineId: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.light.DefaultLightFilter#setCamera: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.shadow.AbstractShadowRenderer#clearMatParams: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.dyn4j.dynamics.World#removeAllJoints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.light.LightProbeBlendingProcessor#cleanup: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.animation.KillParticleControl#cloneForSpatial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.shader.Shader#Shader(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.scene.instancing.InstancedGeometry#swap: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxCylinder#getRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.scene.control.AbstractControl#cloneForSpatial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.texture.FrameBuffer#checkSetTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.renderer.opengl.GLRenderer#updateShaderUniforms: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.renderer.RenderManager#setForcedMaterial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.material.MaterialDef#addMaterialParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.renderer.opengl.GLDebugES#glDeleteShader: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.shader.Glsl100ShaderGenerator#declareVariable: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.shader.Shader#createDestructableClone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.light.PoiLightProbeLightFilter#setCamera: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderGenerator#generateNodeMainSection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PointLightShadowRenderer#setLight: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLDebugES#glAttachShader: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.asset.ShaderNodeDefinitionKey#ShaderNodeDefinitionKey(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.RenderManager#updateUniformBindings: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxHeightfieldData#DxHeightfieldData(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.RenderManager#renderViewPort: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Shader#ShaderType(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#Spatial(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GL#glGetShader: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#setAutoDisableDefaults: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.math.DVector3#add: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#setMatParamOverrideRefresh: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.control.AbstractControl#setSpatial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.MotionPath#CreateCatmullRomPath: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.TechniqueDef#getShaderProgramName: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PointLightShadowRenderer#setMaterialParameters: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.RevoluteJoint#setLimitEnabled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.logic.TechniqueDefLogic#render: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Uniform#clearSetByCurrentMaterial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.MotorJoint#initializeConstraints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.logic.SinglePassLightingLogic#makeCurrent: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.queue.RenderQueue#setGeometryComparator: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#updateWorldLightList: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.SpotLight#SpotLight(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
isTextureType: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.instancing.InstancedNode#onGeometryUnassociated: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.TechniqueDef#getShaderGenerationInfo: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
getMaterialParamValue: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Ring#random: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PointLightShadowFilter#PointLightShadowFilter(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PssmShadowFilter#isRequiresDepthTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapText#render: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Node#hasChild: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.AudioTrack#cloneForSpatial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Node#swapChildren: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.SkeletonControl#findTargets: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.Technique#makeCurrent: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PointLightShadowRenderer#getLight: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Segment#Segment(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Renderer#modifyTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.SkeletonControl#setSpatial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.GeometryGroupNode#setGeometryStartIndex: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.Light#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GL#glCompileShader: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.logic.DefaultTechniqueDefLogic#getAmbientColor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.MaterialDef#getMaterialParams: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.Material#contentEquals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.AssetLinkNode#cloneFields: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.PointLight#getType: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.decompose.Bayazit#decomposePolygon: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.Cinematic#bindCamera: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.CameraNode#setCamera: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#convertWrapMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.control.LightControl#LightControl(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Node#setMatParamOverrideRefresh: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GL#glActiveTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.DirectionalLightShadowRenderer#clearMaterialParameters: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.MotionEvent#MotionEvent(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.PreDepthProcessor#postQueue: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.MaterialProcessor#createClone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.Material#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightList#doubleSize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.SkeletonControl#switchToSoftware: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.instancing.InstancedGeometry#getGeometries: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PssmShadowRenderer#postFrame: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#loadCapabilitiesCommon: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.EffectTrack#cloneForSpatial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.MotionTrack#MotionTrack(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PointLightShadowRenderer#getShadowCam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.Pass#requiresDepthAsTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.FileChangedTrigger#init: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Node#descendantMatches: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.TextureUtil#setupTextureSwizzle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.Material#setParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Node#detachChildNamed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.texture.TextureArray#createSimpleClone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.texture.FrameBuffer#setDepthTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#removeControl: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.logic.StaticPassLightingLogic#StaticPassLightingLogic(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Node#getChildren: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.Filter#getMaterial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.LightNode#setEnabled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.AbstractShadowRenderer#postQueue: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.texture.image.LastTextureState#LastTextureState(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Glsl150ShaderGenerator#generateStartOfMainSection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.JobListener#JobListener(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.decompose.DoubleEdgeList#getConvexDecomposition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLDebugDesktop#glFramebufferTextureLayer: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Renderer#setShader: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.DefaultLightFilter#DefaultLightFilter(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Geometry#breadthFirstTraversal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#setFrameBuffer: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.TechniqueDef#loadShader: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Glsl100ShaderGenerator#generateUniforms: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.FilterPostProcessor#renderProcessing: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.LightProbeFactory#done: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PointLightShadowRenderer#initFrustumCam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.instancing.InstanceTypeKey#hashCode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.CameraNode#isEnabled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#oldClone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.DirectionalLightShadowFilter#getLight: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.instancing.InstancedNode#relocateInInstancedGeometry: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.EnvironmentCamera#initialize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.Cinematic#setEnableCurrentCam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.MaterialDef#addMaterialParamTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PointLightShadowRenderer#getOccludersToRender: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.OccludersExtractor#addOccluders: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
supports: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.control.LightControl#getLight: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.ShaderGenerationInfo#getVertexGlobal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.Animation#cloneForSpatial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.GeometryGroupNode#onGeometryUnassociated: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Geometry#unassociateFromGroupNode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.SkeletonControl#controlRenderHardware: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.instancing.InstancedNode#addToInstancedGeometry: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#convertMagFilter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.texture.Image#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#jmeClone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.Filter#isRequiresDepthTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.ParticleEmitterControl#setSpatial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.texture.TextureCubeMap#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GL#glShaderSource: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.Material#resetUniformsNotSetByCurrent: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Statistics#onNewTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.FilterBinding#reload: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.app.FlyCamAppState#setEnabled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.AnimControl#setSpatial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.RenderManager#renderViewPortRaw: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightProbe#LightProbe(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.texture.RenderBuffer#getTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.instancing.InstancedNode#onTransformChange: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Glsl150ShaderGenerator#initVariable: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#updateRenderTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Node#setLightListRefresh: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.Pass#getPassMaterial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.Material#set: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.instancing.InstancedNodeControl#cloneForSpatial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLDebugES#glGetShader: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.asset.AssetManager#loadModel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.queue.GeometryList#add: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.SpotLightShadowRenderer#getOccludersToRender: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.SkeletonControl#switchToHardware: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#checkNonPowerOfTwo: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightProbeBlendingProcessor#setPoi: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.AbstractShadowRenderer#init: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.instancing.InstancedGeometry#InstancedGeometry(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.AbstractShadowFilter#postQueue: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.Material#selectTechnique: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Glsl150ShaderGenerator#declareVarying: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderNodeDefinition#getType: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Node#setTransformRefresh: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.logic.MultiPassLightingLogic#render: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.control.AbstractControl#getSpatial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#updateShaderSourceData: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.FilterPostProcessor#initialize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.util.BoundingSphereDebug#createDebugSphere: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.decompose.SweepLine#createTriangulation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.BatchNode#onMaterialChange: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.ParticleEmitter#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.Light#computeLastDistance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapFont#getPage: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.RenderManager#setLightFilter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Box#duUpdateGeometryNormals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.queue.GeometryList#set: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#deepClone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.Material#Material(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.Technique#notifyParamChanged: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GL#glDeleteShader: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightProbe#setPrefilteredMap: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.Cinematic#onStop: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Glsl100ShaderGenerator#fixInPositionType: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderNodeVariable#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Geometry#createPolygonAtOrigin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.texture.Texture3D#createSimpleClone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.TechniqueDef#getShaderParamDefine: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.texture.Texture2D#createSimpleClone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLDebugES#glShaderSource: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.Pass#cleanup: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.ShaderGenerationInfo#getFragmentUniforms: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Geometry#flipAlongTheXAxis: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.opencl.Context#bindRenderBuffer: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.CameraNode#cloneFields: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.Material#clearParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#deleteImage: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.BatchNode#batch: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Glsl100ShaderGenerator#replaceVariableName: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.TechniqueDef#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Shader#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Shader#resetLocations: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.app.SimpleApplication#getFlyByCamera: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#checkCulling: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#setupTextureParams: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#getFrameBufferSamplePositions: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightProbeBlendingStrategy#populateProbes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.HDRRenderer#reshape: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.PointLight#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.DirectionalLightShadowRenderer#checkCulling: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.AbstractShadowFilter#getMaterial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderGenerator#generateDeclarativeSection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.asset.DesktopAssetManager#getShaderGenerator: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapFont#merge: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.asset.AssetManager#loadMaterial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderNodeVariable#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.TechniqueDef#getLightMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.TextureUtil#TextureUtil(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.TechniqueDef#getShaderProgramLanguage: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Shader#resetUniformsNotSetByCurrent: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.DirectionalLightShadowRenderer#initFrustumCam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightProbe#setIrradianceMap: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.Pass#setRenderedTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Node#getChild: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.instancing.InstancedGeometry#deleteInstance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#convertMinFilter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderNode#getDefinition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.texture.Image#resetObject: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.RenderManager#renderGeometryList: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.logic.SinglePassAndImageBasedLightingLogic#extractIndirectLights: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimAABBSet#gim_aabbset_alloc: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Node#setMaterial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Statistics#onShaderUse: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.Material#checkSetParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.texture.FrameBuffer#addColorTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Statistics#onDeleteShader: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Node#updateModelBound: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Sphere#getTextureMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.mikktspace.MikktspaceTangentGenerator#generate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.GeometryGroupNode#getGeometryStartIndex: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.TechniqueDef#getFragmentShaderLanguage: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Mesh#scaleTextureCoordinates: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GL#glAttachShader: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.SceneGraphVisitorAdapter#visit: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GL#glCreateShader: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Node#attachChild: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Glsl100ShaderGenerator#generateEndOfMainSection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.DirectionalLightShadowRenderer#setLight: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderGenerator#generateAttributes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Glsl100ShaderGenerator#appendOutput: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Renderer#setTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#ChaseCamera(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.instancing.InstancedNode#cloneFields: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.control.LightControl#controlUpdate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.texture.FrameBuffer#setColorTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.TechniqueDef#getShaderPrologue: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.Filter#setDepthTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.CameraNode#getControlDir: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Shader#deleteObject: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.debug.SkeletonDebugger#SkeletonDebugger(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.BlendFactor#BlendFactor(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.AbstractShadowRenderer#setEdgeFilteringMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Node#attachChildAt: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GL3#glFramebufferTextureLayer: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Shader#resetObject: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.app.StatsView#cloneForSpatial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.RenderManager#renderSubScene: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.app.ChaseCameraAppState#ChaseCameraAppState(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderSource#getType: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.LightNode#isEnabled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.AbstractBox#duUpdateGeometryNormals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.Material#updateShaderMaterialParameters: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Glsl100ShaderGenerator#generateStartOfMainSection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.asset.TextureKey#setTextureTypeHint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.TextureUtil#uploadTextureLevel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.AssetLinkNode#detachLinkedChild: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightList#get: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLDebugES#glBindTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.control.BillboardControl#fixRefreshFlags: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.texture.TextureCubeMap#TextureCubeMap(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightList#jmeClone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.HDRRenderer#renderToneMap: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.PreDepthProcessor#PreDepthProcessor(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLDebugES#glDetachShader: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Node#getUpdateList: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.ShadowUtil#computeUnionBound: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.util.EnvMapUtils#duplicateCubeMap: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.SkeletonControl#testHardwareSupported: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.app.FlyCamAppState#setCamera: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.RenderContext#reset: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.RenderManager#getCurrentCamera: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.BlendFactor#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Geometry#createSegment: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.logic.SinglePassAndImageBasedLightingLogic#makeCurrent: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.MotionPath#CreateLinearPath: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.CameraNode#getCamera: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightList#iterator: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.AbstractBox#duUpdateGeometryVertices: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.system.NullRenderer#deleteShaderSource: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.Material#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Geometry#flip: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.HDRRenderer#initialize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Uniform#reset: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.ui.Picture#setImage: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.RenderManager#getLightFilter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#addControl: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.PoiLightProbeLightFilter#PoiLightProbeLightFilter(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.asset.TextureKey#hashCode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Statistics#onNewShader: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Geometry#getMaterial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.logic.SinglePassAndImageBasedLightingLogic#SinglePassAndImageBasedLightingLogic(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#getWorldLightList: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.BasicProbeBlendingStrategy#populateProbes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderGenerator#generateShader: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.control.LodControl#setSpatial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.RenderManager#setCamera: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.util.EnvMapUtils#makeCubeMap: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Statistics#clearFrame: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Node#updateLogicalState: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.LightNode#cloneFields: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.SpotLightShadowFilter#SpotLightShadowFilter(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.control.LodControl#cloneForSpatial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.MatParamTexture#getTextureValue: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.MatParamTexture#MatParamTexture(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#updateTexImageData: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.queue.RenderQueue#renderQueue: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.SkeletonControl#cloneFields: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PssmShadowRenderer#PssmShadowRenderer(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.Filter#isRequiresSceneTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.ShaderGenerationInfo#getAttributes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Geometry#setMaterial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderNodeDefinition#getInputs: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.DirectionalLightShadowFilter#setLight: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.ViewPort#getScenes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.asset.AssetManager#getShaderGenerator: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.texture.Texture#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.instancing.InstancedGeometry#sanitize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.Material#applyOverrides: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Renderer#deleteShaderSource: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Node#detachChildAt: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.system.NullRenderer#deleteShader: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.instancing.InstancedNodeControl#setSpatial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Glsl100ShaderGenerator#generateVaryings: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Geometry#Geometry(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Node#setLodLevel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.texture.TextureCubeMap#createSimpleClone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.generation.PrefilteredEnvMapFaceGenerator#setGenerationParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightProbeBlendingProcessor#populateProbe: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightList#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Glsl150ShaderGenerator#Glsl150ShaderGenerator(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.SpotLightShadowFilter#getLight: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.util.EnvMapUtils#createPrefilteredEnvMap: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Node#oldDeepClone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.Light#Light(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.queue.RenderQueue#renderShadowQueue: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.CameraNode#setControlDir: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Glsl100ShaderGenerator#replace: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.BasicProbeBlendingStrategy#registerProbe: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.system.NullRenderer#setShader: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.instancing.InstancedGeometry#setMaxNumInstances: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightProbeBlendingProcessor#initialize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.HDRRenderer#createLumShader: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.logic.SinglePassAndImageBasedLightingLogic#render: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.util.LightsDebugState#cleanProbes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Glsl100ShaderGenerator#declareGlobalPosition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.VariableMapping#VariableMapping(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.texture.Image#getLastTextureState: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Node#deepClone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.VariableMapping#setLeftVariable: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderNodeVariable#setShaderOutput: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Glsl100ShaderGenerator#generateNodeMainSection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#convertTextureType: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.LightProbeFactory#generatePbrMaps: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Glsl100ShaderGenerator#declareVarying: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.TechniqueDef#addShaderUnmappedDefine: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Node#detachChild: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLImageFormats#getFormatsForCaps: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.Pass#init: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightList#update: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.asset.TextureKey#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Statistics#onTextureUse: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightProbeBlendingProcessor#postQueue: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.MotionPath#attachDebugNode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.PointLight#computeLastDistance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.AmbientLight#AmbientLight(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.RenderManager#preloadScene: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.KillParticleControl#jmeClone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.FilterPostProcessor#renderFilterChain: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.util.EnvMapUtils#createIrradianceMap: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#getLocalLightList: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.queue.NullComparator#compare: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.GeometryBinding#GeometryBinding(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.TechniqueDef#getFragmentShaderName: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.Material#getSortId: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderNodeDefinition#setInputs: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PssmShadowRenderer#displayShadowMap: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.AbstractShadowRenderer#buildMatCache: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapText#getColor: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.system.NullRenderer#setLighting: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#setLightListRefresh: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.BatchNode#setMaterial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.AssetLinkNode#detachLinkedChildren: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.LightNode#setLight: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#updateShaderData: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.app.SimpleApplication#SimpleApplication(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.EffectTrack#findEmitter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderNodeDefinition#setType: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.BatchNode#onGeometryUnassociated: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.Cinematic#setActiveCamera: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.instancing.InstancedNode#detachChildAt: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.TechniqueDef#setShaderNodes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderSource#createDestructableClone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Glsl100ShaderGenerator#getAppendableNameSpace: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Quad#updateGeometry: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.LightNode#getControlDir: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.asset.MaterialKey#MaterialKey(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.TechniqueDef#setLightMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.TechniqueDef#TechniqueDef(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.asset.TextureKey#TextureKey(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.AbstractBox#duUpdateGeometryIndices: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.VariableMapping#setRightVariable: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.app.ChaseCameraAppState#initialize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.CameraNode#CameraNode(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.control.AbstractControl#cloneFields: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Glsl150ShaderGenerator#getLanguageAndVersion: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.queue.TransparentComparator#distanceToCam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.queue.RenderQueue#renderGeometryList: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.MatParamTexture#setValue: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Box#duUpdateGeometryIndices: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.control.Control#cloneForSpatial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.AbstractShadowRenderer#getReceivers: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLDebugES#glActiveTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.Filter#init: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.AbstractBox#duUpdateGeometryTextures: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.BatchNode#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.LightProbeFactory#makeProbe: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Glsl100ShaderGenerator#generateDeclarativeSection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Node#setModelBound: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.StripBox#duUpdateGeometryTextures: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.queue.GeometryList#getComparator: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PointLightShadowFilter#getLight: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Geometry#cloneFields: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Shader#addSource: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PointLightShadowRenderer#init: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.decompose.Bayazit#decompose: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.PlaceholderAssets#getPlaceholderMaterial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Node#breadthFirstTraversal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.asset.TextureKey#getProcessorType: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderGenerator#buildShader: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.AssetLinkNode#attachLinkedChild: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.BatchNode#onTransformChange: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.Technique#Technique(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#matches: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.instancing.InstanceTypeKey#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.BatchNode#gatherGeometries: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightProbe#getIrradianceMap: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.DirectionalLightShadowRenderer#getLight: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.app.ChaseCameraAppState#setTarget: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.logic.SinglePassLightingLogic#updateLightListUniforms: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.SceneGraphVisitor#visit: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.ShadowUtil#addGeometriesInCamFrustumFromNode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.AbstractShadowRenderer#displayShadowMap: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.AbstractShadowRenderer#setMaterialParameters: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.RenderManager#getSinglePassLightBatchSize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.app.BasicProfilerState#initialize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.decompose.EarClipping#createTriangulation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#breadthFirstTraversal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderGenerator#ShaderGenerator(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.GeometryBinding#reload: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.GeometryGroupNode#onMaterialChange: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.HDRRenderer#createLumShaders: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.AnimationEvent#AnimationEvent(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#loadCapabilitiesGL2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.queue.GeometryList#GeometryList(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLTracer#printArgsTexParameter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.PlaceholderAssets#getPlaceholderImage: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLDebugES#glCreateShader: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Glsl100ShaderGenerator#updateDefinesName: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Uniform#isSetByCurrentMaterial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.LightNode#getLight: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.DirectionalLightShadowFilter#DirectionalLightShadowFilter(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.BatchNode#unbatchSubGraph: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderGenerator#generateStartOfMainSection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.queue.TransparentComparator#compare: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.ShadowUtil#getGeometriesInCamFrustum: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.BasicShadowRenderer#getShadowCamera: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#updateFrameBufferAttachment: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.SpotLightShadowFilter#setLight: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#checkDoTransformUpdate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#setBoundRefresh: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.BatchNode#getMaterial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.AmbientLight#computeLastDistance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.Material#getMaterialDef: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.TangentBinormalGenerator#visit: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Glsl100ShaderGenerator#map: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.app.SimpleApplication#update: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.texture.TextureProcessor#createClone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightList#remove: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.instancing.InstancedNode#setGeometryStartIndex2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Shader#getSources: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderGenerator#generateEndOfMainSection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.TechniqueDef#setShaderGenerationInfo: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.SnapshotJob#SnapshotJob(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.VariableMapping#getLeftVariable: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#bindProgram: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.AbstractShadowRenderer#postFrame: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.ShadowUtil#addGeometriesInCamFrustumAndViewPortFromNode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.queue.RenderQueue#getGeometryComparator: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.logic.SinglePassLightingLogic#render: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
EdgeFilteringMode(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.Material#getTextureParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.FilterPostProcessor#getDepthTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.texture.Texture#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.MotionEvent#getSpatial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.Pass#setPassMaterial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.Material#Material(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapTextPage#getTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.TechniqueDef#getVertexShaderLanguage: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.util.BoundingSphereDebug#BoundingSphereDebug(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.util.CubeMapWrapper#CubeMapWrapper(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.LightNode#setControlDir: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#scale: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.control.UpdateControl#cloneForSpatial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.KillParticleControl#setSpatial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.app.StatsView#setSpatial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderNode#setDefinition: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#initialize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.AssetLinkNode#attachLinkedChildren: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.EnvironmentCamera#snapshot: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.Pass#getDepthTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.FilterPostProcessor#cleanup: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.ShaderGenerationInfo#getFragmentGlobals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Node#getChildIndex: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.ViewPort#detachScene: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Glsl100ShaderGenerator#Glsl100ShaderGenerator(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GL#glBindTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.queue.GeometryList#setComparator: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.instancing.InstancedNode#lookUpByGeometry: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.SpotLightShadowRenderer#getShadowCam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.Filter#setRenderedTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.FilterPostProcessor#reshape: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Glsl100ShaderGenerator#declareAttribute: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.AbstractShadowFilter#AbstractShadowFilter(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.Technique#applyOverrides: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.RenderManager#renderScene: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderNode#ShaderNode(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.ParticleEmitterControl#cloneForSpatial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#bindTextureOnly: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.app.FlyCamAppState#cleanup: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.app.FlyCamAppState#getCamera: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.Filter#getRenderedTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightList#add: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.logic.DefaultTechniqueDefLogic#makeCurrent: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.instancing.InstancedNode#removeFromInstancedGeometry: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightList#LightList(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PointLightShadowRenderer#clearMaterialParameters: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#modifyTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PssmShadowFilter#PssmShadowFilter(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.SpotLightShadowRenderer#getLight: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.GeometryGroupNode#onTransformChange: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.system.NullRenderer#modifyTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.debug.SkeletonDebugger#updateLogicalState: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.HDRRenderer#createDisplayQuad: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#updateGeometricState: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.logic.StaticPassLightingLogic#makeCurrent: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.instancing.InstanceTypeKey#cloneFields: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.MotionEvent#setSpatial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.AbstractShadowRenderer#getOccludersToRender: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.AbstractShadowRenderer#initFrustumCam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.DirectionalLight#computeLastDistance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.TechniqueDef#isUsingShaderNodes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderSource#deleteObject: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.HDRRenderer#renderProcessing: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.queue.GeometryList#iterator: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.Pass#getRenderedTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.SimpleBatchNode#setTransformRefresh: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.SpotLightShadowRenderer#setMaterialParameters: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PointLightShadowRenderer#PointLightShadowRenderer(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.asset.DesktopAssetManager#loadModel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.queue.RenderQueue#RenderQueue(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Geometry#oldClone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Uniform#setVector4InArray: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.queue.RenderQueue#addToQueue: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#setShader: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.MaterialDebugAppState#registerBinding: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.SpotLightShadowRenderer#initFrustumCam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.instancing.InstancedNode#renderFromControl: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderGenerator#getLanguageAndVersion: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.logic.DefaultTechniqueDefLogic#render: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.ShaderGenerationInfo#setVertexGlobal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightList#compare: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Box#duUpdateGeometryTextures: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightFilter#filterLights: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderNodeDefinition#ShaderNodeDefinition(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.input.ChaseCamera#cloneForSpatial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.Material#setTextureParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.Technique#render: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.AbstractShadowRenderer#setPostShadowMaterial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.texture.Image#getUniqueId: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.app.FlyCamAppState#initialize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.Material#clearUniformsSetByCurrent: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.AbstractShadowRenderer#createFrustum: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderGenerator#findShaderIndexFromVersion: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.Pass#requiresSceneAsTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.MaterialDef#getMaterialParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.LightNode#LightNode(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.SpotLight#computeLastDistance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GL#glGetShaderInfoLog: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderNodeVariable#ShaderNodeVariable(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.PlaceholderAssets#getPlaceholderModel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.logic.DefaultTechniqueDefLogic#renderMeshFromGeometry: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightProbeBlendingProcessor#getPoi: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.CollisionResult#getGeometry: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.AbstractShadowRenderer#initialize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.system.NullRenderer#setTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PssmShadowFilter#getShadowMaterial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.instancing.InstancedNode#onMeshChange: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.AbstractShadowRenderer#updateShadowCams: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.texture.image.LastTextureState#reset: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.AudioTrack#findAudio: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.logic.SinglePassLightingLogic#SinglePassLightingLogic(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.ShaderGenerationInfo#getVaryings: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.TechniqueDef#getLightSpace: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.TechniqueDef#getShader: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.TechniqueDef#getShaderProgramNames: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.SpotLightShadowRenderer#SpotLightShadowRenderer(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderGenerator#appendNodeDeclarationAndMain: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.DirectionalLightShadowRenderer#getReceivers: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.texture.Texture#setKey: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#setVertexAttrib: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderNodeDefinition#getOutputs: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.AbstractShadowFilter#isRequiresDepthTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Statistics#onDeleteTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Glsl100ShaderGenerator#comment: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Glsl100ShaderGenerator#getLanguageAndVersion: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.AbstractShadowRenderer#checkCulling: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.SimpleBatchNode#attachChild: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.AnimControl#cloneForSpatial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.TechniqueDef#setShaderPrologue: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.asset.TextureKey#getTextureTypeHint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#checkDoBoundUpdate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.AbstractShadowRenderer#setShadowZExtend: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapFont#setPages: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PssmShadowFilter#getMaterial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Geometry#deepClone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderNodeVariable#isShaderOutput: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.RenderManager#getPreferredLightMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.font.BitmapTextPage#BitmapTextPage(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.queue.GuiComparator#compare: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Vector2#getAngleBetween: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.asset.DesktopAssetManager#loadTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLDebugES#glCompileShader: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Batch#cloneFields: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Shader#clearUniformsSetByCurrentFlag: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.queue.GeometryList#next: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#deleteShaderSource: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.VariableMapping#getRightVariable: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.events.MotionEvent#cloneFields: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.AbstractShadowRenderer#getShadowCam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.instancing.InstancedNode#getGeometryStartIndex2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.generation.IrradianceMapGenerator#setGenerationParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.StripBox#duUpdateGeometryIndices: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.TangentBinormalGenerator#generateParallel: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Glsl150ShaderGenerator#declareAttribute: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.BatchNode#onMeshChange: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.DirectionalLightShadowRenderer#getOccludersToRender: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.BatchNode#detachChildAt: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.SpotLightShadowRenderer#clearMaterialParameters: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.RenderManager#setPreferredLightMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Uniform#setVector4Length: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#forceRefresh: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#resetUniformLocations: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.TextureUtil#uploadTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderGenerator#generateVaryings: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.instancing.InstancedGeometry#addInstance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.CameraNode#setEnabled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.SkeletonControl#controlRender: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Node#addUpdateChildren: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.util.LightsDebugState#initialize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.Material#preload: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.AbstractShadowFilter#initFilter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#updateUniformLocation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.control.Control#setSpatial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PssmShadowRenderer#createFrustum: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightList#next: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.texture.TextureArray#TextureArray(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Shader#getUniqueId: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Glsl100ShaderGenerator#generateAttributes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightProbe#getPrefilteredEnvMap: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#GLRenderer(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#setMaterial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Geometry#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Glsl100ShaderGenerator#isWorldOrMaterialParam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.shape.Sphere#setTextureMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.SpotLightShadowRenderer#setLight: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.instancing.InstancedNode#instance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.GeometryGroupNode#onMeshChange: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.body.RigidBody#getMaterial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightProbeBlendingProcessor#LightProbeBlendingProcessor(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.queue.GeometryList#get: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.instancing.InstancedNode#ungroupSceneGraph: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.MaterialDef#MaterialDef(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.TechniqueDef#addShaderParamDefine: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.PointLightShadowFilter#setLight: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#convertShaderType: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.DirectionalLightShadowRenderer#getShadowCam: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.TechniqueDef#setShaderFile: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.app.ChaseCameraAppState#update: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Geometry#createLinks: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.texture.Texture#Texture(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.SkeletonControl#getAttachmentsNode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.SpotLight#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.body.RigidBody#setMaterial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.instancing.InstancedNode#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.asset.AssetManager#loadTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.Filter#getDefaultPassTextureFormat: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.util.LightsDebugState#setScene: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.asset.TextureKey#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderNodeDefinition#setOutputs: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.asset.DesktopAssetManager#setShaderGenerator: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.ShaderSource#ShaderSource(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.MaterialDebugAppState#reloadMaterial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.control.LightControl#setLight: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.TechniqueDef#getShaderProgramLanguages: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Batch#updateGeomList: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.EnvironmentCamera#render: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shader.Glsl150ShaderGenerator#generateEndOfMainSection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.BatchNode#isBatch: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#removeLight: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.TechniqueDef#getVertexShaderName: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.AbstractShadowRenderer#clearMaterialParameters: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GL#glDetachShader: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.ui.Picture#setTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
VarType(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.TechniqueDef#setLightSpace: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.logic.TechniqueDefLogic#makeCurrent: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.RenderManager#setSinglePassLightBatchSize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.TechniqueDef#getShaderNodes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.FilterPostProcessor#getFilterTexture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Geometry#createSegmentAtOrigin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Renderer#deleteShader: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#bindTextureAndUnit: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightProbe#computeLastDistance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.MatParamTexture#setTextureValue: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.control.LodControl#controlRender: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.DirectionalLight#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.AbstractShadowFilter#getShadowMaterial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.animation.SkeletonControl#cloneForSpatial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Geometry#associateWithGroupNode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Node#updateGeometricState: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.post.FilterPostProcessor#initFilter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.SpotLightShadowRenderer#getReceivers: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Geometry#createPolygonalHalfEllipseAtOrigin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.app.FlyCamAppState#FlyCamAppState(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLDebugES#glGetShaderInfoLog: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.instancing.InstancedNode#onMaterialChange: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.BatchNode#cloneFields: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.shadow.DirectionalLightShadowRenderer#doDisplayFrustumDebug: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.broadphase.BodyPair#setBody2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
net.smert.jreactphysics3d.collision.broadphase.BodyPair#setBody1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.geometry.Geometry#getCounterClockwiseEdgeNormals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.math.Vector4f#distance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.light.DirectionalLight#intersectsSphere: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.dyn4j.geometry.Segment#getVertices: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
net.smert.jreactphysics3d.engine.DynamicsWorld#addContactManifoldToBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.gimpact.GimTrimesh#gim_trimesh_get_triangle_data: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.collision.CollisionResult#CollisionResult(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxHeightfield#allocatePlaneBuffer: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.scene.shape.Cylinder#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.dyn4j.collision.broadphase.Sap#update: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxTriMesh#FetchTriangleCount: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.effect.shapes.EmitterMeshConvexHullShape#EmitterMeshConvexHullShape(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.CollideSphereSphere#dCollideSphereSphere: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.math.DVector4#lengthSquared: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.CollideCylinderTrimesh#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.ode.OdeHelper#spaceCollide2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.gimpact.GimGeometry#OUTER_PRODUCT_3X3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.dyn4j.collision.broadphase.Sap#raycast: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxCollisionUtil#dClipEdgeToPlane: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_CROSS: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_COPY: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.dyn4j.geometry.Geometry#createSquare: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.math.DMatrixN#maxDifference: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.math.Transform#transformVector: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.geometry.Segment#getVertexIterator: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.math.Vector4f#project: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.dyn4j.dynamics.joint.Joint#isCollisionAllowed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.sTrimeshBoxColliderData#_cldTestEdge: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.effect.shapes.EmitterPointShape#EmitterPointShape(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleComparison#compare: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.animation.AnimationFactory#addKeyFrameScale: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.dyn4j.geometry.Slice#getFarthestFeature: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
com.jme3.animation.ClonableTrack#cloneForSpatial: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.geometry.Segment#getAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxSAPSpace#collide2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
net.smert.jreactphysics3d.engine.OverlappingPair#getBody1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
net.smert.jreactphysics3d.engine.OverlappingPair#getBody2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.dynamics.contact.SolvedContactPoint#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
net.smert.jreactphysics3d.collision.shapes.SphereShape#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.audio.Listener#Listener(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.dyn4j.collision.broadphase.BroadphaseItem#hashCode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.bounding.BoundingVolume#whichSide: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.CollideSpaceGeom#space_geom_collider: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.gimpact.GimTrimeshTrimeshCol#gim_triangle_triangle_collision: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxGeom#dGeomGetCollideBits: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
net.smert.jreactphysics3d.collision.narrowphase.GJK.GJKAlgorithm#addContactInfo: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxConvex#setConvex: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
com.jme3.scene.Mesh#collideWith: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]},
org.dyn4j.geometry.Slice#translate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.CollisionDetection#removeNoCollisionPair: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.cinematic.MotionPath#disableDebugShape: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.ccd_support_fn#run: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.math.DVector3C#lengthSquared: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#MAT_DOT_VEC_3X4: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#MAT_DOT_VEC_3X3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.BroadphaseItem#BroadphaseItem(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.Intersection#intersect: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideRayCylinder_ODE_0_12#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Ellipse#Ellipse(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.decompose.DoubleEdgeList#hertelMehlhorn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.Geometry#write: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.HalfEllipse#HalfEllipse(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Vector2f#distanceSquared: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.PointLight#intersectsSphere: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.util.EnvMapUtils#getCubeMapCrossDebugViewWithMipMaps: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.DynamicAABBTreeLeaf#hashCode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxSimpleSpace#collide2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimContact#GIM_CALC_KEY_CONTACT: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#getCollideBits: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.AmbientLight#intersectsBox: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Link#translate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.mesh.VirtualIndexBuffer#VirtualIndexBuffer(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingSphere#getType: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.environment.util.EnvMapUtils#getCubeMapCrossDebugView: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Mesh#cloneFields: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Geometry#getModelBound: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.DynamicAABBTree#detect: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingSphere#collideWithTri: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.CollisionWorld#getBodies: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#addRelForceAtPos: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.AbstractShape#getRadius: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#TRANSPOSE_MATRIX_2X2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrixN#subEq: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTrimesh#gim_trimesh_update_aabbset: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDPolyTope#ccdPtAddVertex: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.audio.LowPassFilter#getVolume: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.collision.CollisionResults#iterator: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Triangle#Triangle(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTrimeshRayCollision#gim_trimesh_ray_collision: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#dGeomSetCollideBits: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.bih.BIHNode#intersectWhere: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.AbstractCollidable#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#PLANE_MINOR_AXES: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.math.DVector4#length: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.ParticleEmitter#ParticleEmitter(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA#getDistanceSquare: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex#addPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTrimeshCapsuleCollision#gim_trimesh_capsule_collision: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#convertElementMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Mesh#getBound: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#getWorldBound: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#AABB_GET_MAX: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTriCollision#coplanar_tri_tri: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideCylinderBox#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.broadphase.NoBroadPhaseAlgorithm#addObject: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.PinJoint#isCollisionAllowed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.CylinderShape#CylinderShape(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.DynamicAABBTree#raycast: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.decompose.MonotonePolygon#getMaximum: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.collision.Collidable#addFixture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTrimesh#gim_trimesh_create_from_data: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_PARALLEL: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.AbstractBroadphaseDetector#getAABB: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Vector3#getMagnitudeSquared: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeHelper#spaceCollide: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.AbstractBroadphaseDetector#remove: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.BroadphasePair#hashCode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.audio.AudioSource#getVolume: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.CollisionDetection#addBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.TimeOfImpactListener#collision: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.CollisionDetection#addNoCollisionPair: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#COMPUTEAABB_FOR_TRIANGLE: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterShape#deepClone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#setGuiBounding: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.Mesh#createCollisionData: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#length: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.OdeInit#AllocateODEDataForThreadForMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.GJK.GJKAlgorithm#testCollision: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTrimeshTrimeshCol#gim_trimesh_plane_collision: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.audio.LowPassFilter#setVolume: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingBox#intersectsSphere: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimContact#getPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex#backupClosestPointInSimplex: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeHelper#collide: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxTrimeshHeightfield#dCollideHeightfieldZone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.bih.BIHNode#setLeftPlane: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Vector3#isZero: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.BroadphaseDetector#contains: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxTrimeshHeightfield#DxTrimeshHeightfield(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.body.RigidBody#RigidBody(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.decompose.DoubleEdgeList#getTriangulation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.cinematic.MotionPath#enableDebugShape: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.SapProxy#compareTo: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.broadphase.BroadPhaseAlgorithm#BroadPhaseAlgorithm(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.HeightFieldPlane#resetTriangleListSize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGimpact#dGeomTriMeshGetTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimAABBSet#gim_aabbset_box_collision: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.material.logic.StaticPassLightingLogic#updateLightListUniforms: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGimpactData#GetVertex: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGimpactCollision#gim_trimesh_ray_closest_collisionODE: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Body#isConnected: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.collision.Fixture#Fixture(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Settings#setWarmStartDistance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.EdgeEPA#getTargetVertexIndex: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Polygon#validate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTrimesh#gim_trimesh_plane_collision: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GIM_TRIANGLE_RAY_CONTACT_DATA#getNormal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Segment#createAABB: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Polygon#getVertices: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxTrimeshHeightfield#DESTRUCTOR: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Node#collideWith: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.collision.bih.TriangleAxisComparator#TriangleAxisComparator(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_PERPENDICULAR: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#TRIANGLE_PLANE: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#PLANE_CLIP_SEGMENT_CLOSEST: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideSphereSphere#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.collision.AbstractCollidable#removeFixture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingVolume#intersectsSphere: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.DynamicsWorld#destroyJoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTrimeshCapsuleCollision#gim_closest_point_triangle_segment: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.SphereShape#getLocalSupportPointWithMargin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Segment#getFarthestPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.Geometry#getTriangleCount: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideCylinderPlane#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.BroadphasePair#BroadphasePair(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.CollisionDetection#CollisionDetection(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#DISTANCE_PLANE_POINT: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA#computeClosestPointOfObject: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideConvexBoxCCD#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Segment#getLineIntersection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Polygon#project: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#length: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm#removeObject: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Ray#collideWith: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTrimeshSphereCollision#gim_triangle_sphere_collision: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGimpactCollision#gim_trimesh_ray_collisionODE: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.decompose.DoubleEdgeList#initialize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTrimesh#gim_trimesh_ray_closest_collision: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DTriCallback#call: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.mikktspace.MikkTSpaceImpl#getNumVerticesOfFace: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#SEGMENT_COLLISION: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Capsule#getAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimAABBSet#gim_aabbset_bipartite_intersections_sorted: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.sTrimeshBoxColliderData#TestCollisionForSingleTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimBufferArrayFloat#createCopy: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTriCollision#gim_triangle_triangle_overlap: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Settings#setLinearTolerance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_IMPACT_SQ: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.HalfEllipse#getFarthestFeature: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.BoxShape#BoxShape(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingBox#collideWith: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA#isVisibleFromVertex: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.DynamicAABBTreeLeaf#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxHeightfield#dGeomPlaneSetNoNormalize: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideTrimeshSphere#dCollideSTL: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.math.DVector6#length: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.ContactManifold#getBody2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.ContactManifold#getBody1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA#isClosestPointInternalToTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.audio.LowPassFilter#getHighFreqVolume: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.util.TangentBinormalGenerator#initVertexData: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.audio.AudioNode#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#onViewPortChange: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingVolume#transform: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideRayPlane#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxSpace#collide: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.BoundsAdapter#outside: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#setModelBound: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.audio.Listener#setVolume: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.decompose.MonotonePolygon#MonotonePolygon(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.broadphase.PairManager#PairManager(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_DOT: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimAABBSet#gim_aabbset_ray_collision: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm#addObject: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.EPAAlgorithm#computePenetrationDepthAndContactPoints: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.decompose.MonotonePolygon#getMinimum: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingBox#getVolume: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideConvexConvex#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxSAPSpace#BoxPruning: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.broadphase.BroadPhaseAlgorithm#updateObject: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.ConvexMeshShape#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.BroadphaseItem#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.Joint#Joint(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.BroadphaseFilter#isAllowed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.EPAAlgorithm#EPAAlgorithm(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.BatchNode#collideWith: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideConvexPlane#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.ContactManifold#ContactManifold(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.SphereVsSphereAlgorithm#testCollision: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_NORMALIZE: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Link#updateNormals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Settings#setAngularTolerance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Spatial#getTriangleCount: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.SapProxy#SapProxy(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#renderMeshVertexArray: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideConvexConvexCCD#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex#updateCache: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTrimesh#gim_trimesh_ray_collision: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGimpactCollision#FetchTriangleCount: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGimpact#dGeomTriMeshGetPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxHeightfield#resetPlaneBuffer: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.decompose.DoubleEdgeList#addHalfEdges: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Polygon#getVertexIterator: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.OdeHelper#createPlane: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTriCollision#GIM_CALC_TRIANGLE_DATA_PLANES: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideSphereConvex#dCollideSphereConvex: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex#computeClosestPointForSubset: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDPolyTope#ccdPtFaceVertices: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.DynamicsWorld#destroyRigidBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.math.DVector4C#lengthSquared: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingSphere#collideWith: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxPlane#dCreatePlane: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.AbstractTriangle#collideWith: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideTrimeshRay#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.AbstractBroadphaseDetector#add: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Plane#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#ACCUM_OUTER_PRODUCT_3X3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideTrimeshBox#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_IMPACT: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Slice#getCircleCenter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.BodyFixture#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxSAPSpace2#collide: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxPlane#dGeomPlaneSetParams: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex#computeClosestPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.Sap#remove: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Vector2#isUnit: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideCylinderTrimesh#dCollideCylinderTrimesh: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.CollisionResult#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.GJK.GJKAlgorithm#computePenetrationDepthForEnlargedObjects: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxMass#dMassSetTrimesh: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.TangentBinormalGenerator#writeColorBuffer: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_INV_LENGTH: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Settings#getLinearToleranceSquared: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightProbe#getBounds: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideCylinderSphere#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideCylinderBox#dCollideCylinderBox: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDPolyTope#ccdPtEdgeVertices: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Settings#getMaximumTranslationSquared: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.EmptyParticleInfluencer#influenceParticle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.audio.LowPassFilter#LowPassFilter(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Settings#setMaximumTranslation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideConvexSphereCCD#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxPlane#dGeomPlaneGetParams: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideConvexConvex#dCollideConvexConvex: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingVolume#merge: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.CollisionShape#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex#getSimplex: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTrimeshTrimeshCol#CLASSIFY_TRI_BY_FACE: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.broadphase.NoBroadPhaseAlgorithm#updateObject: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.collision.CollisionResults#getClosestCollision: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTrimesh#gim_trimesh_sphere_collision: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.broadphase.NoBroadPhaseAlgorithm#NoBroadPhaseAlgorithm(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA#computeSilhouette: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGimpact#FetchTransformedTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.CollisionWorld#CollisionWorld(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimBufferArrayFloat#GIM_PROCESS_BUFFER_ARRAY: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCD#simplexToPolytope2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Rectangle#getAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.SpotLight#computeAngleParameters: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Settings#setMaximumAngularCorrection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Geometry#createPolygonalHalfEllipse: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#CLOSEST_POINT_ON_SEGMENT: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.FixtureIterator#hasNext: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxConvex#CheckSATConvexFaces: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.BroadphaseFilterAdapter#isAllowed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.TimeOfImpactAdapter#collision: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#setPlaneState: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.bih.BIHTree#construct: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideRayCylinder#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideConvexPlane#dCollideConvexPlane: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#getPlaneState: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxSpace#dSpaceCollide: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGimpact#FetchTriangleCount: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#contains: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTrimeshRayCollision#gim_trimesh_ray_closest_collision: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightProbe#intersectsSphere: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideRayConvex#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Settings#getMaximumAngularCorrectionSquared: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#containsGui: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_REFLECT: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Node#getTriangleCount: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxTriMesh#FetchTransformedTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Polygon#rotate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Polygon#createAABB: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm#shrinkArrays: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxTrimeshHeightfield#resetTriangleBuffer: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.BroadphaseItem#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#setCollideBits: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Segment#getPointOnSegmentClosestToPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCollisionUtil#dConstructPlane: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.ConeShape#getLocalSupportPointWithMargin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.SapProxy#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideSpaceGeom#dCollideSpaceGeom: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Geometry#createTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Vector2#isZero: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#drawTriangleList: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxSAPSpace2#collide2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.math.DQuaternion#lengthSquared: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Geometry#getAreaWeightedCenter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.CollisionWorld#removeCollisionShape: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideTrimeshTrimesh#dCollideTTL: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideTrimeshBoxOld#dCollideBTL: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.CollisionDetection#removeBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.BroadphaseDetector#remove: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTrimeshTrimeshCol#CLIP_TRI_POINTS_BY_TRI_EDGE_PLANES: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingBox#collideWithRay: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.BroadPhasePair#BroadPhasePair(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.ConvexMeshShape#getLocalSupportPointWithoutMargin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.math.DVector6#lengthSquared: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_PROJECT: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Geometry#setModelBound: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.collision.CollisionResult#getTriangleIndex: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideConvexCylinderCCD#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.CollisionShape#getType: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGimpactData#DxGimpactData(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.NarrowPhaseAlgorithm#testCollision: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.SapProxy#isSearch: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Vector2#lengthSquare: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.EPAAlgorithm#addFaceCandidate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Segment#translate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTrimesh#gim_trimesh_trimesh_collision: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.ConvexMeshShape#ConvexMeshShape(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTriCollision#CLASSIFY_TRIPOINTS_BY_FACE: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxTriMeshDisabled#FetchTransformedTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.DynamicsWorld#createJoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#PLANE_CLIP_SEGMENT: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTrimesh#gim_trimesh_update: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.decompose.DoubleEdgeList#DoubleEdgeList(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.util.mikktspace.MikktspaceTangentGenerator#degenPrologue: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.FixtureIterator#next: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#RAY_PLANE_COLLISION: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.mikktspace.MikkTSpaceImpl#getNumFaces: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.sTrimeshBoxColliderData#_cldClipPolyToPlane: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Segment#getPointOnLineClosestToPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex#computeDeterminants: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCD#penEPAPos: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterMeshVertexShape#cloneFields: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideTrimeshRay#dCollideRTL: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimBufferArrayFloat#createRef: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.math.DVector3#lengthSquared: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.AbstractCollidable#contains: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.Joint#setCollisionAllowed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.util.mikktspace.MikkTSpaceContext#getNumVerticesOfFace: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.Utils#link: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.broadphase.PairManager#removePair: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.sCylinderTrimeshColliderData#TestCollisionForSingleTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimAABBSet#gim_aabbset_bipartite_intersections_brute_force: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DGeom#getCollideBits: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideRayTrimesh#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Segment#getSegmentIntersection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#PLANE_CLASSIFY_BOX_TZ: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideConvexTrimeshTrianglesCCD#collide: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GIM_PROCESS_BUFFER_ARRAY_FN#run: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.bih.BIHTree#collideWithRay: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Polygon#getFarthestPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#PLANE_CLIP_SEGMENT2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxHeightfield#DescendingPlaneSort: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_SCALE: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTrimesh#run: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.decompose.DoubleEdgeList#triangulateYMonotonePolygon: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.dxTriMeshDisabledData#build: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Vector2f#lengthSquared: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.Collidable#collideWith: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxQuadTreeSpace#collide: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTrimeshSphereCollision#gim_trimesh_sphere_collision: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.SapProxy#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.SphereShape#isEqualTo: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.BroadphaseDetector#update: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimContact#getNormal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterMeshVertexShape#EmitterMeshVertexShape(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.SweepSphere#main: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideRayPlane#dCollideRayPlane: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.CollisionWorld#destroyCollisionBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.debug.SkeletonWire#SkeletonWire(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGimpact#DESTRUCTOR: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.Fixture#getShape: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCollisionUtil#dClipPolyToPlane: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.ConeShape#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.CollisionResults#getCollision: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#POINT_IN_HULL: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTriCollision#EDGE_EDGE_TEST: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#LINE_PLANE_COLLISION: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCD#expandPolytope: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.CollisionWorld#createCollisionShape: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#drawTriangleArray: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_ZERO: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.TrianglesStore#last: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideRayBox#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA#TriangleEPA(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#PLANE_CLASSIFY_BOX: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGimpactCollision#gim_trimesh_sphere_collisionODE: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_LENGTH: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideRayBox#dCollideRayBox: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxHeightfield#allocateTriangleBuffer: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.BoxShape#isEqualTo: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Vector3#distanceSquared: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Geometry#collideWith: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.CollisionDetection#selectNarrowPhaseAlgorithm: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Geometry#createPolygonalEllipse: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.DynamicAABBTree#validate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.HalfEllipse#translate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Polygon#getAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Vector3#lengthSquare: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.TrianglesStore#TrianglesStore(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxSAPSpace#collide: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Link#rotate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Geometry#createIsoscelesTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Polygon#createMass: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.SweepSphere#collideWithSweepSphere: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.mesh.VirtualIndexBuffer#get: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxAbstractHeightfield#dCollideHeightfieldZone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxHeightfield#resetTriangleBuffer: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.CollisionWorld#createCollisionBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGimpactData#getDataRef: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DGeom#setCollideBits: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideTrimeshPlane#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.ConvexMeshShape#addVertex: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.Mesh#deepClone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.CollisionListener#collision: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.collision.AbstractCollidable#removeFixtures: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm#SweepAndPruneAlgorithm(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxPlane#dGeomPlanePointDepth: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimBufferArrayFloat#cloneValues: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DTriTriMergeCallback#call: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingVolume#getVolume: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.body.CollisionBody#updateAABB: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Statistics#onMeshDrawn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Segment#rotate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.DynamicAABBTree#update: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Slice#getFoci: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#EDGE_PLANE: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideRaySphere#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GIM_TRIANGLE_RAY_CONTACT_DATA#getPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Polygon#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxHeightfield#dCollideHeightfieldZone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_ACCUM: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.EdgeEPA#getSourceVertexIndex: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.ParticleInfluencer#influenceParticle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Mesh#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.FastMath#pointInsideTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.Utils#halfLink: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.joint.Joint#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.ParticleEmitter#cloneFields: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrixN#clearUpperTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm#updateObjectIntegerAABB: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimContact#GIM_PUSH_CONTACT: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_SUM: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DGeom#collide2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Settings#getWarmStartDistanceSquared: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.EdgeEPA#EdgeEPA(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollisionLibccd#run: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.CollisionDetection#computeCollisionDetection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.BroadphasePair#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.CollisionData#collideWith: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterSphereShape#deepClone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.audio.AudioNode#getVolume: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Rectangle#Rectangle(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.collision.FixtureIterator#remove: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingSphere#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.WarmStartingContactManager#WarmStartingContactManager(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.TrianglesStore#newTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxQuadTreeSpace#collide2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.Sap#detect: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingSphere#collideWithRay: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#AABB_POINT_EXTEND: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.AbstractCollidable#getFixture: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_DOT_MAT_3X3: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.BroadphasePair#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingVolume#getCheckPlane: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Segment#getPoint1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Segment#getPoint2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Vector2#getMagnitudeSquared: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.CollisionAdapter#collision: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingVolume#setCheckPlane: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.ConeShape#isEqualTo: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.broadphase.BroadPhaseAlgorithm#removeObject: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.light.Light#intersectsSphere: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.OverlappingPair#OverlappingPair(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Vector3f#lengthSquared: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingVolume#mergeLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterMeshFaceShape#EmitterMeshFaceShape(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingVolume#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingBox#merge: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.ConeShape#ConeShape(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA#computeClosestPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.broadphase.PairManager#addPair: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.EdgeEPA#computeSilhouette: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxCollisionUtil#dPointPlaneDistance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.decompose.SweepLine#triangulate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Block#CollideLocal: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTriCollision#PLANE_CLIP_POLYGON: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.AABB#testCollision: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Settings#setMaximumLinearCorrection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.DynamicsWorld#createRigidBody: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.collision.AbstractCollidable#getFixtures: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.mesh.WrappedIndexBuffer#WrappedIndexBuffer(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Segment#getFarthestFeature: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.OdeInit#FreeThreadCollisionData: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxConvex#IntersectSegmentPlane: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.engine.DynamicsWorld#update: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_RENORMALIZE: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxTrimeshHeightfield#allocateTriangleBuffer: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.body.CollisionBody#setCollisionShape: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Mesh#clearCollisionData: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#lengthSquared: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#BOX_INTERSECTS_RAY: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.CollisionDetection#computeNarrowPhase: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxHashSpace#collide: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.SphereVsSphereAlgorithm#SphereVsSphereAlgorithm(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.bih.BIHTree#collideWith: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Wound#getVertices: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.BroadphaseDetector#getAABB: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideBoxCylinderCCD#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideTrimeshPlane#dCollideTrimeshPlane: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.OdeInit#AllocateThreadCollisionDataIfNecessary: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.SweepSphere#collideWith: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxSAPSpace2#boxPruning: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.body.CollisionBody#getCollisionShape: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxHashSpace#collide2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_BLEND_AB: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.math.DMatrixN#clearLowerTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingVolume#collideWith: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.CollisionResult#setTriangleIndex: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxSpace#dSpaceCollide2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.DynamicAABBTree#getAABB: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.BroadphaseKey#computeHashCode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.Collisions#getEstimatedCollisionPairs: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxTriMeshDisabled#FetchTriangleCount: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideConvexTrimesh#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.Bounds#isOutside: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_CONJUGATE_LENGTH: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.influencers.DefaultParticleInfluencer#influenceParticle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Geometry#createPolygon: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.CollisionShape#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Polygon#contains: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideSpherePlane#dCollideSpherePlane: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideSphereConvex#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.collision.FixtureIterator#FixtureIterator(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Quaternion#lengthSquare: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.mesh.WrappedIndexBuffer#convertToList: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideConvexBox#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.body.CollisionBody#isCollisionEnabled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.HeightFieldTriangle#setMinMax: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.BroadphasePair#getCollidable2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.BroadphasePair#getCollidable1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.audio.LowPassFilter#setHighFreqVolume: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#renderMesh: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.shapes.EmitterBoxShape#deepClone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDPolyTope#_ccdPtNearestRenew: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideBoxBox#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxConvex#CheckSATConvexEdges: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.scene.Mesh#getTriangleCount: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Settings#getMaximumLinearCorrectionSquared: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.CylinderShape#isEqualTo: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.CollisionShape#CollisionShape(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingVolume#intersectsBoundingBox: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxConvex#TestConvexIntersection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.BroadPhasePair#getBody2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.BroadPhasePair#getBody1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTriCollision#EDGE_AGAINST_TRI_EDGES: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGeom#collide2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.narrowphase.Gjk#raycast: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.CollisionResults#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxSimpleSpace#collide: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.BroadphaseKey#get: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxPlane#DxPlane(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.DynamicAABBTree#remove: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.ParticleEmitter#setMeshType: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxSpace#collide2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Block#Collide: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Polygon#translate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.body.CollisionBody#CollisionBody(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideTrimeshTrimesh#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Vector2f#length: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.math.Triangle#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA#getIndexVertex: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGimpactCollision#FetchTransformedTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.OdeInit#CloseODEForMode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.math.DQuaternion#length: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideSphereBox#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.CylinderShape#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.audio.Listener#getVolume: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTriCollision#TRIANGLE_GET_UVPARAMETERS: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.Sap#add: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideConvexTrimeshTrianglesCCD#addPerturbedContacts: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxConvex#ClosestPointBetweenSegments: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Polygon#getFarthestFeature: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.broadphase.NoBroadPhaseAlgorithm#removeObject: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.collision.bih.BIHTree#getMinMax: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.bounding.BoundingBox#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.collision.bih.BIHTree#getTriangleIndex: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.DynamicAABBTree#add: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.AbstractCollidable#createAABB: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.DefaultBroadphaseFilter#isAllowed: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.util.BufferUtils#createVector2Buffer: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.scene.Mesh#computeNumElements: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Segment#project: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.ConvexMeshShape#getLocalSupportPointWithMargin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.narrowphase.Gjk#checkSimplex: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.DynamicAABBTreeLeaf#DynamicAABBTreeLeaf(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGimpactData#check: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTrimesh#gim_trimesh_get_triangle_count: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.Fixture#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.BroadphaseKey#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex#getMaxLengthSquareOfAPoint: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.bih.BIHTree#collideWithBoundingVolume: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.LightProbe#setBounds: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.effect.ParticleEmitter#getShape: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.effect.ParticleEmitter#setShape: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.Sap#contains: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.bih.BIHNode#getLeftPlane: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.DynamicAABBTreeLeaf#equals: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxHeightfield#DESTRUCTOR: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.BroadphaseKey#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.opengl.GLRenderer#renderMeshDefault: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideBoxPlane#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.SapProxy#hashCode: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.Settings#getAngularToleranceSquared: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTrimeshTrimeshCol#_gim_triangle_triangle_collision: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.decompose.MonotonePolygon#toString: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#AABB_GET_MIN: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm#updateObject: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.libccd.CCDPolyTope#ccdPtDestroy: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.DynamicAABBTree#contains: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.broadphase.BodyPair#getBody1: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.broadphase.BodyPair#getBody2: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_DIFF: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.contact.SimpleContactManager#SimpleContactManager(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.Joint#Joint(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Vector4f#distanceSquared: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTrimesh#gim_trimesh_get_triangle_vertices: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#PROJECT_POINT_PLANE: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.CollisionResults#addCollision: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.TrianglesStore#get: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.Joint#isCollisionEnabled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideRayConvex#dCollideRayConvex: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.bih.BIHNode#setRightPlane: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.dynamics.World#detect: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollisionLibccd#ccdCollide: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.renderer.Camera#getWorldPlane: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.HalfEllipse#rotate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideTrimeshBoxOld#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTrimeshTrimeshCol#MOST_DEEP_POINTS: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.audio.AudioNode#setVolume: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.collision.BoundsListener#outside: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimBufferArrayFloat#GIM_BUFFER_ARRAY_POINTER: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.narrowphase.EPA.EdgeEPA#getOwnerTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTriCollision#gim_triangle_triangle_collision: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DTriMeshData#build: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.BroadphaseKey#BroadphaseKey(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.BroadphaseDetector#add: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGimpactData#build: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideTrimeshBox#dCollideBTL: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Rectangle#contains: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.CylinderShape#getLocalSupportPointWithMargin: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.HeightFieldPlane#addTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.SphereShape#SphereShape(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTrimeshTrimeshCol#gim_trimesh_trimesh_collision: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#POINT_IN_HULL_TZ: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.BroadPhasePair#ComputeBodiesIndexPair: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.CollisionDetection#computeBroadPhase: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.math.Vector2f#distance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.AmbientLight#intersectsSphere: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.CollisionShape#isEqualTo: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#TRIANGLE_NORMAL: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.DynamicAABBTree#detectNonRecursive: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTrimeshCapsuleCollision#gim_triangle_capsule_collision: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.Light#intersectsBox: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideSpherePlane#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.BoxShape#clone: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGimpactCollision#gim_trimesh_plane_collisionODE: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.ConvexMeshShape#isEqualTo: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideSpaceGeom#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxTriMeshDisabled#dGeomTriMeshGetTriangleCount: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.BroadphaseItem#getCollidable: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.body.CollisionBody#setIsCollisionEnabled: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.collision.narrowphase.Gjk#distance: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DTriRayCallback#call: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxGimpact#dGeomTriMeshGetTriangleCount: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.ContactPointInfo#setCollisionData: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxHeightfield#DxHeightfield(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimTriCollision#RAY_TRIANGLE_INTERSECTION: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimAABBSet#gim_aabbset_bipartite_intersections: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.gimpact.GimGeometry#VEC_UNPROJECT: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideCylinderCylinder#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.CollisionResults#getCollisionDirect: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.CollisionResults#getFarthestCollision: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.Misc#dMaxDifferenceLowerTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.HeightFieldTriangle#HeightFieldTriangle(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.constraint.JointInfo#JointInfo(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.DConvex#setConvex: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideHeightfield#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideTrimeshSphere#dColliderFn: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.dyn4j.collision.broadphase.Sap#getAABB: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideConvexBox#dCollideConvexBox: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxPlane#make_sure_plane_normal_has_unit_length: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.DMisc#dMaxDifferenceLowerTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Slice#getAxes: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.dyn4j.geometry.Slice#rotate: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.broadphase.BroadPhaseAlgorithm#addObject: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.collision.bih.BIHNode#getRightPlane: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.collision.SweepSphere#collideWithTriangle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxPlane#getParams: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.collision.shapes.ConvexMeshShape#recalculateBounds: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
com.jme3.collision.CollisionResult#compareTo: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
net.smert.jreactphysics3d.mathematics.Vector3#isUnit: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.audio.openal.ALAudioRenderer#updateFilter: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.CollideBoxBox#dCollideBoxBox: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, bitmap, hinge, transmission, ball, piston, hinge2]}
com.jme3.light.DirectionalLight#intersectsBox: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]}
org.ode4j.ode.internal.DxBody#dBodyGetQuaternion: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxGeom#getQuaternion: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxBody#getQuaternion: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.ragdoll.DxRagdoll#setAutoDisableAverageSamplesCount: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxGeom#dGeomSetOffsetWorldQuaternion: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
net.smert.jreactphysics3d.constraint.SliderJoint#getTranslation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxBody#dBodySetQuaternion: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxBody#setQuaternion: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxGeom#dGeomGetQuaternion: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxBody#dBodyCopyQuaternion: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
net.smert.jreactphysics3d.engine.DynamicsWorld#solvePositionCorrection: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
net.smert.jreactphysics3d.engine.DynamicsWorld#integrateRigidBodiesPositions: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJoint#setFixedOrientation: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.DxGeom#dGeomSetOffsetQuaternion: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
net.smert.jreactphysics3d.engine.ConstraintSolverData#ConstraintSolverData(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
org.ode4j.ode.internal.joints.DxJoint#getHingeAngle: {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
net.smert.jreactphysics3d.engine.ConstraintSolver#ConstraintSolver(C): {[body, vector3f, matrix, plane, impulse, mass, radius, capsule, velocity, rotation, light, shader, triangle, texture, vertices, vector3, collision, geometry, quaternion, square, vec3, spatial, material, motor, sphere, shape, hallmarks, collide, calculate, camel, vec3f, bounding, torque, axes, joints, speed, rotate, collidable, matrix3, volume, vector2f, vector4f, matrix4f, cinematic, hinge, bitmap, transmission, ball, piston, hinge2]},
}
